paddle.Tensor.__getitem__(Tensor([10, 7576, 12800],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([10, 7576, 16770],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([10, 7712, 12800],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([10, 7712, 16470],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([10, 8168, 12800],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([10, 8168, 15550],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([10, 9923, 12800],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([10, 9923, 12800],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([10, 9923, 12800],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__len__(Tensor([1000, 1352, 376],"float32"), )
paddle.Tensor.__len__(Tensor([1000, 376, 1352],"float32"), )
paddle.Tensor.__len__(Tensor([1000000, 509],"float32"), )
paddle.Tensor.__len__(Tensor([230, 1501, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([3600, 376, 376],"float32"), )
paddle.Tensor.__len__(Tensor([500, 1501, 677],"float32"), )
paddle.Tensor.__len__(Tensor([500, 677, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([5080330, 100],"float32"), )
paddle.Tensor.all(Tensor([10, 1, 2048, 24807],"bool"), )
paddle.Tensor.all(Tensor([10, 1, 24807, 2048],"bool"), )
paddle.Tensor.all(Tensor([10, 13, 2048, 2048],"bool"), )
paddle.Tensor.all(Tensor([130, 1, 2048, 2048],"bool"), )
paddle.Tensor.all(Tensor([1590, 10, 32000],"bool"), )
paddle.Tensor.all(Tensor([20, 10, 2540161],"bool"), )
paddle.Tensor.all(Tensor([20, 100, 256000],"bool"), )
paddle.Tensor.all(Tensor([20, 794, 32000],"bool"), )
paddle.Tensor.all(Tensor([200, 10, 256000],"bool"), )
paddle.Tensor.any(Tensor([10, 1379, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 1501, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 300, 184, 921],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 300, 192, 883],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 300, 883, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 300, 921, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([100, 300, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([20, 1374, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([20, 300, 136, 623],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([20, 300, 623, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([50, 300, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([60, 300, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.astype(Tensor([10, 32, 388, 4096],"float32"), "float32", )
paddle.Tensor.astype(Tensor([10, 32, 4096, 388],"float32"), "float32", )
paddle.Tensor.astype(Tensor([10, 4, 4096, 4096],"float32"), "float32", )
paddle.Tensor.detach(Tensor([1003520, 1013],"bfloat16"), )
paddle.Tensor.detach(Tensor([10130, 100352],"bfloat16"), )
paddle.Tensor.detach(Tensor([124040, 8192],"bfloat16"), )
paddle.Tensor.detach(Tensor([17720, 57344],"bfloat16"), )
paddle.Tensor.detach(Tensor([81920, 12404],"bfloat16"), )
paddle.Tensor.diagonal(Tensor([301, 8467201],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([846720101, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.dim(Tensor([1116160, 911],"bfloat16"), )
paddle.Tensor.dim(Tensor([124040, 8192],"bfloat16"), )
paddle.Tensor.dim(Tensor([141760, 7168],"bfloat16"), )
paddle.Tensor.dim(Tensor([71680, 14176],"bfloat16"), )
paddle.Tensor.dim(Tensor([9110, 111616],"bfloat16"), )
paddle.Tensor.dim(Tensor([958720, 1060],"bfloat16"), )
paddle.Tensor.equal_all(Tensor([2540160101],"int64"), Tensor([8],"int64"), )
paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([801],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([846720101, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([801, 3175201],"int64"), Tensor([801, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([801, 3],"int64"), Tensor([801, 3175201],"int64"), )
paddle.Tensor.equal_all(Tensor([801, 3],"int64"), Tensor([8467201, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([801],"int64"), Tensor([25401601],"int64"), )
paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([801, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([846720101, 3],"int64"), Tensor([8, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([2540160101],"int64"), )
paddle.Tensor.fill_diagonal_(Tensor([1280, 396901],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([3969010, 128],"float32"), 0, wrap=False, )
paddle.Tensor.flatten(Tensor([10, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1280, 127, 56, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1280, 254, 56, 56],"float16"), 2, )
paddle.Tensor.flatten(Tensor([1280, 512, 14, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1280, 512, 28, 56],"float16"), 2, )
paddle.Tensor.flatten(Tensor([1280, 512, 56, 14],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1280, 512, 56, 28],"float16"), 2, )
paddle.Tensor.flatten(Tensor([320, 512, 56, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([40, 5, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([40, 64, 2, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([40, 64, 25, 29, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([40, 64, 25, 376, 22],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([640, 512, 56, 56],"float16"), 2, )
paddle.Tensor.gather(Tensor([40, 12700801],"float32"), Tensor([40, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([400, 1270080],"float32"), Tensor([400, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([4000, 127008],"float32"), Tensor([4000, 1],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([119, 53568, 8],"float32"), Tensor([401, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 156, 80, 85],"float32"), Tensor([51601, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 156, 85],"float32"), Tensor([51601, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 166],"float32"), Tensor([51601, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 6, 80, 80, 85],"float32"), Tensor([51601, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([38501, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([51601, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 12, 80, 80, 85],"float32"), Tensor([38501, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 312, 80, 85],"float32"), Tensor([38501, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 312, 85],"float32"), Tensor([38501, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 331],"float32"), Tensor([38501, 4],"int64"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([13001],"int64"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([18201],"int64"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([9101],"int64"), )
paddle.Tensor.index_select(Tensor([4004, 12689],"float32"), axis=0, index=Tensor([18201],"int64"), )
paddle.Tensor.is_complex(Tensor([201, 3, 100, 42337],"float64"), )
paddle.Tensor.is_complex(Tensor([201, 3, 105841, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([201, 3, 40, 105841],"float64"), )
paddle.Tensor.is_complex(Tensor([201, 3, 42337, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([201, 3176, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([201, 3176, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([211701, 3, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([211701, 3, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([301, 100, 84673],"float64"), )
paddle.Tensor.is_complex(Tensor([301, 211681, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([635101, 100, 40],"float64"), )
paddle.Tensor.item(Tensor([201, 1, 12700801],"int64"), 0, )
paddle.Tensor.item(Tensor([201, 12700801, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([2540160101, 1, 1],"int64"), 0, )
paddle.Tensor.logical_not(Tensor([508032010],"bool"), )
paddle.Tensor.lu(Tensor([169301, 3],"float32"), )
paddle.Tensor.lu(Tensor([301, 1193],"float32"), )
paddle.Tensor.lu(Tensor([301, 422, 3],"float64"), )
paddle.Tensor.moveaxis(x=Tensor([1209610, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([1209610, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 3, 1058401],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 635041, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([40, 423361, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([40, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([8467210, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.rank(Tensor([2560, 1536, 3, 44],"float32"), )
paddle.Tensor.rank(Tensor([2560, 1536, 44, 3],"float32"), )
paddle.Tensor.rank(Tensor([2560, 2048, 3, 33],"float32"), )
paddle.Tensor.rank(Tensor([2560, 2048, 33, 3],"float32"), )
paddle.Tensor.rank(Tensor([2560, 22051, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([2560, 768, 3, 87],"float32"), )
paddle.Tensor.rank(Tensor([2560, 768, 87, 3],"float32"), )
paddle.Tensor.rank(Tensor([27570, 2048, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([36760, 1536, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([73510, 768, 3, 3],"float32"), )
paddle.Tensor.reshape(Tensor([124040, 8192],"bfloat16"), list[-1,8192,], )
paddle.Tensor.set_(Tensor([2001],"bool"), Tensor([15, 3386881],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([2001],"bool"), Tensor([16934401, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([50803201],"bool"), Tensor([1501, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.slice(Tensor([127008010, 4],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.slice(Tensor([40, 12700801],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.slice_scatter(Tensor([80, 3175201],"float64"), Tensor([80, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.squeeze(Tensor([10, 2, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([10, 3, 1654, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([10, 3, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([10, 3, 3840, 4411],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([160, 1, 125, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([160, 1, 80, 39691],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([160, 2, 80, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([2000, 1, 127009, 2],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([2000, 1, 37632, 7],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([2000, 4, 37632, 2],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([250, 1, 80, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([6760, 1, 37632, 2],"float32"), 1, )
paddle.Tensor.transpose(Tensor([1064960, 955],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([1085440, 937],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([1116160, 911],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([141760, 7168],"bfloat16"), list[1,0,], )
paddle.Tensor.trunc(Tensor([18144010, 28],"float32"), )
paddle.Tensor.trunc(Tensor([20, 3175201, 8],"float32"), )
paddle.Tensor.trunc(Tensor([20, 8, 3175201],"float32"), )
paddle.Tensor.trunc(Tensor([280, 1814401],"float32"), )
paddle.Tensor.trunc(Tensor([63504010, 8],"float32"), )
paddle.Tensor.trunc(Tensor([7938010, 8, 8],"float32"), )
paddle.Tensor.trunc(Tensor([80, 6350401],"float32"), )
paddle.Tensor.unbind(Tensor([30, 115, 2304, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 1351, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 60, 2304, 123],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 60, 4411, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 864, 196, 101],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 864, 307, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 960, 196, 91],"float32"), 0, )
paddle.Tensor.unbind(Tensor([30, 960, 276, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([50, 864, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([50, 960, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([60, 60, 2304, 64],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1720, 544, 544],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([1720, 544, 544],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([20, 3840, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([2000, 467, 544],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([2000, 467, 544],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([2000, 544, 467],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([2000, 544, 467],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([30, 1654, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([30, 3840, 4411],"float32"), 0, )
paddle.all(Tensor([50, 1016065, 10],"bool"), None, False, None, )
paddle.all(Tensor([50, 6, 1693441],"bool"), None, False, None, )
paddle.all(Tensor([508032010],"bool"), )
paddle.all(Tensor([8467210, 6, 10],"bool"), None, False, None, )
paddle.any(Tensor([10, 12404, 4096],"bool"), )
paddle.any(Tensor([10, 300, 169345],"bool"), )
paddle.any(Tensor([11240, 45199],"bool"), )
paddle.any(Tensor([15876010, 32],"bool"), )
paddle.any(Tensor([420, 300, 4096],"bool"), )
paddle.any(Tensor([5120, 99226],"bool"), )
paddle.as_complex(Tensor([320, 15, 207, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([320, 15, 8, 207, 32, 2],"float32"), )
paddle.as_complex(Tensor([320, 15, 8, 8, 827, 2],"float32"), )
paddle.as_complex(Tensor([320, 388, 8, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([8270, 15, 8, 8, 32, 2],"float32"), )
paddle.as_strided(Tensor([15876010, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([31752010, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([31752010, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([320, 1587601],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([320, 3175201],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([320, 3175201],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 1058401],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 1058401],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 1058401],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2116801],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 423361, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4, 423361, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 4233601, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([301, 846721, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([301, 846721, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), Tensor([301, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([317520101, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), Tensor([301, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([63504101, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([63504101, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.bitwise_not(Tensor([20, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.bitwise_not(Tensor([20, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.bitwise_not(Tensor([20, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([20, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([20, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([20, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([20, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([470410, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([2540160101],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([2540160101],"float64"), right=True, )
paddle.bucketize(Tensor([201, 4],"float64"), Tensor([25401601],"float64"), )
paddle.bucketize(Tensor([201, 4],"float64"), Tensor([25401601],"float64"), out_int32=True, )
paddle.bucketize(Tensor([201, 4],"float64"), Tensor([25401601],"float64"), right=True, )
paddle.cartesian_prod(list[Tensor([301],"complex128"),Tensor([5],"complex128"),Tensor([5080],"complex128"),], )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([501],"complex128"),Tensor([5080],"complex128"),], )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([508001],"complex128"),], )
paddle.cartesian_prod(list[Tensor([40],"int32"),Tensor([40],"int32"),Tensor([50801],"int32"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5080301],"int32"),], )
paddle.combinations(Tensor([2540160101],"int64"), 0, True, )
paddle.crop(x=Tensor([201, 1411201, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([201, 3, 1411201, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([201, 3, 3, 1411201],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([301, 8467201],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([846720101, 3],"float64"), shape=list[2,2,], )
paddle.cummax(Tensor([10001, 2080],"float32"), axis=-2, )
paddle.cummax(Tensor([208001, 100],"float32"), axis=-1, )
paddle.diag(Tensor([20000, 25402],"float32"), )
paddle.diag(Tensor([20000, 25402],"float32"), offset=-1, )
paddle.diag(Tensor([20000, 25402],"float32"), offset=1, )
paddle.diag(Tensor([254020, 2000],"float32"), )
paddle.diag(Tensor([254020, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([254020, 2000],"float32"), offset=1, )
paddle.diagonal(x=Tensor([11760101, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([17640101, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([601, 117601, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([601, 176401, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([601, 6, 117601, 6],"float64"), )
paddle.diagonal(x=Tensor([601, 6, 176401, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([601, 6, 6, 117601],"float64"), )
paddle.diagonal(x=Tensor([601, 6, 6, 2, 58801],"float64"), )
paddle.diagonal(x=Tensor([601, 6, 6, 2, 58801],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([601, 6, 6, 58801, 2],"float64"), )
paddle.diagonal_scatter(Tensor([100, 5080321],"bool"), Tensor([100],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([50803210, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.dsplit(Tensor([14112010, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([14112010, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([14112010, 3, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([40, 1058401, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([40, 1058401, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([40, 1058401, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([40, 3, 2116801],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([40, 3, 2116801],"int64"), list[-1,], )
paddle.dsplit(Tensor([40, 3, 2116801],"int64"), list[2,4,], )
paddle.empty_like(Tensor([1016064010],"uint8"), )
paddle.empty_like(Tensor([40960, 12404],"bool"), )
paddle.empty_like(Tensor([40960, 12404],"float32"), )
paddle.empty_like(Tensor([7938010, 64],"bool"), )
paddle.empty_like(Tensor([7938010, 64],"float32"), )
paddle.equal_all(Tensor([101, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([12801],"float32"), Tensor([50803201],"float32"), )
paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([101, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([1601, 16],"float32"), )
paddle.equal_all(Tensor([1601, 16],"float32"), Tensor([16, 3175201],"float32"), )
paddle.equal_all(Tensor([1601, 16],"float32"), Tensor([3175201, 16],"float32"), )
paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([1601, 16],"float32"), )
paddle.equal_all(Tensor([50803201],"float32"), Tensor([12801],"float32"), )
paddle.fft.ihfft(x=Tensor([201, 1411201, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([201, 4, 3, 1058401],"float64"), n=2, )
paddle.fft.ihfft2(x=Tensor([401, 2116801, 3],"float64"), s=tuple(1,2,), )
paddle.flatten(Tensor([40510, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([40960, 254, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([40960, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([4160, 50, 10, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([4160, 50, 7, 349],"float32"), start_axis=2, )
paddle.flatten(Tensor([4160, 69, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([5120, 50, 7, 284],"float32"), start_axis=2, )
paddle.flatten(Tensor([5120, 50, 8, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([5120, 56, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([5680, 50, 7, 256],"float32"), start_axis=2, )
paddle.full_like(Tensor([10, 1, 2048, 24807],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([10, 1, 24807, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([10, 13, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([48201, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([49601, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([51201, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([48201, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([49601, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([51201, 1],"int64"), )
paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([77801, 2],"int64"), )
paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([81601, 2],"int64"), )
paddle.gather_nd(Tensor([1, 819, 1240],"bfloat16"), Tensor([77801, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 124],"bfloat16"), Tensor([81601, 2],"int64"), )
paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([2001, 50, 2],"int64"), )
paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([501, 50, 2],"int64"), )
paddle.gather_nd(Tensor([1001, 413, 128],"float32"), index=Tensor([1001, 50, 2],"int64"), )
paddle.gather_nd(Tensor([1001, 413, 128],"float32"), index=Tensor([20, 50, 2],"int64"), )
paddle.gather_nd(Tensor([1001, 413, 128],"float32"), index=Tensor([5, 50, 2],"int64"), )
paddle.gather_nd(Tensor([101, 1417, 716],"bfloat16"), Tensor([778, 2],"int64"), )
paddle.gather_nd(Tensor([101, 1417, 716],"bfloat16"), Tensor([816, 2],"int64"), )
paddle.gather_nd(Tensor([101, 819, 1240],"bfloat16"), Tensor([778, 2],"int64"), )
paddle.gather_nd(Tensor([101, 8192, 124],"bfloat16"), Tensor([816, 2],"int64"), )
paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([77801, 2],"int64"), )
paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([81601, 2],"int64"), )
paddle.gather_nd(Tensor([2001, 198, 128],"float32"), index=Tensor([2001, 50, 2],"int64"), )
paddle.gather_nd(Tensor([2001, 413, 62],"float32"), index=Tensor([2001, 50, 2],"int64"), )
paddle.geometric.send_uv(Tensor([1270081, 20],"float64"), Tensor([1270081, 1],"float64"), Tensor([1501],"int64"), Tensor([1501],"int64"), "add", )
paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([1501],"int64"), Tensor([1501],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([25401601, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([1501],"int64"), Tensor([1501],"int64"), "add", )
paddle.histogram_bin_edges(Tensor([50, 10160641],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([50, 10160641],"float32"), bins=10, min=1, max=1, )
paddle.hsplit(Tensor([14112010, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([14112010, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([14112010, 6, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([40, 2116801, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([40, 2116801, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([40, 2116801, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([40, 6, 1058401],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([40, 6, 1058401],"int64"), list[-1,], )
paddle.hsplit(Tensor([40, 6, 1058401],"int64"), list[2,4,], )
paddle.incubate.segment_mean(Tensor([301, 1693440],"float32"), Tensor([301],"int32"), )
paddle.is_complex(Tensor([1003520, 507],"float32"), )
paddle.is_complex(Tensor([5070, 100352],"float32"), )
paddle.is_complex(Tensor([62020, 8192],"float32"), )
paddle.is_complex(Tensor([81920, 6202],"float32"), )
paddle.is_complex(Tensor([8860, 57344],"float32"), )
paddle.is_empty(Tensor([101606410, 5],"float32"), )
paddle.is_empty(Tensor([169344010, 3],"float32"), )
paddle.is_empty(Tensor([20, 25401601],"float32"), )
paddle.is_empty(Tensor([30, 16934401],"float32"), )
paddle.is_empty(x=Tensor([40, 32, 396901],"float32"), )
paddle.is_empty(x=Tensor([40, 396901, 32],"float32"), )
paddle.is_empty(x=Tensor([496130, 32, 32],"float32"), )
paddle.isreal(Tensor([15876010, 32],"bool"), )
paddle.isreal(Tensor([31752010, 32],"bfloat16"), )
paddle.isreal(Tensor([31752010, 32],"float16"), )
paddle.isreal(Tensor([640, 1587601],"bfloat16"), )
paddle.isreal(Tensor([640, 1587601],"float16"), )
paddle.isreal(Tensor([640, 793801],"bool"), )
paddle.linalg.matrix_transpose(Tensor([20, 3, 8467201],"float32"), )
paddle.linalg.matrix_transpose(Tensor([20, 6350401, 4],"float32"), )
paddle.linalg.matrix_transpose(Tensor([42336010, 3, 4],"float32"), )
paddle.logical_not(Tensor([2150400, 237],"bool"), )
paddle.logical_not(Tensor([2204160, 231],"bool"), )
paddle.logical_not(Tensor([2257920, 226],"bool"), )
paddle.logical_not(Tensor([6350410, 80],"bool"), )
paddle.matrix_transpose(Tensor([20, 12700801, 4],"float16"), )
paddle.matrix_transpose(Tensor([20, 3, 16934401],"float16"), )
paddle.matrix_transpose(Tensor([20, 3, 4233601],"float64"), )
paddle.matrix_transpose(Tensor([20, 3, 8467201],"float32"), )
paddle.matrix_transpose(Tensor([20, 3175201, 4],"float64"), )
paddle.matrix_transpose(Tensor([20, 6350401, 4],"float32"), )
paddle.matrix_transpose(Tensor([21168010, 3, 4],"float64"), )
paddle.matrix_transpose(Tensor([42336010, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([84672010, 3, 4],"float16"), )
paddle.moveaxis(Tensor([20, 3, 120961, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([20, 3, 4, 151201, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([20, 3, 4, 5, 211681],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([20, 90721, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([604810, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(x=Tensor([1209610, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([1209610, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([40, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([40, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([40, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([40, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([40, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([40, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([40, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([40, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([601, 1],"int32"), )
paddle.nn.functional.dropout(Tensor([75760, 13412],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([77120, 13176],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([793810, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([81680, 12440],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.embedding(Tensor([101, 1024],"int64"), weight=Tensor([151936, 669],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101, 1024],"int64"), weight=Tensor([24807, 4096],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101, 4097],"int64"), weight=Tensor([100352, 1013],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([5030401, 2020],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([801, 1024],"int64"), weight=Tensor([50304, 2020],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.gather_tree(Tensor([1101, 28, 8],"int64"), Tensor([1101, 28, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([1101, 4, 57],"int64"), Tensor([1101, 4, 57],"int64"), )
paddle.nn.functional.gather_tree(Tensor([1101, 57, 4],"int64"), Tensor([1101, 57, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([15801, 4, 4],"int64"), Tensor([15801, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([2101, 30, 4],"int64"), Tensor([2101, 30, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([2101, 8, 15],"int64"), Tensor([2101, 8, 15],"int64"), )
paddle.nn.functional.gather_tree(Tensor([7901, 4, 8],"int64"), Tensor([7901, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([7901, 8, 4],"int64"), Tensor([7901, 8, 4],"int64"), )
paddle.nn.functional.grid_sample(Tensor([1000, 1, 662, 768],"float32"), Tensor([1000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1000, 1, 662, 768],"float32"), Tensor([1000, 1, 662, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1000, 1, 768, 662],"float32"), Tensor([1000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1000, 1, 768, 768],"float32"), Tensor([1000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1720, 1, 544, 544],"float32"), Tensor([1720, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2000, 1, 467, 544],"float32"), Tensor([2000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2000, 1, 467, 544],"float32"), Tensor([2000, 1, 467, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2000, 1, 544, 467],"float32"), Tensor([2000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2000, 1, 544, 544],"float32"), Tensor([2000, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([870, 1, 768, 768],"float32"), Tensor([870, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([105840101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([211680101, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([211680101, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 16934401],"float32"), Tensor([101, 3, 16934401],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 16934401],"float32"), Tensor([101, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 16934401],"float32"), Tensor([101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8467201],"float32"), Tensor([101, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float32"), Tensor([101, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float32"), Tensor([101, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([101, 3, 16934401],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([101, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([101, 6350401, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([101, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([101, 3175201, 8],"float32"), Tensor([101, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 6350401, 8],"float32"), Tensor([101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 6350401, 8],"float32"), Tensor([101, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([101, 6350401, 8],"float32"), Tensor([101, 6350401, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([105840101, 3, 8],"float32"), Tensor([105840101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([105840101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([211680101, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([211680101, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([211680101, 3, 8],"float32"), Tensor([211680101, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([6401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([189401, 8, 86, 39],"float32"), Tensor([189401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([189401, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([6401, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([388701, 16, 43, 19],"float32"), Tensor([388701, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([388701, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([388701, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([840101, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([189401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 2612, 19],"float32"), Tensor([6401, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 2612, 19],"float32"), Tensor([6401, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 1154],"float32"), Tensor([6401, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 1154],"float32"), Tensor([6401, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 19],"float32"), Tensor([6401, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 19],"float32"), Tensor([6401, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 16, 43, 19],"float32"), Tensor([6401, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 237, 86, 39],"float32"), Tensor([6401, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 237, 86, 39],"float32"), Tensor([6401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 1182],"float32"), Tensor([6401, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 1182],"float32"), Tensor([6401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 9],"float32"), Tensor([6401, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 9],"float32"), Tensor([6401, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 9],"float32"), Tensor([6401, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 2757, 9],"float32"), Tensor([6401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 32, 2757, 9],"float32"), Tensor([6401, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 4201, 21, 9],"float32"), Tensor([6401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 4201, 21, 9],"float32"), Tensor([6401, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 2545, 39],"float32"), Tensor([6401, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 2545, 39],"float32"), Tensor([6401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 1154],"float32"), Tensor([6401, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 1154],"float32"), Tensor([6401, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 39],"float32"), Tensor([6401, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 39],"float32"), Tensor([6401, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 8, 86, 39],"float32"), Tensor([6401, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 972, 43, 19],"float32"), Tensor([6401, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([6401, 972, 43, 19],"float32"), Tensor([6401, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([6401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([840101, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([840101, 32, 21, 9],"float32"), Tensor([840101, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([14112101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([14112101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([7056101, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 282241, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 352801, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 423361],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([101, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 846721],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 5, 846721],"float64"), Tensor([101, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 705601, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 4, 705601, 6],"float64"), Tensor([101, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 564481, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([101, 3, 564481, 5, 6],"float64"), Tensor([101, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4064301, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([4064301],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4064301, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([4064301],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.numel(Tensor([508032010],"float32"), )
paddle.positive(Tensor([100, 5080321],"float32"), )
paddle.positive(Tensor([16934410, 3, 4, 5],"float16"), )
paddle.positive(Tensor([20, 1270081, 4, 5],"float32"), )
paddle.positive(Tensor([20, 2540161, 4, 5],"float16"), )
paddle.positive(Tensor([20, 3, 1693441, 5],"float32"), )
paddle.positive(Tensor([20, 3, 3386881, 5],"float16"), )
paddle.positive(Tensor([20, 3, 4, 2116801],"float32"), )
paddle.positive(Tensor([20, 3, 4, 4233601],"float16"), )
paddle.positive(Tensor([496130, 1024],"float32"), )
paddle.positive(Tensor([8467210, 3, 4, 5],"float32"), )
paddle.rank(input=Tensor([1270080101, 2],"float64"), )
paddle.rank(input=Tensor([201, 12700801],"float64"), )
paddle.rank(input=Tensor([301, 2, 2, 2116801],"float64"), )
paddle.rank(input=Tensor([301, 2, 2116801, 2],"float64"), )
paddle.rank(input=Tensor([301, 2116801, 2, 2],"float64"), )
paddle.rank(input=Tensor([317520101, 2, 2, 2],"float64"), )
paddle.reshape(Tensor([141760, 7168],"bfloat16"), list[-1,7168,], )
paddle.scatter_nd(Tensor([12801, 2],"int64"), Tensor([12801, 9, 10],"float32"), list[3,5,9,10,], )
paddle.searchsorted(Tensor([2540160101],"float64"), Tensor([512],"float64"), )
paddle.searchsorted(Tensor([25401601],"float64"), Tensor([51201],"float64"), )
paddle.searchsorted(Tensor([50803201],"float32"), Tensor([51201],"float32"), )
paddle.searchsorted(Tensor([50803201],"int32"), Tensor([51201],"int32"), )
paddle.select_scatter(Tensor([20, 3, 282241, 5, 6],"int32"), Tensor([20, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([20, 3, 4, 1058401],"float64"), Tensor([20, 3, 1058401],"float64"), 2, 1, )
paddle.select_scatter(Tensor([20, 3, 846721, 5],"float64"), Tensor([20, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([20, 635040, 4],"float32"), Tensor([20, 4],"float32"), 1, 1, )
paddle.shape(Tensor([10, 1600, 376, 280],"float32"), )
paddle.shape(Tensor([130, 128, 256, 256],"float16"), )
paddle.shape(Tensor([40, 121, 376, 280],"float32"), )
paddle.shape(Tensor([40, 128, 256, 388],"float32"), )
paddle.shape(Tensor([40, 128, 256, 776],"float16"), )
paddle.shape(Tensor([40, 128, 388, 256],"float32"), )
paddle.shape(Tensor([40, 128, 776, 256],"float16"), )
paddle.shape(Tensor([40, 1600, 29, 280],"float32"), )
paddle.shape(Tensor([40, 1600, 376, 22],"float32"), )
paddle.shape(Tensor([40, 194, 256, 256],"float32"), )
paddle.shape(Tensor([40, 388, 256, 256],"float16"), )
paddle.shape(Tensor([70, 128, 256, 256],"float32"), )
paddle.slice(Tensor([653440, 1555],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([653440, 1555],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([653440, 1555],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice(Tensor([793810, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([793810, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([793810, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice_scatter(Tensor([80, 423361, 3, 5],"float32"), Tensor([80, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([80, 6, 3, 176401],"float64"), Tensor([80, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([80, 6, 3, 352801],"float32"), Tensor([80, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.squeeze(Tensor([100, 512, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([1053440, 483],"float32"), )
paddle.squeeze(Tensor([3969010, 128],"float32"), )
paddle.squeeze(Tensor([4211200, 25, 5],"float32"), axis=-1, )
paddle.squeeze(Tensor([4211200, 31, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([5080330, 25, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([80, 512, 1, 100, 125],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([80, 512, 1, 125, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([80, 512, 2, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([80, 636, 1, 100, 100],"float32"), axis=list[2,], )
paddle.strided_slice(x=Tensor([301, 4, 352801, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.t(Tensor([100, 5080321],"float32"), )
paddle.t(Tensor([200, 2540161],"float32"), )
paddle.t(Tensor([25401610, 20],"float32"), )
paddle.t(Tensor([496130, 512],"int64"), )
paddle.t(Tensor([50803210, 10],"float32"), )
paddle.t(Tensor([5120, 49613],"int64"), )
paddle.take(Tensor([12700801, 4],"float32"), Tensor([201, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 16934401],"float32"), Tensor([201, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 8467201],"float64"), Tensor([501, 8],"int64"), mode="clip", )
paddle.take(Tensor([301, 8467201],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.tensor_split(Tensor([2268010, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([2268010, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([2268010, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([40, 226801, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([40, 226801, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([40, 226801, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([40, 4, 226801, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([40, 4, 226801, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([40, 4, 226801, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([40, 4, 4, 396901],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([40, 4, 4, 396901],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([40, 4, 4, 396901],"int64"), tuple(2,6,), axis=3, )
paddle.trace(x=Tensor([201, 3, 4233601],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([301, 8467201],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(x=Tensor([423360101, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([423360101, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([635040101, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.transpose(Tensor([20, 150, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([20, 7168, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([40, 150, 166, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([40, 150, 512, 166],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([40, 3584, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([40, 49, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([60, 2363, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([60, 3584, 4726],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([60, 7168, 2363],"bfloat16"), list[0,2,1,], )
paddle.trunc(Tensor([200, 2540161],"float32"), )
paddle.trunc(Tensor([25401610, 20],"float32"), )
paddle.trunc(input=Tensor([1176010, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([196010, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([30, 39201, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([30, 6, 39201, 6, 6],"float64"), )
paddle.trunc(input=Tensor([30, 6, 6, 39201, 6],"float64"), )
paddle.trunc(input=Tensor([30, 6, 6, 6, 39201],"float64"), )
paddle.trunc(input=Tensor([60, 117601, 6, 6],"float64"), )
paddle.trunc(input=Tensor([60, 6, 117601, 6],"float64"), )
paddle.trunc(input=Tensor([60, 6, 6, 117601],"float64"), )
paddle.unbind(Tensor([20, 3, 1058401, 8],"float32"), axis=0, )
paddle.unbind(Tensor([20, 3, 8, 1058401],"float32"), axis=0, )
paddle.unbind(Tensor([20, 396901, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([30, 3386881, 5],"float32"), axis=0, )
paddle.unbind(Tensor([30, 9, 1881601],"float32"), axis=0, )
paddle.unbind(Tensor([40, 2116801, 6],"float32"), )
paddle.unbind(Tensor([40, 5, 2540161],"float32"), )
paddle.unflatten(x=Tensor([40, 6, 2116801],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([40, 793801, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([5292010, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unfold(Tensor([50, 20321281],"float16"), 0, 5, 1, )
paddle.unsqueeze(Tensor([250, 1024, 1024],"int64"), 1, )
paddle.unsqueeze(Tensor([39700, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([40, 1024, 6202],"int64"), 1, )
paddle.unsqueeze(Tensor([40, 6202, 1024],"int64"), 1, )
paddle.unsqueeze(Tensor([4160, 478, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([4160, 50, 2443],"float32"), axis=2, )
paddle.unsqueeze(Tensor([5120, 388, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([5120, 50, 1985],"float32"), axis=2, )
paddle.view(Tensor([100, 10, 10, 50804],"float32"), list[-1,], )
paddle.view(Tensor([100, 10, 10, 50804],"float32"), list[10,100,-1,], )
paddle.view(Tensor([100, 10, 25402, 20],"float32"), list[-1,], )
paddle.view(Tensor([100, 10, 25402, 20],"float32"), list[10,100,-1,], )
paddle.view(Tensor([100, 25402, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([100, 25402, 10, 20],"float32"), list[10,100,-1,], )
paddle.view(Tensor([254020, 10, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([254020, 10, 10, 20],"float32"), list[10,100,-1,], )
paddle.view_as(Tensor([10, 10, 10, 50804],"float32"), Tensor([10, 100, 50804],"float32"), )
paddle.vsplit(Tensor([21168010, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([21168010, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([21168010, 4, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([60, 1411201, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([60, 1411201, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([60, 1411201, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([60, 4, 1058401],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([60, 4, 1058401],"int64"), list[-1,], )
paddle.vsplit(Tensor([60, 4, 1058401],"int64"), list[2,4,], )
