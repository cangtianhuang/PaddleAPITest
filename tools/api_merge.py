EB45 = ["paddle.add_n","paddle.all","paddle.assign","paddle.broadcast_to","paddle.cast","paddle.clip","paddle.concat","paddle.divide","paddle.empty","paddle.empty_like","paddle.full","paddle.incubate.nn.functional.fused_linear","paddle.incubate.nn.functional.fused_rotary_position_embedding","paddle.incubate.nn.functional.swiglu","paddle.is_complex","paddle.maximum","paddle.nn.functional.cross_entropy","paddle.nn.functional.embedding","paddle.nn.functional.linear","paddle.nn.functional.softmax","paddle.ones","paddle.ones_like","paddle.reshape","paddle.sign","paddle.split","paddle.sqrt","paddle.stack","paddle.sum","paddle.take_along_axis","paddle.Tensor.__add__","paddle.Tensor.__eq__","paddle.Tensor.__getitem__","paddle.Tensor.__gt__","paddle.Tensor.__lt__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__nonzero__","paddle.Tensor.__radd__","paddle.Tensor.__rmul__","paddle.Tensor.__setitem__","paddle.Tensor.__sub__","paddle.Tensor.__truediv__","paddle.Tensor.all","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.clone","paddle.Tensor.detach","paddle.Tensor.dim","paddle.Tensor.item","paddle.Tensor.max","paddle.Tensor.mean","paddle.Tensor.norm","paddle.Tensor.put_along_axis","paddle.Tensor.reshape","paddle.Tensor.scale","paddle.Tensor.squeeze","paddle.Tensor.sum","paddle.Tensor.tolist","paddle.Tensor.unsqueeze","paddle.Tensor.zero_","paddle.topk","paddle.transpose","paddle.zeros","paddle.zeros_like"]
EB5 = ["paddle.Tensor.__add__","paddle.Tensor.__and__","paddle.Tensor.__eq__","paddle.Tensor.__ge__","paddle.Tensor.__getitem__","paddle.Tensor.__gt__","paddle.Tensor.__le__","paddle.Tensor.__lt__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__neg__","paddle.Tensor.__nonzero__","paddle.Tensor.__or__","paddle.Tensor.__radd__","paddle.Tensor.__rmul__","paddle.Tensor.__rpow__","paddle.Tensor.__rsub__","paddle.Tensor.__rtruediv__","paddle.Tensor.__setitem__","paddle.Tensor.__sub__","paddle.Tensor.__truediv__","paddle.Tensor.all","paddle.Tensor.any","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.clone","paddle.Tensor.detach","paddle.Tensor.dim","paddle.Tensor.expand","paddle.Tensor.item","paddle.Tensor.mean","paddle.Tensor.norm","paddle.Tensor.put_along_axis","paddle.Tensor.scale","paddle.Tensor.split","paddle.Tensor.square","paddle.Tensor.squeeze","paddle.Tensor.sum","paddle.Tensor.topk","paddle.Tensor.transpose","paddle.Tensor.unsqueeze","paddle.Tensor.zero_","paddle.add","paddle.add_n","paddle.amax","paddle.amin","paddle.any","paddle.arange","paddle.as_complex","paddle.as_real","paddle.assign","paddle.broadcast_shape","paddle.broadcast_to","paddle.cast","paddle.chunk","paddle.clip","paddle.complex","paddle.concat","paddle.cos","paddle.divide","paddle.empty","paddle.empty_like","paddle.expand","paddle.flatten","paddle.full","paddle.full_like","paddle.gather_nd","paddle.incubate.nn.functional.fused_dropout_add","paddle.incubate.nn.functional.fused_linear","paddle.incubate.nn.functional.swiglu","paddle.index_select","paddle.is_complex","paddle.isfinite","paddle.isinf","paddle.isnan","paddle.logical_not","paddle.logsumexp","paddle.maximum","paddle.mean","paddle.median","paddle.multiply","paddle.nn.functional.cross_entropy","paddle.nn.functional.dropout","paddle.nn.functional.embedding","paddle.nn.functional.linear","paddle.nn.functional.pad","paddle.nn.functional.sigmoid","paddle.nonzero","paddle.numel","paddle.ones","paddle.ones_like","paddle.polar","paddle.pow","paddle.repeat_interleave","paddle.reshape","paddle.scatter_nd_add","paddle.shape","paddle.sign","paddle.sin","paddle.slice","paddle.split","paddle.sqrt","paddle.stack","paddle.sum","paddle.take_along_axis","paddle.topk","paddle.transpose","paddle.unsqueeze","paddle.var","paddle.where","paddle.zeros","paddle.zeros_like"]
deepseek_v3 = ["paddle.arange","paddle.assign","paddle.broadcast_shape","paddle.broadcast_to","paddle.cast","paddle.clip","paddle.concat","paddle.divide","paddle.empty","paddle.empty_like","paddle.full","paddle.incubate.nn.functional.swiglu","paddle.logsumexp","paddle.matmul","paddle.maximum","paddle.mean","paddle.nn.functional.cross_entropy","paddle.nn.functional.embedding","paddle.nn.functional.sigmoid","paddle.ones","paddle.ones_like","paddle.outer","paddle.reshape","paddle.split","paddle.sqrt","paddle.stack","paddle.sum","paddle.Tensor.__add__","paddle.Tensor.__eq__","paddle.Tensor.__getitem__","paddle.Tensor.__gt__","paddle.Tensor.__len__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__nonzero__","paddle.Tensor.__radd__","paddle.Tensor.__rmul__","paddle.Tensor.__rpow__","paddle.Tensor.__rsub__","paddle.Tensor.__rtruediv__","paddle.Tensor.__sub__","paddle.Tensor.__truediv__","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.cos","paddle.Tensor.detach","paddle.Tensor.dim","paddle.Tensor.expand","paddle.Tensor.item","paddle.Tensor.mean","paddle.Tensor.put_along_axis","paddle.Tensor.reshape","paddle.Tensor.sin","paddle.Tensor.square","paddle.Tensor.sum","paddle.Tensor.topk","paddle.Tensor.transpose","paddle.Tensor.unsqueeze","paddle.Tensor.view","paddle.Tensor.zero_","paddle.topk","paddle.transpose","paddle.where","paddle.zeros","paddle.zeros_like"]
llama3 = ["paddle.Tensor.__add__","paddle.Tensor.__and__","paddle.Tensor.__getitem__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__neg__","paddle.Tensor.__nonzero__","paddle.Tensor.__rpow__","paddle.Tensor.__rtruediv__","paddle.Tensor.__truediv__","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.cos","paddle.Tensor.expand","paddle.Tensor.mean","paddle.Tensor.pow","paddle.Tensor.reshape","paddle.Tensor.sin","paddle.Tensor.squeeze","paddle.Tensor.tile","paddle.Tensor.transpose","paddle.Tensor.unsqueeze","paddle.any","paddle.arange","paddle.argmax","paddle.broadcast_shape","paddle.broadcast_to","paddle.cast","paddle.concat","paddle.einsum","paddle.full","paddle.full_like","paddle.incubate.nn.functional.swiglu","paddle.index_sample","paddle.logical_and","paddle.matmul","paddle.nn.functional.embedding","paddle.nn.functional.linear","paddle.nn.functional.softmax","paddle.ones","paddle.rsqrt","paddle.transpose","paddle.tril","paddle.where"]
qwen3 = ["paddle.Tensor.__add__","paddle.Tensor.__and__","paddle.Tensor.__ge__","paddle.Tensor.__getitem__","paddle.Tensor.__gt__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__neg__","paddle.Tensor.__nonzero__","paddle.Tensor.__rpow__","paddle.Tensor.__rtruediv__","paddle.Tensor.__setitem__","paddle.Tensor.__truediv__","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.clone","paddle.Tensor.cos","paddle.Tensor.expand","paddle.Tensor.flatten","paddle.Tensor.item","paddle.Tensor.max","paddle.Tensor.mean","paddle.Tensor.pow","paddle.Tensor.reshape","paddle.Tensor.sin","paddle.Tensor.squeeze","paddle.Tensor.tile","paddle.Tensor.transpose","paddle.Tensor.unsqueeze","paddle.any","paddle.arange","paddle.argsort","paddle.broadcast_shape","paddle.broadcast_to","paddle.cast","paddle.concat","paddle.cumsum","paddle.einsum","paddle.full","paddle.full_like","paddle.incubate.nn.functional.swiglu","paddle.index_sample","paddle.log","paddle.logical_and","paddle.logical_or","paddle.matmul","paddle.maximum","paddle.minimum","paddle.multinomial","paddle.nn.functional.dropout","paddle.nn.functional.embedding","paddle.nn.functional.linear","paddle.nn.functional.softmax","paddle.ones","paddle.rsqrt","paddle.scatter","paddle.sort","paddle.topk","paddle.transpose","paddle.tril","paddle.where"]
qwen3moe = ["paddle.Tensor.__add__","paddle.Tensor.__and__","paddle.Tensor.__eq__","paddle.Tensor.__floordiv__","paddle.Tensor.__ge__","paddle.Tensor.__getitem__","paddle.Tensor.__gt__","paddle.Tensor.__le__","paddle.Tensor.__mul__","paddle.Tensor.__ne__","paddle.Tensor.__neg__","paddle.Tensor.__nonzero__","paddle.Tensor.__radd__","paddle.Tensor.__rpow__","paddle.Tensor.__rtruediv__","paddle.Tensor.__setitem__","paddle.Tensor.__truediv__","paddle.Tensor.argsort","paddle.Tensor.astype","paddle.Tensor.cast","paddle.Tensor.clone","paddle.Tensor.cos","paddle.Tensor.cumsum","paddle.Tensor.detach","paddle.Tensor.expand","paddle.Tensor.flatten","paddle.Tensor.item","paddle.Tensor.max","paddle.Tensor.mean","paddle.Tensor.pow","paddle.Tensor.put_along_axis","paddle.Tensor.reshape","paddle.Tensor.sin","paddle.Tensor.square","paddle.Tensor.squeeze","paddle.Tensor.sum","paddle.Tensor.take_along_axis","paddle.Tensor.tile","paddle.Tensor.transpose","paddle.Tensor.unsqueeze","paddle.any","paddle.arange","paddle.argsort","paddle.broadcast_shape","paddle.broadcast_to","paddle.cast","paddle.clip","paddle.concat","paddle.cumsum","paddle.einsum","paddle.empty_like","paddle.full","paddle.full_like","paddle.incubate.nn.functional.swiglu","paddle.index_sample","paddle.log","paddle.logical_and","paddle.logical_or","paddle.logsumexp","paddle.matmul","paddle.max","paddle.maximum","paddle.mean","paddle.minimum","paddle.multinomial","paddle.nn.functional.dropout","paddle.nn.functional.embedding","paddle.nn.functional.linear","paddle.nn.functional.one_hot","paddle.nn.functional.softmax","paddle.ones","paddle.rsqrt","paddle.scatter","paddle.sort","paddle.sum","paddle.topk","paddle.transpose","paddle.tril","paddle.where","paddle.zeros","paddle.zeros_like"]

all = list(set(EB45) | set(EB5) | set(deepseek_v3) | set(llama3) | set(qwen3) | set(qwen3moe))

for api in all:
    result = api + "\t"
    if api in EB45:
        result += "是\t"
    else:
        result += "否\t"
    if api in EB5:
        result += "是\t"
    else:
        result += "否\t"
    if api in deepseek_v3:
        result += "是\t"
    else:
        result += "否\t"
    if api in llama3:
        result += "是\t"
    else:
        result += "否\t"
    if api in qwen3:
        result += "是\t"
    else:
        result += "否\t"
    if api in qwen3moe:
        result += "是\t"
    else:
        result += "否\t"
    print(result)