2025-07-27 19:17:31.351556 test begin: paddle.Tensor.__abs__(Tensor([10, 5080321],"float32"), )
W0727 19:17:32.551728 159579 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.Tensor.__abs__ 	 paddle.Tensor.__abs__(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2963573932647705 	 0.29914236068725586 	 0.2795991897583008 	 0.28411245346069336 	 0.4518253803253174 	 0.7429888248443604 	 0.38727307319641113 	 0.37952518463134766 	 
2025-07-27 19:17:37.326620 test begin: paddle.Tensor.__abs__(Tensor([49613, 1024],"float32"), )
[Prof] paddle.Tensor.__abs__ 	 paddle.Tensor.__abs__(Tensor([49613, 1024],"float32"), ) 	 50803712 	 1000 	 0.3014240264892578 	 0.29887914657592773 	 0.27917957305908203 	 0.27515244483947754 	 0.45055532455444336 	 0.7428686618804932 	 0.3866276741027832 	 0.3795480728149414 	 
2025-07-27 19:17:42.003937 test begin: paddle.Tensor.__abs__(Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.__abs__ 	 paddle.Tensor.__abs__(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.29621028900146484 	 0.2978949546813965 	 0.2868049144744873 	 0.28499746322631836 	 0.4505000114440918 	 0.7428593635559082 	 0.39574527740478516 	 0.37957239151000977 	 
2025-07-27 19:17:45.377358 test begin: paddle.Tensor.__add__(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 1, 388, 4096],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 1, 388, 4096],"float32"), ) 	 52445184 	 1000 	 0.33690595626831055 	 0.3242173194885254 	 0.3260352611541748 	 0.31131720542907715 	 0.47705650329589844 	 0.15402436256408691 	 0.24364233016967773 	 0.058142662048339844 	 
2025-07-27 19:17:48.445511 test begin: paddle.Tensor.__add__(Tensor([1, 32, 4096, 388],"float32"), Tensor([1, 1, 4096, 388],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([1, 32, 4096, 388],"float32"), Tensor([1, 1, 4096, 388],"float32"), ) 	 52445184 	 1000 	 0.34146928787231445 	 0.3243274688720703 	 0.3258988857269287 	 0.31173062324523926 	 0.4779999256134033 	 0.15378713607788086 	 0.2434384822845459 	 0.0844731330871582 	 
2025-07-27 19:17:51.805075 test begin: paddle.Tensor.__add__(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), ) 	 553648128 	 1000 	 4.695042610168457 	 4.625180721282959 	 4.683171272277832 	 4.611944913864136 	 4.966182708740234 	 1.5601670742034912 	 1.690110206604004 	 1.4890711307525635 	 
2025-07-27 19:18:30.064856 test begin: paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), ) 	 83886080 	 1000 	 0.5936262607574463 	 0.5959486961364746 	 0.5755431652069092 	 0.5637881755828857 	 0.663569450378418 	 0.24410605430603027 	 0.3390488624572754 	 0.16839194297790527 	 
2025-07-27 19:18:34.719878 test begin: paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 4096],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 4096],"float32"), ) 	 134217728 	 1000 	 0.5935595035552979 	 0.5994255542755127 	 0.5770025253295898 	 0.5697493553161621 	 0.6365647315979004 	 0.06039714813232422 	 0.5646035671234131 	 4.220008850097656e-05 	 
2025-07-27 19:18:40.134932 test begin: paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float16"), Tensor([2, 256, 336, 336],"float32"), )
W0727 19:18:42.060633 160585 dygraph_functions.cc:87088] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float16"), Tensor([2, 256, 336, 336],"float32"), ) 	 115605504 	 1000 	 0.7836513519287109 	 0.47489166259765625 	 0.4004325866699219 	 0.4540824890136719 	 0.8030214309692383 	 0.26033806800842285 	 0.41021299362182617 	 0.19077205657958984 	 
2025-07-27 19:18:45.479811 test begin: paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float32"), Tensor([2, 256, 336, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float32"), Tensor([2, 256, 336, 336],"float32"), ) 	 115605504 	 1000 	 0.5119781494140625 	 0.5079371929168701 	 0.502410888671875 	 0.4950845241546631 	 0.5491440296173096 	 0.07185602188110352 	 0.48734140396118164 	 8.988380432128906e-05 	 
2025-07-27 19:18:50.402792 test begin: paddle.Tensor.__add__(Tensor([4, 256, 336, 336],"float16"), Tensor([4, 256, 336, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([4, 256, 336, 336],"float16"), Tensor([4, 256, 336, 336],"float32"), ) 	 231211008 	 1000 	 1.5621790885925293 	 0.9286572933197021 	 0.7982144355773926 	 0.9074864387512207 	 1.6009202003479004 	 0.5155301094055176 	 0.8179659843444824 	 0.4365847110748291 	 
2025-07-27 19:19:01.614348 test begin: paddle.Tensor.__add__(Tensor([8, 113, 336, 336],"float16"), Tensor([8, 113, 336, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([8, 113, 336, 336],"float16"), Tensor([8, 113, 336, 336],"float32"), ) 	 204115968 	 1000 	 1.38002610206604 	 0.8188912868499756 	 0.7051770687103271 	 0.8067870140075684 	 1.4155774116516113 	 0.4556541442871094 	 0.7233431339263916 	 0.3863255977630615 	 
2025-07-27 19:19:11.023555 test begin: paddle.Tensor.__add__(Tensor([8, 256, 336, 74],"float32"), Tensor([8, 256, 336, 74],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([8, 256, 336, 74],"float32"), Tensor([8, 256, 336, 74],"float32"), ) 	 101842944 	 1000 	 0.4514122009277344 	 0.4477388858795166 	 0.44217920303344727 	 0.43563008308410645 	 0.4840056896209717 	 0.05693459510803223 	 0.4248960018157959 	 6.341934204101562e-05 	 
2025-07-27 19:19:14.960385 test begin: paddle.Tensor.__add__(Tensor([8, 256, 74, 336],"float32"), Tensor([8, 256, 74, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([8, 256, 74, 336],"float32"), Tensor([8, 256, 74, 336],"float32"), ) 	 101842944 	 1000 	 0.4513547420501709 	 0.4477980136871338 	 0.4421885013580322 	 0.42895078659057617 	 0.483964204788208 	 0.060304880142211914 	 0.42494821548461914 	 5.1975250244140625e-05 	 
2025-07-27 19:19:18.884760 test begin: paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float16"), Tensor([8, 57, 336, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float16"), Tensor([8, 57, 336, 336],"float32"), ) 	 102961152 	 1000 	 0.6988325119018555 	 0.4162557125091553 	 0.35709285736083984 	 0.4040248394012451 	 0.7164125442504883 	 0.23239803314208984 	 0.36594557762145996 	 0.15833282470703125 	 
2025-07-27 19:19:23.540005 test begin: paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float32"), Tensor([8, 57, 336, 336],"float32"), )
[Prof] paddle.Tensor.__add__ 	 paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float32"), Tensor([8, 57, 336, 336],"float32"), ) 	 102961152 	 1000 	 0.4564175605773926 	 0.4541006088256836 	 0.4473450183868408 	 0.440685510635376 	 0.4892158508300781 	 0.05397391319274902 	 0.42978405952453613 	 6.0558319091796875e-05 	 
2025-07-27 19:19:27.446679 test begin: paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), ) 	 58720256 	 1000 	 0.16092491149902344 	 0.22654175758361816 	 0.1515202522277832 	 0.21237778663635254 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:28.654374 test begin: paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), ) 	 58720256 	 1000 	 0.1608731746673584 	 0.22649359703063965 	 0.15146851539611816 	 0.21380233764648438 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:29.835572 test begin: paddle.Tensor.__and__(Tensor([1, 1, 2048, 24807],"bool"), Tensor([1, 1, 2048, 24807],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 1, 2048, 24807],"bool"), Tensor([1, 1, 2048, 24807],"bool"), ) 	 101609472 	 1000 	 0.11776971817016602 	 0.11873221397399902 	 0.10931539535522461 	 0.10336756706237793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:32.194409 test begin: paddle.Tensor.__and__(Tensor([1, 1, 24807, 2048],"bool"), Tensor([1, 1, 24807, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 1, 24807, 2048],"bool"), Tensor([1, 1, 24807, 2048],"bool"), ) 	 101609472 	 1000 	 0.11777186393737793 	 0.11969494819641113 	 0.10933446884155273 	 0.10334515571594238 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:34.527408 test begin: paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), ) 	 58720256 	 1000 	 0.1802980899810791 	 0.23615336418151855 	 0.17049694061279297 	 0.21372604370117188 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:39.991634 test begin: paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), ) 	 109051904 	 1000 	 0.12570595741271973 	 0.12345051765441895 	 0.10924816131591797 	 0.1036531925201416 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:41.808730 test begin: paddle.Tensor.__and__(Tensor([13, 1, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 1, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), ) 	 65913185 	 1000 	 0.18440866470336914 	 0.24019145965576172 	 0.17495012283325195 	 0.22558116912841797 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:43.164318 test begin: paddle.Tensor.__and__(Tensor([13, 1, 1007, 3881],"bool"), Tensor([13, 1, 1007, 3881],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 1, 1007, 3881],"bool"), Tensor([13, 1, 1007, 3881],"bool"), ) 	 101612342 	 1000 	 0.11807775497436523 	 0.11590456962585449 	 0.10951638221740723 	 0.10370135307312012 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:44.800661 test begin: paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), ) 	 58720256 	 1000 	 0.18028569221496582 	 0.22641849517822266 	 0.17092609405517578 	 0.2130136489868164 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:46.037148 test begin: paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), ) 	 109051904 	 1000 	 0.12569141387939453 	 0.1271507740020752 	 0.11717796325683594 	 0.11150527000427246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:47.826736 test begin: paddle.Tensor.__and__(Tensor([13, 1, 3881, 1007],"bool"), Tensor([13, 1, 3881, 1007],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 1, 3881, 1007],"bool"), Tensor([13, 1, 3881, 1007],"bool"), ) 	 101612342 	 1000 	 0.11805987358093262 	 0.11594557762145996 	 0.10953378677368164 	 0.10367941856384277 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:49.506064 test begin: paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 1, 1007, 1007],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 1, 1007, 1007],"bool"), ) 	 65913185 	 1000 	 0.19751906394958496 	 0.23855304718017578 	 0.1881849765777588 	 0.225538969039917 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:50.842849 test begin: paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), ) 	 105461096 	 1000 	 0.12280821800231934 	 0.12072396278381348 	 0.11429119110107422 	 0.10821294784545898 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:52.538451 test begin: paddle.Tensor.__and__(Tensor([194, 1, 512, 512],"bool"), Tensor([194, 1, 512, 512],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([194, 1, 512, 512],"bool"), Tensor([194, 1, 512, 512],"bool"), ) 	 101711872 	 1000 	 0.11776232719421387 	 0.11649942398071289 	 0.10562014579772949 	 0.10337162017822266 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:54.216860 test begin: paddle.Tensor.__and__(Tensor([51, 1, 1007, 1007],"bool"), Tensor([51, 1, 1007, 1007],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([51, 1, 1007, 1007],"bool"), Tensor([51, 1, 1007, 1007],"bool"), ) 	 103432998 	 1000 	 0.11979842185974121 	 0.11789751052856445 	 0.11126136779785156 	 0.10586023330688477 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:55.890225 test begin: paddle.Tensor.__and__(Tensor([8, 1, 12404, 512],"bool"), Tensor([8, 1, 12404, 512],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([8, 1, 12404, 512],"bool"), Tensor([8, 1, 12404, 512],"bool"), ) 	 101613568 	 1000 	 0.11777138710021973 	 0.11549210548400879 	 0.10805583000183105 	 0.1033482551574707 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:57.513843 test begin: paddle.Tensor.__and__(Tensor([8, 1, 512, 12404],"bool"), Tensor([8, 1, 512, 12404],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([8, 1, 512, 12404],"bool"), Tensor([8, 1, 512, 12404],"bool"), ) 	 101613568 	 1000 	 0.11773276329040527 	 0.11550116539001465 	 0.10927510261535645 	 0.1033773422241211 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:59.166420 test begin: paddle.Tensor.__and__(Tensor([8, 1, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([8, 1, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), ) 	 54525952 	 1000 	 0.18308687210083008 	 0.23537278175354004 	 0.1725480556488037 	 0.22263836860656738 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:00.336929 test begin: paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 1, 512, 512],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 1, 512, 512],"bool"), ) 	 54525952 	 1000 	 0.19318795204162598 	 0.23534393310546875 	 0.18282079696655273 	 0.2226564884185791 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:01.516188 test begin: paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), )
[Prof] paddle.Tensor.__and__ 	 paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), ) 	 104857600 	 1000 	 0.12118911743164062 	 0.11899304389953613 	 0.11265897750854492 	 0.1071929931640625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:03.199714 test begin: paddle.Tensor.__div__(Tensor([8, 16, 396901],"float32"), 2, )
[Prof] paddle.Tensor.__div__ 	 paddle.Tensor.__div__(Tensor([8, 16, 396901],"float32"), 2, ) 	 50803328 	 1000 	 0.2956507205963135 	 0.29799842834472656 	 0.2867095470428467 	 0.2837843894958496 	 0.29583072662353516 	 0.2977762222290039 	 0.24379444122314453 	 0.23606348037719727 	 
2025-07-27 19:20:06.036425 test begin: paddle.Tensor.__div__(Tensor([8, 198451, 32],"float32"), 2, )
[Prof] paddle.Tensor.__div__ 	 paddle.Tensor.__div__(Tensor([8, 198451, 32],"float32"), 2, ) 	 50803456 	 1000 	 0.29587626457214355 	 0.2980539798736572 	 0.28699779510498047 	 0.28373265266418457 	 0.29596495628356934 	 0.29773974418640137 	 0.24361586570739746 	 0.23570990562438965 	 
2025-07-27 19:20:08.896039 test begin: paddle.Tensor.__div__(Tensor([99226, 16, 32],"float32"), 2, )
[Prof] paddle.Tensor.__div__ 	 paddle.Tensor.__div__(Tensor([99226, 16, 32],"float32"), 2, ) 	 50803712 	 1000 	 0.29578685760498047 	 0.29799604415893555 	 0.28682708740234375 	 0.2838263511657715 	 0.29584479331970215 	 0.2978193759918213 	 0.24391508102416992 	 0.23589444160461426 	 
2025-07-27 19:20:11.729152 test begin: paddle.Tensor.__eq__(Tensor([138, 369303],"float32"), Tensor([138, 1],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([138, 369303],"float32"), Tensor([138, 1],"float32"), ) 	 50963952 	 1000 	 0.19208574295043945 	 0.2420668601989746 	 0.18269968032836914 	 0.2292194366455078 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:13.045294 test begin: paddle.Tensor.__eq__(Tensor([146, 349866],"float32"), Tensor([146, 1],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([146, 349866],"float32"), Tensor([146, 1],"float32"), ) 	 51080582 	 1000 	 0.19251370429992676 	 0.24904084205627441 	 0.1832871437072754 	 0.22969484329223633 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:14.356512 test begin: paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1036801],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1036801],"float32"), ) 	 101606498 	 1000 	 0.32688426971435547 	 0.32790136337280273 	 0.3180835247039795 	 0.315781831741333 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:16.696949 test begin: paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1],"float32"), ) 	 50803298 	 1000 	 0.19171905517578125 	 0.24150538444519043 	 0.17490506172180176 	 0.2225043773651123 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:17.997340 test begin: paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 1],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 1],"float32"), ) 	 50803256 	 1000 	 0.1917555332183838 	 0.24138569831848145 	 0.18241667747497559 	 0.22792601585388184 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:19.249513 test begin: paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 958551],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 958551],"float32"), ) 	 101606406 	 1000 	 0.326873779296875 	 0.3278810977935791 	 0.31818175315856934 	 0.31594109535217285 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:21.631877 test begin: paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 1],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 1],"float32"), ) 	 50803280 	 1000 	 0.1916975975036621 	 0.24140620231628418 	 0.18237543106079102 	 0.2284870147705078 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:22.901884 test begin: paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 923695],"float32"), )
[Prof] paddle.Tensor.__eq__ 	 paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 923695],"float32"), ) 	 101606450 	 1000 	 0.32688188552856445 	 0.33121347427368164 	 0.31780385971069336 	 0.31571125984191895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:25.203412 test begin: paddle.Tensor.__floordiv__(Tensor([10, 10160641],"float32"), Tensor([10, 10160641],"float16"), )
W0727 19:20:28.622157 161381 dygraph_functions.cc:89596] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([10, 10160641],"float32"), Tensor([10, 10160641],"float16"), ) 	 203212820 	 1000 	 1.3721685409545898 	 1.1909098625183105 	 0.7012503147125244 	 1.1659588813781738 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:31.423555 test begin: paddle.Tensor.__floordiv__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), ) 	 50803220 	 1000 	 0.44765782356262207 	 0.4478425979614258 	 0.4385800361633301 	 0.43112826347351074 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:33.169433 test begin: paddle.Tensor.__floordiv__(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float16"), )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float16"), ) 	 101606420 	 1000 	 0.6897211074829102 	 0.6138172149658203 	 0.35246849060058594 	 0.5823578834533691 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:39.515417 test begin: paddle.Tensor.__floordiv__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), ) 	 50804736 	 1000 	 0.44789838790893555 	 0.9761981964111328 	 0.4394090175628662 	 0.4309508800506592 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:43.153368 test begin: paddle.Tensor.__floordiv__(Tensor([4, 6350401],"int64"), 4, )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([4, 6350401],"int64"), 4, ) 	 25401604 	 1000 	 0.30482983589172363 	 0.30265140533447266 	 0.15574264526367188 	 0.28507399559020996 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:44.165752 test begin: paddle.Tensor.__floordiv__(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float16"), )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float16"), ) 	 101607424 	 1000 	 0.6904737949371338 	 0.5995156764984131 	 0.352794885635376 	 0.5827076435089111 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:47.256643 test begin: paddle.Tensor.__floordiv__(Tensor([84673, 300],"int64"), 4, )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([84673, 300],"int64"), 4, ) 	 25401900 	 1000 	 0.3049168586730957 	 0.30262327194213867 	 0.15578961372375488 	 0.2852504253387451 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:48.267666 test begin: paddle.Tensor.__floordiv__(Tensor([99226, 1024],"float32"), Tensor([99226, 1024],"float16"), )
[Prof] paddle.Tensor.__floordiv__ 	 paddle.Tensor.__floordiv__(Tensor([99226, 1024],"float32"), Tensor([99226, 1024],"float16"), ) 	 203214848 	 1000 	 1.3741576671600342 	 1.192209243774414 	 0.702136754989624 	 1.172058343887329 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:55.008498 test begin: paddle.Tensor.__ge__(Tensor([50803201],"int32"), 0, )
[Prof] paddle.Tensor.__ge__ 	 paddle.Tensor.__ge__(Tensor([50803201],"int32"), 0, ) 	 50803201 	 1000 	 0.4690086841583252 	 0.18609166145324707 	 0.23962020874023438 	 0.17200970649719238 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:56.251561 test begin: paddle.Tensor.__getitem__(Tensor([1, 7576, 12800],"bfloat16"), slice(None,-3,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 7576, 12800],"bfloat16"), slice(None,-3,None), ) 	 96972800 	 1000 	 0.0052111148834228516 	 0.009795665740966797 	 1.1682510375976562e-05 	 2.5033950805664062e-05 	 0.27469754219055176 	 0.1280374526977539 	 0.14034605026245117 	 0.044324636459350586 	 
2025-07-27 19:20:58.249741 test begin: paddle.Tensor.__getitem__(Tensor([1, 7576, 16770],"bfloat16"), slice(None,-3,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 7576, 16770],"bfloat16"), slice(None,-3,None), ) 	 127049520 	 1000 	 0.004998445510864258 	 0.005493879318237305 	 1.2159347534179688e-05 	 2.2172927856445312e-05 	 0.35944557189941406 	 0.16686725616455078 	 0.18349790573120117 	 0.08168172836303711 	 
2025-07-27 19:21:00.797254 test begin: paddle.Tensor.__getitem__(Tensor([1, 7712, 12800],"bfloat16"), slice(None,-2,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 7712, 12800],"bfloat16"), slice(None,-2,None), ) 	 98713600 	 1000 	 0.005079746246337891 	 0.0053899288177490234 	 3.075599670410156e-05 	 2.09808349609375e-05 	 0.28314828872680664 	 0.13037395477294922 	 0.14471864700317383 	 0.05435013771057129 	 
2025-07-27 19:21:02.781020 test begin: paddle.Tensor.__getitem__(Tensor([1, 7712, 16470],"bfloat16"), slice(None,-2,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 7712, 16470],"bfloat16"), slice(None,-2,None), ) 	 127016640 	 1000 	 0.0050771236419677734 	 0.005387067794799805 	 8.344650268554688e-06 	 2.6226043701171875e-05 	 0.36769986152648926 	 0.1669483184814453 	 0.18789982795715332 	 0.08002042770385742 	 
2025-07-27 19:21:07.352675 test begin: paddle.Tensor.__getitem__(Tensor([1, 8168, 12800],"bfloat16"), slice(None,-6,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 8168, 12800],"bfloat16"), slice(None,-6,None), ) 	 104550400 	 1000 	 0.004985332489013672 	 0.0053920745849609375 	 1.1682510375976562e-05 	 3.337860107421875e-05 	 0.2963135242462158 	 0.13793635368347168 	 0.15136384963989258 	 0.06161212921142578 	 
2025-07-27 19:21:10.057988 test begin: paddle.Tensor.__getitem__(Tensor([1, 8168, 15550],"bfloat16"), slice(None,-6,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 8168, 15550],"bfloat16"), slice(None,-6,None), ) 	 127012400 	 1000 	 0.005117654800415039 	 0.005368709564208984 	 1.0967254638671875e-05 	 2.2172927856445312e-05 	 0.3597257137298584 	 0.1667490005493164 	 0.18372440338134766 	 0.09108567237854004 	 
2025-07-27 19:21:12.595779 test begin: paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-2,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-2,None), ) 	 127014400 	 1000 	 0.005097389221191406 	 0.005326509475708008 	 1.1205673217773438e-05 	 1.8835067749023438e-05 	 0.3584420680999756 	 0.1668071746826172 	 0.18304157257080078 	 0.09170269966125488 	 
2025-07-27 19:21:15.192722 test begin: paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-3,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-3,None), ) 	 127014400 	 1000 	 0.00503993034362793 	 0.005415201187133789 	 7.152557373046875e-06 	 2.0265579223632812e-05 	 0.35854411125183105 	 0.16680121421813965 	 0.18324804306030273 	 0.09173417091369629 	 
2025-07-27 19:21:17.729852 test begin: paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-6,None), )
[Prof] paddle.Tensor.__getitem__ 	 paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-6,None), ) 	 127014400 	 1000 	 0.0051250457763671875 	 0.0053386688232421875 	 1.9550323486328125e-05 	 2.1696090698242188e-05 	 0.35860562324523926 	 0.16675925254821777 	 0.18310165405273438 	 0.0900115966796875 	 
2025-07-27 19:21:20.303862 test begin: paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 0, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 0, ) 	 50803600 	 1000 	 0.46884584426879883 	 0.18609309196472168 	 0.23957371711730957 	 0.1718730926513672 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:21.789161 test begin: paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 1e-09, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 1e-09, ) 	 50803600 	 1000 	 0.46893310546875 	 0.18613481521606445 	 0.23724365234375 	 0.1626441478729248 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:23.312135 test begin: paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 0, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 0, ) 	 50840832 	 1000 	 0.4694705009460449 	 0.18621349334716797 	 0.23986387252807617 	 0.17193078994750977 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:24.776100 test begin: paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 1e-09, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 1e-09, ) 	 50840832 	 1000 	 0.4695727825164795 	 0.18620657920837402 	 0.23996853828430176 	 0.17166662216186523 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:26.253016 test begin: paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 0, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 0, ) 	 52684800 	 1000 	 0.48616528511047363 	 0.1925961971282959 	 0.2483959197998047 	 0.1784203052520752 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:27.807369 test begin: paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 1e-09, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 1e-09, ) 	 52684800 	 1000 	 0.48625969886779785 	 0.192702054977417 	 0.2484908103942871 	 0.16931748390197754 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:29.327436 test begin: paddle.Tensor.__gt__(Tensor([324000, 157],"float32"), 0.0, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([324000, 157],"float32"), 0.0, ) 	 50868000 	 1000 	 0.46954941749572754 	 0.18631601333618164 	 0.2399592399597168 	 0.1720123291015625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:30.791160 test begin: paddle.Tensor.__gt__(Tensor([635041, 80],"float32"), 0.0, )
[Prof] paddle.Tensor.__gt__ 	 paddle.Tensor.__gt__(Tensor([635041, 80],"float32"), 0.0, ) 	 50803280 	 1000 	 0.4689006805419922 	 0.18602943420410156 	 0.23963284492492676 	 0.1717514991760254 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:32.259405 test begin: paddle.Tensor.__le__(Tensor([243360, 209],"float32"), 0.0, )
[Prof] paddle.Tensor.__le__ 	 paddle.Tensor.__le__(Tensor([243360, 209],"float32"), 0.0, ) 	 50862240 	 1000 	 0.46975183486938477 	 0.18632078170776367 	 0.24002671241760254 	 0.17177629470825195 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:33.734232 test begin: paddle.Tensor.__le__(Tensor([282240, 181],"float32"), 0.0, )
[Prof] paddle.Tensor.__le__ 	 paddle.Tensor.__le__(Tensor([282240, 181],"float32"), 0.0, ) 	 51085440 	 1000 	 0.4716911315917969 	 0.1910245418548584 	 0.24106645584106445 	 0.172652006149292 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:37.412997 test begin: paddle.Tensor.__le__(Tensor([324000, 157],"float32"), 0.0, )
[Prof] paddle.Tensor.__le__ 	 paddle.Tensor.__le__(Tensor([324000, 157],"float32"), 0.0, ) 	 50868000 	 1000 	 0.4694650173187256 	 0.1972665786743164 	 0.23989105224609375 	 0.17175793647766113 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:39.871532 test begin: paddle.Tensor.__le__(Tensor([635041, 80],"float32"), 0.0, )
[Prof] paddle.Tensor.__le__ 	 paddle.Tensor.__le__(Tensor([635041, 80],"float32"), 0.0, ) 	 50803280 	 1000 	 0.4691333770751953 	 0.1861128807067871 	 0.2397916316986084 	 0.16440796852111816 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:41.352395 test begin: paddle.Tensor.__len__(Tensor([100, 1352, 376],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([100, 1352, 376],"float32"), ) 	 50835200 	 1000 	 0.004744529724121094 	 0.005158424377441406 	 6.198883056640625e-06 	 2.2172927856445312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:42.187815 test begin: paddle.Tensor.__len__(Tensor([100, 376, 1352],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([100, 376, 1352],"float32"), ) 	 50835200 	 1000 	 0.0046460628509521484 	 0.004935264587402344 	 6.198883056640625e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:43.903770 test begin: paddle.Tensor.__len__(Tensor([100000, 509],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([100000, 509],"float32"), ) 	 50900000 	 1000 	 0.008635282516479492 	 0.004819154739379883 	 2.384185791015625e-05 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:44.950247 test begin: paddle.Tensor.__len__(Tensor([23, 1501, 1501],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([23, 1501, 1501],"float32"), ) 	 51819023 	 1000 	 0.004657268524169922 	 0.005365610122680664 	 5.4836273193359375e-06 	 5.459785461425781e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:47.163564 test begin: paddle.Tensor.__len__(Tensor([360, 376, 376],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([360, 376, 376],"float32"), ) 	 50895360 	 1000 	 0.004765748977661133 	 0.00500178337097168 	 5.9604644775390625e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:47.976282 test begin: paddle.Tensor.__len__(Tensor([50, 1501, 677],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([50, 1501, 677],"float32"), ) 	 50808850 	 1000 	 0.004648923873901367 	 0.00484776496887207 	 6.198883056640625e-06 	 1.8596649169921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:48.789917 test begin: paddle.Tensor.__len__(Tensor([50, 677, 1501],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([50, 677, 1501],"float32"), ) 	 50808850 	 1000 	 0.006762981414794922 	 0.006357908248901367 	 8.344650268554688e-06 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:49.677928 test begin: paddle.Tensor.__len__(Tensor([508033, 100],"float32"), )
[Prof] paddle.Tensor.__len__ 	 paddle.Tensor.__len__(Tensor([508033, 100],"float32"), ) 	 50803300 	 1000 	 0.00645136833190918 	 0.004889249801635742 	 2.0265579223632812e-05 	 1.9311904907226562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:50.480846 test begin: paddle.Tensor.__lshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), ) 	 101607000 	 1000 	 0.4502878189086914 	 0.45024991035461426 	 0.43382954597473145 	 0.4269139766693115 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:52.529415 test begin: paddle.Tensor.__lshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), ) 	 101606800 	 1000 	 0.45060086250305176 	 0.45012807846069336 	 0.43467116355895996 	 0.42740511894226074 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:54.595242 test begin: paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), ) 	 203213200 	 1000 	 0.4476947784423828 	 0.45015621185302734 	 0.4316539764404297 	 0.43087196350097656 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:57.484355 test begin: paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, ) 	 203213200 	 1000 	 0.447772741317749 	 0.4509861469268799 	 0.43180179595947266 	 0.43090128898620605 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:00.340643 test begin: paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), ) 	 203213400 	 1000 	 0.4477195739746094 	 0.45038509368896484 	 0.43865537643432617 	 0.43745970726013184 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:03.268834 test begin: paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
[Prof] paddle.Tensor.__lshift__ 	 paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, ) 	 203213400 	 1000 	 0.4476628303527832 	 0.45021510124206543 	 0.43165016174316406 	 0.43006062507629395 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:06.240315 test begin: paddle.Tensor.__lt__(Tensor([1034, 3, 64, 128],"float64"), 1, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([1034, 3, 64, 128],"float64"), 1, ) 	 25411584 	 1000 	 0.45234036445617676 	 0.16839122772216797 	 0.23114967346191406 	 0.15369153022766113 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:07.380069 test begin: paddle.Tensor.__lt__(Tensor([256, 13, 64, 128],"float64"), 1, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([256, 13, 64, 128],"float64"), 1, ) 	 27262976 	 1000 	 0.4842844009399414 	 0.18009424209594727 	 0.24745512008666992 	 0.16571426391601562 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:08.604612 test begin: paddle.Tensor.__lt__(Tensor([256, 3, 259, 128],"float64"), 1, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([256, 3, 259, 128],"float64"), 1, ) 	 25460736 	 1000 	 0.45327067375183105 	 0.16868329048156738 	 0.23159360885620117 	 0.15399432182312012 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:09.745620 test begin: paddle.Tensor.__lt__(Tensor([256, 3, 64, 517],"float64"), 1, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([256, 3, 64, 517],"float64"), 1, ) 	 25411584 	 1000 	 0.45237064361572266 	 0.16840744018554688 	 0.23110508918762207 	 0.1536421775817871 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:10.887380 test begin: paddle.Tensor.__lt__(Tensor([4, 157920, 81],"float32"), 0.1111111111111111, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([4, 157920, 81],"float32"), 0.1111111111111111, ) 	 51166080 	 1000 	 0.47236013412475586 	 0.18734312057495117 	 0.2413330078125 	 0.17270588874816895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:12.420330 test begin: paddle.Tensor.__lt__(Tensor([4, 1814401, 7],"float32"), 0.1111111111111111, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([4, 1814401, 7],"float32"), 0.1111111111111111, ) 	 50803228 	 1000 	 0.4690215587615967 	 0.1873936653137207 	 0.23966336250305176 	 0.17108440399169922 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:13.904002 test begin: paddle.Tensor.__lt__(Tensor([46, 157920, 7],"float32"), 0.1111111111111111, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([46, 157920, 7],"float32"), 0.1111111111111111, ) 	 50850240 	 1000 	 0.46915388107299805 	 0.18628454208374023 	 0.23970580101013184 	 0.17163538932800293 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:15.383952 test begin: paddle.Tensor.__lt__(Tensor([50803201],"float32"), 0.7, )
[Prof] paddle.Tensor.__lt__ 	 paddle.Tensor.__lt__(Tensor([50803201],"float32"), 0.7, ) 	 50803201 	 1000 	 0.4689512252807617 	 0.18608522415161133 	 0.2396252155303955 	 0.17163825035095215 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:16.877583 test begin: paddle.Tensor.__matmul__(Tensor([10, 2304, 2304],"float32"), Tensor([10, 2304, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([10, 2304, 2304],"float32"), Tensor([10, 2304, 64],"float32"), ) 	 54558720 	 1000 	 0.9287714958190918 	 0.9289979934692383 	 0.916327714920044 	 0.9056050777435303 	 1.3744702339172363 	 1.3735461235046387 	 0.7023019790649414 	 0.7017776966094971 	 
2025-07-27 19:22:22.564894 test begin: paddle.Tensor.__matmul__(Tensor([111, 3, 392, 392],"float32"), Tensor([111, 3, 392, 32],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([111, 3, 392, 392],"float32"), Tensor([111, 3, 392, 32],"float32"), ) 	 55347264 	 1000 	 1.0330817699432373 	 1.0361785888671875 	 1.0206103324890137 	 0.9999508857727051 	 1.4490299224853516 	 1.4486684799194336 	 0.7403976917266846 	 0.7401878833770752 	 
2025-07-27 19:22:28.547386 test begin: paddle.Tensor.__matmul__(Tensor([1351, 3, 392, 392],"float32"), Tensor([1351, 3, 392, 32],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([1351, 3, 392, 392],"float32"), Tensor([1351, 3, 392, 32],"float32"), ) 	 673641024 	 1000 	 11.844781398773193 	 11.896610736846924 	 11.813059568405151 	 11.873127937316895 	 16.82634925842285 	 16.847413063049316 	 8.61015796661377 	 8.609014987945557 	 
2025-07-27 19:23:39.809188 test begin: paddle.Tensor.__matmul__(Tensor([176, 2, 392, 392],"float32"), Tensor([176, 2, 392, 32],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([176, 2, 392, 392],"float32"), Tensor([176, 2, 392, 32],"float32"), ) 	 58505216 	 1000 	 1.1109724044799805 	 1.111196517944336 	 1.0985198020935059 	 1.0873525142669678 	 1.550668716430664 	 1.5501322746276855 	 0.7923192977905273 	 0.791917085647583 	 
2025-07-27 19:23:46.227719 test begin: paddle.Tensor.__matmul__(Tensor([176, 24, 392, 392],"float32"), Tensor([176, 24, 392, 32],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([176, 24, 392, 392],"float32"), Tensor([176, 24, 392, 32],"float32"), ) 	 702062592 	 1000 	 12.37730860710144 	 12.375196695327759 	 12.362427473068237 	 12.351218938827515 	 17.532402515411377 	 17.530574560165405 	 8.959079027175903 	 8.958010196685791 	 
2025-07-27 19:25:00.204519 test begin: paddle.Tensor.__matmul__(Tensor([176, 3, 246, 392],"float32"), Tensor([176, 3, 392, 32],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([176, 3, 246, 392],"float32"), Tensor([176, 3, 392, 32],"float32"), ) 	 57539328 	 1000 	 0.8042492866516113 	 0.7987346649169922 	 0.7864644527435303 	 0.7754182815551758 	 1.3481338024139404 	 1.3481733798980713 	 0.6888189315795898 	 0.688854455947876 	 
2025-07-27 19:25:07.180880 test begin: paddle.Tensor.__matmul__(Tensor([176, 3, 392, 392],"float32"), Tensor([176, 3, 392, 246],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([176, 3, 392, 392],"float32"), Tensor([176, 3, 392, 246],"float32"), ) 	 132050688 	 1000 	 3.1628174781799316 	 3.1629199981689453 	 3.142489433288574 	 3.1294586658477783 	 7.156577825546265 	 7.157192230224609 	 3.6577041149139404 	 3.6572084426879883 	 
2025-07-27 19:25:31.142744 test begin: paddle.Tensor.__matmul__(Tensor([345, 2304, 2304],"float32"), Tensor([345, 2304, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([345, 2304, 2304],"float32"), Tensor([345, 2304, 64],"float32"), ) 	 1882275840 	 1000 	 26.61998963356018 	 28.014581203460693 	 26.607606887817383 	 26.569690465927124 	 41.71335434913635 	 41.71112656593323 	 21.315528869628906 	 21.31351590156555 	 
2025-07-27 19:28:22.519425 test begin: paddle.Tensor.__matmul__(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 64],"float32"), ) 	 54591488 	 1000 	 0.828627347946167 	 0.82861328125 	 0.8083019256591797 	 0.7955949306488037 	 1.260315179824829 	 1.2608466148376465 	 0.6439571380615234 	 0.644207239151001 	 
2025-07-27 19:28:27.684821 test begin: paddle.Tensor.__matmul__(Tensor([60, 2304, 2304],"float32"), Tensor([60, 2304, 368],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([60, 2304, 2304],"float32"), Tensor([60, 2304, 368],"float32"), ) 	 369377280 	 1000 	 13.775460481643677 	 13.776240110397339 	 13.75493049621582 	 13.743057250976562 	 27.203030109405518 	 27.21040391921997 	 13.900862216949463 	 13.904175519943237 	 
2025-07-27 19:29:56.885107 test begin: paddle.Tensor.__matmul__(Tensor([60, 368, 2304],"float32"), Tensor([60, 2304, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([60, 368, 2304],"float32"), Tensor([60, 2304, 64],"float32"), ) 	 59719680 	 1000 	 0.9284830093383789 	 0.9284422397613525 	 0.908156156539917 	 0.8959035873413086 	 1.196540355682373 	 1.1967682838439941 	 0.6113953590393066 	 0.6114215850830078 	 
2025-07-27 19:30:02.127191 test begin: paddle.Tensor.__matmul__(Tensor([776, 1024, 1024],"float32"), Tensor([776, 1024, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([776, 1024, 1024],"float32"), Tensor([776, 1024, 64],"float32"), ) 	 864550912 	 1000 	 11.867167711257935 	 11.87039041519165 	 11.84674620628357 	 11.839746236801147 	 18.528786420822144 	 18.51951766014099 	 9.468095541000366 	 9.463299751281738 	 
2025-07-27 19:31:20.162587 test begin: paddle.Tensor.__matmul__(Tensor([96, 1024, 1024],"float32"), Tensor([96, 1024, 517],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([96, 1024, 1024],"float32"), Tensor([96, 1024, 517],"float32"), ) 	 151486464 	 1000 	 7.372295379638672 	 7.372247695922852 	 7.3511645793914795 	 7.348911762237549 	 13.345519065856934 	 13.351492643356323 	 6.819461107254028 	 6.822519302368164 	 
2025-07-27 19:32:05.339705 test begin: paddle.Tensor.__matmul__(Tensor([96, 517, 1024],"float32"), Tensor([96, 1024, 64],"float32"), )
[Prof] paddle.Tensor.__matmul__ 	 paddle.Tensor.__matmul__(Tensor([96, 517, 1024],"float32"), Tensor([96, 1024, 64],"float32"), ) 	 57114624 	 1000 	 1.0319461822509766 	 1.0321593284606934 	 1.011601209640503 	 0.9991188049316406 	 1.3707332611083984 	 1.3707923889160156 	 0.7003762722015381 	 0.7003865242004395 	 
2025-07-27 19:32:11.195070 test begin: paddle.Tensor.__mod__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), ) 	 50803220 	 1000 	 0.44738101959228516 	 0.4478011131286621 	 0.4307518005371094 	 0.42934656143188477 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:14.105727 test begin: paddle.Tensor.__mod__(Tensor([13, 2, 976985],"int64"), 16, )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([13, 2, 976985],"int64"), 16, ) 	 25401610 	 1000 	 0.5830554962158203 	 0.29920268058776855 	 0.2979087829589844 	 0.2848186492919922 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:16.100307 test begin: paddle.Tensor.__mod__(Tensor([13, 30531, 64],"int64"), 16, )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([13, 30531, 64],"int64"), 16, ) 	 25401792 	 1000 	 0.5828745365142822 	 0.2992517948150635 	 0.29787111282348633 	 0.2847473621368408 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:18.098649 test begin: paddle.Tensor.__mod__(Tensor([198451, 2, 64],"int64"), 16, )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([198451, 2, 64],"int64"), 16, ) 	 25401728 	 1000 	 0.5831172466278076 	 0.29924917221069336 	 0.29796648025512695 	 0.2847740650177002 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:20.111562 test begin: paddle.Tensor.__mod__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), ) 	 50804736 	 1000 	 0.4478764533996582 	 0.4477546215057373 	 0.43874669075012207 	 0.4356839656829834 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:23.003045 test begin: paddle.Tensor.__mod__(Tensor([26, 976985],"int64"), 64, )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([26, 976985],"int64"), 64, ) 	 25401610 	 1000 	 0.5830774307250977 	 0.29926180839538574 	 0.297931432723999 	 0.28484153747558594 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:24.997179 test begin: paddle.Tensor.__mod__(Tensor([396901, 64],"int64"), 64, )
[Prof] paddle.Tensor.__mod__ 	 paddle.Tensor.__mod__(Tensor([396901, 64],"int64"), 64, ) 	 25401664 	 1000 	 0.582777738571167 	 0.2992360591888428 	 0.2977931499481201 	 0.2847909927368164 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:32:27.009849 test begin: paddle.Tensor.__mul__(Tensor([1, 1, 32768, 32768],"float16"), 10000.0, )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([1, 1, 32768, 32768],"float16"), 10000.0, ) 	 1073741824 	 1000 	 3.1045868396759033 	 3.0919439792633057 	 3.0959131717681885 	 3.0769059658050537 	 3.104922294616699 	 3.091477870941162 	 3.0531740188598633 	 3.023902416229248 	 
2025-07-27 19:33:20.043403 test begin: paddle.Tensor.__mul__(Tensor([108544, 469],"float32"), Tensor([108544, 469],"float32"), )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([108544, 469],"float32"), Tensor([108544, 469],"float32"), ) 	 101814272 	 1000 	 0.4509570598602295 	 0.4477348327636719 	 0.44177818298339844 	 0.43622541427612305 	 1.1071901321411133 	 0.8950376510620117 	 1.0457584857940674 	 0.45725274085998535 	 
2025-07-27 19:33:25.526909 test begin: paddle.Tensor.__mul__(Tensor([111616, 456],"float32"), Tensor([111616, 456],"float32"), )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([111616, 456],"float32"), Tensor([111616, 456],"float32"), ) 	 101793792 	 1000 	 0.45076966285705566 	 0.4476203918457031 	 0.4409606456756592 	 0.4360792636871338 	 1.106473445892334 	 0.8948285579681396 	 1.044240951538086 	 0.45715832710266113 	 
2025-07-27 19:33:30.913264 test begin: paddle.Tensor.__mul__(Tensor([14176, 3584],"float32"), Tensor([14176, 3584],"float32"), )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([14176, 3584],"float32"), Tensor([14176, 3584],"float32"), ) 	 101613568 	 1000 	 0.45003318786621094 	 0.4468371868133545 	 0.4408857822418213 	 0.4351506233215332 	 1.1064996719360352 	 0.8933086395263672 	 1.043666124343872 	 0.45633745193481445 	 
2025-07-27 19:33:37.340795 test begin: paddle.Tensor.__mul__(Tensor([2, 1, 1551, 32768],"float16"), 10000.0, )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([2, 1, 1551, 32768],"float16"), 10000.0, ) 	 101646336 	 1000 	 0.2983129024505615 	 0.29660797119140625 	 0.2820758819580078 	 0.27520108222961426 	 0.29840898513793945 	 0.2963681221008301 	 0.2366485595703125 	 0.2206261157989502 	 
2025-07-27 19:33:42.272921 test begin: paddle.Tensor.__mul__(Tensor([2, 1, 32768, 1551],"float16"), 10000.0, )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([2, 1, 32768, 1551],"float16"), 10000.0, ) 	 101646336 	 1000 	 0.29835033416748047 	 0.3171839714050293 	 0.27643322944641113 	 0.2748293876647949 	 0.2984437942504883 	 0.29659390449523926 	 0.24409031867980957 	 0.2043454647064209 	 
2025-07-27 19:33:50.784392 test begin: paddle.Tensor.__mul__(Tensor([2, 1, 32768, 32768],"float16"), 10000.0, )
[Prof] paddle.Tensor.__mul__ 	 paddle.Tensor.__mul__(Tensor([2, 1, 32768, 32768],"float16"), 10000.0, ) 	 2147483648 	 1000 	 6.5234479904174805 	 6.274406909942627 	 6.512531042098999 	 3.2496581077575684 	 6.206291675567627 	 6.183112621307373 	 6.154414176940918 	 3.159287929534912 	 
2025-07-27 19:35:44.170844 test begin: paddle.Tensor.__ne__(Tensor([144, 392, 901],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([144, 392, 901],"float32"), 0, ) 	 50859648 	 1000 	 0.47123146057128906 	 0.1930084228515625 	 0.24077200889587402 	 0.16471004486083984 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:45.691246 test begin: paddle.Tensor.__ne__(Tensor([144, 901, 392],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([144, 901, 392],"float32"), 0, ) 	 50859648 	 1000 	 0.47133874893188477 	 0.18630242347717285 	 0.24082446098327637 	 0.16475677490234375 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:47.197742 test begin: paddle.Tensor.__ne__(Tensor([160, 392, 811],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([160, 392, 811],"float32"), 0, ) 	 50865920 	 1000 	 0.47162342071533203 	 0.18630313873291016 	 0.24100708961486816 	 0.16466426849365234 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:48.680023 test begin: paddle.Tensor.__ne__(Tensor([160, 811, 392],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([160, 811, 392],"float32"), 0, ) 	 50865920 	 1000 	 0.47164058685302734 	 0.1863408088684082 	 0.24103760719299316 	 0.16475987434387207 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:50.165249 test begin: paddle.Tensor.__ne__(Tensor([176, 392, 737],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([176, 392, 737],"float32"), 0, ) 	 50847104 	 1000 	 0.47158265113830566 	 0.19301724433898926 	 0.24103498458862305 	 0.1719222068786621 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:51.655630 test begin: paddle.Tensor.__ne__(Tensor([176, 737, 392],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([176, 737, 392],"float32"), 0, ) 	 50847104 	 1000 	 0.4715914726257324 	 0.18619871139526367 	 0.24091887474060059 	 0.17190170288085938 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:53.169258 test begin: paddle.Tensor.__ne__(Tensor([331, 392, 392],"float32"), 0, )
[Prof] paddle.Tensor.__ne__ 	 paddle.Tensor.__ne__(Tensor([331, 392, 392],"float32"), 0, ) 	 50862784 	 1000 	 0.4714925289154053 	 0.188323974609375 	 0.240919828414917 	 0.17187261581420898 	 None 	 None 	 None 	 None 	 
2025-07-27 19:35:54.691476 test begin: paddle.Tensor.__neg__(Tensor([128, 396901],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([128, 396901],"float32"), ) 	 50803328 	 1000 	 0.2954730987548828 	 0.3010387420654297 	 0.2864658832550049 	 0.28762364387512207 	 0.29575204849243164 	 0.2976982593536377 	 0.23901796340942383 	 0.233201265335083 	 
2025-07-27 19:35:59.634283 test begin: paddle.Tensor.__neg__(Tensor([128, 793801],"float16"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([128, 793801],"float16"), ) 	 101606528 	 1000 	 0.29851555824279785 	 0.2963690757751465 	 0.2897210121154785 	 0.28606653213500977 	 0.29862284660339355 	 0.29608988761901855 	 0.24632668495178223 	 0.21951651573181152 	 
2025-07-27 19:36:04.676272 test begin: paddle.Tensor.__neg__(Tensor([22, 81, 94, 311],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([22, 81, 94, 311],"float32"), ) 	 52094988 	 1000 	 0.30329179763793945 	 0.3070032596588135 	 0.2863426208496094 	 0.28832554817199707 	 0.3031134605407715 	 0.30518150329589844 	 0.24206256866455078 	 0.23073887825012207 	 
2025-07-27 19:36:07.590711 test begin: paddle.Tensor.__neg__(Tensor([264, 192612],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([264, 192612],"float32"), ) 	 50849568 	 1000 	 0.29604434967041016 	 0.2981588840484619 	 0.2872023582458496 	 0.28782033920288086 	 0.29609012603759766 	 0.2980368137359619 	 0.24289751052856445 	 0.2295536994934082 	 
2025-07-27 19:36:10.464008 test begin: paddle.Tensor.__neg__(Tensor([4, 435, 94, 311],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([4, 435, 94, 311],"float32"), ) 	 50867160 	 1000 	 0.29607272148132324 	 0.2982773780822754 	 0.28734397888183594 	 0.287647008895874 	 0.2962336540222168 	 0.2981433868408203 	 0.24322915077209473 	 0.2305741310119629 	 
2025-07-27 19:36:13.303081 test begin: paddle.Tensor.__neg__(Tensor([4, 81, 505, 311],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([4, 81, 505, 311],"float32"), ) 	 50885820 	 1000 	 0.2961118221282959 	 0.2984144687652588 	 0.2872507572174072 	 0.2877647876739502 	 0.29629969596862793 	 0.2983107566833496 	 0.24404406547546387 	 0.23106670379638672 	 
2025-07-27 19:36:16.154931 test begin: paddle.Tensor.__neg__(Tensor([4, 81, 94, 1669],"float32"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([4, 81, 94, 1669],"float32"), ) 	 50831064 	 1000 	 0.29602956771850586 	 0.29807353019714355 	 0.28724122047424316 	 0.28766512870788574 	 0.29616832733154297 	 0.2978515625 	 0.2436678409576416 	 0.2319347858428955 	 
2025-07-27 19:36:18.978181 test begin: paddle.Tensor.__neg__(Tensor([528, 192612],"float16"), )
[Prof] paddle.Tensor.__neg__ 	 paddle.Tensor.__neg__(Tensor([528, 192612],"float16"), ) 	 101699136 	 1000 	 0.2988405227661133 	 0.29665327072143555 	 0.28230857849121094 	 0.27987194061279297 	 0.2988450527191162 	 0.2963144779205322 	 0.23786282539367676 	 0.21814203262329102 	 
2025-07-27 19:36:23.987494 test begin: paddle.Tensor.__or__(Tensor([1, 210, 241921],"bool"), Tensor([1, 210, 241921],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 210, 241921],"bool"), Tensor([1, 210, 241921],"bool"), ) 	 101606820 	 1000 	 0.11774301528930664 	 0.11663627624511719 	 0.10925865173339844 	 0.10440921783447266 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:25.617640 test begin: paddle.Tensor.__or__(Tensor([1, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), ) 	 79380000 	 1000 	 0.1616361141204834 	 0.27806591987609863 	 0.1520547866821289 	 0.26024889945983887 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:27.154691 test begin: paddle.Tensor.__or__(Tensor([1, 218, 233043],"bool"), Tensor([1, 218, 233043],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 218, 233043],"bool"), Tensor([1, 218, 233043],"bool"), ) 	 101606748 	 1000 	 0.11772918701171875 	 0.11654329299926758 	 0.10926365852355957 	 0.10429644584655762 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:28.775490 test begin: paddle.Tensor.__or__(Tensor([1, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), ) 	 77001960 	 1000 	 0.15699458122253418 	 0.27097082138061523 	 0.1475231647491455 	 0.25641703605651855 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:30.269790 test begin: paddle.Tensor.__or__(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"bool"), ) 	 101607200 	 1000 	 0.11700868606567383 	 0.11718249320983887 	 0.10815930366516113 	 0.10490798950195312 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:31.935437 test begin: paddle.Tensor.__or__(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), ) 	 79027200 	 1000 	 0.13474392890930176 	 0.2318272590637207 	 0.12533855438232422 	 0.2188563346862793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:33.424464 test begin: paddle.Tensor.__or__(Tensor([1, 673, 75600],"bool"), Tensor([1, 673, 75600],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 673, 75600],"bool"), Tensor([1, 673, 75600],"bool"), ) 	 101757600 	 1000 	 0.11738061904907227 	 0.11985206604003906 	 0.1088247299194336 	 0.10315823554992676 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:35.056388 test begin: paddle.Tensor.__or__(Tensor([1, 720, 70644],"bool"), Tensor([1, 720, 70644],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 720, 70644],"bool"), Tensor([1, 720, 70644],"bool"), ) 	 101727360 	 1000 	 0.11785030364990234 	 0.13144659996032715 	 0.10929560661315918 	 0.1040043830871582 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:40.634348 test begin: paddle.Tensor.__or__(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"bool"), ) 	 101681664 	 1000 	 0.11781167984008789 	 0.1167609691619873 	 0.10932016372680664 	 0.10294604301452637 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:42.300054 test begin: paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"bool"), ) 	 79027200 	 1000 	 0.17513012886047363 	 0.23176193237304688 	 0.16565632820129395 	 0.21883726119995117 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:43.838999 test begin: paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), ) 	 105369600 	 1000 	 0.12114334106445312 	 0.1190958023071289 	 0.1125786304473877 	 0.10697627067565918 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:45.563634 test begin: paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([1, 210, 75600],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([1, 210, 75600],"bool"), ) 	 79380000 	 1000 	 0.21143651008605957 	 0.2839982509613037 	 0.20198297500610352 	 0.2650299072265625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:47.150119 test begin: paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), ) 	 127008000 	 1000 	 0.1459059715270996 	 0.14351320266723633 	 0.13740158081054688 	 0.13131093978881836 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:49.160723 test begin: paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([1, 218, 70644],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([1, 218, 70644],"bool"), ) 	 77001960 	 1000 	 0.20455527305603027 	 0.2692255973815918 	 0.19504189491271973 	 0.2561619281768799 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:50.684077 test begin: paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), )
[Prof] paddle.Tensor.__or__ 	 paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), ) 	 123203136 	 1000 	 0.14066362380981445 	 0.14010930061340332 	 0.13212370872497559 	 0.12793803215026855 	 None 	 None 	 None 	 None 	 
2025-07-27 19:36:52.694672 test begin: paddle.Tensor.__pow__(Tensor([23, 17, 256, 256],"float64"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([23, 17, 256, 256],"float64"), 2, ) 	 25624576 	 1000 	 0.5770645141601562 	 0.30115413665771484 	 0.5684998035430908 	 0.2795572280883789 	 0.6096992492675781 	 1.0602939128875732 	 0.5555782318115234 	 0.36119818687438965 	 
2025-07-27 19:36:56.414354 test begin: paddle.Tensor.__pow__(Tensor([24, 17, 244, 256],"float64"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([24, 17, 244, 256],"float64"), 2, ) 	 25485312 	 1000 	 0.5740070343017578 	 0.2992715835571289 	 0.5652868747711182 	 0.2819089889526367 	 0.6056480407714844 	 1.0545825958251953 	 0.5515580177307129 	 0.3592383861541748 	 
2025-07-27 19:37:00.054199 test begin: paddle.Tensor.__pow__(Tensor([24, 17, 256, 244],"float64"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([24, 17, 256, 244],"float64"), 2, ) 	 25485312 	 1000 	 0.5739946365356445 	 0.2993154525756836 	 0.5652921199798584 	 0.28203511238098145 	 0.6060962677001953 	 1.0545589923858643 	 0.5518622398376465 	 0.3593018054962158 	 
2025-07-27 19:37:05.783051 test begin: paddle.Tensor.__pow__(Tensor([24, 17, 256, 256],"float64"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([24, 17, 256, 256],"float64"), 2, ) 	 26738688 	 1000 	 0.6022157669067383 	 0.31750988960266113 	 0.5934829711914062 	 0.2968928813934326 	 0.635728120803833 	 1.1060125827789307 	 0.5816307067871094 	 0.3767547607421875 	 
2025-07-27 19:37:09.892862 test begin: paddle.Tensor.__pow__(Tensor([259, 3, 256, 256],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([259, 3, 256, 256],"float32"), 2, ) 	 50921472 	 1000 	 0.36926937103271484 	 0.2986319065093994 	 0.3602142333984375 	 0.28121256828308105 	 0.453110933303833 	 1.054863452911377 	 0.39861464500427246 	 0.35933446884155273 	 
2025-07-27 19:37:13.775956 test begin: paddle.Tensor.__pow__(Tensor([28, 32, 241, 241],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([28, 32, 241, 241],"float32"), 2, ) 	 52040576 	 1000 	 0.3773965835571289 	 0.30504751205444336 	 0.3685424327850342 	 0.2874469757080078 	 0.46243882179260254 	 1.0808937549591064 	 0.4076063632965088 	 0.2763664722442627 	 
2025-07-27 19:37:17.757828 test begin: paddle.Tensor.__pow__(Tensor([64, 13, 256, 256],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([64, 13, 256, 256],"float32"), 2, ) 	 54525952 	 1000 	 0.39513421058654785 	 0.31931281089782715 	 0.3862919807434082 	 0.3024275302886963 	 0.4848811626434326 	 1.1292645931243896 	 0.4298102855682373 	 0.3846926689147949 	 
2025-07-27 19:37:21.916071 test begin: paddle.Tensor.__pow__(Tensor([64, 3, 1034, 256],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([64, 3, 1034, 256],"float32"), 2, ) 	 50823168 	 1000 	 0.36870765686035156 	 0.29802393913269043 	 0.35985398292541504 	 0.2811925411224365 	 0.4525444507598877 	 1.0530385971069336 	 0.3977468013763428 	 0.35871362686157227 	 
2025-07-27 19:37:25.816518 test begin: paddle.Tensor.__pow__(Tensor([64, 3, 256, 1034],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([64, 3, 256, 1034],"float32"), 2, ) 	 50823168 	 1000 	 0.3685915470123291 	 0.29807353019714355 	 0.3596522808074951 	 0.2813997268676758 	 0.45256614685058594 	 1.0530593395233154 	 0.3976709842681885 	 0.3587338924407959 	 
2025-07-27 19:37:29.834518 test begin: paddle.Tensor.__pow__(Tensor([8, 110, 241, 241],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([8, 110, 241, 241],"float32"), 2, ) 	 51111280 	 1000 	 0.37093567848205566 	 0.29971885681152344 	 0.3620631694793701 	 0.2824208736419678 	 0.45444631576538086 	 1.0617778301239014 	 0.3993983268737793 	 0.27147912979125977 	 
2025-07-27 19:37:33.766362 test begin: paddle.Tensor.__pow__(Tensor([8, 32, 241, 824],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([8, 32, 241, 824],"float32"), 2, ) 	 50837504 	 1000 	 0.3687429428100586 	 0.31191277503967285 	 0.3598003387451172 	 0.28129053115844727 	 0.45273900032043457 	 1.0536160469055176 	 0.39795923233032227 	 0.3589658737182617 	 
2025-07-27 19:37:40.641636 test begin: paddle.Tensor.__pow__(Tensor([8, 32, 824, 241],"float32"), 2, )
[Prof] paddle.Tensor.__pow__ 	 paddle.Tensor.__pow__(Tensor([8, 32, 824, 241],"float32"), 2, ) 	 50837504 	 1000 	 0.36867189407348633 	 0.29819774627685547 	 0.3597991466522217 	 0.28118252754211426 	 0.4527280330657959 	 1.053325891494751 	 0.3964829444885254 	 0.35879945755004883 	 
2025-07-27 19:37:44.575659 test begin: paddle.Tensor.__radd__(Tensor([192, 104, 32, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 104, 32, 160],"float16"), 0, ) 	 102236160 	 1000 	 0.30022668838500977 	 0.2981555461883545 	 0.29173779487609863 	 0.2838287353515625 	 0.3000833988189697 	 0.05338454246520996 	 0.2481226921081543 	 4.1961669921875e-05 	 
2025-07-27 19:37:49.280868 test begin: paddle.Tensor.__radd__(Tensor([192, 128, 16, 259],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 128, 16, 259],"float16"), 0, ) 	 101842944 	 1000 	 0.29889702796936035 	 0.2969980239868164 	 0.29034972190856934 	 0.2823517322540283 	 0.29892969131469727 	 0.053170204162597656 	 0.24672675132751465 	 3.123283386230469e-05 	 
2025-07-27 19:37:54.046749 test begin: paddle.Tensor.__radd__(Tensor([192, 128, 26, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 128, 26, 160],"float16"), 0, ) 	 102236160 	 1000 	 0.3002605438232422 	 0.29811859130859375 	 0.291675329208374 	 0.28383517265319824 	 0.30001378059387207 	 0.053639888763427734 	 0.24794483184814453 	 4.696846008300781e-05 	 
2025-07-27 19:37:58.812358 test begin: paddle.Tensor.__radd__(Tensor([192, 207, 16, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 207, 16, 160],"float16"), 0, ) 	 101744640 	 1000 	 0.29865550994873047 	 0.29750823974609375 	 0.2900841236114502 	 0.2820103168487549 	 0.29861879348754883 	 0.058667898178100586 	 0.24625945091247559 	 5.14984130859375e-05 	 
2025-07-27 19:38:03.518308 test begin: paddle.Tensor.__radd__(Tensor([192, 240, 16, 138],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 240, 16, 138],"float16"), 0, ) 	 101744640 	 1000 	 0.2986929416656494 	 0.29683661460876465 	 0.28609776496887207 	 0.28217148780822754 	 0.2986462116241455 	 0.05303168296813965 	 0.24647116661071777 	 3.5762786865234375e-05 	 
2025-07-27 19:38:08.264136 test begin: paddle.Tensor.__radd__(Tensor([192, 240, 28, 80],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 240, 28, 80],"float16"), 0, ) 	 103219200 	 1000 	 0.3028137683868408 	 0.32041263580322266 	 0.29427027702331543 	 0.2751045227050781 	 0.30285120010375977 	 0.05348777770996094 	 0.25081706047058105 	 5.626678466796875e-05 	 
2025-07-27 19:38:14.538188 test begin: paddle.Tensor.__radd__(Tensor([192, 414, 16, 80],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 414, 16, 80],"float16"), 0, ) 	 101744640 	 1000 	 0.2986621856689453 	 0.2979161739349365 	 0.29016780853271484 	 0.2814054489135742 	 0.29857826232910156 	 0.05343174934387207 	 0.24522829055786133 	 4.673004150390625e-05 	 
2025-07-27 19:38:19.328434 test begin: paddle.Tensor.__radd__(Tensor([192, 64, 32, 259],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 64, 32, 259],"float16"), 0, ) 	 101842944 	 1000 	 0.29895448684692383 	 0.2970857620239258 	 0.28998661041259766 	 0.2824819087982178 	 0.2989070415496826 	 0.053648948669433594 	 0.24541211128234863 	 4.553794860839844e-05 	 
2025-07-27 19:38:24.095307 test begin: paddle.Tensor.__radd__(Tensor([192, 64, 52, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([192, 64, 52, 160],"float16"), 0, ) 	 102236160 	 1000 	 0.30025458335876465 	 0.29814577102661133 	 0.2916991710662842 	 0.283977746963501 	 0.3000216484069824 	 0.053311824798583984 	 0.24626851081848145 	 3.170967102050781e-05 	 
2025-07-27 19:38:28.922378 test begin: paddle.Tensor.__radd__(Tensor([311, 128, 16, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([311, 128, 16, 160],"float16"), 0, ) 	 101908480 	 1000 	 0.29909801483154297 	 0.2972080707550049 	 0.2905261516571045 	 0.2826528549194336 	 0.29915761947631836 	 0.053436994552612305 	 0.24695801734924316 	 5.030632019042969e-05 	 
2025-07-27 19:38:33.655644 test begin: paddle.Tensor.__radd__(Tensor([311, 64, 32, 160],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([311, 64, 32, 160],"float16"), 0, ) 	 101908480 	 1000 	 0.29908084869384766 	 0.7621891498565674 	 0.29058408737182617 	 0.2825808525085449 	 0.29914093017578125 	 0.05455660820007324 	 0.24456000328063965 	 0.00010919570922851562 	 
2025-07-27 19:38:40.522955 test begin: paddle.Tensor.__radd__(Tensor([331, 240, 16, 80],"float16"), 0, )
[Prof] paddle.Tensor.__radd__ 	 paddle.Tensor.__radd__(Tensor([331, 240, 16, 80],"float16"), 0, ) 	 101683200 	 1000 	 0.29843735694885254 	 0.29948925971984863 	 0.28966832160949707 	 0.28232812881469727 	 0.29857563972473145 	 0.05316448211669922 	 0.24586701393127441 	 3.0994415283203125e-05 	 
2025-07-27 19:38:45.295283 test begin: paddle.Tensor.__rlshift__(Tensor([169345, 300],"int32"), -223, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([169345, 300],"int32"), -223, ) 	 50803500 	 1000 	 0.29860615730285645 	 0.2979271411895752 	 0.15251612663269043 	 0.2708773612976074 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:46.470649 test begin: paddle.Tensor.__rlshift__(Tensor([200, 254017],"int32"), -223, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([200, 254017],"int32"), -223, ) 	 50803400 	 1000 	 0.2986612319946289 	 0.29798340797424316 	 0.15251421928405762 	 0.270876407623291 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:47.644309 test begin: paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), -212, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), -212, ) 	 101606600 	 1000 	 0.33879852294921875 	 0.30213189125061035 	 0.0003082752227783203 	 0.2679893970489502 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:49.278033 test begin: paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), 63, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), 63, ) 	 101606600 	 1000 	 0.33926963806152344 	 0.2952091693878174 	 0.00030732154846191406 	 0.2683591842651367 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:50.902895 test begin: paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), -212, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), -212, ) 	 101606700 	 1000 	 0.3346683979034424 	 0.29511523246765137 	 0.0003082752227783203 	 0.2755115032196045 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:52.533342 test begin: paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), 63, )
[Prof] paddle.Tensor.__rlshift__ 	 paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), 63, ) 	 101606700 	 1000 	 0.33606743812561035 	 0.3024160861968994 	 0.0003018379211425781 	 0.275590181350708 	 None 	 None 	 None 	 None 	 
2025-07-27 19:38:54.157396 test begin: paddle.Tensor.__rmatmul__(Tensor([10160641, 5],"float32"), Tensor([2, 10160641],"float32"), )
[Prof] paddle.Tensor.__rmatmul__ 	 paddle.Tensor.__rmatmul__(Tensor([10160641, 5],"float32"), Tensor([2, 10160641],"float32"), ) 	 71124487 	 1000 	 1.3851583003997803 	 1.3847694396972656 	 0.7078063488006592 	 0.707599401473999 	 2.0927934646606445 	 2.0923969745635986 	 0.10690569877624512 	 0.10687255859375 	 
2025-07-27 19:39:02.363153 test begin: paddle.Tensor.__rmatmul__(Tensor([25401601, 5],"float32"), Tensor([2, 25401601],"float32"), )
[Prof] paddle.Tensor.__rmatmul__ 	 paddle.Tensor.__rmatmul__(Tensor([25401601, 5],"float32"), Tensor([2, 25401601],"float32"), ) 	 177811207 	 1000 	 3.3993139266967773 	 3.396240711212158 	 1.7370331287384033 	 1.7356011867523193 	 5.230762958526611 	 5.231648921966553 	 0.10689806938171387 	 0.10691070556640625 	 
2025-07-27 19:39:22.675526 test begin: paddle.Tensor.__rmatmul__(Tensor([3, 16934401],"float32"), Tensor([2, 3],"float32"), )
[Prof] paddle.Tensor.__rmatmul__ 	 paddle.Tensor.__rmatmul__(Tensor([3, 16934401],"float32"), Tensor([2, 3],"float32"), ) 	 50803209 	 1000 	 0.7629303932189941 	 0.7682020664215088 	 0.04583382606506348 	 0.045970916748046875 	 4.098805904388428 	 4.094677209854126 	 0.21870899200439453 	 0.22066617012023926 	 
2025-07-27 19:39:33.906360 test begin: paddle.Tensor.__rmatmul__(Tensor([3, 5],"float32"), Tensor([16934401, 3],"float32"), )
[Prof] paddle.Tensor.__rmatmul__ 	 paddle.Tensor.__rmatmul__(Tensor([3, 5],"float32"), Tensor([16934401, 3],"float32"), ) 	 50803218 	 1000 	 1.7835421562194824 	 1.784487009048462 	 0.10711932182312012 	 0.10719847679138184 	 4.186175346374512 	 4.18726921081543 	 0.22564029693603516 	 0.2234499454498291 	 
2025-07-27 19:39:48.127892 test begin: paddle.Tensor.__rmod__(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), )
[Prof] paddle.Tensor.__rmod__ 	 paddle.Tensor.__rmod__(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), ) 	 101606412 	 1000 	 0.45046544075012207 	 0.44928646087646484 	 0.4411036968231201 	 0.43326807022094727 	 1.1086513996124268 	 1.1969928741455078 	 1.0471861362457275 	 0.40773820877075195 	 
2025-07-27 19:39:53.830287 test begin: paddle.Tensor.__rmod__(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), )
[Prof] paddle.Tensor.__rmod__ 	 paddle.Tensor.__rmod__(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), ) 	 101606416 	 1000 	 0.45031309127807617 	 0.4493393898010254 	 0.44083380699157715 	 0.433577299118042 	 1.1086292266845703 	 1.1969611644744873 	 1.0462660789489746 	 0.40767407417297363 	 
2025-07-27 19:39:59.558339 test begin: paddle.Tensor.__rmod__(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), )
[Prof] paddle.Tensor.__rmod__ 	 paddle.Tensor.__rmod__(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), ) 	 101606424 	 1000 	 0.4504079818725586 	 0.4493401050567627 	 0.4410231113433838 	 0.43340063095092773 	 1.1085331439971924 	 1.1969044208526611 	 1.0473878383636475 	 0.40758562088012695 	 
2025-07-27 19:40:05.257063 test begin: paddle.Tensor.__rmul__(Tensor([176, 392, 737],"float32"), -100.0, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([176, 392, 737],"float32"), -100.0, ) 	 50847104 	 1000 	 0.29575085639953613 	 0.2982032299041748 	 0.28698158264160156 	 0.2839012145996094 	 0.29598307609558105 	 0.2979915142059326 	 0.24309086799621582 	 0.23022890090942383 	 
2025-07-27 19:40:08.082758 test begin: paddle.Tensor.__rmul__(Tensor([176, 737, 392],"float32"), -100.0, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([176, 737, 392],"float32"), -100.0, ) 	 50847104 	 1000 	 0.2958555221557617 	 0.30026888847351074 	 0.28694725036621094 	 0.2835240364074707 	 0.29602599143981934 	 0.29799389839172363 	 0.24359369277954102 	 0.22528648376464844 	 
2025-07-27 19:40:10.950545 test begin: paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 0.75, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 0.75, ) 	 50868000 	 1000 	 0.29607319831848145 	 0.298295259475708 	 0.2873044013977051 	 0.28373169898986816 	 0.2962353229522705 	 0.2981889247894287 	 0.24406194686889648 	 0.23107576370239258 	 
2025-07-27 19:40:13.784161 test begin: paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 1.0, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 1.0, ) 	 50868000 	 1000 	 0.2960817813873291 	 0.2983272075653076 	 0.28740501403808594 	 0.28389787673950195 	 0.2961750030517578 	 0.29815244674682617 	 0.2441551685333252 	 0.23122572898864746 	 
2025-07-27 19:40:16.628706 test begin: paddle.Tensor.__rmul__(Tensor([331, 392, 392],"float32"), -100.0, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([331, 392, 392],"float32"), -100.0, ) 	 50862784 	 1000 	 0.29602646827697754 	 0.29823803901672363 	 0.28714823722839355 	 0.2836897373199463 	 0.29629969596862793 	 0.29819822311401367 	 0.24391722679138184 	 0.2306210994720459 	 
2025-07-27 19:40:19.502059 test begin: paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 0.75, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 0.75, ) 	 50803280 	 1000 	 0.29552340507507324 	 0.30533266067504883 	 0.28686046600341797 	 0.2838287353515625 	 0.29565906524658203 	 0.2977733612060547 	 0.23743081092834473 	 0.23045849800109863 	 
2025-07-27 19:40:25.241603 test begin: paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 1.0, )
[Prof] paddle.Tensor.__rmul__ 	 paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 1.0, ) 	 50803280 	 1000 	 0.2954707145690918 	 0.29798460006713867 	 0.28591489791870117 	 0.28383827209472656 	 0.29575490951538086 	 0.29780006408691406 	 0.2434835433959961 	 0.23116183280944824 	 
2025-07-27 19:40:28.068318 test begin: paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), 5, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), 5, ) 	 50803206 	 1000 	 0.29886341094970703 	 0.2990133762359619 	 0.15263605117797852 	 0.2833237648010254 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:29.255320 test begin: paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), True, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), True, ) 	 50803206 	 1000 	 0.2987196445465088 	 0.298048734664917 	 0.15259981155395508 	 0.28235292434692383 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:30.433208 test begin: paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), 5, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), 5, ) 	 50803210 	 1000 	 0.2987020015716553 	 0.29792237281799316 	 0.1525735855102539 	 0.28226375579833984 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:31.608492 test begin: paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), True, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), True, ) 	 50803210 	 1000 	 0.29871654510498047 	 0.297929048538208 	 0.1525726318359375 	 0.28331565856933594 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:32.800517 test begin: paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), 5, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), 5, ) 	 50803215 	 1000 	 0.2986910343170166 	 0.29955363273620605 	 0.15256786346435547 	 0.28346896171569824 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:33.993396 test begin: paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), True, )
[Prof] paddle.Tensor.__ror__ 	 paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), True, ) 	 50803215 	 1000 	 0.2987222671508789 	 0.29798364639282227 	 0.15260577201843262 	 0.28330469131469727 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:35.179321 test begin: paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000, )
[Prof] paddle.Tensor.__rpow__ 	 paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000, ) 	 50803201 	 1000 	 0.5844180583953857 	 0.8724477291107178 	 0.298586368560791 	 0.3217954635620117 	 0.7022230625152588 	 0.7431740760803223 	 0.6483540534973145 	 0.3796977996826172 	 
2025-07-27 19:40:42.275348 test begin: paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000.0, )
[Prof] paddle.Tensor.__rpow__ 	 paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000.0, ) 	 50803201 	 1000 	 0.5843727588653564 	 0.6439030170440674 	 0.29857587814331055 	 0.3289010524749756 	 0.7021605968475342 	 0.7431390285491943 	 0.6466009616851807 	 0.3796558380126953 	 
2025-07-27 19:40:46.693390 test begin: paddle.Tensor.__rrshift__(Tensor([169345, 300],"int32"), 232, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([169345, 300],"int32"), 232, ) 	 50803500 	 1000 	 0.29854798316955566 	 0.3061330318450928 	 0.15248942375183105 	 0.2785768508911133 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:47.886805 test begin: paddle.Tensor.__rrshift__(Tensor([200, 254017],"int32"), 232, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([200, 254017],"int32"), 232, ) 	 50803400 	 1000 	 0.29853248596191406 	 0.29793453216552734 	 0.1524801254272461 	 0.2784757614135742 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:49.068257 test begin: paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), -255, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), -255, ) 	 101606600 	 1000 	 0.3382730484008789 	 0.29628419876098633 	 0.0003097057342529297 	 0.2729651927947998 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:50.686043 test begin: paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), 11, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), 11, ) 	 101606600 	 1000 	 0.3387722969055176 	 0.29621338844299316 	 0.0003027915954589844 	 0.2766885757446289 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:52.297599 test begin: paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), -255, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), -255, ) 	 101606700 	 1000 	 0.3383357524871826 	 0.2962181568145752 	 0.0003032684326171875 	 0.2768399715423584 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:53.924770 test begin: paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), 11, )
[Prof] paddle.Tensor.__rrshift__ 	 paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), 11, ) 	 101606700 	 1000 	 0.3393268585205078 	 0.29618310928344727 	 0.00031065940856933594 	 0.2765820026397705 	 None 	 None 	 None 	 None 	 
2025-07-27 19:40:55.552208 test begin: paddle.Tensor.__rshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), ) 	 101607000 	 1000 	 0.44980287551879883 	 0.44681811332702637 	 0.44066667556762695 	 0.43473386764526367 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:40:57.602186 test begin: paddle.Tensor.__rshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), ) 	 101606800 	 1000 	 0.4502251148223877 	 0.446763277053833 	 0.4412252902984619 	 0.43494510650634766 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:40:59.680214 test begin: paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), ) 	 203213200 	 1000 	 0.44746923446655273 	 0.4502105712890625 	 0.4384636878967285 	 0.43825459480285645 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:41:02.600263 test begin: paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, ) 	 203213200 	 1000 	 0.44791245460510254 	 3.117255926132202 	 0.4381880760192871 	 0.3536550998687744 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:41:08.636169 test begin: paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), ) 	 203213400 	 1000 	 0.4470956325531006 	 0.46790361404418945 	 0.43815088272094727 	 0.43119263648986816 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:41:12.595490 test begin: paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
[Prof] paddle.Tensor.__rshift__ 	 paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, ) 	 203213400 	 1000 	 0.447925329208374 	 3.1126933097839355 	 0.4314441680908203 	 0.3535890579223633 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:41:18.166469 test begin: paddle.Tensor.__rsub__(Tensor([2, 1, 12404, 4096],"float16"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([2, 1, 12404, 4096],"float16"), 1, ) 	 101613568 	 1000 	 0.29818248748779297 	 0.2964513301849365 	 0.2819843292236328 	 0.26994824409484863 	 0.2982971668243408 	 0.29610753059387207 	 0.22855877876281738 	 0.21898412704467773 	 
2025-07-27 19:41:23.198989 test begin: paddle.Tensor.__rsub__(Tensor([2, 1, 4096, 12404],"float16"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([2, 1, 4096, 12404],"float16"), 1, ) 	 101613568 	 1000 	 0.29873180389404297 	 0.30913758277893066 	 0.28259730339050293 	 0.27704381942749023 	 0.2982761859893799 	 0.29616427421569824 	 0.23742246627807617 	 0.2246842384338379 	 
2025-07-27 19:41:28.954443 test begin: paddle.Tensor.__rsub__(Tensor([2, 4, 4096, 4096],"float16"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([2, 4, 4096, 4096],"float16"), 1, ) 	 134217728 	 1000 	 0.39253759384155273 	 0.39019346237182617 	 0.376267671585083 	 0.3628218173980713 	 0.39243578910827637 	 0.38999509811401367 	 0.3311021327972412 	 0.315138578414917 	 
2025-07-27 19:41:37.836957 test begin: paddle.Tensor.__rsub__(Tensor([2944, 17257],"float32"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([2944, 17257],"float32"), 1, ) 	 50804608 	 1000 	 0.29554271697998047 	 0.308178186416626 	 0.27939748764038086 	 0.2713329792022705 	 0.2956697940826416 	 0.2978396415710449 	 0.234710693359375 	 0.22245287895202637 	 
2025-07-27 19:41:41.222024 test begin: paddle.Tensor.__rsub__(Tensor([4224, 12028],"float32"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([4224, 12028],"float32"), 1, ) 	 50806272 	 1000 	 0.2957148551940918 	 0.2979435920715332 	 0.28685593605041504 	 0.2790553569793701 	 0.29604649543762207 	 0.2977559566497803 	 0.2435779571533203 	 0.2327404022216797 	 
2025-07-27 19:41:44.127907 test begin: paddle.Tensor.__rsub__(Tensor([7, 1, 4096, 4096],"float16"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([7, 1, 4096, 4096],"float16"), 1, ) 	 117440512 	 1000 	 0.34389543533325195 	 0.34187984466552734 	 0.33507704734802246 	 0.3227570056915283 	 0.3441166877746582 	 0.3415687084197998 	 0.2920215129852295 	 0.27588677406311035 	 
2025-07-27 19:41:49.850498 test begin: paddle.Tensor.__rsub__(Tensor([7664, 6629],"float32"), 1, )
[Prof] paddle.Tensor.__rsub__ 	 paddle.Tensor.__rsub__(Tensor([7664, 6629],"float32"), 1, ) 	 50804656 	 1000 	 0.29576969146728516 	 0.3026411533355713 	 0.2869877815246582 	 0.2788355350494385 	 0.2959902286529541 	 0.29773736000061035 	 0.2431807518005371 	 0.2324831485748291 	 
2025-07-27 19:41:52.712183 test begin: paddle.Tensor.__rtruediv__(Tensor([15548, 3268],"float32"), 1.0, )
[Prof] paddle.Tensor.__rtruediv__ 	 paddle.Tensor.__rtruediv__(Tensor([15548, 3268],"float32"), 1.0, ) 	 50810864 	 1000 	 0.5846290588378906 	 0.5960652828216553 	 0.29865503311157227 	 0.30452442169189453 	 0.5857882499694824 	 1.33829927444458 	 0.5286054611206055 	 0.3419640064239502 	 
2025-07-27 19:41:57.478365 test begin: paddle.Tensor.__rtruediv__(Tensor([16773, 3029],"float32"), 1.0, )
[Prof] paddle.Tensor.__rtruediv__ 	 paddle.Tensor.__rtruediv__(Tensor([16773, 3029],"float32"), 1.0, ) 	 50805417 	 1000 	 0.5844347476959229 	 0.5960915088653564 	 0.29862308502197266 	 0.3045053482055664 	 0.5856492519378662 	 1.3382575511932373 	 0.5241928100585938 	 0.34198760986328125 	 
2025-07-27 19:42:02.285240 test begin: paddle.Tensor.__rtruediv__(Tensor([26736, 1901],"float32"), 1.0, )
[Prof] paddle.Tensor.__rtruediv__ 	 paddle.Tensor.__rtruediv__(Tensor([26736, 1901],"float32"), 1.0, ) 	 50825136 	 1000 	 0.5845339298248291 	 0.5962138175964355 	 0.29871535301208496 	 0.30457043647766113 	 0.5857739448547363 	 1.3388261795043945 	 0.5285429954528809 	 0.3420734405517578 	 
2025-07-27 19:42:07.052056 test begin: paddle.Tensor.__rtruediv__(Tensor([37411, 1358],"float32"), 1.0, )
[Prof] paddle.Tensor.__rtruediv__ 	 paddle.Tensor.__rtruediv__(Tensor([37411, 1358],"float32"), 1.0, ) 	 50804138 	 1000 	 0.5844697952270508 	 0.5960078239440918 	 0.2986142635345459 	 0.3045012950897217 	 0.5855410099029541 	 1.338167667388916 	 0.5206718444824219 	 0.34195590019226074 	 
2025-07-27 19:42:11.861798 test begin: paddle.Tensor.__rtruediv__(Tensor([6684, 7601],"float32"), 1.0, )
[Prof] paddle.Tensor.__rtruediv__ 	 paddle.Tensor.__rtruediv__(Tensor([6684, 7601],"float32"), 1.0, ) 	 50805084 	 1000 	 0.5840966701507568 	 0.5960512161254883 	 0.2984507083892822 	 0.3044874668121338 	 0.5855312347412109 	 1.338125228881836 	 0.5282809734344482 	 0.34192848205566406 	 
2025-07-27 19:42:16.628370 test begin: paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), 5, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), 5, ) 	 50803206 	 1000 	 0.29879117012023926 	 0.2979753017425537 	 0.15264391899108887 	 0.2834925651550293 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:17.798415 test begin: paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), True, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), True, ) 	 50803206 	 1000 	 0.2987382411956787 	 0.29798245429992676 	 0.15259146690368652 	 0.28158998489379883 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:18.989034 test begin: paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), 5, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), 5, ) 	 50803210 	 1000 	 0.2987339496612549 	 0.2980320453643799 	 0.15259838104248047 	 0.2781715393066406 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:20.188267 test begin: paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), True, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), True, ) 	 50803210 	 1000 	 0.29866719245910645 	 0.3013927936553955 	 0.1525561809539795 	 0.28339171409606934 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:21.359168 test begin: paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), 5, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), 5, ) 	 50803215 	 1000 	 0.2987234592437744 	 0.2980191707611084 	 0.15261292457580566 	 0.28316736221313477 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:22.523141 test begin: paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), True, )
[Prof] paddle.Tensor.__rxor__ 	 paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), True, ) 	 50803215 	 1000 	 0.2987203598022461 	 0.297976016998291 	 0.15258383750915527 	 0.283372163772583 	 None 	 None 	 None 	 None 	 
2025-07-27 19:42:23.691122 test begin: paddle.Tensor.__sub__(Tensor([1, 1, 32768, 32768],"float16"), 1, )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([1, 1, 32768, 32768],"float16"), 1, ) 	 1073741824 	 1000 	 3.1046342849731445 	 3.091670274734497 	 3.0960302352905273 	 3.076611280441284 	 3.1048941612243652 	 0.05398392677307129 	 3.051909923553467 	 4.4345855712890625e-05 	 
2025-07-27 19:43:13.978532 test begin: paddle.Tensor.__sub__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), ) 	 52174848 	 1000 	 0.30408263206481934 	 0.31601524353027344 	 0.2940175533294678 	 0.3033907413482666 	 0.5344772338867188 	 0.45542025566101074 	 0.2730579376220703 	 0.23266339302062988 	 
2025-07-27 19:43:17.313231 test begin: paddle.Tensor.__sub__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), ) 	 52174848 	 1000 	 0.3040745258331299 	 0.31601476669311523 	 0.2938218116760254 	 0.3032705783843994 	 0.53450608253479 	 0.4553961753845215 	 0.2730379104614258 	 0.23264408111572266 	 
2025-07-27 19:43:20.595801 test begin: paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), ) 	 53084160 	 1000 	 0.30606770515441895 	 0.31937241554260254 	 0.2958242893218994 	 0.30673789978027344 	 0.4860658645629883 	 0.4620528221130371 	 0.24832510948181152 	 0.2360668182373047 	 
2025-07-27 19:43:23.969651 test begin: paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), ) 	 103809024 	 1000 	 0.45968198776245117 	 0.4563405513763428 	 0.4506032466888428 	 0.4433102607727051 	 0.4841604232788086 	 0.3040173053741455 	 0.42545604705810547 	 0.2179572582244873 	 
2025-07-27 19:43:28.196768 test begin: paddle.Tensor.__sub__(Tensor([2, 1, 1551, 32768],"float16"), 1, )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([2, 1, 1551, 32768],"float16"), 1, ) 	 101646336 	 1000 	 0.29831767082214355 	 0.29648804664611816 	 0.2897181510925293 	 0.2822082042694092 	 0.2984049320220947 	 0.05959010124206543 	 0.24563384056091309 	 6.508827209472656e-05 	 
2025-07-27 19:43:32.978460 test begin: paddle.Tensor.__sub__(Tensor([2, 1, 32768, 1551],"float16"), 1, )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([2, 1, 32768, 1551],"float16"), 1, ) 	 101646336 	 1000 	 0.2983283996582031 	 1.2458412647247314 	 0.2821168899536133 	 0.28209376335144043 	 0.2984175682067871 	 0.060836076736450195 	 0.23758435249328613 	 5.030632019042969e-05 	 
2025-07-27 19:43:39.920634 test begin: paddle.Tensor.__sub__(Tensor([2, 1, 32768, 32768],"float16"), 1, )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([2, 1, 32768, 32768],"float16"), 1, ) 	 2147483648 	 1000 	 6.205903768539429 	 6.184418439865112 	 6.196666479110718 	 3.1592602729797363 	 6.206435918807983 	 0.06566429138183594 	 6.154582262039185 	 5.984306335449219e-05 	 
2025-07-27 19:45:20.431345 test begin: paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 1],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 1],"float32"), ) 	 161966688 	 1000 	 0.7147221565246582 	 0.7084441184997559 	 0.6981253623962402 	 0.6896388530731201 	 0.7584002017974854 	 0.47132015228271484 	 0.6792795658111572 	 0.37064290046691895 	 
2025-07-27 19:45:27.062306 test begin: paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 2],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 2],"float32"), ) 	 242950032 	 1000 	 1.174199104309082 	 1.892226219177246 	 1.1563549041748047 	 1.1843879222869873 	 2.3865809440612793 	 2.465254545211792 	 1.2195618152618408 	 1.2597343921661377 	 
2025-07-27 19:45:43.738247 test begin: paddle.Tensor.__sub__(Tensor([26736, 3029, 2],"float32"), Tensor([26736, 3029, 1],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([26736, 3029, 2],"float32"), Tensor([26736, 3029, 1],"float32"), ) 	 242950032 	 1000 	 1.173518419265747 	 1.2155709266662598 	 1.1557469367980957 	 1.1772878170013428 	 2.228433847427368 	 2.4690937995910645 	 0.7589507102966309 	 1.2617251873016357 	 
2025-07-27 19:45:58.367666 test begin: paddle.Tensor.__sub__(Tensor([26736, 951, 2],"float32"), Tensor([26736, 951, 2],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([26736, 951, 2],"float32"), Tensor([26736, 951, 2],"float32"), ) 	 101703744 	 1000 	 0.4500725269317627 	 0.44719433784484863 	 0.43331432342529297 	 0.42874932289123535 	 0.4758737087249756 	 0.2979733943939209 	 0.4077737331390381 	 0.2186107635498047 	 
2025-07-27 19:46:02.568267 test begin: paddle.Tensor.__sub__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), ) 	 51581952 	 1000 	 0.300229549407959 	 0.3122527599334717 	 0.28237342834472656 	 0.2928733825683594 	 0.4792349338531494 	 0.4504566192626953 	 0.2448270320892334 	 0.23012328147888184 	 
2025-07-27 19:46:05.784681 test begin: paddle.Tensor.__sub__(Tensor([8387, 3029, 2],"float32"), Tensor([8387, 3029, 2],"float32"), )
[Prof] paddle.Tensor.__sub__ 	 paddle.Tensor.__sub__(Tensor([8387, 3029, 2],"float32"), Tensor([8387, 3029, 2],"float32"), ) 	 101616892 	 1000 	 0.44995570182800293 	 0.4468343257904053 	 0.43325233459472656 	 0.4250366687774658 	 0.47518181800842285 	 0.2976658344268799 	 0.40718674659729004 	 0.22513365745544434 	 
2025-07-27 19:46:09.958194 test begin: paddle.Tensor.__truediv__(Tensor([124, 128, 34, 96],"float32"), Tensor([124, 1, 34, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([124, 128, 34, 96],"float32"), Tensor([124, 1, 34, 96],"float32"), ) 	 52210944 	 1000 	 0.304166316986084 	 0.3242311477661133 	 0.28624892234802246 	 0.3052244186401367 	 0.8178670406341553 	 1.886777639389038 	 0.4178466796875 	 0.321197509765625 	 
2025-07-27 19:46:14.985396 test begin: paddle.Tensor.__truediv__(Tensor([124, 128, 96, 34],"float32"), Tensor([124, 1, 96, 34],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([124, 128, 96, 34],"float32"), Tensor([124, 1, 96, 34],"float32"), ) 	 52210944 	 1000 	 0.30419230461120605 	 0.32411789894104004 	 0.2847731113433838 	 0.3051283359527588 	 0.8178095817565918 	 1.8867712020874023 	 0.4178333282470703 	 0.3212094306945801 	 
2025-07-27 19:46:20.057904 test begin: paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 1, 96, 96],"float32"), ) 	 52568064 	 1000 	 0.3037078380584717 	 0.32410120964050293 	 0.2857346534729004 	 0.30475449562072754 	 0.7707695960998535 	 1.8863146305084229 	 0.3938121795654297 	 0.3211679458618164 	 
2025-07-27 19:46:25.190870 test begin: paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 45, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 45, 96, 96],"float32"), ) 	 102850560 	 1000 	 0.45560765266418457 	 0.45522499084472656 	 0.4386484622955322 	 0.4367659091949463 	 1.1166455745697021 	 2.1151974201202393 	 1.0449273586273193 	 0.4323585033416748 	 
2025-07-27 19:46:31.911988 test begin: paddle.Tensor.__truediv__(Tensor([128, 128, 33, 96],"float32"), Tensor([128, 1, 33, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 128, 33, 96],"float32"), Tensor([128, 1, 33, 96],"float32"), ) 	 52310016 	 1000 	 0.3047349452972412 	 0.3248939514160156 	 0.28679347038269043 	 0.30572009086608887 	 0.8110177516937256 	 1.8911147117614746 	 0.4144246578216553 	 0.32194995880126953 	 
2025-07-27 19:46:37.595364 test begin: paddle.Tensor.__truediv__(Tensor([128, 128, 96, 33],"float32"), Tensor([128, 1, 96, 33],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 128, 96, 33],"float32"), Tensor([128, 1, 96, 33],"float32"), ) 	 52310016 	 1000 	 0.3047816753387451 	 0.33445119857788086 	 0.286790132522583 	 0.3059096336364746 	 0.8110132217407227 	 1.8910109996795654 	 0.4143805503845215 	 0.3219437599182129 	 
2025-07-27 19:46:42.640551 test begin: paddle.Tensor.__truediv__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), ) 	 52174848 	 1000 	 0.3045504093170166 	 0.32422924041748047 	 0.2866055965423584 	 0.3052544593811035 	 0.8234753608703613 	 1.8874797821044922 	 0.4207437038421631 	 0.3213186264038086 	 
2025-07-27 19:46:47.673671 test begin: paddle.Tensor.__truediv__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), ) 	 52174848 	 1000 	 0.3045520782470703 	 0.32426977157592773 	 0.28656959533691406 	 0.30075836181640625 	 0.8235242366790771 	 1.8875224590301514 	 0.42078375816345215 	 0.32132768630981445 	 
2025-07-27 19:46:52.710165 test begin: paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), ) 	 53084160 	 1000 	 0.30640363693237305 	 0.327195405960083 	 0.28836727142333984 	 0.3081037998199463 	 0.778207540512085 	 1.9013519287109375 	 0.3975844383239746 	 0.3236558437347412 	 
2025-07-27 19:46:59.356638 test begin: paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), ) 	 103809024 	 1000 	 0.45982909202575684 	 0.45943474769592285 	 0.44309210777282715 	 0.44114017486572266 	 1.1310725212097168 	 2.1348206996917725 	 1.0593030452728271 	 0.43634915351867676 	 
2025-07-27 19:47:06.110632 test begin: paddle.Tensor.__truediv__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), ) 	 51581952 	 1000 	 0.30030369758605957 	 0.32047510147094727 	 0.2805361747741699 	 0.3014352321624756 	 0.7653028964996338 	 1.8659048080444336 	 0.3910377025604248 	 0.31763362884521484 	 
2025-07-27 19:47:11.081095 test begin: paddle.Tensor.__truediv__(Tensor([44, 128, 96, 96],"float32"), Tensor([44, 1, 96, 96],"float32"), )
[Prof] paddle.Tensor.__truediv__ 	 paddle.Tensor.__truediv__(Tensor([44, 128, 96, 96],"float32"), Tensor([44, 1, 96, 96],"float32"), ) 	 52310016 	 1000 	 0.3040189743041992 	 0.3263242244720459 	 0.28602170944213867 	 0.3058140277862549 	 0.7754526138305664 	 1.8891241550445557 	 0.3961777687072754 	 0.32166099548339844 	 
2025-07-27 19:47:16.111369 test begin: paddle.Tensor.__xor__(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.4482290744781494 	 0.4503762722015381 	 0.43968915939331055 	 0.43809056282043457 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:18.986198 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.4483151435852051 	 0.4503192901611328 	 0.4397552013397217 	 0.4378960132598877 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:21.850072 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.44823145866394043 	 0.4503450393676758 	 0.43967175483703613 	 0.43796324729919434 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:24.701864 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), ) 	 203213880 	 1000 	 0.44818115234375 	 0.4503498077392578 	 0.43970632553100586 	 0.4371938705444336 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:27.591549 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), ) 	 101607264 	 1000 	 0.11701345443725586 	 0.11751961708068848 	 0.10852408409118652 	 0.10510492324829102 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:29.260183 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), ) 	 101607264 	 1000 	 0.44989562034606934 	 0.44863176345825195 	 0.44138121604919434 	 0.43453001976013184 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:31.340604 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), ) 	 203213664 	 1000 	 0.44811201095581055 	 0.4540984630584717 	 0.4395287036895752 	 0.437941312789917 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:34.306424 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.16823077201843262 	 0.23056507110595703 	 0.1588141918182373 	 0.21261024475097656 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:40.030526 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.3142890930175781 	 0.48523497581481934 	 0.3048396110534668 	 0.46611881256103516 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:41.850513 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29633355140686035 	 0.3080620765686035 	 0.28673243522644043 	 0.2946324348449707 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:43.045382 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), ) 	 101608560 	 1000 	 0.11775660514831543 	 0.12386059761047363 	 0.10910177230834961 	 0.10382580757141113 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:44.693722 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), ) 	 101608560 	 1000 	 0.4499342441558838 	 0.4467766284942627 	 0.4413936138153076 	 0.4346754550933838 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:46.758536 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), ) 	 203214960 	 1000 	 0.44816040992736816 	 0.4511067867279053 	 0.43957090377807617 	 0.43441247940063477 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:49.617279 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.1769106388092041 	 0.2274036407470703 	 0.16743898391723633 	 0.21392250061035156 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:50.729236 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 101610720 	 1000 	 0.11773371696472168 	 0.11637568473815918 	 0.10897040367126465 	 0.10415792465209961 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:52.362322 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29555797576904297 	 0.3081326484680176 	 0.2860691547393799 	 0.2947402000427246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:53.554936 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 101610720 	 1000 	 0.45011448860168457 	 0.4469418525695801 	 0.4415116310119629 	 0.43471384048461914 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:55.643126 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.34549546241760254 	 0.47856712341308594 	 0.3360297679901123 	 0.4650120735168457 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:57.453441 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 203217120 	 1000 	 0.448103666305542 	 0.45485448837280273 	 0.43948984146118164 	 0.4377608299255371 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:00.329374 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), ) 	 101607480 	 1000 	 0.11776971817016602 	 0.11811041831970215 	 0.1091454029083252 	 0.10301971435546875 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:02.034167 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), ) 	 101607480 	 1000 	 0.44999027252197266 	 0.44678211212158203 	 0.4413745403289795 	 0.43451571464538574 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:05.084555 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11771535873413086 	 0.12527799606323242 	 0.10898542404174805 	 0.09425711631774902 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:07.787399 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4501607418060303 	 0.4467346668243408 	 0.44153881072998047 	 0.43453311920166016 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:09.874804 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11774444580078125 	 0.11541318893432617 	 0.10879635810852051 	 0.10255074501037598 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:11.566238 test begin: paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45020484924316406 	 0.4468209743499756 	 0.4348130226135254 	 0.42780280113220215 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:13.617416 test begin: paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11775350570678711 	 0.1154181957244873 	 0.10215973854064941 	 0.09046268463134766 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:15.243375 test begin: paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4501776695251465 	 0.44676804542541504 	 0.434689998626709 	 0.4278831481933594 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:17.300522 test begin: paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101608560 	 1000 	 0.1177215576171875 	 0.11937880516052246 	 0.10216712951660156 	 0.0972893238067627 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:18.979488 test begin: paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101608560 	 1000 	 0.4497947692871094 	 0.44683027267456055 	 0.434283971786499 	 0.426666259765625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:21.056715 test begin: paddle.Tensor.__xor__(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.Tensor.__xor__ 	 paddle.Tensor.__xor__(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214960 	 1000 	 0.4481077194213867 	 0.45037317276000977 	 0.4327085018157959 	 0.43144726753234863 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:24.029847 test begin: paddle.Tensor.abs(Tensor([243360, 209],"float32"), )
[Prof] paddle.Tensor.abs 	 paddle.Tensor.abs(Tensor([243360, 209],"float32"), ) 	 50862240 	 1000 	 0.29611802101135254 	 0.2982776165008545 	 0.27983903884887695 	 0.27876758575439453 	 0.45050978660583496 	 0.7439017295837402 	 0.3741574287414551 	 0.38006591796875 	 
2025-07-27 19:48:27.558156 test begin: paddle.Tensor.abs(Tensor([282240, 181],"float32"), )
[Prof] paddle.Tensor.abs 	 paddle.Tensor.abs(Tensor([282240, 181],"float32"), ) 	 51085440 	 1000 	 0.2973012924194336 	 0.30121493339538574 	 0.2811622619628906 	 0.28008532524108887 	 0.45207762718200684 	 0.7469227313995361 	 0.3885786533355713 	 0.3816251754760742 	 
2025-07-27 19:48:31.029438 test begin: paddle.Tensor.abs(Tensor([324000, 157],"float32"), )
[Prof] paddle.Tensor.abs 	 paddle.Tensor.abs(Tensor([324000, 157],"float32"), ) 	 50868000 	 1000 	 0.2961115837097168 	 0.29827308654785156 	 0.27994370460510254 	 0.2787446975708008 	 0.45057106018066406 	 0.7440531253814697 	 0.38703155517578125 	 0.3801398277282715 	 
2025-07-27 19:48:34.495389 test begin: paddle.Tensor.abs(Tensor([635041, 80],"float32"), )
[Prof] paddle.Tensor.abs 	 paddle.Tensor.abs(Tensor([635041, 80],"float32"), ) 	 50803280 	 1000 	 0.29548215866088867 	 0.3003525733947754 	 0.2790682315826416 	 0.28559088706970215 	 0.44982242584228516 	 0.7432196140289307 	 0.38623881340026855 	 0.3797268867492676 	 
2025-07-27 19:48:39.808628 test begin: paddle.Tensor.add(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.add 	 paddle.Tensor.add(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.44991564750671387 	 0.4554448127746582 	 0.4404165744781494 	 0.43430233001708984 	 0.4827401638031006 	 0.05811786651611328 	 0.42317771911621094 	 4.57763671875e-05 	 
2025-07-27 19:48:43.702296 test begin: paddle.Tensor.all(Tensor([1, 1, 2048, 24807],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([1, 1, 2048, 24807],"bool"), ) 	 50804736 	 1000 	 0.052179574966430664 	 0.06157946586608887 	 0.02662181854248047 	 0.03133273124694824 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:44.558861 test begin: paddle.Tensor.all(Tensor([1, 1, 24807, 2048],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([1, 1, 24807, 2048],"bool"), ) 	 50804736 	 1000 	 0.05212974548339844 	 0.06136918067932129 	 0.026612520217895508 	 0.0313563346862793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:45.377726 test begin: paddle.Tensor.all(Tensor([1, 13, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([1, 13, 2048, 2048],"bool"), ) 	 54525952 	 1000 	 0.05534839630126953 	 0.06474423408508301 	 0.028261184692382812 	 0.03306937217712402 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:46.241388 test begin: paddle.Tensor.all(Tensor([13, 1, 2048, 2048],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([13, 1, 2048, 2048],"bool"), ) 	 54525952 	 1000 	 0.05535006523132324 	 0.06475043296813965 	 0.02826523780822754 	 0.03306126594543457 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:47.131066 test begin: paddle.Tensor.all(Tensor([159, 10, 32000],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([159, 10, 32000],"bool"), ) 	 50880000 	 1000 	 0.05266118049621582 	 0.06140923500061035 	 0.026892662048339844 	 0.03136491775512695 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:47.958143 test begin: paddle.Tensor.all(Tensor([2, 10, 2540161],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([2, 10, 2540161],"bool"), ) 	 50803220 	 1000 	 0.05235862731933594 	 0.06139779090881348 	 0.02673172950744629 	 0.0313563346862793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:48.785050 test begin: paddle.Tensor.all(Tensor([2, 100, 256000],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([2, 100, 256000],"bool"), ) 	 51200000 	 1000 	 0.05241703987121582 	 0.06196141242980957 	 0.023291826248168945 	 0.031639814376831055 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:49.612024 test begin: paddle.Tensor.all(Tensor([2, 794, 32000],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([2, 794, 32000],"bool"), ) 	 50816000 	 1000 	 0.052484750747680664 	 0.06139397621154785 	 0.025544166564941406 	 0.03136110305786133 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:50.439612 test begin: paddle.Tensor.all(Tensor([20, 10, 256000],"bool"), )
[Prof] paddle.Tensor.all 	 paddle.Tensor.all(Tensor([20, 10, 256000],"bool"), ) 	 51200000 	 1000 	 0.05235743522644043 	 0.06194162368774414 	 0.02673649787902832 	 0.031650543212890625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:51.279001 test begin: paddle.Tensor.amax(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, ) 	 50803240 	 1000 	 0.4535503387451172 	 0.4715735912322998 	 0.4335970878601074 	 0.45009732246398926 	 1.3165020942687988 	 1.6166045665740967 	 0.3363223075866699 	 0.33022117614746094 	 
2025-07-27 19:48:56.219933 test begin: paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, ) 	 50803240 	 1000 	 0.5134737491607666 	 0.18380522727966309 	 0.4926769733428955 	 0.1623849868774414 	 1.3872873783111572 	 1.5303795337677002 	 0.35440516471862793 	 0.3126845359802246 	 
2025-07-27 19:49:00.884271 test begin: paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, ) 	 50803240 	 1000 	 0.15202665328979492 	 0.15319538116455078 	 0.07765388488769531 	 0.07835507392883301 	 1.0447547435760498 	 1.248715877532959 	 0.21367454528808594 	 0.2126295566558838 	 
2025-07-27 19:49:04.322093 test begin: paddle.Tensor.amax(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, ) 	 50803230 	 1000 	 0.4534912109375 	 0.4715249538421631 	 0.4415102005004883 	 0.4561493396759033 	 1.3164746761322021 	 1.6166999340057373 	 0.3363332748413086 	 0.3302597999572754 	 
2025-07-27 19:49:10.960310 test begin: paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, ) 	 50803224 	 1000 	 6.294080972671509 	 0.1723928451538086 	 3.2163381576538086 	 0.08801579475402832 	 5.723556280136108 	 1.3411564826965332 	 1.1681771278381348 	 0.22834181785583496 	 
2025-07-27 19:49:25.368729 test begin: paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, ) 	 50803224 	 1000 	 0.15201926231384277 	 0.1531991958618164 	 0.07766246795654297 	 0.07821011543273926 	 1.0447604656219482 	 1.2483608722686768 	 0.21370530128479004 	 0.21245932579040527 	 
2025-07-27 19:49:28.782067 test begin: paddle.Tensor.amax(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, ) 	 50803224 	 1000 	 0.1694774627685547 	 0.15483546257019043 	 0.08657073974609375 	 0.07901167869567871 	 1.06577730178833 	 1.274780035018921 	 0.21798133850097656 	 0.21699857711791992 	 
2025-07-27 19:49:32.267801 test begin: paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, ) 	 50803230 	 1000 	 0.20843791961669922 	 0.21842479705810547 	 0.19673466682434082 	 0.20387053489685059 	 1.262916088104248 	 1.526768684387207 	 0.32273054122924805 	 0.3118703365325928 	 
2025-07-27 19:49:38.240559 test begin: paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, ) 	 50803230 	 1000 	 0.15198969841003418 	 0.15326213836669922 	 0.07764291763305664 	 0.07821893692016602 	 1.0447866916656494 	 1.248476505279541 	 0.21369385719299316 	 0.21255254745483398 	 
2025-07-27 19:49:42.556371 test begin: paddle.Tensor.amax(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, ) 	 50803260 	 1000 	 0.4534785747528076 	 0.4741842746734619 	 0.4415452480316162 	 0.4550776481628418 	 1.3163986206054688 	 1.6166234016418457 	 0.33633923530578613 	 0.3302614688873291 	 
2025-07-27 19:49:47.450391 test begin: paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, ) 	 50803260 	 1000 	 0.5134391784667969 	 0.18378806114196777 	 0.5005373954772949 	 0.16886401176452637 	 1.387408971786499 	 1.5297822952270508 	 0.3543987274169922 	 0.3124732971191406 	 
2025-07-27 19:49:52.088653 test begin: paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amax 	 paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, ) 	 50803260 	 1000 	 0.15200257301330566 	 0.1532588005065918 	 0.07763266563415527 	 0.07840347290039062 	 1.0447092056274414 	 1.24833345413208 	 0.2136690616607666 	 0.21252989768981934 	 
2025-07-27 19:49:55.532666 test begin: paddle.Tensor.amin(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, ) 	 50803240 	 1000 	 0.45351552963256836 	 0.4715440273284912 	 0.44159507751464844 	 0.45714545249938965 	 1.316070795059204 	 1.616577386856079 	 0.3361928462982178 	 0.33020949363708496 	 
2025-07-27 19:50:00.440205 test begin: paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, ) 	 50803240 	 1000 	 0.5134227275848389 	 0.18384218215942383 	 0.5006186962127686 	 0.1696791648864746 	 1.3872673511505127 	 1.5296638011932373 	 0.3543550968170166 	 0.312481164932251 	 
2025-07-27 19:50:05.045414 test begin: paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, ) 	 50803240 	 1000 	 0.15202713012695312 	 0.15320158004760742 	 0.07767367362976074 	 0.07816219329833984 	 1.044682502746582 	 1.248199462890625 	 0.2136991024017334 	 0.21248745918273926 	 
2025-07-27 19:50:08.493361 test begin: paddle.Tensor.amin(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, ) 	 50803230 	 1000 	 0.4534730911254883 	 0.471494197845459 	 0.44161391258239746 	 0.4572629928588867 	 1.3160226345062256 	 1.6165268421173096 	 0.33622217178344727 	 0.33025383949279785 	 
2025-07-27 19:50:13.444949 test begin: paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, ) 	 50803224 	 1000 	 6.293933391571045 	 0.17228412628173828 	 3.2161827087402344 	 0.08793067932128906 	 5.723428726196289 	 1.3412234783172607 	 1.1681840419769287 	 0.2283015251159668 	 
2025-07-27 19:50:27.848297 test begin: paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, ) 	 50803224 	 1000 	 0.15194082260131836 	 0.1532297134399414 	 0.07761120796203613 	 0.07818603515625 	 1.0446908473968506 	 1.2483797073364258 	 0.21368932723999023 	 0.21262073516845703 	 
2025-07-27 19:50:31.294406 test begin: paddle.Tensor.amin(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, ) 	 50803224 	 1000 	 0.16954278945922852 	 0.15477633476257324 	 0.08664131164550781 	 0.07897257804870605 	 1.065810203552246 	 1.2748291492462158 	 0.21797895431518555 	 0.21704769134521484 	 
2025-07-27 19:50:34.816659 test begin: paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, ) 	 50803230 	 1000 	 0.20840859413146973 	 0.22681093215942383 	 0.19674015045166016 	 0.2019813060760498 	 1.262983798980713 	 1.5270402431488037 	 0.32267022132873535 	 0.3119063377380371 	 
2025-07-27 19:50:41.292082 test begin: paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, ) 	 50803230 	 1000 	 0.15200495719909668 	 0.15325546264648438 	 0.07765078544616699 	 0.07839512825012207 	 1.0448219776153564 	 1.2485592365264893 	 0.21370768547058105 	 0.21260714530944824 	 
2025-07-27 19:50:44.757846 test begin: paddle.Tensor.amin(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, ) 	 50803260 	 1000 	 0.4534876346588135 	 0.4715127944946289 	 0.44159364700317383 	 0.4564087390899658 	 1.3164863586425781 	 1.6165757179260254 	 0.336301326751709 	 0.33019161224365234 	 
2025-07-27 19:50:49.690074 test begin: paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, ) 	 50803260 	 1000 	 0.5134243965148926 	 0.18375706672668457 	 0.500556230545044 	 0.16944599151611328 	 1.3875148296356201 	 1.5298075675964355 	 0.3544588088989258 	 0.312532901763916 	 
2025-07-27 19:50:54.327355 test begin: paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, )
[Prof] paddle.Tensor.amin 	 paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, ) 	 50803260 	 1000 	 0.15200519561767578 	 0.1531369686126709 	 0.07765364646911621 	 0.07825279235839844 	 1.0447931289672852 	 1.248511791229248 	 0.2137148380279541 	 0.21254372596740723 	 
2025-07-27 19:50:57.766503 test begin: paddle.Tensor.any(Tensor([1, 1379, 192, 192],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 1379, 192, 192],"bool"), axis=list[2,3,], ) 	 50835456 	 1000 	 0.0649268627166748 	 0.06706380844116211 	 0.03314948081970215 	 0.05273747444152832 	 None 	 None 	 None 	 None 	 
2025-07-27 19:50:58.606571 test begin: paddle.Tensor.any(Tensor([1, 1501, 184, 184],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 1501, 184, 184],"bool"), axis=list[2,3,], ) 	 50817856 	 1000 	 0.06402063369750977 	 0.06738400459289551 	 0.03270268440246582 	 0.05298733711242676 	 None 	 None 	 None 	 None 	 
2025-07-27 19:50:59.460920 test begin: paddle.Tensor.any(Tensor([1, 300, 184, 921],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 300, 184, 921],"bool"), axis=list[2,3,], ) 	 50839200 	 1000 	 0.08714556694030762 	 0.07879233360290527 	 0.04451274871826172 	 0.040136098861694336 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:00.321474 test begin: paddle.Tensor.any(Tensor([1, 300, 192, 883],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 300, 192, 883],"bool"), axis=list[2,3,], ) 	 50860800 	 1000 	 0.0877842903137207 	 0.07854652404785156 	 0.04484677314758301 	 0.04010510444641113 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:01.219556 test begin: paddle.Tensor.any(Tensor([1, 300, 883, 192],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 300, 883, 192],"bool"), axis=list[2,3,], ) 	 50860800 	 1000 	 0.08777546882629395 	 0.07884860038757324 	 0.04484438896179199 	 0.04012584686279297 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:02.092829 test begin: paddle.Tensor.any(Tensor([1, 300, 921, 184],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([1, 300, 921, 184],"bool"), axis=list[2,3,], ) 	 50839200 	 1000 	 0.08713507652282715 	 0.07859301567077637 	 0.044507503509521484 	 0.04013657569885254 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:02.969050 test begin: paddle.Tensor.any(Tensor([10, 300, 136, 136],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([10, 300, 136, 136],"bool"), axis=list[2,3,], ) 	 55488000 	 1000 	 0.06426143646240234 	 0.07991790771484375 	 0.05266165733337402 	 0.06557536125183105 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:03.883778 test begin: paddle.Tensor.any(Tensor([2, 1374, 136, 136],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([2, 1374, 136, 136],"bool"), axis=list[2,3,], ) 	 50827008 	 1000 	 0.06183815002441406 	 0.07441473007202148 	 0.05010724067687988 	 0.06005096435546875 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:04.718767 test begin: paddle.Tensor.any(Tensor([2, 300, 136, 623],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([2, 300, 136, 623],"bool"), axis=list[2,3,], ) 	 50836800 	 1000 	 0.08587074279785156 	 0.07171630859375 	 0.04386019706726074 	 0.05713319778442383 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:07.262012 test begin: paddle.Tensor.any(Tensor([2, 300, 623, 136],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([2, 300, 623, 136],"bool"), axis=list[2,3,], ) 	 50836800 	 1000 	 0.08582854270935059 	 0.07173013687133789 	 0.04384350776672363 	 0.057178497314453125 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:09.731328 test begin: paddle.Tensor.any(Tensor([5, 300, 192, 192],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([5, 300, 192, 192],"bool"), axis=list[2,3,], ) 	 55296000 	 1000 	 0.06772923469543457 	 0.07077431678771973 	 0.03458833694458008 	 0.05648970603942871 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:10.648330 test begin: paddle.Tensor.any(Tensor([6, 300, 184, 184],"bool"), axis=list[2,3,], )
[Prof] paddle.Tensor.any 	 paddle.Tensor.any(Tensor([6, 300, 184, 184],"bool"), axis=list[2,3,], ) 	 60940800 	 1000 	 0.08264851570129395 	 0.07938933372497559 	 0.042232513427734375 	 0.06479167938232422 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:11.662256 test begin: paddle.Tensor.argmax(Tensor([13, 498, 8000],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([13, 498, 8000],"float32"), axis=2, ) 	 51792000 	 1000 	 0.27840209007263184 	 0.16774511337280273 	 0.26570653915405273 	 0.15370893478393555 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:12.950566 test begin: paddle.Tensor.argmax(Tensor([14, 457, 8000],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([14, 457, 8000],"float32"), axis=2, ) 	 51184000 	 1000 	 0.27530336380004883 	 0.16746783256530762 	 0.25620508193969727 	 0.15338468551635742 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:14.435368 test begin: paddle.Tensor.argmax(Tensor([14, 477, 8000],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([14, 477, 8000],"float32"), axis=2, ) 	 53424000 	 1000 	 0.2870502471923828 	 0.17120742797851562 	 0.27671360969543457 	 0.15726900100708008 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:15.781703 test begin: paddle.Tensor.argmax(Tensor([30, 212, 8000],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([30, 212, 8000],"float32"), axis=2, ) 	 50880000 	 1000 	 0.2738347053527832 	 0.16675686836242676 	 0.26329588890075684 	 0.15271568298339844 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:17.090526 test begin: paddle.Tensor.argmax(Tensor([30, 457, 3706],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([30, 457, 3706],"float32"), axis=2, ) 	 50809260 	 1000 	 0.3485543727874756 	 0.16241216659545898 	 0.338270902633667 	 0.14841771125793457 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:18.426561 test begin: paddle.Tensor.argmax(Tensor([30, 477, 3551],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([30, 477, 3551],"float32"), axis=2, ) 	 50814810 	 1000 	 0.3585331439971924 	 0.16760849952697754 	 0.3481881618499756 	 0.15364336967468262 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:19.773419 test begin: paddle.Tensor.argmax(Tensor([30, 498, 3401],"float32"), axis=2, )
[Prof] paddle.Tensor.argmax 	 paddle.Tensor.argmax(Tensor([30, 498, 3401],"float32"), axis=2, ) 	 50810940 	 1000 	 0.3699522018432617 	 0.16518378257751465 	 0.3597886562347412 	 0.15099644660949707 	 None 	 None 	 None 	 None 	 
2025-07-27 19:51:22.407395 test begin: paddle.Tensor.astype(Tensor([1, 32, 388, 4096],"float32"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([1, 32, 388, 4096],"float32"), "float32", ) 	 50855936 	 1000 	 0.003144502639770508 	 0.0022056102752685547 	 1.0967254638671875e-05 	 1.4781951904296875e-05 	 0.029149532318115234 	 0.0472719669342041 	 1.8835067749023438e-05 	 4.839897155761719e-05 	 
2025-07-27 19:51:25.191214 test begin: paddle.Tensor.astype(Tensor([1, 32, 4096, 388],"float32"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([1, 32, 4096, 388],"float32"), "float32", ) 	 50855936 	 1000 	 0.003286123275756836 	 0.0022034645080566406 	 7.152557373046875e-06 	 1.5974044799804688e-05 	 0.02901911735534668 	 0.04722428321838379 	 2.5510787963867188e-05 	 4.8160552978515625e-05 	 
2025-07-27 19:51:26.937460 test begin: paddle.Tensor.astype(Tensor([1, 32, 4096, 4096],"float32"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([1, 32, 4096, 4096],"float32"), "float32", ) 	 536870912 	 1000 	 0.0032677650451660156 	 0.0022094249725341797 	 2.1457672119140625e-05 	 2.002716064453125e-05 	 0.029428720474243164 	 0.04702401161193848 	 2.5987625122070312e-05 	 3.8623809814453125e-05 	 
2025-07-27 19:51:44.283646 test begin: paddle.Tensor.astype(Tensor([1, 4, 4096, 4096],"float32"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([1, 4, 4096, 4096],"float32"), "float32", ) 	 67108864 	 1000 	 0.003204345703125 	 0.0021986961364746094 	 7.152557373046875e-06 	 1.621246337890625e-05 	 0.02933788299560547 	 0.04780983924865723 	 1.7881393432617188e-05 	 3.886222839355469e-05 	 
2025-07-27 19:51:46.711281 test begin: paddle.Tensor.astype(Tensor([100352, 1013],"bfloat16"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([100352, 1013],"bfloat16"), "float32", ) 	 101656576 	 1000 	 0.48007702827453613 	 0.5597438812255859 	 0.4666893482208252 	 0.5465061664581299 	 0.4502713680267334 	 0.453840970993042 	 0.39316606521606445 	 0.38619518280029297 	 
2025-07-27 19:51:51.955289 test begin: paddle.Tensor.astype(Tensor([1013, 100352],"bfloat16"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([1013, 100352],"bfloat16"), "float32", ) 	 101656576 	 1000 	 0.4799787998199463 	 0.559619665145874 	 0.4664778709411621 	 0.5465030670166016 	 0.45020055770874023 	 0.45386791229248047 	 0.3931598663330078 	 0.3792574405670166 	 
2025-07-27 19:51:57.133283 test begin: paddle.Tensor.astype(Tensor([12404, 8192],"bfloat16"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([12404, 8192],"bfloat16"), "float32", ) 	 101613568 	 1000 	 0.48008036613464355 	 0.559136152267456 	 0.4666569232940674 	 0.5458621978759766 	 0.45082926750183105 	 0.4536724090576172 	 0.39169931411743164 	 0.386493444442749 	 
2025-07-27 19:52:02.526860 test begin: paddle.Tensor.astype(Tensor([8192, 12404],"bfloat16"), "float32", )
[Prof] paddle.Tensor.astype 	 paddle.Tensor.astype(Tensor([8192, 12404],"bfloat16"), "float32", ) 	 101613568 	 1000 	 0.4800131320953369 	 0.5589604377746582 	 0.4665243625640869 	 0.5457568168640137 	 0.45073866844177246 	 0.4536104202270508 	 0.3936939239501953 	 0.3850991725921631 	 
2025-07-27 19:52:07.738121 test begin: paddle.Tensor.atanh(Tensor([1, 16934401, 3],"float32"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([1, 16934401, 3],"float32"), ) 	 50803203 	 1000 	 0.2972555160522461 	 0.29827022552490234 	 0.2888834476470947 	 0.28764986991882324 	 0.44996094703674316 	 1.6228134632110596 	 0.39609575271606445 	 0.33176326751708984 	 
2025-07-27 19:52:12.035147 test begin: paddle.Tensor.atanh(Tensor([1, 2, 12700801],"float64"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([1, 2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.4436051845550537 	 0.4122653007507324 	 0.4354836940765381 	 0.39667296409606934 	 0.44752979278564453 	 1.6207764148712158 	 0.3938465118408203 	 0.3313727378845215 	 
2025-07-27 19:52:16.023984 test begin: paddle.Tensor.atanh(Tensor([1, 2, 25401601],"float32"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([1, 2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.2972533702850342 	 0.2982594966888428 	 0.2888643741607666 	 0.2876310348510742 	 0.44992613792419434 	 1.6229093074798584 	 0.39582324028015137 	 0.33179330825805664 	 
2025-07-27 19:52:20.356894 test begin: paddle.Tensor.atanh(Tensor([1, 8467201, 3],"float64"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([1, 8467201, 3],"float64"), ) 	 25401603 	 1000 	 0.4436001777648926 	 0.4091765880584717 	 0.43530821800231934 	 0.3968479633331299 	 0.4476754665374756 	 1.6206674575805664 	 0.39414262771606445 	 0.33130478858947754 	 
2025-07-27 19:52:24.327662 test begin: paddle.Tensor.atanh(Tensor([2, 12700801],"float64"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.4432191848754883 	 0.41551923751831055 	 0.43507862091064453 	 0.3968789577484131 	 0.44750094413757324 	 1.6214191913604736 	 0.39408040046691895 	 0.33127665519714355 	 
2025-07-27 19:52:31.129990 test begin: paddle.Tensor.atanh(Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([4233601, 2, 3],"float64"), ) 	 25401606 	 1000 	 0.44364356994628906 	 0.4081242084503174 	 0.4281160831451416 	 0.3905460834503174 	 0.4476048946380615 	 1.6209313869476318 	 0.3850376605987549 	 0.3313615322113037 	 
2025-07-27 19:52:35.113222 test begin: paddle.Tensor.atanh(Tensor([6350401, 4],"float64"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([6350401, 4],"float64"), ) 	 25401604 	 1000 	 0.4436206817626953 	 1.202526569366455 	 0.42812132835388184 	 0.39052414894104004 	 0.44754862785339355 	 1.6211376190185547 	 0.38515543937683105 	 0.33135223388671875 	 
2025-07-27 19:52:41.550119 test begin: paddle.Tensor.atanh(Tensor([8467201, 2, 3],"float32"), )
[Prof] paddle.Tensor.atanh 	 paddle.Tensor.atanh(Tensor([8467201, 2, 3],"float32"), ) 	 50803206 	 1000 	 0.29723072052001953 	 0.2982618808746338 	 0.2814750671386719 	 0.28774499893188477 	 0.44986438751220703 	 1.6229043006896973 	 0.3958573341369629 	 0.3317911624908447 	 
2025-07-27 19:52:45.956966 test begin: paddle.Tensor.bmm(Tensor([1, 16934401, 3],"float32"), Tensor([1, 3, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([1, 16934401, 3],"float32"), Tensor([1, 3, 2],"float32"), ) 	 50803209 	 1000 	 1.7785673141479492 	 1.77885103225708 	 0.10685253143310547 	 0.10684943199157715 	 4.138153076171875 	 4.138041257858276 	 0.22299647331237793 	 0.22086596488952637 	 
2025-07-27 19:52:59.297771 test begin: paddle.Tensor.bmm(Tensor([1, 170476, 299],"float32"), Tensor([1, 299, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([1, 170476, 299],"float32"), Tensor([1, 299, 2],"float32"), ) 	 50972922 	 1000 	 0.23942995071411133 	 0.23949170112609863 	 0.2255406379699707 	 0.22201848030090332 	 0.4176633358001709 	 0.4240539073944092 	 0.1420743465423584 	 0.14437127113342285 	 
2025-07-27 19:53:01.443410 test begin: paddle.Tensor.bmm(Tensor([1, 179876, 283],"float32"), Tensor([1, 283, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([1, 179876, 283],"float32"), Tensor([1, 283, 2],"float32"), ) 	 50905474 	 1000 	 0.24132561683654785 	 0.24104905128479004 	 0.22599053382873535 	 0.22170233726501465 	 0.4120635986328125 	 0.4165608882904053 	 0.14029526710510254 	 0.14170455932617188 	 
2025-07-27 19:53:03.593790 test begin: paddle.Tensor.bmm(Tensor([1, 191277, 266],"float32"), Tensor([1, 266, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([1, 191277, 266],"float32"), Tensor([1, 266, 2],"float32"), ) 	 50880214 	 1000 	 0.23407530784606934 	 0.23392486572265625 	 0.21902251243591309 	 0.21476030349731445 	 0.41875600814819336 	 0.4207596778869629 	 0.1425793170928955 	 0.14315462112426758 	 
2025-07-27 19:53:05.741972 test begin: paddle.Tensor.bmm(Tensor([100, 170476, 3],"float32"), Tensor([100, 3, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([100, 170476, 3],"float32"), Tensor([100, 3, 2],"float32"), ) 	 51143400 	 1000 	 4.850055932998657 	 4.850380897521973 	 4.838130474090576 	 4.834485292434692 	 38.526145458221436 	 38.52609443664551 	 19.68676781654358 	 19.686736345291138 	 
2025-07-27 19:54:34.020092 test begin: paddle.Tensor.bmm(Tensor([89, 191277, 3],"float32"), Tensor([89, 3, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([89, 191277, 3],"float32"), Tensor([89, 3, 2],"float32"), ) 	 51071493 	 1000 	 5.0495641231536865 	 4.842608690261841 	 5.037790060043335 	 4.826861381530762 	 42.629441261291504 	 42.62944221496582 	 21.783575773239136 	 21.783552169799805 	 
2025-07-27 19:56:10.725418 test begin: paddle.Tensor.bmm(Tensor([95, 179876, 3],"float32"), Tensor([95, 3, 2],"float32"), )
[Prof] paddle.Tensor.bmm 	 paddle.Tensor.bmm(Tensor([95, 179876, 3],"float32"), Tensor([95, 3, 2],"float32"), ) 	 51265230 	 1000 	 4.863733291625977 	 4.863940238952637 	 4.851858377456665 	 4.846165657043457 	 40.39833068847656 	 40.39720892906189 	 20.644044399261475 	 20.642834901809692 	 
2025-07-27 19:57:42.838451 test begin: paddle.Tensor.cast(Tensor([128256, 793],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([128256, 793],"float16"), Dtype(float16), ) 	 101707008 	 1000 	 0.30750012397766113 	 0.001977205276489258 	 0.15713953971862793 	 1.7881393432617188e-05 	 0.30831456184387207 	 0.04712700843811035 	 0.15751051902770996 	 4.172325134277344e-05 	 combined
2025-07-27 19:57:47.336556 test begin: paddle.Tensor.cast(Tensor([152064, 669],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([152064, 669],"float16"), Dtype(float16), ) 	 101730816 	 1000 	 0.3152337074279785 	 0.0019469261169433594 	 0.16108417510986328 	 1.9073486328125e-05 	 0.3149540424346924 	 0.04721689224243164 	 0.1608731746673584 	 5.221366882324219e-05 	 combined
2025-07-27 19:57:51.749934 test begin: paddle.Tensor.cast(Tensor([24807, 4096],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([24807, 4096],"float16"), Dtype(float16), ) 	 101609472 	 1000 	 0.3103022575378418 	 0.0019338130950927734 	 0.29950618743896484 	 1.5974044799804688e-05 	 0.31055235862731934 	 0.04794001579284668 	 0.2549760341644287 	 6.389617919921875e-05 	 combined
2025-07-27 19:57:56.237879 test begin: paddle.Tensor.cast(Tensor([28351, 3584],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([28351, 3584],"float16"), Dtype(float16), ) 	 101609984 	 1000 	 0.31487083435058594 	 0.0033020973205566406 	 0.16091394424438477 	 3.075599670410156e-05 	 0.31479907035827637 	 0.05273866653442383 	 0.16078424453735352 	 4.1484832763671875e-05 	 combined
2025-07-27 19:58:02.074538 test begin: paddle.Tensor.cast(Tensor([3584, 28351],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([3584, 28351],"float16"), Dtype(float16), ) 	 101609984 	 1000 	 0.31481480598449707 	 0.001951456069946289 	 0.16086602210998535 	 1.8596649169921875e-05 	 0.31476855278015137 	 0.046703338623046875 	 0.16081666946411133 	 4.220008850097656e-05 	 combined
2025-07-27 19:58:06.472057 test begin: paddle.Tensor.cast(Tensor([669, 152064],"float16"), Dtype(float16), )
[Prof] paddle.Tensor.cast 	 paddle.Tensor.cast(Tensor([669, 152064],"float16"), Dtype(float16), ) 	 101730816 	 1000 	 0.3152139186859131 	 0.0019752979278564453 	 0.16106319427490234 	 1.621246337890625e-05 	 0.31497764587402344 	 0.04570412635803223 	 0.16090750694274902 	 4.076957702636719e-05 	 combined
2025-07-27 19:58:10.949574 test begin: paddle.Tensor.ceil(Tensor([1, 50803201],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([1, 50803201],"float32"), ) 	 50803201 	 1000 	 0.29566168785095215 	 0.29825258255004883 	 0.2871253490447998 	 0.28717851638793945 	 0.13423657417297363 	 0.1342923641204834 	 0.08301544189453125 	 0.06845593452453613 	 
2025-07-27 19:58:13.472425 test begin: paddle.Tensor.ceil(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.29567837715148926 	 0.29792094230651855 	 0.28708481788635254 	 0.2874176502227783 	 0.13409137725830078 	 0.1342456340789795 	 0.08241081237792969 	 0.0652017593383789 	 
2025-07-27 19:58:16.001785 test begin: paddle.Tensor.ceil(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2955665588378906 	 0.29796814918518066 	 0.2798805236816406 	 0.28081607818603516 	 0.13423538208007812 	 0.13422799110412598 	 0.07415127754211426 	 0.06058144569396973 	 
2025-07-27 19:58:18.623586 test begin: paddle.Tensor.ceil(Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2956697940826416 	 0.2979450225830078 	 0.2869303226470947 	 0.2873873710632324 	 0.13411951065063477 	 0.13428759574890137 	 0.08330631256103516 	 0.06844258308410645 	 
2025-07-27 19:58:21.130602 test begin: paddle.Tensor.ceil(Tensor([25401601, 2],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([25401601, 2],"float32"), ) 	 50803202 	 1000 	 0.29558753967285156 	 0.2979764938354492 	 0.2870514392852783 	 0.28732800483703613 	 0.1341872215270996 	 0.13426756858825684 	 0.0833578109741211 	 0.06882619857788086 	 
2025-07-27 19:58:23.656051 test begin: paddle.Tensor.ceil(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2956221103668213 	 0.2979755401611328 	 0.28690576553344727 	 0.2873563766479492 	 0.1341867446899414 	 0.13433456420898438 	 0.08342194557189941 	 0.06752967834472656 	 
2025-07-27 19:58:26.166486 test begin: paddle.Tensor.ceil(Tensor([2540161, 20],"float32"), )
[Prof] paddle.Tensor.ceil 	 paddle.Tensor.ceil(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.29564547538757324 	 0.29797863960266113 	 0.2868843078613281 	 0.28745555877685547 	 0.134199857711792 	 0.13422727584838867 	 0.0830535888671875 	 0.06855559349060059 	 
2025-07-27 19:58:28.684841 test begin: paddle.Tensor.chunk(Tensor([1034, 32, 64, 48],"float16"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([1034, 32, 64, 48],"float16"), 2, axis=1, ) 	 101646336 	 1000 	 0.4610416889190674 	 0.0068511962890625 	 0.4464302062988281 	 2.3126602172851562e-05 	 0.30917859077453613 	 0.4521915912628174 	 0.2520918846130371 	 0.36818814277648926 	 
2025-07-27 19:58:33.764887 test begin: paddle.Tensor.chunk(Tensor([128, 2068, 192],"float32"), 3, axis=-1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([128, 2068, 192],"float32"), 3, axis=-1, ) 	 50823168 	 1000 	 0.3451204299926758 	 0.007745265960693359 	 0.3294987678527832 	 2.1457672119140625e-05 	 0.3101954460144043 	 0.30867719650268555 	 0.2507336139678955 	 0.2131805419921875 	 
2025-07-27 19:58:39.015973 test begin: paddle.Tensor.chunk(Tensor([512, 32, 130, 48],"float16"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([512, 32, 130, 48],"float16"), 2, axis=1, ) 	 102236160 	 1000 	 0.4582068920135498 	 0.006882905960083008 	 0.44367551803588867 	 2.4318695068359375e-05 	 0.31638574600219727 	 0.45417356491088867 	 0.2596120834350586 	 0.370664119720459 	 
2025-07-27 19:58:44.027169 test begin: paddle.Tensor.chunk(Tensor([512, 32, 64, 49],"float32"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([512, 32, 64, 49],"float32"), 2, axis=1, ) 	 51380224 	 1000 	 0.3535580635070801 	 0.0069539546966552734 	 0.33948826789855957 	 3.1948089599609375e-05 	 0.3174402713775635 	 0.31332921981811523 	 0.25959205627441406 	 0.22776055335998535 	 
2025-07-27 19:58:46.700082 test begin: paddle.Tensor.chunk(Tensor([512, 32, 64, 97],"float16"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([512, 32, 64, 97],"float16"), 2, axis=1, ) 	 101711872 	 1000 	 0.45757269859313965 	 0.006825923919677734 	 0.44316720962524414 	 2.1696090698242188e-05 	 0.3151674270629883 	 0.4519217014312744 	 0.2584552764892578 	 0.36609363555908203 	 
2025-07-27 19:58:51.716139 test begin: paddle.Tensor.chunk(Tensor([512, 32, 65, 48],"float32"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([512, 32, 65, 48],"float32"), 2, axis=1, ) 	 51118080 	 1000 	 0.3523726463317871 	 0.006813764572143555 	 0.3382439613342285 	 2.574920654296875e-05 	 0.3161756992340088 	 0.31218886375427246 	 0.25996899604797363 	 0.2276461124420166 	 
2025-07-27 19:58:54.418582 test begin: paddle.Tensor.chunk(Tensor([517, 32, 64, 48],"float32"), 2, axis=1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([517, 32, 64, 48],"float32"), 2, axis=1, ) 	 50823168 	 1000 	 0.35091185569763184 	 0.006845951080322266 	 0.33667492866516113 	 1.9311904907226562e-05 	 0.30922937393188477 	 0.3116023540496826 	 0.2528116703033447 	 0.2272043228149414 	 
2025-07-27 19:58:57.028988 test begin: paddle.Tensor.chunk(Tensor([85, 3136, 192],"float32"), 3, axis=-1, )
[Prof] paddle.Tensor.chunk 	 paddle.Tensor.chunk(Tensor([85, 3136, 192],"float32"), 3, axis=-1, ) 	 51179520 	 1000 	 0.34706807136535645 	 0.007735729217529297 	 0.3314962387084961 	 2.2172927856445312e-05 	 0.3119969367980957 	 0.31087517738342285 	 0.2522885799407959 	 0.19617509841918945 	 
2025-07-27 19:58:59.653817 test begin: paddle.Tensor.clip(Tensor([1, 386, 65856, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([1, 386, 65856, 2],"float32"), 0, ) 	 50840832 	 1000 	 0.295673131942749 	 0.3012056350708008 	 0.27870607376098633 	 0.2852656841278076 	 0.4503815174102783 	 0.5961635112762451 	 0.3966073989868164 	 0.20321011543273926 	 
2025-07-27 19:59:05.038142 test begin: paddle.Tensor.clip(Tensor([1, 400, 63505, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([1, 400, 63505, 2],"float32"), 0, ) 	 50804000 	 1000 	 0.29521679878234863 	 0.534278392791748 	 0.27870893478393555 	 0.285083532333374 	 0.44986939430236816 	 0.5956935882568359 	 0.39592695236206055 	 0.20308852195739746 	 
2025-07-27 19:59:09.169411 test begin: paddle.Tensor.clip(Tensor([1, 400, 65856, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([1, 400, 65856, 2],"float32"), 0, ) 	 52684800 	 1000 	 0.30647706985473633 	 0.3087615966796875 	 0.28975772857666016 	 0.29564476013183594 	 0.4663400650024414 	 0.6168439388275146 	 0.40560340881347656 	 0.21026873588562012 	 
2025-07-27 19:59:12.670529 test begin: paddle.Tensor.clip(Tensor([2100, 12096, 3],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([2100, 12096, 3],"float32"), 0, ) 	 76204800 	 1000 	 0.4410998821258545 	 0.44416141510009766 	 0.4133932590484619 	 0.4309566020965576 	 0.6727337837219238 	 0.8851907253265381 	 0.6187553405761719 	 0.3018181324005127 	 
2025-07-27 19:59:17.699232 test begin: paddle.Tensor.clip(Tensor([2100, 12097, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([2100, 12097, 2],"float32"), 0, ) 	 50807400 	 1000 	 0.2951526641845703 	 0.30443501472473145 	 0.27841973304748535 	 0.2851114273071289 	 0.4495673179626465 	 0.5957391262054443 	 0.39571356773376465 	 0.20307445526123047 	 
2025-07-27 19:59:21.032421 test begin: paddle.Tensor.clip(Tensor([2101, 12096, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([2101, 12096, 2],"float32"), 0, ) 	 50827392 	 1000 	 0.2954249382019043 	 0.298001766204834 	 0.2786593437194824 	 0.28513169288635254 	 0.44986963272094727 	 0.5959103107452393 	 0.39617490768432617 	 0.20317554473876953 	 
2025-07-27 19:59:24.349375 test begin: paddle.Tensor.clip(Tensor([4, 525, 12096, 3],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([4, 525, 12096, 3],"float32"), 0, ) 	 76204800 	 1000 	 0.44094085693359375 	 0.4485130310058594 	 0.4242579936981201 	 0.43076586723327637 	 0.6725151538848877 	 0.8853151798248291 	 0.6187081336975098 	 0.30182361602783203 	 
2025-07-27 19:59:29.305316 test begin: paddle.Tensor.clip(Tensor([4, 525, 12097, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([4, 525, 12097, 2],"float32"), 0, ) 	 50807400 	 1000 	 0.2951667308807373 	 0.2978842258453369 	 0.27832746505737305 	 0.2850780487060547 	 0.4496288299560547 	 0.5956969261169434 	 0.39581775665283203 	 0.2030928134918213 	 
2025-07-27 19:59:32.700114 test begin: paddle.Tensor.clip(Tensor([4, 526, 12096, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([4, 526, 12096, 2],"float32"), 0, ) 	 50899968 	 1000 	 0.29591798782348633 	 0.30121803283691406 	 0.27953314781188965 	 0.2848672866821289 	 0.4508354663848877 	 0.5969560146331787 	 0.39673829078674316 	 0.2035048007965088 	 
2025-07-27 19:59:38.144308 test begin: paddle.Tensor.clip(Tensor([5, 525, 12096, 2],"float32"), 0, )
[Prof] paddle.Tensor.clip 	 paddle.Tensor.clip(Tensor([5, 525, 12096, 2],"float32"), 0, ) 	 63504000 	 1000 	 0.36781907081604004 	 0.38948559761047363 	 0.34195470809936523 	 0.35040855407714844 	 0.5608301162719727 	 0.7398552894592285 	 0.4977998733520508 	 0.2523055076599121 	 
2025-07-27 19:59:42.363107 test begin: paddle.Tensor.clone(Tensor([3544, 32, 896],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([3544, 32, 896],"bfloat16"), ) 	 101613568 	 1000 	 0.3103797435760498 	 0.31012773513793945 	 0.2948946952819824 	 0.290172815322876 	 0.61541748046875 	 0.45364809036254883 	 0.5483038425445557 	 0.36467480659484863 	 
2025-07-27 19:59:47.335912 test begin: paddle.Tensor.clone(Tensor([6017, 19, 896],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6017, 19, 896],"bfloat16"), ) 	 102433408 	 1000 	 0.3170328140258789 	 0.3154313564300537 	 0.16197538375854492 	 0.16107630729675293 	 0.6278009414672852 	 0.4573996067047119 	 0.32075953483581543 	 0.36920619010925293 	 
2025-07-27 19:59:52.431333 test begin: paddle.Tensor.clone(Tensor([6017, 32, 528],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6017, 32, 528],"bfloat16"), ) 	 101663232 	 1000 	 0.3149697780609131 	 0.313152551651001 	 0.16095376014709473 	 0.15990447998046875 	 0.6219344139099121 	 0.45387887954711914 	 0.31775927543640137 	 0.3748805522918701 	 
2025-07-27 19:59:57.361813 test begin: paddle.Tensor.clone(Tensor([6036, 19, 896],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6036, 19, 896],"bfloat16"), ) 	 102756864 	 1000 	 0.31833887100219727 	 0.3162059783935547 	 0.1626734733581543 	 0.16147828102111816 	 0.6285858154296875 	 0.4587688446044922 	 0.32115769386291504 	 0.3796703815460205 	 
2025-07-27 20:00:02.450904 test begin: paddle.Tensor.clone(Tensor([6036, 32, 527],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6036, 32, 527],"bfloat16"), ) 	 101791104 	 1000 	 0.3152494430541992 	 0.31357240676879883 	 0.1610703468322754 	 0.16012954711914062 	 0.6232683658599854 	 0.4545578956604004 	 0.31845569610595703 	 0.3748915195465088 	 
2025-07-27 20:00:07.520156 test begin: paddle.Tensor.clone(Tensor([6078, 19, 896],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6078, 19, 896],"bfloat16"), ) 	 103471872 	 1000 	 0.31365323066711426 	 0.32318854331970215 	 0.16027545928955078 	 0.1627967357635498 	 0.6180481910705566 	 0.46140432357788086 	 0.3157920837402344 	 0.3815422058105469 	 
2025-07-27 20:00:15.691545 test begin: paddle.Tensor.clone(Tensor([6078, 32, 523],"bfloat16"), )
[Prof] paddle.Tensor.clone 	 paddle.Tensor.clone(Tensor([6078, 32, 523],"bfloat16"), ) 	 101721408 	 1000 	 0.31428098678588867 	 0.3133058547973633 	 0.16057729721069336 	 0.15999054908752441 	 0.6239163875579834 	 0.45421457290649414 	 0.31878018379211426 	 0.3724544048309326 	 
2025-07-27 20:00:20.652706 test begin: paddle.Tensor.conj(Tensor([10, 2540161],"float64"), )
[Prof] paddle.Tensor.conj 	 paddle.Tensor.conj(Tensor([10, 2540161],"float64"), ) 	 25401610 	 1000 	 0.29775357246398926 	 0.0016646385192871094 	 0.2899436950683594 	 1.8596649169921875e-05 	 0.29769301414489746 	 0.04679751396179199 	 0.24617719650268555 	 5.507469177246094e-05 	 
2025-07-27 20:00:22.361664 test begin: paddle.Tensor.conj(Tensor([1270081, 20],"float64"), )
[Prof] paddle.Tensor.conj 	 paddle.Tensor.conj(Tensor([1270081, 20],"float64"), ) 	 25401620 	 1000 	 0.29775166511535645 	 0.0016880035400390625 	 0.29004549980163574 	 1.5497207641601562e-05 	 0.29770779609680176 	 0.046103477478027344 	 0.24678778648376465 	 3.528594970703125e-05 	 
2025-07-27 20:00:24.135056 test begin: paddle.Tensor.cos(Tensor([131072, 388],"float32"), )
[Prof] paddle.Tensor.cos 	 paddle.Tensor.cos(Tensor([131072, 388],"float32"), ) 	 50855936 	 1000 	 0.2957334518432617 	 0.2985081672668457 	 0.28714489936828613 	 0.28824543952941895 	 0.45049595832824707 	 1.0421123504638672 	 0.3969724178314209 	 0.35500645637512207 	 
2025-07-27 20:00:27.882514 test begin: paddle.Tensor.cos(Tensor([3175201, 16],"float32"), )
[Prof] paddle.Tensor.cos 	 paddle.Tensor.cos(Tensor([3175201, 16],"float32"), ) 	 50803216 	 1000 	 0.2955148220062256 	 0.2981376647949219 	 0.28705859184265137 	 0.2878859043121338 	 0.4501214027404785 	 1.0411310195922852 	 0.3957533836364746 	 0.35465478897094727 	 
2025-07-27 20:00:31.593682 test begin: paddle.Tensor.cos(Tensor([32768, 1551],"float32"), )
[Prof] paddle.Tensor.cos 	 paddle.Tensor.cos(Tensor([32768, 1551],"float32"), ) 	 50823168 	 1000 	 0.2955019474029541 	 0.30469393730163574 	 0.2870028018951416 	 0.2877066135406494 	 0.4500546455383301 	 1.0448153018951416 	 0.3960437774658203 	 0.35480737686157227 	 
2025-07-27 20:00:37.586318 test begin: paddle.Tensor.cos(Tensor([396901, 128],"float32"), )
[Prof] paddle.Tensor.cos 	 paddle.Tensor.cos(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.2953207492828369 	 0.30366945266723633 	 0.2867579460144043 	 0.28788089752197266 	 0.4499330520629883 	 1.0412654876708984 	 0.3961164951324463 	 0.354755163192749 	 
2025-07-27 20:00:42.104286 test begin: paddle.Tensor.cumprod(Tensor([25401601],"float64"), -1, )
[Prof] paddle.Tensor.cumprod 	 paddle.Tensor.cumprod(Tensor([25401601],"float64"), -1, ) 	 25401601 	 1000 	 0.32749176025390625 	 0.3275432586669922 	 0.1673140525817871 	 0.16723942756652832 	 2.8067944049835205 	 2.0553672313690186 	 0.0003108978271484375 	 0.0013113021850585938 	 
2025-07-27 20:00:48.812773 test begin: paddle.Tensor.cumprod(Tensor([50803201],"float32"), -1, )
[Prof] paddle.Tensor.cumprod 	 paddle.Tensor.cumprod(Tensor([50803201],"float32"), -1, ) 	 50803201 	 1000 	 0.3269791603088379 	 0.33310723304748535 	 0.1670823097229004 	 0.16834259033203125 	 3.1402933597564697 	 2.1196067333221436 	 0.0003101825714111328 	 0.0013167858123779297 	 
2025-07-27 20:00:56.480883 test begin: paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 1, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 1, ) 	 50803344 	 1000 	 1.2542099952697754 	 0.5854780673980713 	 0.4273984432220459 	 0.3384089469909668 	 6.4009997844696045 	 0.9774622917175293 	 1.308635950088501 	 0.33293867111206055 	 
2025-07-27 20:01:10.540140 test begin: paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 2, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 2, ) 	 50803344 	 1000 	 0.8939158916473389 	 1.017242431640625 	 0.8770163059234619 	 0.999671459197998 	 1.692739486694336 	 1.6410455703735352 	 0.576657772064209 	 0.559208869934082 	 
2025-07-27 20:01:18.584455 test begin: paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 1, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 1, ) 	 50803400 	 1000 	 1.4267477989196777 	 124.24307942390442 	 0.4862515926361084 	 124.22306847572327 	 2.159095287322998 	 122.22471499443054 	 0.4411814212799072 	 41.67632460594177 	 
2025-07-27 20:05:31.535564 test begin: paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 2, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 2, ) 	 50803400 	 1000 	 0.4044332504272461 	 2.8241217136383057 	 0.39507460594177246 	 2.802847146987915 	 4.154357194900513 	 3.4406073093414307 	 1.4147300720214844 	 1.1729121208190918 	 
2025-07-27 20:05:45.520563 test begin: paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 1, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 1, ) 	 50832000 	 1000 	 1.2863726615905762 	 0.36244964599609375 	 0.4382660388946533 	 0.35185861587524414 	 6.432922840118408 	 0.9930582046508789 	 1.3153235912322998 	 0.3382689952850342 	 
2025-07-27 20:05:56.318280 test begin: paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 2, )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 2, ) 	 50832000 	 1000 	 0.40493297576904297 	 2.8191897869110107 	 0.39549851417541504 	 2.8086085319519043 	 4.155191659927368 	 3.4426474571228027 	 1.41502046585083 	 1.1735844612121582 	 
2025-07-27 20:06:08.838394 test begin: paddle.Tensor.cumsum(Tensor([211681, 120],"int64"), )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([211681, 120],"int64"), ) 	 25401720 	 1000 	 0.3465256690979004 	 0.3265848159790039 	 3.9577484130859375e-05 	 0.16678833961486816 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:10.730016 test begin: paddle.Tensor.cumsum(Tensor([300, 84673],"int64"), )
[Prof] paddle.Tensor.cumsum 	 paddle.Tensor.cumsum(Tensor([300, 84673],"int64"), ) 	 25401900 	 1000 	 0.3468191623687744 	 0.3265659809112549 	 3.0279159545898438e-05 	 0.16671204566955566 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:12.628218 test begin: paddle.Tensor.detach(Tensor([100352, 1013],"bfloat16"), )
[Prof] paddle.Tensor.detach 	 paddle.Tensor.detach(Tensor([100352, 1013],"bfloat16"), ) 	 101656576 	 1000 	 0.0007386207580566406 	 0.002810955047607422 	 8.821487426757812e-06 	 1.6689300537109375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:15.963737 test begin: paddle.Tensor.detach(Tensor([1013, 100352],"bfloat16"), )
[Prof] paddle.Tensor.detach 	 paddle.Tensor.detach(Tensor([1013, 100352],"bfloat16"), ) 	 101656576 	 1000 	 0.0007395744323730469 	 0.002841472625732422 	 6.4373016357421875e-06 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:19.324395 test begin: paddle.Tensor.detach(Tensor([12404, 8192],"bfloat16"), )
[Prof] paddle.Tensor.detach 	 paddle.Tensor.detach(Tensor([12404, 8192],"bfloat16"), ) 	 101613568 	 1000 	 0.0007371902465820312 	 0.0028862953186035156 	 7.152557373046875e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:22.632281 test begin: paddle.Tensor.detach(Tensor([1772, 57344],"bfloat16"), )
[Prof] paddle.Tensor.detach 	 paddle.Tensor.detach(Tensor([1772, 57344],"bfloat16"), ) 	 101613568 	 1000 	 0.0007293224334716797 	 0.0027954578399658203 	 7.152557373046875e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:25.995898 test begin: paddle.Tensor.detach(Tensor([8192, 12404],"bfloat16"), )
[Prof] paddle.Tensor.detach 	 paddle.Tensor.detach(Tensor([8192, 12404],"bfloat16"), ) 	 101613568 	 1000 	 0.0007321834564208984 	 0.0028259754180908203 	 1.1444091796875e-05 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:06:29.303309 test begin: paddle.Tensor.diag_embed(Tensor([1, 25401601, 2],"float32"), )
[Prof] paddle.Tensor.diag_embed 	 paddle.Tensor.diag_embed(Tensor([1, 25401601, 2],"float32"), ) 	 50803202 	 1000 	 1.7777509689331055 	 1.0143780708312988 	 7.2479248046875e-05 	 0.5178666114807129 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:32.933442 test begin: paddle.Tensor.diag_embed(Tensor([25401601, 1, 2],"float32"), )
[Prof] paddle.Tensor.diag_embed 	 paddle.Tensor.diag_embed(Tensor([25401601, 1, 2],"float32"), ) 	 50803202 	 1000 	 1.779672384262085 	 2.032904863357544 	 5.459785461425781e-05 	 0.5178577899932861 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:40.480776 test begin: paddle.Tensor.diagonal(Tensor([2, 25401601],"float32"), axis1=-2, axis2=-1, )
[Prof] paddle.Tensor.diagonal 	 paddle.Tensor.diagonal(Tensor([2, 25401601],"float32"), axis1=-2, axis2=-1, ) 	 50803202 	 1000 	 0.0038383007049560547 	 0.006062984466552734 	 7.152557373046875e-06 	 0.00014638900756835938 	 0.14954686164855957 	 0.1380009651184082 	 0.07625555992126465 	 0.061248779296875 	 
2025-07-27 20:06:41.669007 test begin: paddle.Tensor.diagonal(Tensor([25401601, 2],"float32"), axis1=-2, axis2=-1, )
[Prof] paddle.Tensor.diagonal 	 paddle.Tensor.diagonal(Tensor([25401601, 2],"float32"), axis1=-2, axis2=-1, ) 	 50803202 	 1000 	 0.0038175582885742188 	 0.004901885986328125 	 1.2636184692382812e-05 	 1.811981201171875e-05 	 0.14935874938964844 	 0.13802385330200195 	 0.0762186050415039 	 0.06394767761230469 	 
2025-07-27 20:06:42.773045 test begin: paddle.Tensor.diagonal(Tensor([3, 8467201],"float64"), axis1=-2, axis2=-1, )
[Prof] paddle.Tensor.diagonal 	 paddle.Tensor.diagonal(Tensor([3, 8467201],"float64"), axis1=-2, axis2=-1, ) 	 25401603 	 1000 	 0.0037779808044433594 	 0.004907846450805664 	 7.62939453125e-06 	 1.7642974853515625e-05 	 0.14685392379760742 	 0.1383056640625 	 0.07500338554382324 	 0.06474804878234863 	 
2025-07-27 20:06:43.589373 test begin: paddle.Tensor.diagonal(Tensor([8467201, 3],"float64"), axis1=-2, axis2=-1, )
[Prof] paddle.Tensor.diagonal 	 paddle.Tensor.diagonal(Tensor([8467201, 3],"float64"), axis1=-2, axis2=-1, ) 	 25401603 	 1000 	 0.0037622451782226562 	 0.004897117614746094 	 7.62939453125e-06 	 1.71661376953125e-05 	 0.14705157279968262 	 0.1384429931640625 	 0.07521486282348633 	 0.06446957588195801 	 
2025-07-27 20:06:44.426922 test begin: paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.9441709518432617 	 1.3260679244995117 	 0.3216269016265869 	 0.24094843864440918 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:48.126216 test begin: paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.9439871311187744 	 0.26828551292419434 	 0.321575403213501 	 0.24217581748962402 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:50.779340 test begin: paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 0.9439599514007568 	 0.2616152763366699 	 0.32155299186706543 	 0.24229693412780762 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:52.536567 test begin: paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.8706035614013672 	 0.26430583000183105 	 0.29658961296081543 	 0.24295806884765625 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:54.225378 test begin: paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.8706562519073486 	 0.2616152763366699 	 0.29657888412475586 	 0.24238967895507812 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:55.884245 test begin: paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 0.8706238269805908 	 0.2616298198699951 	 0.29657793045043945 	 0.24241089820861816 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:57.554237 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.8705747127532959 	 0.2616264820098877 	 0.2966139316558838 	 0.24303746223449707 	 None 	 None 	 None 	 None 	 
2025-07-27 20:06:59.240550 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 1.0697450637817383 	 0.2995338439941406 	 0.364452600479126 	 0.28031253814697266 	 None 	 None 	 None 	 None 	 
2025-07-27 20:07:01.135887 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 1.0697109699249268 	 0.2994987964630127 	 0.3644599914550781 	 0.2801971435546875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:07:03.029511 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 1.0695858001708984 	 0.2995331287384033 	 0.36441850662231445 	 0.2810087203979492 	 None 	 None 	 None 	 None 	 
2025-07-27 20:07:04.939105 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.8068246841430664 	 0.26299476623535156 	 0.27490901947021484 	 0.24364662170410156 	 None 	 None 	 None 	 None 	 
2025-07-27 20:07:06.531478 test begin: paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, )
[Prof] paddle.Tensor.diff 	 paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, ) 	 25401664 	 1000 	 0.8067803382873535 	 0.2629423141479492 	 0.2748911380767822 	 0.24362564086914062 	 None 	 None 	 None 	 None 	 
2025-07-27 20:07:08.119137 test begin: paddle.Tensor.digamma(Tensor([4, 6350401],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([4, 6350401],"float64"), ) 	 25401604 	 1000 	 1.1686863899230957 	 1.1422719955444336 	 1.1607277393341064 	 1.1320483684539795 	 8.562397480010986 	 1.085317850112915 	 8.50990104675293 	 0.5545475482940674 	 
2025-07-27 20:07:21.228203 test begin: paddle.Tensor.digamma(Tensor([453601, 7, 8],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([453601, 7, 8],"float64"), ) 	 25401656 	 1000 	 1.1691372394561768 	 1.1448392868041992 	 1.1610074043273926 	 1.1256630420684814 	 8.561524629592896 	 1.085312843322754 	 8.509398221969604 	 0.5544989109039307 	 
2025-07-27 20:07:34.349468 test begin: paddle.Tensor.digamma(Tensor([45361, 7, 8, 10],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([45361, 7, 8, 10],"float64"), ) 	 25402160 	 1000 	 1.417633295059204 	 1.1421589851379395 	 1.4095337390899658 	 1.1322858333587646 	 8.561678886413574 	 1.0852434635162354 	 8.509263038635254 	 0.5544607639312744 	 
2025-07-27 20:07:47.704394 test begin: paddle.Tensor.digamma(Tensor([5, 635041, 8],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5, 635041, 8],"float64"), ) 	 25401640 	 1000 	 1.1690185070037842 	 1.1420040130615234 	 1.161067247390747 	 1.1322295665740967 	 8.560985803604126 	 1.085129737854004 	 8.508350133895874 	 0.5544476509094238 	 
2025-07-27 20:08:00.798950 test begin: paddle.Tensor.digamma(Tensor([5, 63505, 8, 10],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5, 63505, 8, 10],"float64"), ) 	 25402000 	 1000 	 1.168945074081421 	 1.1419193744659424 	 1.1610195636749268 	 1.1321427822113037 	 8.559787511825562 	 1.085132360458374 	 8.507614850997925 	 0.5544357299804688 	 
2025-07-27 20:08:13.911823 test begin: paddle.Tensor.digamma(Tensor([5, 7, 725761],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5, 7, 725761],"float64"), ) 	 25401635 	 1000 	 1.1687357425689697 	 1.1420047283172607 	 1.1605417728424072 	 1.1319365501403809 	 8.560388565063477 	 1.0850989818572998 	 8.508307695388794 	 0.5544388294219971 	 
2025-07-27 20:08:27.022166 test begin: paddle.Tensor.digamma(Tensor([5, 7, 72577, 10],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5, 7, 72577, 10],"float64"), ) 	 25401950 	 1000 	 1.1687240600585938 	 1.1483876705169678 	 1.1608617305755615 	 1.1311018466949463 	 8.67963194847107 	 1.0849394798278809 	 8.624273300170898 	 0.5543375015258789 	 
2025-07-27 20:08:41.752416 test begin: paddle.Tensor.digamma(Tensor([5, 7, 8, 90721],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5, 7, 8, 90721],"float64"), ) 	 25401880 	 1000 	 1.168592929840088 	 1.149703025817871 	 1.160444736480713 	 1.1311593055725098 	 8.56246542930603 	 1.0850002765655518 	 8.510228157043457 	 0.5543804168701172 	 
2025-07-27 20:08:54.871295 test begin: paddle.Tensor.digamma(Tensor([5080321, 5],"float64"), )
[Prof] paddle.Tensor.digamma 	 paddle.Tensor.digamma(Tensor([5080321, 5],"float64"), ) 	 25401605 	 1000 	 1.1685612201690674 	 1.1417536735534668 	 1.1606650352478027 	 1.1319568157196045 	 8.560940742492676 	 1.0854058265686035 	 8.507923126220703 	 0.5547776222229004 	 
2025-07-27 20:09:07.965904 test begin: paddle.Tensor.dim(Tensor([111616, 911],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([111616, 911],"bfloat16"), ) 	 101682176 	 1000 	 0.0006313323974609375 	 0.0015668869018554688 	 7.3909759521484375e-06 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:09.607919 test begin: paddle.Tensor.dim(Tensor([12404, 8192],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([12404, 8192],"bfloat16"), ) 	 101613568 	 1000 	 0.0006926059722900391 	 0.001531839370727539 	 1.9311904907226562e-05 	 1.621246337890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:11.297777 test begin: paddle.Tensor.dim(Tensor([14176, 7168],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([14176, 7168],"bfloat16"), ) 	 101613568 	 1000 	 0.0006322860717773438 	 0.0015683174133300781 	 5.245208740234375e-06 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:12.990435 test begin: paddle.Tensor.dim(Tensor([7168, 14176],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([7168, 14176],"bfloat16"), ) 	 101613568 	 1000 	 0.0006475448608398438 	 0.0015633106231689453 	 1.811981201171875e-05 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:14.653997 test begin: paddle.Tensor.dim(Tensor([911, 111616],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([911, 111616],"bfloat16"), ) 	 101682176 	 1000 	 0.0011820793151855469 	 0.0015225410461425781 	 1.9073486328125e-05 	 1.5974044799804688e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:16.300093 test begin: paddle.Tensor.dim(Tensor([95872, 1060],"bfloat16"), )
[Prof] paddle.Tensor.dim 	 paddle.Tensor.dim(Tensor([95872, 1060],"bfloat16"), ) 	 101624320 	 1000 	 0.000644683837890625 	 0.0015752315521240234 	 1.33514404296875e-05 	 1.5974044799804688e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:17.966178 test begin: paddle.Tensor.dot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
Warning: The core code of paddle.Tensor.dot is too complex.
[Prof] paddle.Tensor.dot 	 paddle.Tensor.dot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.29602575302124023 	 0.2934257984161377 	 0.287261962890625 	 0.14992475509643555 	 0.7104654312133789 	 0.6040916442871094 	 0.36301541328430176 	 0.30866265296936035 	 
2025-07-27 20:09:21.550046 test begin: paddle.Tensor.equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), )
[Prof] paddle.Tensor.equal 	 paddle.Tensor.equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), ) 	 50803456 	 1000 	 0.3088405132293701 	 0.31324100494384766 	 0.29831886291503906 	 0.30175018310546875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:23.007757 test begin: paddle.Tensor.equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), )
[Prof] paddle.Tensor.equal 	 paddle.Tensor.equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), ) 	 50803456 	 1000 	 0.31031370162963867 	 0.3132140636444092 	 0.29998159408569336 	 0.30155324935913086 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:24.503952 test begin: paddle.Tensor.equal(Tensor([2, 12700801],"int64"), 3, )
[Prof] paddle.Tensor.equal 	 paddle.Tensor.equal(Tensor([2, 12700801],"int64"), 3, ) 	 25401602 	 1000 	 0.17813467979431152 	 0.16824579238891602 	 0.09097504615783691 	 0.15396356582641602 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:25.258559 test begin: paddle.Tensor.equal(Tensor([2540161, 10],"int64"), 3, )
[Prof] paddle.Tensor.equal 	 paddle.Tensor.equal(Tensor([2540161, 10],"int64"), 3, ) 	 25401610 	 1000 	 0.1781308650970459 	 0.1682291030883789 	 0.09103155136108398 	 0.154005765914917 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:26.012444 test begin: paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([25401601],"int64"), ) 	 50803202 	 1000 	 0.34323692321777344 	 0.38050270080566406 	 0.11674213409423828 	 7.796287536621094e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:27.565882 test begin: paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([8],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([8],"int64"), ) 	 25401609 	 1000 	 0.016917705535888672 	 0.002633333206176758 	 9.5367431640625e-06 	 1.621246337890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:28.002276 test begin: paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3175201],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3175201],"int64"), ) 	 50803216 	 1000 	 0.34320974349975586 	 0.3809981346130371 	 0.1167149543762207 	 7.557868957519531e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:29.563792 test begin: paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3],"int64"), ) 	 25401632 	 1000 	 0.01772022247314453 	 0.0026383399963378906 	 2.4318695068359375e-05 	 1.5974044799804688e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:29.995885 test begin: paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8, 3175201],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8, 3175201],"int64"), ) 	 25401632 	 1000 	 0.01842951774597168 	 0.002617359161376953 	 3.218650817871094e-05 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:30.426404 test begin: paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8467201, 3],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8467201, 3],"int64"), ) 	 25401627 	 1000 	 0.016934633255004883 	 0.0025963783264160156 	 1.0967254638671875e-05 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:30.870347 test begin: paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8, 3],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8, 3],"int64"), ) 	 25401627 	 1000 	 0.017030954360961914 	 0.002898693084716797 	 1.0728836059570312e-05 	 3.910064697265625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:31.311157 test begin: paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8467201, 3],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8467201, 3],"int64"), ) 	 50803206 	 1000 	 0.343167781829834 	 0.37825655937194824 	 0.11669206619262695 	 5.1975250244140625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:32.882936 test begin: paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([25401601],"int64"), )
[Prof] paddle.Tensor.equal_all 	 paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([25401601],"int64"), ) 	 25401609 	 1000 	 0.01706671714782715 	 0.0026535987854003906 	 1.0013580322265625e-05 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:09:33.310821 test begin: paddle.Tensor.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), ) 	 25401720 	 1000 	 0.33534884452819824 	 0.3148970603942871 	 0.32718348503112793 	 0.3020908832550049 	 0.4480609893798828 	 1.6429443359375 	 0.3945596218109131 	 0.33583950996398926 	 
2025-07-27 20:09:41.140189 test begin: paddle.Tensor.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), ) 	 25401840 	 1000 	 0.33516764640808105 	 0.31382083892822266 	 0.3265035152435303 	 0.30196499824523926 	 0.44805264472961426 	 1.642716884613037 	 0.39484715461730957 	 0.335801362991333 	 
2025-07-27 20:09:44.960451 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), ) 	 25401760 	 1000 	 0.3369443416595459 	 0.31501245498657227 	 0.32877039909362793 	 0.30221080780029297 	 0.4474325180053711 	 1.642904281616211 	 0.3943040370941162 	 0.33591556549072266 	 
2025-07-27 20:09:48.745162 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), ) 	 25401624 	 1000 	 0.33687734603881836 	 0.3123903274536133 	 0.32872676849365234 	 0.30254697799682617 	 0.44739460945129395 	 1.642838954925537 	 0.39453792572021484 	 0.3359029293060303 	 
2025-07-27 20:09:52.585023 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), ) 	 25401696 	 1000 	 0.3383049964904785 	 0.3157482147216797 	 0.33008456230163574 	 0.3024461269378662 	 0.44736623764038086 	 1.6428897380828857 	 0.39368104934692383 	 0.3358900547027588 	 
2025-07-27 20:09:56.394303 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), ) 	 25401720 	 1000 	 0.33794212341308594 	 0.31386566162109375 	 0.32773470878601074 	 0.3039844036102295 	 0.447969913482666 	 1.6432678699493408 	 0.39474010467529297 	 0.33588361740112305 	 
2025-07-27 20:10:00.184358 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 3175201],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 3175201],"float64"), ) 	 25401608 	 1000 	 0.3379807472229004 	 0.31653547286987305 	 0.3297402858734131 	 0.3021225929260254 	 0.44737982749938965 	 1.6430449485778809 	 0.3945038318634033 	 0.3358159065246582 	 
2025-07-27 20:10:05.533410 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), ) 	 25401640 	 1000 	 0.3379082679748535 	 0.3268003463745117 	 0.329683780670166 	 0.30138659477233887 	 0.4474058151245117 	 1.6428093910217285 	 0.39436912536621094 	 0.3358325958251953 	 
2025-07-27 20:10:11.192057 test begin: paddle.Tensor.erfinv(x=Tensor([4, 2116801, 3],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 2116801, 3],"float64"), ) 	 25401612 	 1000 	 0.3379178047180176 	 0.31561732292175293 	 0.32970452308654785 	 0.30222082138061523 	 0.44734644889831543 	 1.6428406238555908 	 0.39403247833251953 	 0.3358151912689209 	 
2025-07-27 20:10:14.986178 test begin: paddle.Tensor.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), ) 	 25401660 	 1000 	 0.3382844924926758 	 0.31470537185668945 	 0.3300764560699463 	 0.3049454689025879 	 0.44736146926879883 	 1.6427512168884277 	 0.3938605785369873 	 0.335766077041626 	 
2025-07-27 20:10:18.769534 test begin: paddle.Tensor.erfinv(x=Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([4233601, 2, 3],"float64"), ) 	 25401606 	 1000 	 0.33817434310913086 	 0.31502652168273926 	 0.3299977779388428 	 0.3052046298980713 	 0.44738006591796875 	 1.6427741050720215 	 0.39438819885253906 	 0.33580565452575684 	 
2025-07-27 20:10:22.547551 test begin: paddle.Tensor.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), )
[Prof] paddle.Tensor.erfinv 	 paddle.Tensor.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), ) 	 25401630 	 1000 	 0.3380599021911621 	 0.31513357162475586 	 0.329862117767334 	 0.305340051651001 	 0.4473865032196045 	 1.6427812576293945 	 0.3943307399749756 	 0.335864782333374 	 
2025-07-27 20:10:26.334337 test begin: paddle.Tensor.exp(Tensor([1000000, 26],"float64"), )
[Prof] paddle.Tensor.exp 	 paddle.Tensor.exp(Tensor([1000000, 26],"float64"), ) 	 26000000 	 1000 	 0.3057234287261963 	 0.3074791431427002 	 0.2976083755493164 	 0.29642772674560547 	 0.4589509963989258 	 0.4549217224121094 	 0.40481996536254883 	 0.3883183002471924 	 
2025-07-27 20:10:28.949166 test begin: paddle.Tensor.exp(Tensor([2540161, 20],"float32"), )
[Prof] paddle.Tensor.exp 	 paddle.Tensor.exp(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.295459508895874 	 0.2978250980377197 	 0.28717517852783203 	 0.2873373031616211 	 0.44925689697265625 	 0.4467639923095703 	 0.3953237533569336 	 0.3784759044647217 	 
2025-07-27 20:10:32.130362 test begin: paddle.Tensor.exp(Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.exp 	 paddle.Tensor.exp(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.29541945457458496 	 0.3062601089477539 	 0.2872779369354248 	 0.28737807273864746 	 0.4492659568786621 	 0.44667720794677734 	 0.39165496826171875 	 0.38012075424194336 	 
2025-07-27 20:10:37.615311 test begin: paddle.Tensor.exp(Tensor([6350401, 4],"float64"), )
[Prof] paddle.Tensor.exp 	 paddle.Tensor.exp(Tensor([6350401, 4],"float64"), ) 	 25401604 	 1000 	 0.29930925369262695 	 0.328660249710083 	 0.2911851406097412 	 0.2874135971069336 	 0.4475972652435303 	 0.44461655616760254 	 0.3938765525817871 	 0.3773014545440674 	 
2025-07-27 20:10:41.138669 test begin: paddle.Tensor.exp(Tensor([64, 793801],"float32"), )
[Prof] paddle.Tensor.exp 	 paddle.Tensor.exp(Tensor([64, 793801],"float32"), ) 	 50803264 	 1000 	 0.2954745292663574 	 0.30412864685058594 	 0.28714823722839355 	 0.28742003440856934 	 0.4492976665496826 	 0.44666266441345215 	 0.39513254165649414 	 0.37943577766418457 	 
2025-07-27 20:10:44.299897 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 266, 477, 401],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 266, 477, 401],"float32"), ) 	 50879683 	 1000 	 0.13525176048278809 	 0.004132509231567383 	 0.12395167350769043 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:46.186783 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 283, 466, 386],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 283, 466, 386],"float32"), ) 	 50904909 	 1000 	 0.13546371459960938 	 0.004302501678466797 	 0.12467169761657715 	 4.0531158447265625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:48.196121 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 299, 391, 436],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 299, 391, 436],"float32"), ) 	 50972325 	 1000 	 0.13521337509155273 	 0.004105329513549805 	 0.12440133094787598 	 2.0265579223632812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:50.150613 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 38841, 436],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 38841, 436],"float32"), ) 	 50804029 	 1000 	 0.13496875762939453 	 0.004069089889526367 	 0.12406206130981445 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:52.115702 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 391, 43311],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 391, 43311],"float32"), ) 	 50803804 	 1000 	 0.13509893417358398 	 0.004039287567138672 	 0.12437605857849121 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:54.097168 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 42231, 401],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 42231, 401],"float32"), ) 	 50803894 	 1000 	 0.13500404357910156 	 0.004067420959472656 	 0.12421536445617676 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:56.030228 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 43872, 386],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 43872, 386],"float32"), ) 	 50803777 	 1000 	 0.13498520851135254 	 0.004061222076416016 	 0.12416696548461914 	 1.71661376953125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:58.005530 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 466, 36340],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 466, 36340],"float32"), ) 	 50803321 	 1000 	 0.13495159149169922 	 0.0040760040283203125 	 0.12412118911743164 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:10:59.928268 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 477, 35502],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 477, 35502],"float32"), ) 	 50803363 	 1000 	 0.13489389419555664 	 0.004073381423950195 	 0.12405991554260254 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:11:01.859571 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([100, 3, 391, 436],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([100, 3, 391, 436],"float32"), ) 	 51142801 	 1000 	 0.13570833206176758 	 0.004042387008666992 	 0.12474513053894043 	 2.002716064453125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:11:03.811071 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([89, 3, 477, 401],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([89, 3, 477, 401],"float32"), ) 	 51070960 	 1000 	 0.13555049896240234 	 0.004050254821777344 	 0.1247720718383789 	 1.9788742065429688e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:11:08.028161 test begin: paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([95, 3, 466, 386],"float32"), )
[Prof] paddle.Tensor.expand_as 	 paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([95, 3, 466, 386],"float32"), ) 	 51264661 	 1000 	 0.13601088523864746 	 0.004124879837036133 	 0.12507891654968262 	 2.0742416381835938e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:11:10.599694 test begin: paddle.Tensor.fill_(Tensor([50803201],"float32"), 0, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(Tensor([50803201],"float32"), 0, ) 	 50803201 	 1000 	 0.14568758010864258 	 0.13434934616088867 	 0.13056707382202148 	 0.12595486640930176 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:13.609380 test begin: paddle.Tensor.fill_(Tensor([659782, 77],"float32"), value=-math.inf, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(Tensor([659782, 77],"float32"), value=-math.inf, ) 	 50803214 	 1000 	 0.14655303955078125 	 0.13412880897521973 	 0.13123583793640137 	 0.12578368186950684 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:16.919066 test begin: paddle.Tensor.fill_(Tensor([77, 659782],"float32"), value=-math.inf, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(Tensor([77, 659782],"float32"), value=-math.inf, ) 	 50803214 	 1000 	 0.14582109451293945 	 0.1341838836669922 	 0.1305522918701172 	 0.12575984001159668 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:18.924318 test begin: paddle.Tensor.fill_(x=Tensor([10, 158761, 16],"float64"), value=41.2, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(x=Tensor([10, 158761, 16],"float64"), value=41.2, ) 	 25401760 	 1000 	 0.1470794677734375 	 0.13451814651489258 	 0.13144922256469727 	 0.12598800659179688 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:20.277829 test begin: paddle.Tensor.fill_(x=Tensor([10, 16, 158761],"float64"), value=41.2, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(x=Tensor([10, 16, 158761],"float64"), value=41.2, ) 	 25401760 	 1000 	 0.1471400260925293 	 0.13452458381652832 	 0.13172578811645508 	 0.1259455680847168 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:21.683039 test begin: paddle.Tensor.fill_(x=Tensor([99226, 16, 16],"float64"), value=41.2, )
[Prof] paddle.Tensor.fill_ 	 paddle.Tensor.fill_(x=Tensor([99226, 16, 16],"float64"), value=41.2, ) 	 25401856 	 1000 	 0.1454157829284668 	 0.13462328910827637 	 0.12985515594482422 	 0.12615656852722168 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:23.031717 test begin: paddle.Tensor.fill_diagonal_(Tensor([128, 396901],"float32"), 0, wrap=False, )
[Prof] paddle.Tensor.fill_diagonal_ 	 paddle.Tensor.fill_diagonal_(Tensor([128, 396901],"float32"), 0, wrap=False, ) 	 50803328 	 1000 	 0.02279806137084961 	 0.01078033447265625 	 1.430511474609375e-05 	 2.7179718017578125e-05 	 0.032242774963378906 	 0.04603219032287598 	 1.6689300537109375e-05 	 3.981590270996094e-05 	 combined
2025-07-27 20:11:24.762865 test begin: paddle.Tensor.fill_diagonal_(Tensor([396901, 128],"float32"), 0, wrap=False, )
[Prof] paddle.Tensor.fill_diagonal_ 	 paddle.Tensor.fill_diagonal_(Tensor([396901, 128],"float32"), 0, wrap=False, ) 	 50803328 	 1000 	 0.02257847785949707 	 0.010758399963378906 	 1.4066696166992188e-05 	 2.8371810913085938e-05 	 0.03225302696228027 	 0.04587101936340332 	 1.9073486328125e-05 	 3.910064697265625e-05 	 combined
2025-07-27 20:11:26.499996 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([12700801, 4, 7],"int32"), Tensor([12700801, 4],"int32"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([12700801, 4, 7],"int32"), Tensor([12700801, 4],"int32"), 0, 1, 2, ) 	 406425632 	 1000 	 87.90487813949585 	 4.356982469558716 	 0.0039675235748291016 	 1.4831886291503906 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:39.694331 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([1814401, 4, 7],"int32"), Tensor([1814401, 4],"int32"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([1814401, 4, 7],"int32"), Tensor([1814401, 4],"int32"), 0, 1, 2, ) 	 58060832 	 1000 	 4.671969175338745 	 0.6301178932189941 	 0.0015637874603271484 	 0.21454763412475586 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:51.026838 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3175201],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3175201],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, ) 	 25401616 	 1000 	 0.32106804847717285 	 0.3160128593444824 	 0.08186149597167969 	 0.10745429992675781 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:52.814544 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 6350401],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 6350401],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, ) 	 50803216 	 1000 	 0.32103848457336426 	 0.31613659858703613 	 0.08185839653015137 	 0.10757303237915039 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:54.976752 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4233601, 3, 2],"int32"), Tensor([2, 2, 3],"int32"), offset=0, dim1=1, dim2=2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4233601, 3, 2],"int32"), Tensor([2, 2, 3],"int32"), offset=0, dim1=1, dim2=2, ) 	 50803224 	 1000 	 0.3211338520050049 	 0.316007137298584 	 0.08193683624267578 	 0.10744452476501465 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:57.097567 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([6350401, 4, 7],"int64"), Tensor([6350401, 4],"int64"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([6350401, 4, 7],"int64"), Tensor([6350401, 4],"int64"), 0, 1, 2, ) 	 203212832 	 1000 	 42.26773762702942 	 3.6033523082733154 	 0.0024971961975097656 	 1.2265961170196533 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:31.820255 test begin: paddle.Tensor.fill_diagonal_tensor(Tensor([907201, 4, 7],"int64"), Tensor([907201, 4],"int64"), 0, 1, 2, )
[Prof] paddle.Tensor.fill_diagonal_tensor 	 paddle.Tensor.fill_diagonal_tensor(Tensor([907201, 4, 7],"int64"), Tensor([907201, 4],"int64"), 0, 1, 2, ) 	 29030432 	 1000 	 2.2988295555114746 	 0.5237727165222168 	 0.0008108615875244141 	 0.17633891105651855 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:40.378633 test begin: paddle.Tensor.flatten(Tensor([1, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([1, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, ) 	 168448000 	 1000 	 0.010912895202636719 	 0.004609107971191406 	 1.0728836059570312e-05 	 2.193450927734375e-05 	 0.041832685470581055 	 0.05701303482055664 	 4.3392181396484375e-05 	 3.933906555175781e-05 	 
2025-07-27 20:16:47.844287 test begin: paddle.Tensor.flatten(Tensor([128, 127, 56, 56],"float32"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 127, 56, 56],"float32"), 2, ) 	 50978816 	 1000 	 0.010216951370239258 	 0.008046865463256836 	 1.5020370483398438e-05 	 2.0265579223632812e-05 	 0.04891467094421387 	 0.06354689598083496 	 2.956390380859375e-05 	 3.409385681152344e-05 	 
2025-07-27 20:16:49.615676 test begin: paddle.Tensor.flatten(Tensor([128, 254, 56, 56],"float16"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 254, 56, 56],"float16"), 2, ) 	 101957632 	 1000 	 0.005366086959838867 	 0.004317045211791992 	 9.5367431640625e-06 	 2.193450927734375e-05 	 0.04192614555358887 	 0.056340932846069336 	 2.3365020751953125e-05 	 3.504753112792969e-05 	 
2025-07-27 20:16:53.457186 test begin: paddle.Tensor.flatten(Tensor([128, 512, 14, 56],"float32"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 512, 14, 56],"float32"), 2, ) 	 51380224 	 1000 	 0.005233049392700195 	 0.004338502883911133 	 1.4066696166992188e-05 	 1.9311904907226562e-05 	 0.04217123985290527 	 0.05637860298156738 	 2.288818359375e-05 	 4.935264587402344e-05 	 
2025-07-27 20:16:55.229529 test begin: paddle.Tensor.flatten(Tensor([128, 512, 28, 56],"float16"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 512, 28, 56],"float16"), 2, ) 	 102760448 	 1000 	 0.005361318588256836 	 0.0043451786041259766 	 1.430511474609375e-05 	 1.8358230590820312e-05 	 0.041846513748168945 	 0.05592513084411621 	 2.7179718017578125e-05 	 4.124641418457031e-05 	 
2025-07-27 20:16:59.290196 test begin: paddle.Tensor.flatten(Tensor([128, 512, 56, 14],"float32"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 512, 56, 14],"float32"), 2, ) 	 51380224 	 1000 	 0.00534820556640625 	 0.0043795108795166016 	 1.2636184692382812e-05 	 1.6927719116210938e-05 	 0.04192519187927246 	 0.056826114654541016 	 3.3855438232421875e-05 	 4.291534423828125e-05 	 
2025-07-27 20:17:01.043042 test begin: paddle.Tensor.flatten(Tensor([128, 512, 56, 28],"float16"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([128, 512, 56, 28],"float16"), 2, ) 	 102760448 	 1000 	 0.010179996490478516 	 0.008031368255615234 	 9.059906005859375e-06 	 2.3603439331054688e-05 	 0.04919123649597168 	 0.06336307525634766 	 3.5762786865234375e-05 	 5.9604644775390625e-05 	 
2025-07-27 20:17:05.010086 test begin: paddle.Tensor.flatten(Tensor([32, 512, 56, 56],"float32"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([32, 512, 56, 56],"float32"), 2, ) 	 51380224 	 1000 	 0.0053136348724365234 	 0.004399299621582031 	 7.867813110351562e-06 	 1.8596649169921875e-05 	 0.04203081130981445 	 0.056233882904052734 	 2.47955322265625e-05 	 3.719329833984375e-05 	 
2025-07-27 20:17:06.786934 test begin: paddle.Tensor.flatten(Tensor([4, 5, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([4, 5, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, ) 	 52640000 	 1000 	 0.0056934356689453125 	 0.004506826400756836 	 8.58306884765625e-06 	 1.71661376953125e-05 	 0.04239964485168457 	 0.05701255798339844 	 3.218650817871094e-05 	 4.8160552978515625e-05 	 
2025-07-27 20:17:08.595649 test begin: paddle.Tensor.flatten(Tensor([4, 64, 2, 376, 280],"float32"), start_axis=1, stop_axis=2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([4, 64, 2, 376, 280],"float32"), start_axis=1, stop_axis=2, ) 	 53903360 	 1000 	 0.0057735443115234375 	 0.004607677459716797 	 2.09808349609375e-05 	 1.811981201171875e-05 	 0.04190182685852051 	 0.057521820068359375 	 1.7642974853515625e-05 	 5.555152893066406e-05 	 
2025-07-27 20:17:10.464771 test begin: paddle.Tensor.flatten(Tensor([4, 64, 25, 29, 280],"float32"), start_axis=1, stop_axis=2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([4, 64, 25, 29, 280],"float32"), start_axis=1, stop_axis=2, ) 	 51968000 	 1000 	 0.005681753158569336 	 0.0045697689056396484 	 8.106231689453125e-06 	 1.7881393432617188e-05 	 0.042114973068237305 	 0.05768132209777832 	 3.4809112548828125e-05 	 6.079673767089844e-05 	 
2025-07-27 20:17:12.233592 test begin: paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 22],"float32"), start_axis=1, stop_axis=2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 22],"float32"), start_axis=1, stop_axis=2, ) 	 52940800 	 1000 	 0.005662679672241211 	 0.004540443420410156 	 6.9141387939453125e-06 	 1.8596649169921875e-05 	 0.04199504852294922 	 0.05770707130432129 	 3.0040740966796875e-05 	 5.1021575927734375e-05 	 
2025-07-27 20:17:14.033319 test begin: paddle.Tensor.flatten(Tensor([64, 512, 56, 56],"float16"), 2, )
[Prof] paddle.Tensor.flatten 	 paddle.Tensor.flatten(Tensor([64, 512, 56, 56],"float16"), 2, ) 	 102760448 	 1000 	 0.005263328552246094 	 0.0043604373931884766 	 1.2636184692382812e-05 	 2.09808349609375e-05 	 0.04177522659301758 	 0.058801889419555664 	 3.457069396972656e-05 	 5.7220458984375e-05 	 
2025-07-27 20:17:17.912098 test begin: paddle.Tensor.flip(Tensor([16, 3, 224, 4726],"float32"), 0, )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([16, 3, 224, 4726],"float32"), 0, ) 	 50813952 	 1000 	 0.9613442420959473 	 0.31137537956237793 	 0.9524290561676025 	 0.29686999320983887 	 0.9615180492401123 	 0.31121826171875 	 0.9093441963195801 	 0.2427976131439209 	 
2025-07-27 20:17:22.127235 test begin: paddle.Tensor.flip(Tensor([16, 3, 4726, 224],"float32"), 0, )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([16, 3, 4726, 224],"float32"), 0, ) 	 50813952 	 1000 	 0.9617128372192383 	 0.31136560440063477 	 0.953054666519165 	 0.29691410064697266 	 0.9617340564727783 	 0.31125807762145996 	 0.9107437133789062 	 0.24176406860351562 	 
2025-07-27 20:17:26.304717 test begin: paddle.Tensor.flip(Tensor([16, 64, 224, 224],"float32"), 0, )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([16, 64, 224, 224],"float32"), 0, ) 	 51380224 	 1000 	 0.9716827869415283 	 0.31696581840515137 	 0.9613380432128906 	 0.30049967765808105 	 0.971397876739502 	 0.31504392623901367 	 0.9205322265625 	 0.2410581111907959 	 
2025-07-27 20:17:30.595490 test begin: paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-1,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-1,], ) 	 50804400 	 1000 	 0.890265941619873 	 0.31781625747680664 	 0.8812673091888428 	 0.29803466796875 	 0.8901326656341553 	 0.3124220371246338 	 0.8393383026123047 	 0.23875784873962402 	 
2025-07-27 20:17:34.652923 test begin: paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-2,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-2,], ) 	 50804400 	 1000 	 0.8904132843017578 	 1.8954582214355469 	 0.8813846111297607 	 0.2987644672393799 	 0.890303373336792 	 0.31578588485717773 	 0.8394026756286621 	 0.24792146682739258 	 
2025-07-27 20:17:40.986620 test begin: paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-1,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-1,], ) 	 50804100 	 1000 	 0.8903555870056152 	 0.3176085948944092 	 0.8808996677398682 	 0.2923295497894287 	 0.8905997276306152 	 0.312502384185791 	 0.8393018245697021 	 0.23589396476745605 	 
2025-07-27 20:17:45.072451 test begin: paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-2,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-2,], ) 	 50804100 	 1000 	 0.8904461860656738 	 2.000650644302368 	 0.8813579082489014 	 0.29375195503234863 	 0.8905336856842041 	 0.3155965805053711 	 0.8395304679870605 	 0.22462844848632812 	 
2025-07-27 20:17:52.199992 test begin: paddle.Tensor.flip(Tensor([338, 3, 224, 224],"float32"), 0, )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([338, 3, 224, 224],"float32"), 0, ) 	 50878464 	 1000 	 0.9624738693237305 	 0.32691335678100586 	 0.9537968635559082 	 0.29674410820007324 	 0.9622898101806641 	 0.3119380474090576 	 0.9113821983337402 	 0.24271893501281738 	 
2025-07-27 20:17:56.443980 test begin: paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-1,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-1,], ) 	 50880000 	 1000 	 0.8930511474609375 	 0.31310033798217773 	 0.8839929103851318 	 0.2981390953063965 	 0.8921995162963867 	 0.3129117488861084 	 0.840843915939331 	 0.24187922477722168 	 
2025-07-27 20:18:00.521997 test begin: paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-2,], )
[Prof] paddle.Tensor.flip 	 paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-2,], ) 	 50880000 	 1000 	 0.8930652141571045 	 0.32619524002075195 	 0.8839676380157471 	 0.29976534843444824 	 0.8924126625061035 	 0.3164212703704834 	 0.8416743278503418 	 0.24348926544189453 	 
2025-07-27 20:18:04.574413 test begin: paddle.Tensor.floor(Tensor([12700801, 4],"float32"), )
[Prof] paddle.Tensor.floor 	 paddle.Tensor.floor(Tensor([12700801, 4],"float32"), ) 	 50803204 	 1000 	 0.29567670822143555 	 0.2979137897491455 	 0.2870635986328125 	 0.2876100540161133 	 0.13416051864624023 	 0.13426446914672852 	 0.08278274536132812 	 0.06814837455749512 	 
2025-07-27 20:18:07.065607 test begin: paddle.Tensor.floor(Tensor([1857, 27358],"float32"), )
[Prof] paddle.Tensor.floor 	 paddle.Tensor.floor(Tensor([1857, 27358],"float32"), ) 	 50803806 	 1000 	 0.2955186367034912 	 0.2995762825012207 	 0.2832491397857666 	 0.2873997688293457 	 0.1342151165008545 	 0.13423991203308105 	 0.06467437744140625 	 0.06857061386108398 	 
2025-07-27 20:18:09.597625 test begin: paddle.Tensor.floor(Tensor([1872, 27139],"float32"), )
[Prof] paddle.Tensor.floor 	 paddle.Tensor.floor(Tensor([1872, 27139],"float32"), ) 	 50804208 	 1000 	 0.2957937717437744 	 0.29796695709228516 	 0.28724026679992676 	 0.2864072322845459 	 0.13410496711730957 	 0.1342611312866211 	 0.08221173286437988 	 0.06848788261413574 	 
2025-07-27 20:18:12.142573 test begin: paddle.Tensor.floor(Tensor([1915, 26530],"float32"), )
[Prof] paddle.Tensor.floor 	 paddle.Tensor.floor(Tensor([1915, 26530],"float32"), ) 	 50804950 	 1000 	 0.2960200309753418 	 0.30010294914245605 	 0.2875969409942627 	 0.28740692138671875 	 0.13412070274353027 	 0.13428473472595215 	 0.08265066146850586 	 0.06875324249267578 	 
2025-07-27 20:18:14.646362 test begin: paddle.Tensor.gather(Tensor([4, 12700801],"float32"), Tensor([4, 1],"int64"), 1, )
[Prof] paddle.Tensor.gather 	 paddle.Tensor.gather(Tensor([4, 12700801],"float32"), Tensor([4, 1],"int64"), 1, ) 	 50803208 	 1000 	 0.009884834289550781 	 0.1740739345550537 	 1.9550323486328125e-05 	 7.605552673339844e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:15.803681 test begin: paddle.Tensor.gather(Tensor([40, 1270080],"float32"), Tensor([40, 1],"int64"), 1, )
[Prof] paddle.Tensor.gather 	 paddle.Tensor.gather(Tensor([40, 1270080],"float32"), Tensor([40, 1],"int64"), 1, ) 	 50803240 	 1000 	 0.009763956069946289 	 1.396162509918213 	 1.239776611328125e-05 	 7.486343383789062e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:18.176201 test begin: paddle.Tensor.gather(Tensor([400, 127008],"float32"), Tensor([400, 1],"int64"), 1, )
[Prof] paddle.Tensor.gather 	 paddle.Tensor.gather(Tensor([400, 127008],"float32"), Tensor([400, 1],"int64"), 1, ) 	 50803600 	 1000 	 0.009727001190185547 	 15.395538568496704 	 1.3828277587890625e-05 	 0.00027441978454589844 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:34.592241 test begin: paddle.Tensor.gather_nd(Tensor([119, 53568, 8],"float32"), Tensor([4, 500, 2],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([119, 53568, 8],"float32"), Tensor([4, 500, 2],"int64"), ) 	 51000736 	 1000 	 0.01048731803894043 	 160.7774612903595 	 1.1205673217773438e-05 	 0.0002124309539794922 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:18.939803 test begin: paddle.Tensor.gather_nd(Tensor([16, 3, 156, 80, 85],"float32"), Tensor([516, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([16, 3, 156, 80, 85],"float32"), Tensor([516, 4],"int64"), ) 	 50920464 	 1000 	 0.010324954986572266 	 79.9081871509552 	 1.2159347534179688e-05 	 0.00021266937255859375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:22:39.938703 test begin: paddle.Tensor.gather_nd(Tensor([16, 3, 80, 156, 85],"float32"), Tensor([516, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([16, 3, 80, 156, 85],"float32"), Tensor([516, 4],"int64"), ) 	 50920464 	 1000 	 0.010453462600708008 	 79.4948000907898 	 1.2874603271484375e-05 	 0.00019741058349609375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:24:00.548022 test begin: paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 166],"float32"), Tensor([516, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 166],"float32"), Tensor([516, 4],"int64"), ) 	 50997264 	 1000 	 0.01044011116027832 	 79.33090162277222 	 1.2636184692382812e-05 	 0.00021266937255859375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:25:20.957430 test begin: paddle.Tensor.gather_nd(Tensor([16, 6, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([16, 6, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), ) 	 52226064 	 1000 	 0.010214805603027344 	 79.44230103492737 	 1.239776611328125e-05 	 0.0002200603485107422 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:26:41.528540 test begin: paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), ) 	 52225540 	 1000 	 0.010402917861938477 	 59.15656089782715 	 1.3113021850585938e-05 	 0.00022602081298828125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:41.755436 test begin: paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), ) 	 52226064 	 1000 	 0.010351419448852539 	 79.08102297782898 	 1.2159347534179688e-05 	 0.00021719932556152344 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:29:01.937301 test begin: paddle.Tensor.gather_nd(Tensor([4, 1587601, 8],"float32"), Tensor([4, 500, 2],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([4, 1587601, 8],"float32"), Tensor([4, 500, 2],"int64"), ) 	 50807232 	 1000 	 0.01046895980834961 	 161.1523458957672 	 1.1920928955078125e-05 	 0.00022268295288085938 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:31:44.278804 test begin: paddle.Tensor.gather_nd(Tensor([4, 53568, 238],"float32"), Tensor([4, 500, 2],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([4, 53568, 238],"float32"), Tensor([4, 500, 2],"int64"), ) 	 51000736 	 1000 	 0.011554718017578125 	 163.5052785873413 	 0.0011074542999267578 	 0.00021982192993164062 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:34:29.956942 test begin: paddle.Tensor.gather_nd(Tensor([8, 12, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([8, 12, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), ) 	 52225540 	 1000 	 0.01027822494506836 	 63.096320152282715 	 1.2636184692382812e-05 	 0.0002353191375732422 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:35:36.130405 test begin: paddle.Tensor.gather_nd(Tensor([8, 3, 312, 80, 85],"float32"), Tensor([385, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([8, 3, 312, 80, 85],"float32"), Tensor([385, 4],"int64"), ) 	 50919940 	 1000 	 0.010809659957885742 	 60.26774764060974 	 1.621246337890625e-05 	 0.00021576881408691406 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:36:39.483691 test begin: paddle.Tensor.gather_nd(Tensor([8, 3, 80, 312, 85],"float32"), Tensor([385, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([8, 3, 80, 312, 85],"float32"), Tensor([385, 4],"int64"), ) 	 50919940 	 1000 	 0.010423421859741211 	 65.30409789085388 	 1.239776611328125e-05 	 0.00012063980102539062 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:37:45.925049 test begin: paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 331],"float32"), Tensor([385, 4],"int64"), )
[Prof] paddle.Tensor.gather_nd 	 paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 331],"float32"), Tensor([385, 4],"int64"), ) 	 50843140 	 1000 	 0.010513067245483398 	 59.96699404716492 	 1.3113021850585938e-05 	 0.0002257823944091797 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:38:46.965991 test begin: paddle.Tensor.gcd(x=Tensor([127008, 2, 4, 5],"int32"), y=Tensor([127008, 2, 4, 5],"int32"), )
W0727 20:38:59.158329 25100 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.Tensor.gcd 	 paddle.Tensor.gcd(x=Tensor([127008, 2, 4, 5],"int32"), y=Tensor([127008, 2, 4, 5],"int32"), ) 	 10160640 	 1000 	 12.022888660430908 	 0.16440463066101074 	 5.5789947509765625e-05 	 0.14773178100585938 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:38:59.366196 test begin: paddle.Tensor.gcd(x=Tensor([2, 4, 635040],"int32"), y=Tensor([2, 4, 635040],"int32"), )
W0727 20:39:11.559731 25106 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.Tensor.gcd 	 paddle.Tensor.gcd(x=Tensor([2, 4, 635040],"int32"), y=Tensor([2, 4, 635040],"int32"), ) 	 10160640 	 1000 	 12.03462028503418 	 0.15897297859191895 	 4.5299530029296875e-05 	 0.1479949951171875 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:39:11.746156 test begin: paddle.Tensor.gcd(x=Tensor([2, 508032, 5],"int32"), y=Tensor([2, 508032, 5],"int32"), )
W0727 20:39:24.481643 25118 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.Tensor.gcd 	 paddle.Tensor.gcd(x=Tensor([2, 508032, 5],"int32"), y=Tensor([2, 508032, 5],"int32"), ) 	 10160640 	 1000 	 12.58158540725708 	 0.15874814987182617 	 6.079673767089844e-05 	 0.14782309532165527 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:39:24.667247 test begin: paddle.Tensor.gcd(x=Tensor([254016, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
W0727 20:39:46.771400 25125 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.Tensor.gcd 	 paddle.Tensor.gcd(x=Tensor([254016, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 	 5080330 	 1000 	 21.925543308258057 	 0.43540191650390625 	 4.935264587402344e-05 	 0.4155740737915039 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:39:47.247932 test begin: paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([130],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([130],"int64"), ) 	 50803354 	 1000 	 0.009171247482299805 	 0.012964248657226562 	 1.3589859008789062e-05 	 3.147125244140625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:48.535390 test begin: paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([182],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([182],"int64"), ) 	 50803406 	 1000 	 0.009290218353271484 	 0.012686729431152344 	 1.9788742065429688e-05 	 2.765655517578125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:49.535736 test begin: paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([91],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([91],"int64"), ) 	 50803315 	 1000 	 0.00946354866027832 	 0.012833118438720703 	 1.7404556274414062e-05 	 2.5510787963867188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:50.536024 test begin: paddle.Tensor.index_select(Tensor([4004, 12689],"float32"), axis=0, index=Tensor([182],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([4004, 12689],"float32"), axis=0, index=Tensor([182],"int64"), ) 	 50806938 	 1000 	 0.030333280563354492 	 0.027561426162719727 	 0.02132701873779297 	 0.014388799667358398 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:51.637370 test begin: paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), ) 	 25497697 	 1000 	 8.41473913192749 	 8.600384950637817 	 8.405744075775146 	 8.586162090301514 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:40:26.430800 test begin: paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([130],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([130],"int64"), ) 	 50803638 	 1000 	 0.18861150741577148 	 0.17141318321228027 	 0.17960309982299805 	 0.1571204662322998 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:40:28.137657 test begin: paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([91],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([91],"int64"), ) 	 50803599 	 1000 	 0.13341474533081055 	 0.12112879753112793 	 0.12404584884643555 	 0.10765957832336426 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:40:29.679393 test begin: paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), )
[Prof] paddle.Tensor.index_select 	 paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), ) 	 25412497 	 1000 	 7.637399435043335 	 7.144823789596558 	 7.628326654434204 	 7.130714416503906 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:41:00.305643 test begin: paddle.Tensor.inner(x=Tensor([2, 1058401, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 1058401, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 	 25401744 	 1000 	 1.9627466201782227 	 1.967705249786377 	 0.28656840324401855 	 0.28644275665283203 	 3.366269826889038 	 3.2381513118743896 	 0.3823060989379883 	 0.3671691417694092 	 
2025-07-27 20:41:16.171421 test begin: paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), ) 	 25401744 	 1000 	 1.4605755805969238 	 1.4557645320892334 	 0.21318721771240234 	 0.21246767044067383 	 4.073627233505249 	 4.066618204116821 	 0.46213555335998535 	 0.4617631435394287 	 
2025-07-27 20:41:31.788452 test begin: paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), ) 	 25401780 	 1000 	 1.8384754657745361 	 1.869565486907959 	 0.268355131149292 	 0.27150964736938477 	 3.4045169353485107 	 3.662180185317993 	 0.38605213165283203 	 0.41594505310058594 	 
2025-07-27 20:41:47.062582 test begin: paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), ) 	 25401760 	 1000 	 1.459676742553711 	 1.4547467231750488 	 0.21306777000427246 	 0.21230173110961914 	 4.071504831314087 	 4.066296577453613 	 0.46190428733825684 	 0.46175169944763184 	 
2025-07-27 20:42:02.748198 test begin: paddle.Tensor.inner(x=Tensor([2, 5, 3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 5, 3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), ) 	 50803260 	 1000 	 0.33696961402893066 	 0.33336639404296875 	 0.1721036434173584 	 0.17027950286865234 	 0.7105257511138916 	 0.7480576038360596 	 0.3639976978302002 	 0.38197994232177734 	 
2025-07-27 20:42:06.023550 test begin: paddle.Tensor.inner(x=Tensor([2, 5, 635041, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2, 5, 635041, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 	 25401760 	 1000 	 1.969290018081665 	 1.9689435958862305 	 0.2875058650970459 	 0.2864208221435547 	 3.370637893676758 	 3.2412829399108887 	 0.38282036781311035 	 0.3675365447998047 	 
2025-07-27 20:42:21.656367 test begin: paddle.Tensor.inner(x=Tensor([2116801, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([2116801, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), ) 	 25401652 	 1000 	 1.8635919094085693 	 1.8520028591156006 	 0.2720375061035156 	 0.270369291305542 	 2.2428383827209473 	 2.2753701210021973 	 0.2546865940093994 	 0.2580580711364746 	 
2025-07-27 20:42:31.842525 test begin: paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), ) 	 25401636 	 1000 	 1.3686997890472412 	 1.3704876899719238 	 0.19980573654174805 	 0.19954442977905273 	 2.651667594909668 	 2.6337718963623047 	 0.3008394241333008 	 0.298936128616333 	 
2025-07-27 20:42:43.059932 test begin: paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), ) 	 25401672 	 1000 	 1.3832852840423584 	 1.3874740600585938 	 0.2019343376159668 	 0.20253491401672363 	 2.367405652999878 	 2.4509758949279785 	 0.26850008964538574 	 0.2782247066497803 	 
2025-07-27 20:42:51.600046 test begin: paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), ) 	 25401652 	 1000 	 1.3730597496032715 	 1.3752245903015137 	 0.2004401683807373 	 0.20076346397399902 	 2.65258526802063 	 2.633873701095581 	 0.3009498119354248 	 0.298931360244751 	 
2025-07-27 20:43:00.603899 test begin: paddle.Tensor.inner(x=Tensor([3, 8467201],"float64"), y=Tensor([3, 2, 5, 8467201],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([3, 8467201],"float64"), y=Tensor([3, 2, 5, 8467201],"float64"), ) 	 279417633 	 1000 	 1.7779483795166016 	 1.7719018459320068 	 0.9085147380828857 	 0.9061787128448486 	 4.034014940261841 	 4.216049671173096 	 0.2289261817932129 	 0.23916316032409668 	 
2025-07-27 20:43:18.451173 test begin: paddle.Tensor.inner(x=Tensor([3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), ) 	 27941793 	 1000 	 0.1926581859588623 	 0.19195342063903809 	 0.09836673736572266 	 0.09803342819213867 	 0.4179196357727051 	 0.4232015609741211 	 0.21344566345214844 	 0.21612191200256348 	 
2025-07-27 20:43:25.678383 test begin: paddle.Tensor.inner(x=Tensor([423361, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([423361, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 	 25401780 	 1000 	 1.97381591796875 	 2.9502756595611572 	 0.28818392753601074 	 0.2871713638305664 	 3.367934465408325 	 3.2402994632720947 	 0.38251590728759766 	 0.36731410026550293 	 
2025-07-27 20:43:43.723107 test begin: paddle.Tensor.inner(x=Tensor([5, 1270081, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([5, 1270081, 4],"float64"), y=Tensor([2, 5, 4],"float64"), ) 	 25401660 	 1000 	 1.863264799118042 	 1.8520081043243408 	 0.27200913429260254 	 0.27031922340393066 	 2.245323657989502 	 2.2786779403686523 	 0.25498104095458984 	 0.25846290588378906 	 
2025-07-27 20:43:53.829206 test begin: paddle.Tensor.inner(x=Tensor([5, 3, 1693441],"float64"), y=Tensor([2, 5, 1693441],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([5, 3, 1693441],"float64"), y=Tensor([2, 5, 1693441],"float64"), ) 	 42336025 	 1000 	 0.2977302074432373 	 0.28990721702575684 	 0.15205812454223633 	 0.14806890487670898 	 0.821211576461792 	 0.8678152561187744 	 0.20975732803344727 	 0.2216663360595703 	 
2025-07-27 20:43:56.992319 test begin: paddle.Tensor.inner(x=Tensor([5, 3, 2540161],"float64"), y=Tensor([2, 5, 2540161],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([5, 3, 2540161],"float64"), y=Tensor([2, 5, 2540161],"float64"), ) 	 63504025 	 1000 	 0.4318990707397461 	 0.4259011745452881 	 0.2204596996307373 	 0.21762681007385254 	 1.25132155418396 	 1.3141624927520752 	 0.2130599021911621 	 0.22372817993164062 	 
2025-07-27 20:44:01.775997 test begin: paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([1270081, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([1270081, 5, 4],"float64"), ) 	 25401680 	 1000 	 1.567570686340332 	 1.562471628189087 	 0.2288501262664795 	 0.2280583381652832 	 2.475799322128296 	 2.677852153778076 	 0.2808806896209717 	 0.3040156364440918 	 
2025-07-27 20:44:12.635376 test begin: paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 3175201, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 3175201, 4],"float64"), ) 	 25401668 	 1000 	 1.5629332065582275 	 1.5580956935882568 	 0.22820496559143066 	 0.22740721702575684 	 2.7912490367889404 	 2.7942535877227783 	 0.3167300224304199 	 0.317180871963501 	 
2025-07-27 20:44:23.926330 test begin: paddle.Tensor.inner(x=Tensor([6350401, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
[Prof] paddle.Tensor.inner 	 paddle.Tensor.inner(x=Tensor([6350401, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), ) 	 25401724 	 1000 	 1.965174674987793 	 1.967665672302246 	 0.2869257926940918 	 0.28716444969177246 	 3.368133306503296 	 3.240126609802246 	 0.3826260566711426 	 0.3674449920654297 	 
2025-07-27 20:44:40.257837 test begin: paddle.Tensor.inverse(Tensor([4, 39690, 4, 4],"float64"), )
[Prof] paddle.Tensor.inverse 	 paddle.Tensor.inverse(Tensor([4, 39690, 4, 4],"float64"), ) 	 2540160 	 1000 	 7.542004823684692 	 0.3390538692474365 	 8.177757263183594e-05 	 8.869171142578125e-05 	 5.395341873168945 	 1.968184471130371 	 0.9200441837310791 	 0.28731465339660645 	 
2025-07-27 20:44:55.648899 test begin: paddle.Tensor.inverse(Tensor([70560, 6, 6],"float64"), )
[Prof] paddle.Tensor.inverse 	 paddle.Tensor.inverse(Tensor([70560, 6, 6],"float64"), ) 	 2540160 	 1000 	 3.628037929534912 	 0.39357686042785645 	 4.863739013671875e-05 	 7.891654968261719e-05 	 2.197673797607422 	 1.672783374786377 	 0.5622434616088867 	 0.34128689765930176 	 
2025-07-27 20:45:03.655556 test begin: paddle.Tensor.inverse(Tensor([79380, 2, 4, 4],"float64"), )
[Prof] paddle.Tensor.inverse 	 paddle.Tensor.inverse(Tensor([79380, 2, 4, 4],"float64"), ) 	 2540160 	 1000 	 7.514514446258545 	 0.339907169342041 	 9.72747802734375e-05 	 8.392333984375e-05 	 5.39290976524353 	 1.9681191444396973 	 0.9196617603302002 	 0.28730320930480957 	 
2025-07-27 20:45:18.997629 test begin: paddle.Tensor.is_complex(Tensor([2, 3, 100, 42337],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3, 100, 42337],"float64"), ) 	 25402200 	 1000 	 0.003665447235107422 	 0.0015723705291748047 	 6.67572021484375e-06 	 1.4543533325195312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:19.532439 test begin: paddle.Tensor.is_complex(Tensor([2, 3, 105841, 40],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3, 105841, 40],"float64"), ) 	 25401840 	 1000 	 0.003595590591430664 	 0.0015990734100341797 	 1.0013580322265625e-05 	 1.52587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:20.065894 test begin: paddle.Tensor.is_complex(Tensor([2, 3, 40, 105841],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3, 40, 105841],"float64"), ) 	 25401840 	 1000 	 0.003674030303955078 	 0.0016181468963623047 	 7.152557373046875e-06 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:20.605012 test begin: paddle.Tensor.is_complex(Tensor([2, 3, 42337, 100],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3, 42337, 100],"float64"), ) 	 25402200 	 1000 	 0.0035915374755859375 	 0.001611948013305664 	 8.106231689453125e-06 	 1.4781951904296875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:21.135775 test begin: paddle.Tensor.is_complex(Tensor([2, 3176, 100, 40],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3176, 100, 40],"float64"), ) 	 25408000 	 1000 	 0.0036225318908691406 	 0.0016298294067382812 	 5.9604644775390625e-06 	 1.430511474609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:21.664521 test begin: paddle.Tensor.is_complex(Tensor([2, 3176, 40, 100],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2, 3176, 40, 100],"float64"), ) 	 25408000 	 1000 	 0.0036444664001464844 	 0.0015864372253417969 	 5.7220458984375e-06 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:22.193257 test begin: paddle.Tensor.is_complex(Tensor([2117, 3, 100, 40],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2117, 3, 100, 40],"float64"), ) 	 25404000 	 1000 	 0.003849506378173828 	 0.001573801040649414 	 1.0728836059570312e-05 	 1.4543533325195312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:22.721936 test begin: paddle.Tensor.is_complex(Tensor([2117, 3, 40, 100],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([2117, 3, 40, 100],"float64"), ) 	 25404000 	 1000 	 0.005138874053955078 	 0.002118349075317383 	 9.775161743164062e-06 	 2.5510787963867188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:23.252391 test begin: paddle.Tensor.is_complex(Tensor([3, 100, 84673],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([3, 100, 84673],"float64"), ) 	 25401900 	 1000 	 0.003594636917114258 	 0.0016083717346191406 	 6.198883056640625e-06 	 1.4781951904296875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:23.780483 test begin: paddle.Tensor.is_complex(Tensor([3, 211681, 40],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([3, 211681, 40],"float64"), ) 	 25401720 	 1000 	 0.003577709197998047 	 0.0015969276428222656 	 6.198883056640625e-06 	 1.52587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:24.310798 test begin: paddle.Tensor.is_complex(Tensor([6351, 100, 40],"float64"), )
[Prof] paddle.Tensor.is_complex 	 paddle.Tensor.is_complex(Tensor([6351, 100, 40],"float64"), ) 	 25404000 	 1000 	 0.004109859466552734 	 0.0015864372253417969 	 1.6927719116210938e-05 	 1.4543533325195312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:24.840019 test begin: paddle.Tensor.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), )
[Prof] paddle.Tensor.isclose 	 paddle.Tensor.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), ) 	 50803240 	 1000 	 0.3632957935333252 	 3.083739995956421 	 0.3510127067565918 	 0.24200105667114258 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:29.345042 test begin: paddle.Tensor.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
[Prof] paddle.Tensor.isclose 	 paddle.Tensor.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), ) 	 50803202 	 1000 	 0.3633582592010498 	 3.0838122367858887 	 0.3509862422943115 	 0.24198579788208008 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:36.679394 test begin: paddle.Tensor.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), )
[Prof] paddle.Tensor.isclose 	 paddle.Tensor.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), ) 	 50803230 	 1000 	 0.36338090896606445 	 3.0836586952209473 	 0.3509066104888916 	 0.24193239212036133 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:45.003056 test begin: paddle.Tensor.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.Tensor.isclose 	 paddle.Tensor.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), ) 	 50803224 	 1000 	 0.36324477195739746 	 3.0835819244384766 	 0.3434569835662842 	 0.24194002151489258 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:49.516167 test begin: paddle.Tensor.isclose(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.isclose 	 paddle.Tensor.isclose(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.42691993713378906 	 3.3111352920532227 	 0.40728116035461426 	 0.2599642276763916 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:54.994105 test begin: paddle.Tensor.isnan(Tensor([25401601],"float64"), )
[Prof] paddle.Tensor.isnan 	 paddle.Tensor.isnan(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.18084287643432617 	 0.16876912117004395 	 0.1734914779663086 	 0.1580188274383545 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:55.886115 test begin: paddle.Tensor.isnan(Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.isnan 	 paddle.Tensor.isnan(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.23486876487731934 	 0.1895160675048828 	 0.22768950462341309 	 0.17472457885742188 	 None 	 None 	 None 	 None 	 
2025-07-27 20:45:57.124253 test begin: paddle.Tensor.item(Tensor([16934401, 3],"float32"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([16934401, 3],"float32"), 0, ) 	 50803203 	 1000 	 0.020687103271484375 	 0.02824091911315918 	 2.3126602172851562e-05 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:45:57.992822 test begin: paddle.Tensor.item(Tensor([2, 1, 12700801],"int64"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([2, 1, 12700801],"int64"), 0, ) 	 25401602 	 1000 	 0.021533966064453125 	 0.0285336971282959 	 4.7206878662109375e-05 	 5.5789947509765625e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:45:58.482464 test begin: paddle.Tensor.item(Tensor([2, 1, 25401601],"int32"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([2, 1, 25401601],"int32"), 0, ) 	 50803202 	 1000 	 0.0204923152923584 	 0.028505563735961914 	 8.821487426757812e-06 	 3.361701965332031e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:45:59.122553 test begin: paddle.Tensor.item(Tensor([2, 12700801, 1],"int64"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([2, 12700801, 1],"int64"), 0, ) 	 25401602 	 1000 	 0.020157814025878906 	 0.028337717056274414 	 8.58306884765625e-06 	 3.409385681152344e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:45:59.577327 test begin: paddle.Tensor.item(Tensor([2, 25401601, 1],"int32"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([2, 25401601, 1],"int32"), 0, ) 	 50803202 	 1000 	 0.020440101623535156 	 0.029835939407348633 	 1.7404556274414062e-05 	 4.887580871582031e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:00.207632 test begin: paddle.Tensor.item(Tensor([25401601, 1, 1],"int64"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([25401601, 1, 1],"int64"), 0, ) 	 25401601 	 1000 	 0.020801544189453125 	 0.02889847755432129 	 1.6927719116210938e-05 	 3.62396240234375e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:00.670426 test begin: paddle.Tensor.item(Tensor([3, 16934401],"float32"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([3, 16934401],"float32"), 0, ) 	 50803203 	 1000 	 0.020400285720825195 	 0.028340816497802734 	 6.4373016357421875e-06 	 2.9802322387695312e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:01.550082 test begin: paddle.Tensor.item(Tensor([50803201, 1, 1],"int32"), 0, )
[Prof] paddle.Tensor.item 	 paddle.Tensor.item(Tensor([50803201, 1, 1],"int32"), 0, ) 	 50803201 	 1000 	 0.020442724227905273 	 0.02823662757873535 	 8.344650268554688e-06 	 3.886222839355469e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:02.180265 test begin: paddle.Tensor.kthvalue(Tensor([2, 200, 127009],"float32"), k=200, axis=1, )
[Prof] paddle.Tensor.kthvalue 	 paddle.Tensor.kthvalue(Tensor([2, 200, 127009],"float32"), k=200, axis=1, ) 	 50803600 	 1000 	 6.724299192428589 	 11.605057001113892 	 1.7151877880096436 	 11.580300331115723 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:46:25.271792 test begin: paddle.Tensor.kthvalue(Tensor([2, 2540161, 10],"float32"), k=200, axis=1, )
[Prof] paddle.Tensor.kthvalue 	 paddle.Tensor.kthvalue(Tensor([2, 2540161, 10],"float32"), k=200, axis=1, ) 	 50803220 	 1000 	 37.19477963447571 	 32.96093010902405 	 9.484326124191284 	 32.94187307357788 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:47:40.659682 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.0, ) 	 50803360 	 1000 	 0.45090413093566895 	 0.44501352310180664 	 0.23032140731811523 	 0.43055295944213867 	 0.4821014404296875 	 0.5966975688934326 	 0.4208967685699463 	 0.30485987663269043 	 
2025-07-27 20:47:44.210792 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.5, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.5, ) 	 50803360 	 1000 	 0.4508333206176758 	 0.4665865898132324 	 0.230454683303833 	 0.4319009780883789 	 0.4820883274078369 	 0.596602201461792 	 0.42122507095336914 	 0.3048233985900879 	 
2025-07-27 20:47:47.859959 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=1.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=1.0, ) 	 50803360 	 1000 	 0.450702428817749 	 0.4449737071990967 	 0.23015379905700684 	 0.43205904960632324 	 0.4821510314941406 	 0.5978190898895264 	 0.4192850589752197 	 0.306016206741333 	 
2025-07-27 20:47:51.412593 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.0, ) 	 50803320 	 1000 	 0.450608491897583 	 0.46570277214050293 	 0.2302243709564209 	 0.43205738067626953 	 0.48105692863464355 	 0.5968530178070068 	 0.42015600204467773 	 0.30483269691467285 	 
2025-07-27 20:47:58.024309 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.5, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.5, ) 	 50803320 	 1000 	 0.4505605697631836 	 0.4450404644012451 	 0.23029041290283203 	 0.4250142574310303 	 0.48119020462036133 	 0.5966176986694336 	 0.41071295738220215 	 0.304720401763916 	 
2025-07-27 20:48:01.823607 test begin: paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=1.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=1.0, ) 	 50803320 	 1000 	 0.45029163360595703 	 0.4449422359466553 	 0.23004937171936035 	 0.4250638484954834 	 0.48108887672424316 	 0.5966477394104004 	 0.41065239906311035 	 0.3048734664916992 	 
2025-07-27 20:48:05.365275 test begin: paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.0, ) 	 50803296 	 1000 	 0.4507486820220947 	 0.4481959342956543 	 0.23023533821105957 	 0.4250175952911377 	 0.48107075691223145 	 0.5966553688049316 	 0.41059041023254395 	 0.3048367500305176 	 
2025-07-27 20:48:09.040568 test begin: paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.5, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.5, ) 	 50803296 	 1000 	 0.4506497383117676 	 0.44501829147338867 	 0.23021650314331055 	 0.42513179779052734 	 0.4810798168182373 	 0.5979840755462646 	 0.4045994281768799 	 0.3048217296600342 	 
2025-07-27 20:48:12.622544 test begin: paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=1.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=1.0, ) 	 50803296 	 1000 	 0.45046114921569824 	 0.4455270767211914 	 0.23013639450073242 	 0.4249744415283203 	 0.481231689453125 	 0.5967404842376709 	 0.4112064838409424 	 0.30489397048950195 	 
2025-07-27 20:48:16.170234 test begin: paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.0, ) 	 50803320 	 1000 	 0.4505805969238281 	 0.4450063705444336 	 0.23021602630615234 	 0.4251070022583008 	 0.4811365604400635 	 0.5967156887054443 	 0.4111666679382324 	 0.3048720359802246 	 
2025-07-27 20:48:19.773076 test begin: paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.5, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.5, ) 	 50803320 	 1000 	 0.4518280029296875 	 0.4449729919433594 	 0.23143243789672852 	 0.42502570152282715 	 0.4809873104095459 	 0.5966510772705078 	 0.4106166362762451 	 0.30478334426879883 	 
2025-07-27 20:48:23.482656 test begin: paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=1.0, )
[Prof] paddle.Tensor.lerp 	 paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=1.0, ) 	 50803320 	 1000 	 0.4506502151489258 	 0.4489295482635498 	 0.23027467727661133 	 0.4320342540740967 	 0.4823300838470459 	 0.5967240333557129 	 0.42112278938293457 	 0.3048725128173828 	 
2025-07-27 20:48:27.077284 test begin: paddle.Tensor.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.less 	 paddle.Tensor.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), ) 	 101606420 	 1000 	 0.3264176845550537 	 0.3331155776977539 	 0.3173191547393799 	 0.31635141372680664 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:29.439959 test begin: paddle.Tensor.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), )
[Prof] paddle.Tensor.less 	 paddle.Tensor.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), ) 	 101607424 	 1000 	 0.3269665241241455 	 0.32789015769958496 	 0.31783390045166016 	 0.316455602645874 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:31.739347 test begin: paddle.Tensor.lgamma(Tensor([100, 100, 2541],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([100, 100, 2541],"float64"), ) 	 25410000 	 1000 	 0.7125763893127441 	 0.689908504486084 	 0.7041499614715576 	 0.6799201965332031 	 1.3841156959533691 	 1.5856306552886963 	 1.3302621841430664 	 0.8101344108581543 	 
2025-07-27 20:48:39.379337 test begin: paddle.Tensor.lgamma(Tensor([100, 2541, 100],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([100, 2541, 100],"float64"), ) 	 25410000 	 1000 	 0.7125327587127686 	 0.6899054050445557 	 0.7041094303131104 	 0.6802628040313721 	 1.3840892314910889 	 1.5854711532592773 	 1.3314359188079834 	 0.8100988864898682 	 
2025-07-27 20:48:44.810988 test begin: paddle.Tensor.lgamma(Tensor([2541, 100, 100],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([2541, 100, 100],"float64"), ) 	 25410000 	 1000 	 0.7125475406646729 	 0.6935646533966064 	 0.7041783332824707 	 0.6796870231628418 	 1.3828175067901611 	 1.585477352142334 	 1.3301334381103516 	 0.8101248741149902 	 
2025-07-27 20:48:50.267278 test begin: paddle.Tensor.lgamma(Tensor([453601, 7, 8],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([453601, 7, 8],"float64"), ) 	 25401656 	 1000 	 0.7124190330505371 	 0.6897573471069336 	 0.7039964199066162 	 0.6800777912139893 	 1.3832545280456543 	 1.5864195823669434 	 1.3310999870300293 	 0.8112151622772217 	 
2025-07-27 20:48:55.718397 test begin: paddle.Tensor.lgamma(Tensor([45361, 7, 8, 10],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([45361, 7, 8, 10],"float64"), ) 	 25402160 	 1000 	 0.7124097347259521 	 0.9138264656066895 	 0.7039306163787842 	 0.6774351596832275 	 1.3792805671691895 	 1.5852484703063965 	 1.326765775680542 	 0.8099613189697266 	 
2025-07-27 20:49:03.940996 test begin: paddle.Tensor.lgamma(Tensor([5, 635041, 8],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([5, 635041, 8],"float64"), ) 	 25401640 	 1000 	 0.7136852741241455 	 0.6897809505462646 	 0.705193281173706 	 0.6799273490905762 	 1.3833153247833252 	 1.5864710807800293 	 1.3309969902038574 	 0.811241626739502 	 
2025-07-27 20:49:09.370537 test begin: paddle.Tensor.lgamma(Tensor([5, 63505, 8, 10],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([5, 63505, 8, 10],"float64"), ) 	 25402000 	 1000 	 0.7124471664428711 	 0.689812183380127 	 0.7034454345703125 	 0.680124044418335 	 1.3805384635925293 	 1.5865216255187988 	 1.3279213905334473 	 0.8099901676177979 	 
2025-07-27 20:49:14.894566 test begin: paddle.Tensor.lgamma(Tensor([5, 7, 725761],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([5, 7, 725761],"float64"), ) 	 25401635 	 1000 	 0.7124686241149902 	 0.6897563934326172 	 0.7040777206420898 	 0.6799306869506836 	 1.3845455646514893 	 1.5851755142211914 	 1.331852912902832 	 0.810002326965332 	 
2025-07-27 20:49:20.366392 test begin: paddle.Tensor.lgamma(Tensor([5, 7, 72577, 10],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([5, 7, 72577, 10],"float64"), ) 	 25401950 	 1000 	 0.7123932838439941 	 0.6897406578063965 	 0.7039699554443359 	 0.6801817417144775 	 1.3814833164215088 	 1.5851545333862305 	 1.3288424015045166 	 0.8099727630615234 	 
2025-07-27 20:49:25.876860 test begin: paddle.Tensor.lgamma(Tensor([5, 7, 8, 90721],"float64"), )
[Prof] paddle.Tensor.lgamma 	 paddle.Tensor.lgamma(Tensor([5, 7, 8, 90721],"float64"), ) 	 25401880 	 1000 	 0.7137651443481445 	 0.6898162364959717 	 0.7051565647125244 	 0.6798880100250244 	 1.3819260597229004 	 1.586460828781128 	 1.3273799419403076 	 0.8112647533416748 	 
2025-07-27 20:49:31.556186 test begin: paddle.Tensor.log(Tensor([100, 200, 1271],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([100, 200, 1271],"float64"), ) 	 25420000 	 1000 	 0.30550074577331543 	 0.30674052238464355 	 0.2970578670501709 	 0.2963857650756836 	 0.4482579231262207 	 0.44912099838256836 	 0.3921341896057129 	 0.38402295112609863 	 
2025-07-27 20:49:34.150478 test begin: paddle.Tensor.log(Tensor([100, 2541, 100],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([100, 2541, 100],"float64"), ) 	 25410000 	 1000 	 0.30547642707824707 	 1.0731918811798096 	 0.29575300216674805 	 0.29615044593811035 	 0.44788098335266113 	 0.44901537895202637 	 0.39343738555908203 	 0.3834190368652344 	 
2025-07-27 20:49:41.296355 test begin: paddle.Tensor.log(Tensor([10000, 5, 509],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([10000, 5, 509],"float64"), ) 	 25450000 	 1000 	 0.30602002143859863 	 0.30704307556152344 	 0.29770684242248535 	 0.29285264015197754 	 0.44843053817749023 	 0.44977784156799316 	 0.393505334854126 	 0.3796510696411133 	 
2025-07-27 20:49:43.865063 test begin: paddle.Tensor.log(Tensor([10000, 847, 3],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([10000, 847, 3],"float64"), ) 	 25410000 	 1000 	 0.30544376373291016 	 0.31130146980285645 	 0.29709482192993164 	 0.29672884941101074 	 0.4481334686279297 	 0.449005126953125 	 0.3892946243286133 	 0.38292717933654785 	 
2025-07-27 20:49:46.440587 test begin: paddle.Tensor.log(Tensor([1271, 200, 100],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([1271, 200, 100],"float64"), ) 	 25420000 	 1000 	 0.305492639541626 	 0.3065924644470215 	 0.2970006465911865 	 0.295975923538208 	 0.4482579231262207 	 0.4491734504699707 	 0.3939082622528076 	 0.3832588195800781 	 
2025-07-27 20:49:49.054090 test begin: paddle.Tensor.log(Tensor([1693441, 5, 3],"float64"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([1693441, 5, 3],"float64"), ) 	 25401615 	 1000 	 0.3053133487701416 	 0.30649495124816895 	 0.2969212532043457 	 0.2960472106933594 	 0.448591947555542 	 0.44883060455322266 	 0.39417338371276855 	 0.38228654861450195 	 
2025-07-27 19:17:35.998787 test begin: paddle.Tensor.log(Tensor([4800, 10585],"float32"), )
W0727 19:17:39.914819 159719 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([4800, 10585],"float32"), ) 	 50808000 	 1000 	 0.298429012298584 	 0.2987654209136963 	 0.28840136528015137 	 0.2865123748779297 	 0.4505281448364258 	 0.4499168395996094 	 0.39270448684692383 	 0.3804464340209961 	 
2025-07-27 19:17:42.786064 test begin: paddle.Tensor.log(Tensor([503002, 101],"float32"), )
[Prof] paddle.Tensor.log 	 paddle.Tensor.log(Tensor([503002, 101],"float32"), ) 	 50803202 	 1000 	 0.2958958148956299 	 0.29770588874816895 	 0.2867772579193115 	 0.28064393997192383 	 0.45064330101013184 	 0.45110011100769043 	 0.382587194442749 	 0.3816955089569092 	 
2025-07-27 19:17:46.036079 test begin: paddle.Tensor.log10(Tensor([101811, 499],"float32"), )
[Prof] paddle.Tensor.log10 	 paddle.Tensor.log10(Tensor([101811, 499],"float32"), ) 	 50803689 	 1000 	 0.29830169677734375 	 0.29763317108154297 	 0.2872951030731201 	 0.2867751121520996 	 0.45051145553588867 	 0.7456166744232178 	 0.3941161632537842 	 0.3809640407562256 	 
2025-07-27 19:17:49.554611 test begin: paddle.Tensor.log10(Tensor([80, 635041],"float32"), )
[Prof] paddle.Tensor.log10 	 paddle.Tensor.log10(Tensor([80, 635041],"float32"), ) 	 50803280 	 1000 	 0.3016500473022461 	 0.30052661895751953 	 0.287355899810791 	 0.2868666648864746 	 0.45047974586486816 	 0.7459561824798584 	 0.39351344108581543 	 0.3812873363494873 	 
2025-07-27 19:17:52.951695 test begin: paddle.Tensor.log1p(Tensor([16934401, 3],"float32"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([16934401, 3],"float32"), ) 	 50803203 	 1000 	 0.29701709747314453 	 0.2988700866699219 	 0.2868373394012451 	 0.2886052131652832 	 0.4517648220062256 	 0.7456076145172119 	 0.39441847801208496 	 0.38094282150268555 	 
2025-07-27 19:17:56.312958 test begin: paddle.Tensor.log1p(Tensor([2, 25401601],"float32"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.2978215217590332 	 0.2988927364349365 	 0.2868671417236328 	 0.2867922782897949 	 0.4503765106201172 	 0.745689868927002 	 0.392810583114624 	 0.380979061126709 	 
2025-07-27 19:17:59.715947 test begin: paddle.Tensor.log1p(Tensor([2, 3, 4233601],"float64"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([2, 3, 4233601],"float64"), ) 	 25401606 	 1000 	 0.30527353286743164 	 0.3358743190765381 	 0.2937803268432617 	 0.32560276985168457 	 0.44810914993286133 	 0.7446441650390625 	 0.3916337490081787 	 0.3803822994232178 	 
2025-07-27 19:18:02.608411 test begin: paddle.Tensor.log1p(Tensor([2, 6350401, 2],"float64"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([2, 6350401, 2],"float64"), ) 	 25401604 	 1000 	 0.3067448139190674 	 0.33595919609069824 	 0.29650068283081055 	 0.3191688060760498 	 0.44815540313720703 	 0.7447221279144287 	 0.3832967281341553 	 0.38049745559692383 	 
2025-07-27 19:18:05.493088 test begin: paddle.Tensor.log1p(Tensor([25401601],"float64"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.3051729202270508 	 0.3360748291015625 	 0.29640817642211914 	 0.32559967041015625 	 0.44855403900146484 	 0.7447278499603271 	 0.39250946044921875 	 0.3804795742034912 	 
2025-07-27 19:18:08.353192 test begin: paddle.Tensor.log1p(Tensor([4233601, 3, 2],"float64"), )
[Prof] paddle.Tensor.log1p 	 paddle.Tensor.log1p(Tensor([4233601, 3, 2],"float64"), ) 	 25401606 	 1000 	 0.30518627166748047 	 0.3358650207519531 	 0.2964503765106201 	 0.3253591060638428 	 0.4485204219818115 	 0.7447707653045654 	 0.3926217555999756 	 0.3805408477783203 	 
2025-07-27 19:18:11.148786 test begin: paddle.Tensor.logical_and(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
[Prof] paddle.Tensor.logical_and 	 paddle.Tensor.logical_and(Tensor([50803201],"bool"), Tensor([50803201],"bool"), ) 	 101606402 	 1000 	 0.11840295791625977 	 0.11654281616210938 	 0.10889840126037598 	 0.10269546508789062 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:12.864961 test begin: paddle.Tensor.logical_not(Tensor([50803201],"bool"), )
[Prof] paddle.Tensor.logical_not 	 paddle.Tensor.logical_not(Tensor([50803201],"bool"), ) 	 50803201 	 1000 	 0.0815877914428711 	 0.08156299591064453 	 0.06580710411071777 	 0.06007266044616699 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:13.798533 test begin: paddle.Tensor.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
[Prof] paddle.Tensor.logical_or 	 paddle.Tensor.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), ) 	 101606402 	 1000 	 0.11789226531982422 	 0.11618566513061523 	 0.10139775276184082 	 0.09582710266113281 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:15.458341 test begin: paddle.Tensor.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, )
[Prof] paddle.Tensor.logit 	 paddle.Tensor.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, ) 	 25401660 	 1000 	 0.3273282051086426 	 0.3027377128601074 	 0.3085825443267822 	 0.28295040130615234 	 0.44370532035827637 	 0.4488792419433594 	 0.37948012351989746 	 0.35846829414367676 	 
2025-07-27 19:18:17.998896 test begin: paddle.Tensor.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, )
[Prof] paddle.Tensor.logit 	 paddle.Tensor.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, ) 	 25401640 	 1000 	 0.32549285888671875 	 0.30272746086120605 	 0.31607627868652344 	 0.2883317470550537 	 0.4436678886413574 	 0.44889259338378906 	 0.3827664852142334 	 0.3637568950653076 	 
2025-07-27 19:18:20.603038 test begin: paddle.Tensor.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, )
[Prof] paddle.Tensor.logit 	 paddle.Tensor.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, ) 	 25401630 	 1000 	 0.32573986053466797 	 0.3027205467224121 	 0.3159749507904053 	 0.28974127769470215 	 0.4434075355529785 	 0.4488062858581543 	 0.3828301429748535 	 0.36617112159729004 	 
2025-07-27 19:18:23.136622 test begin: paddle.Tensor.lu(Tensor([1693, 3],"float32"), )
/usr/local/lib/python3.10/dist-packages/torch/_tensor.py:924: UserWarning: torch.lu is deprecated in favor of torch.linalg.lu_factor / torch.linalg.lu_factor_ex and will be removed in a future PyTorch release.
LU, pivots = torch.lu(A, compute_pivots)
should be replaced with
LU, pivots = torch.linalg.lu_factor(A, compute_pivots)
and
LU, pivots, info = torch.lu(A, compute_pivots, get_infos=True)
should be replaced with
LU, pivots, info = torch.linalg.lu_factor_ex(A, compute_pivots) (Triggered internally at /pytorch/aten/src/ATen/native/BatchLinearAlgebra.cpp:2055.)
  LU, pivots, infos = torch._lu_with_info(
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([1693, 3],"float32"), ) 	 5079 	 1000 	 0.06977701187133789 	 0.188063383102417 	 4.6253204345703125e-05 	 7.605552673339844e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:24.045955 test begin: paddle.Tensor.lu(Tensor([216, 3, 2, 2],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([216, 3, 2, 2],"float64"), ) 	 2592 	 1000 	 13.607432842254639 	 0.03871750831604004 	 0.0002472400665283203 	 5.6743621826171875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:43.751700 test begin: paddle.Tensor.lu(Tensor([3, 1193],"float32"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([3, 1193],"float32"), ) 	 3579 	 1000 	 0.05895256996154785 	 0.14139795303344727 	 3.6716461181640625e-05 	 0.000335693359375 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:44.339402 test begin: paddle.Tensor.lu(Tensor([3, 3, 422],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([3, 3, 422],"float64"), ) 	 3798 	 1000 	 0.1436326503753662 	 0.14173030853271484 	 4.482269287109375e-05 	 4.1484832763671875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:45.036710 test begin: paddle.Tensor.lu(Tensor([3, 422, 3],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([3, 422, 3],"float64"), ) 	 3798 	 1000 	 0.09978604316711426 	 0.11206531524658203 	 3.910064697265625e-05 	 6.365776062011719e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:45.650934 test begin: paddle.Tensor.lu(Tensor([4, 187, 2, 2],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([4, 187, 2, 2],"float64"), ) 	 2992 	 1000 	 17.99085831642151 	 0.05191969871520996 	 0.00010395050048828125 	 6.890296936035156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:19:13.342606 test begin: paddle.Tensor.lu(Tensor([4, 3, 158, 2],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([4, 3, 158, 2],"float64"), ) 	 3792 	 1000 	 0.2983090877532959 	 0.1141517162322998 	 3.62396240234375e-05 	 6.127357482910156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:19:14.245784 test begin: paddle.Tensor.lu(Tensor([4, 3, 2, 158],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([4, 3, 2, 158],"float64"), ) 	 3792 	 1000 	 0.3975546360015869 	 0.17307162284851074 	 7.200241088867188e-05 	 0.00013208389282226562 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:19:15.315943 test begin: paddle.Tensor.lu(Tensor([522, 3, 3],"float64"), )
[Prof] paddle.Tensor.lu 	 paddle.Tensor.lu(Tensor([522, 3, 3],"float64"), ) 	 4698 	 1000 	 11.759508609771729 	 0.03891277313232422 	 0.00010228157043457031 	 6.365776062011719e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:19:32.085998 test begin: paddle.Tensor.masked_fill(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 1],"bool"), 0.0, ) 	 51001907 	 1000 	 1.110656976699829 	 1.9223847389221191 	 0.048996686935424805 	 0.21049904823303223 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:37.842263 test begin: paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1380],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1380],"bool"), 0.0, ) 	 101645280 	 1000 	 0.38556933403015137 	 0.650855302810669 	 0.09639954566955566 	 0.2215559482574463 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:42.386218 test begin: paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, ) 	 50859468 	 1000 	 0.14516615867614746 	 0.6301624774932861 	 0.048357248306274414 	 0.21119451522827148 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:44.980898 test begin: paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1325],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1325],"bool"), 0.0, ) 	 101672550 	 1000 	 0.37720823287963867 	 0.6517212390899658 	 0.09636378288269043 	 0.221893310546875 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:48.515308 test begin: paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, ) 	 50874642 	 1000 	 0.2472693920135498 	 0.6209092140197754 	 0.08421874046325684 	 0.21137619018554688 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:51.231761 test begin: paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, ) 	 50812650 	 1000 	 0.1418304443359375 	 0.6161603927612305 	 0.04822564125061035 	 0.2097012996673584 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:53.754110 test begin: paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 5942],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 5942],"bool"), 0.0, ) 	 101608200 	 1000 	 0.37716007232666016 	 0.6506137847900391 	 0.09636688232421875 	 0.22144865989685059 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:57.320217 test begin: paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, ) 	 52539750 	 1000 	 0.4586200714111328 	 0.6375644207000732 	 0.11696362495422363 	 0.32570457458496094 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:00.441603 test begin: paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([24, 8550, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([24, 8550, 1],"bool"), 0.0, ) 	 52736400 	 1000 	 0.1475517749786377 	 0.636538028717041 	 0.050177812576293945 	 0.32516026496887207 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:02.982886 test begin: paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, ) 	 56604636 	 1000 	 0.4918947219848633 	 0.6880068778991699 	 0.12548136711120605 	 0.3515346050262451 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:06.413478 test begin: paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([6, 36828, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([6, 36828, 1],"bool"), 0.0, ) 	 56788776 	 1000 	 0.15831780433654785 	 0.684673547744751 	 0.05385303497314453 	 0.3497474193572998 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:09.153329 test begin: paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, ) 	 58970079 	 1000 	 0.5137755870819092 	 0.7188408374786377 	 0.13089632987976074 	 0.2447197437286377 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:12.725715 test begin: paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([6, 38367, 1],"bool"), 0.0, )
[Prof] paddle.Tensor.masked_fill 	 paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([6, 38367, 1],"bool"), 0.0, ) 	 59161914 	 1000 	 0.16534423828125 	 0.7182066440582275 	 0.05641794204711914 	 0.24353623390197754 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:15.714588 test begin: paddle.Tensor.masked_select(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"bool"), )
[Prof] paddle.Tensor.masked_select 	 paddle.Tensor.masked_select(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"bool"), ) 	 101606500 	 1000 	 2.6205101013183594 	 2.4451022148132324 	 0.0016453266143798828 	 0.0023391246795654297 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:25.715485 test begin: paddle.Tensor.masked_select(Tensor([15000, 3387],"float32"), Tensor([15000, 3387],"bool"), )
[Prof] paddle.Tensor.masked_select 	 paddle.Tensor.masked_select(Tensor([15000, 3387],"float32"), Tensor([15000, 3387],"bool"), ) 	 101610000 	 1000 	 1.37680983543396 	 2.4512317180633545 	 0.0008454322814941406 	 0.0023298263549804688 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:33.367042 test begin: paddle.Tensor.masked_select(Tensor([50803201],"float32"), Tensor([50803201],"bool"), )
[Prof] paddle.Tensor.masked_select 	 paddle.Tensor.masked_select(Tensor([50803201],"float32"), Tensor([50803201],"bool"), ) 	 101606402 	 1000 	 4.821302890777588 	 1.138716697692871 	 0.002935647964477539 	 0.0009908676147460938 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:49.085335 test begin: paddle.Tensor.masked_select(Tensor([60000, 847],"float32"), Tensor([60000, 847],"bool"), )
[Prof] paddle.Tensor.masked_select 	 paddle.Tensor.masked_select(Tensor([60000, 847],"float32"), Tensor([60000, 847],"bool"), ) 	 101640000 	 1000 	 1.3736541271209717 	 2.4433624744415283 	 0.0008559226989746094 	 0.0023314952850341797 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:56.590073 test begin: paddle.Tensor.matmul(Tensor([110, 12, 197, 197],"float32"), Tensor([110, 12, 197, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([110, 12, 197, 197],"float32"), Tensor([110, 12, 197, 64],"float32"), ) 	 67870440 	 1000 	 1.0276682376861572 	 1.0275118350982666 	 1.0144588947296143 	 1.0034384727478027 	 1.7514772415161133 	 1.7511968612670898 	 0.8949759006500244 	 0.894690752029419 	 
2025-07-27 19:21:03.517320 test begin: paddle.Tensor.matmul(Tensor([124, 16, 100, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([124, 16, 100, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), ) 	 83621632 	 1000 	 1.1602270603179932 	 1.0292346477508545 	 1.147078514099121 	 1.0014550685882568 	 2.1498970985412598 	 2.049098253250122 	 1.1462926864624023 	 1.046809434890747 	 
2025-07-27 19:21:12.950442 test begin: paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 100],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 100],"float32"), ) 	 182030016 	 1000 	 2.9846043586730957 	 2.9810092449188232 	 2.9714596271514893 	 2.9563212394714355 	 6.6632373332977295 	 6.661128044128418 	 3.404090404510498 	 3.403524875640869 	 
2025-07-27 19:21:37.459930 test begin: paddle.Tensor.matmul(Tensor([124, 25, 257, 257],"float32"), Tensor([124, 25, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([124, 25, 257, 257],"float32"), Tensor([124, 25, 257, 64],"float32"), ) 	 255740700 	 1000 	 4.61902928352356 	 4.623227119445801 	 4.605635404586792 	 4.598423719406128 	 8.405454874038696 	 8.406826496124268 	 4.295063734054565 	 4.295568466186523 	 
2025-07-27 19:22:09.393019 test begin: paddle.Tensor.matmul(Tensor([124, 7, 257, 257],"float32"), Tensor([124, 7, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([124, 7, 257, 257],"float32"), Tensor([124, 7, 257, 64],"float32"), ) 	 71607396 	 1000 	 1.3392491340637207 	 1.3345086574554443 	 1.3180196285247803 	 1.3000009059906006 	 2.4034626483917236 	 2.4038164615631104 	 1.2280385494232178 	 1.2282273769378662 	 
2025-07-27 19:22:18.373003 test begin: paddle.Tensor.matmul(Tensor([128, 11, 197, 197],"float32"), Tensor([128, 11, 197, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 11, 197, 197],"float32"), Tensor([128, 11, 197, 64],"float32"), ) 	 72395136 	 1000 	 1.1030113697052002 	 1.1003854274749756 	 1.089904546737671 	 1.066648244857788 	 1.8719120025634766 	 1.872185468673706 	 0.956610918045044 	 0.9566242694854736 	 
2025-07-27 19:22:25.763023 test begin: paddle.Tensor.matmul(Tensor([128, 12, 168, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 12, 168, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), ) 	 70201344 	 1000 	 1.1893627643585205 	 1.1892225742340088 	 1.1681201457977295 	 1.154228925704956 	 1.8491086959838867 	 1.8500585556030273 	 0.9447534084320068 	 0.9452390670776367 	 
2025-07-27 19:22:33.489346 test begin: paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 168],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 168],"float32"), ) 	 110446080 	 1000 	 2.6606457233428955 	 2.329667568206787 	 2.308164596557617 	 2.3047778606414795 	 4.303083181381226 	 4.304493188858032 	 2.198554515838623 	 2.2003579139709473 	 
2025-07-27 19:22:52.648130 test begin: paddle.Tensor.matmul(Tensor([128, 16, 257, 257],"float32"), Tensor([128, 16, 257, 97],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 16, 257, 257],"float32"), Tensor([128, 16, 257, 97],"float32"), ) 	 186322944 	 1000 	 3.058120012283325 	 3.0576930046081543 	 3.03706955909729 	 3.0330898761749268 	 6.853869438171387 	 6.853944301605225 	 3.5020127296447754 	 3.502239942550659 	 
2025-07-27 19:23:16.570831 test begin: paddle.Tensor.matmul(Tensor([128, 16, 97, 257],"float32"), Tensor([128, 16, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 16, 97, 257],"float32"), Tensor([128, 16, 257, 64],"float32"), ) 	 84740096 	 1000 	 1.0265817642211914 	 1.02644944190979 	 1.004906177520752 	 0.9921770095825195 	 2.1043946743011475 	 2.1047675609588623 	 1.0752437114715576 	 1.0754218101501465 	 
2025-07-27 19:23:24.626817 test begin: paddle.Tensor.matmul(Tensor([128, 25, 257, 257],"float32"), Tensor([128, 25, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 25, 257, 257],"float32"), Tensor([128, 25, 257, 64],"float32"), ) 	 263990400 	 1000 	 4.762037515640259 	 4.763697147369385 	 4.7489423751831055 	 4.735605478286743 	 8.66917371749878 	 8.742854118347168 	 4.429555416107178 	 4.503836631774902 	 
2025-07-27 19:23:57.714667 test begin: paddle.Tensor.matmul(Tensor([128, 32, 197, 197],"float32"), Tensor([128, 32, 197, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 32, 197, 197],"float32"), Tensor([128, 32, 197, 64],"float32"), ) 	 210604032 	 1000 	 3.1022210121154785 	 3.1019139289855957 	 3.0885496139526367 	 3.077924966812134 	 5.32393479347229 	 5.323350191116333 	 2.720360040664673 	 2.7201032638549805 	 
2025-07-27 19:24:18.838853 test begin: paddle.Tensor.matmul(Tensor([128, 7, 257, 257],"float32"), Tensor([128, 7, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([128, 7, 257, 257],"float32"), Tensor([128, 7, 257, 64],"float32"), ) 	 73917312 	 1000 	 1.3450093269348145 	 1.34519624710083 	 1.3318703174591064 	 1.320540428161621 	 2.448225736618042 	 2.4480745792388916 	 1.2509796619415283 	 1.2508313655853271 	 
2025-07-27 19:24:27.865976 test begin: paddle.Tensor.matmul(Tensor([194, 16, 257, 257],"float32"), Tensor([194, 16, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([194, 16, 257, 257],"float32"), Tensor([194, 16, 257, 64],"float32"), ) 	 256070688 	 1000 	 4.651468276977539 	 4.651252031326294 	 4.638284921646118 	 4.626814365386963 	 8.441401243209839 	 8.440694570541382 	 4.313212156295776 	 4.313130617141724 	 
2025-07-27 19:25:00.207095 test begin: paddle.Tensor.matmul(Tensor([336, 12, 197, 197],"float32"), Tensor([336, 12, 197, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([336, 12, 197, 197],"float32"), Tensor([336, 12, 197, 64],"float32"), ) 	 207313344 	 1000 	 3.0607047080993652 	 3.060579538345337 	 3.0473527908325195 	 3.0364367961883545 	 5.246957540512085 	 5.247438430786133 	 2.6811044216156006 	 2.681307792663574 	 
2025-07-27 19:25:20.964130 test begin: paddle.Tensor.matmul(Tensor([49, 16, 257, 257],"float32"), Tensor([49, 16, 257, 64],"float32"), )
[Prof] paddle.Tensor.matmul 	 paddle.Tensor.matmul(Tensor([49, 16, 257, 257],"float32"), Tensor([49, 16, 257, 64],"float32"), ) 	 64677648 	 1000 	 1.1845622062683105 	 1.1847419738769531 	 1.1702384948730469 	 1.1605730056762695 	 2.1511728763580322 	 2.1513993740081787 	 1.0991902351379395 	 1.0992522239685059 	 
2025-07-27 19:25:28.917943 test begin: paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), -2, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), -2, ) 	 50803600 	 1000 	 0.26074719429016113 	 0.1937723159790039 	 0.24865007400512695 	 0.1757218837738037 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:31.348164 test begin: paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), axis=-1, keepdim=True, ) 	 50803600 	 1000 	 0.1805419921875 	 0.1601710319519043 	 0.09224987030029297 	 0.14434194564819336 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:33.517430 test begin: paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), -2, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), -2, ) 	 50840832 	 1000 	 0.30866050720214844 	 0.6034731864929199 	 0.15766644477844238 	 0.1424388885498047 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:38.511269 test begin: paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), axis=-1, keepdim=True, ) 	 50840832 	 1000 	 0.16266202926635742 	 0.15781259536743164 	 0.08309412002563477 	 0.14158058166503906 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:40.674743 test begin: paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), -2, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), -2, ) 	 52684800 	 1000 	 0.25821757316589355 	 0.1673882007598877 	 0.24635100364685059 	 0.1498265266418457 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:43.089839 test begin: paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), axis=-1, keepdim=True, ) 	 52684800 	 1000 	 0.16671991348266602 	 0.1623373031616211 	 0.08519220352172852 	 0.14654040336608887 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:45.343262 test begin: paddle.Tensor.max(Tensor([324000, 157],"float32"), axis=1, keepdim=True, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([324000, 157],"float32"), axis=1, keepdim=True, ) 	 50868000 	 1000 	 0.5778613090515137 	 0.4114363193511963 	 0.5650067329406738 	 0.395275354385376 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:48.358905 test begin: paddle.Tensor.max(Tensor([635041, 80],"float32"), axis=1, keepdim=True, )
[Prof] paddle.Tensor.max 	 paddle.Tensor.max(Tensor([635041, 80],"float32"), axis=1, keepdim=True, ) 	 50803280 	 1000 	 0.5386037826538086 	 0.5393807888031006 	 0.5255069732666016 	 0.5217444896697998 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:25:51.501263 test begin: paddle.Tensor.mean(Tensor([124, 128, 34, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([124, 128, 34, 96],"float32"), 1, keepdim=True, ) 	 51806208 	 1000 	 0.21209144592285156 	 0.15160465240478516 	 0.19988417625427246 	 0.13689637184143066 	 0.14364171028137207 	 0.1972355842590332 	 0.083770751953125 	 0.12458324432373047 	 
2025-07-27 19:25:52.991699 test begin: paddle.Tensor.mean(Tensor([124, 128, 96, 34],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([124, 128, 96, 34],"float32"), 1, keepdim=True, ) 	 51806208 	 1000 	 0.2120800018310547 	 0.15755414962768555 	 0.2001023292541504 	 0.13703393936157227 	 0.14347195625305176 	 0.19724345207214355 	 0.08530497550964355 	 0.1242072582244873 	 
2025-07-27 19:25:54.488200 test begin: paddle.Tensor.mean(Tensor([124, 45, 96, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([124, 45, 96, 96],"float32"), 1, keepdim=True, ) 	 51425280 	 1000 	 0.1654353141784668 	 0.157304048538208 	 0.15318799018859863 	 0.14297819137573242 	 0.1462416648864746 	 0.21242952346801758 	 0.08598113059997559 	 0.1389603614807129 	 
2025-07-27 19:25:55.956249 test begin: paddle.Tensor.mean(Tensor([128, 128, 33, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([128, 128, 33, 96],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.20448613166809082 	 0.15249085426330566 	 0.1921992301940918 	 0.13788986206054688 	 0.14413666725158691 	 0.19810128211975098 	 0.0841825008392334 	 0.1253199577331543 	 
2025-07-27 19:25:57.496076 test begin: paddle.Tensor.mean(Tensor([128, 128, 96, 33],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([128, 128, 96, 33],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.20471405982971191 	 0.15259647369384766 	 0.18433094024658203 	 0.1308591365814209 	 0.14403963088989258 	 0.1984262466430664 	 0.07652449607849121 	 0.11708950996398926 	 
2025-07-27 19:25:59.012173 test begin: paddle.Tensor.mean(Tensor([128, 192, 22, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([128, 192, 22, 96],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.21885418891906738 	 0.15057921409606934 	 0.20672965049743652 	 0.13641047477722168 	 0.1432347297668457 	 0.19709157943725586 	 0.08274984359741211 	 0.1228644847869873 	 
2025-07-27 19:26:00.508705 test begin: paddle.Tensor.mean(Tensor([128, 192, 96, 22],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([128, 192, 96, 22],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.2188103199005127 	 0.15055274963378906 	 0.20659923553466797 	 0.13650870323181152 	 0.1432034969329834 	 0.19713139533996582 	 0.08456110954284668 	 0.12218093872070312 	 
2025-07-27 19:26:02.020372 test begin: paddle.Tensor.mean(Tensor([128, 44, 96, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([128, 44, 96, 96],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.16768980026245117 	 0.1574697494506836 	 0.15540266036987305 	 0.1430516242980957 	 0.1475529670715332 	 0.2156219482421875 	 0.08952879905700684 	 0.14220142364501953 	 
2025-07-27 19:26:05.119388 test begin: paddle.Tensor.mean(Tensor([29, 192, 96, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([29, 192, 96, 96],"float32"), 1, keepdim=True, ) 	 51314688 	 1000 	 0.16463112831115723 	 0.1481611728668213 	 0.14438128471374512 	 0.12676048278808594 	 0.14051198959350586 	 0.19233369827270508 	 0.07360196113586426 	 0.09627461433410645 	 
2025-07-27 19:26:07.816915 test begin: paddle.Tensor.mean(Tensor([44, 128, 96, 96],"float32"), 1, keepdim=True, )
[Prof] paddle.Tensor.mean 	 paddle.Tensor.mean(Tensor([44, 128, 96, 96],"float32"), 1, keepdim=True, ) 	 51904512 	 1000 	 0.16582775115966797 	 0.1507859230041504 	 0.14549016952514648 	 0.13623571395874023 	 0.14221477508544922 	 0.20197272300720215 	 0.07216978073120117 	 0.1250772476196289 	 
2025-07-27 19:26:09.338910 test begin: paddle.Tensor.min(Tensor([1, 193, 65856, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([1, 193, 65856, 4],"float32"), axis=-1, ) 	 50840832 	 1000 	 0.538818359375 	 0.8675222396850586 	 0.5261743068695068 	 0.8489515781402588 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:13.320785 test begin: paddle.Tensor.min(Tensor([1, 400, 31753, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([1, 400, 31753, 4],"float32"), axis=-1, ) 	 50804800 	 1000 	 0.5384218692779541 	 0.8668758869171143 	 0.5259649753570557 	 0.848442792892456 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:17.085226 test begin: paddle.Tensor.min(Tensor([1, 400, 65856, 2],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([1, 400, 65856, 2],"float32"), axis=-1, ) 	 52684800 	 1000 	 0.5172824859619141 	 0.8212502002716064 	 0.5046525001525879 	 0.8026645183563232 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:21.231655 test begin: paddle.Tensor.min(Tensor([1, 400, 65856, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([1, 400, 65856, 4],"float32"), axis=-1, ) 	 105369600 	 1000 	 1.1114616394042969 	 1.7911620140075684 	 1.098982810974121 	 1.7727012634277344 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:29.134866 test begin: paddle.Tensor.min(Tensor([15661, 4, 811],"float32"), axis=1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([15661, 4, 811],"float32"), axis=1, ) 	 50804284 	 1000 	 0.2196969985961914 	 0.2987709045410156 	 0.20776033401489258 	 0.2804577350616455 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:31.885869 test begin: paddle.Tensor.min(Tensor([24565, 3, 811],"float32"), axis=1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([24565, 3, 811],"float32"), axis=1, ) 	 59766645 	 1000 	 0.30501437187194824 	 0.4123218059539795 	 0.2931382656097412 	 0.3892781734466553 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:37.354226 test begin: paddle.Tensor.min(Tensor([24565, 4, 518],"float32"), axis=1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([24565, 4, 518],"float32"), axis=1, ) 	 50898680 	 1000 	 0.2263953685760498 	 0.28314781188964844 	 0.20638632774353027 	 0.2397441864013672 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:40.152845 test begin: paddle.Tensor.min(Tensor([3, 525, 12096, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([3, 525, 12096, 4],"float32"), axis=-1, ) 	 76204800 	 1000 	 0.805088996887207 	 1.2970499992370605 	 0.7844629287719727 	 1.2711796760559082 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:45.786307 test begin: paddle.Tensor.min(Tensor([4, 263, 12096, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([4, 263, 12096, 4],"float32"), axis=-1, ) 	 50899968 	 1000 	 0.5391411781311035 	 0.8685379028320312 	 0.5187139511108398 	 0.8429744243621826 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:49.704917 test begin: paddle.Tensor.min(Tensor([4, 525, 12096, 3],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([4, 525, 12096, 3],"float32"), axis=-1, ) 	 76204800 	 1000 	 0.5267159938812256 	 0.9016423225402832 	 0.5141291618347168 	 0.8619728088378906 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:54.834499 test begin: paddle.Tensor.min(Tensor([4, 525, 6049, 4],"float32"), axis=-1, )
[Prof] paddle.Tensor.min 	 paddle.Tensor.min(Tensor([4, 525, 6049, 4],"float32"), axis=-1, ) 	 50811600 	 1000 	 0.5381028652191162 	 0.8669357299804688 	 0.5254147052764893 	 0.8486058712005615 	 None 	 None 	 None 	 None 	 
[Error] got 2 tensors and 1 gradients
2025-07-27 19:26:58.602131 test begin: paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.mm 	 paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 5080321],"float32"), ) 	 50803310 	 1000 	 0.6526920795440674 	 0.6528608798980713 	 0.13338780403137207 	 0.13340330123901367 	 1.4456455707550049 	 1.4426755905151367 	 0.21104216575622559 	 0.21059799194335938 	 
2025-07-27 19:27:04.410203 test begin: paddle.Tensor.mm(Tensor([5080321, 10],"float32"), Tensor([10, 10],"float32"), )
[Prof] paddle.Tensor.mm 	 paddle.Tensor.mm(Tensor([5080321, 10],"float32"), Tensor([10, 10],"float32"), ) 	 50803310 	 1000 	 0.6505334377288818 	 0.6499876976013184 	 0.13294219970703125 	 0.13277316093444824 	 1.4146900177001953 	 1.4123010635375977 	 0.20653390884399414 	 0.20614981651306152 	 
2025-07-27 19:27:11.357825 test begin: paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), )
[Prof] paddle.Tensor.mode 	 paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), ) 	 25401606 	 1000 	 47.50016403198242 	 9.57364535331726 	 9.608268737792969e-05 	 0.0002541542053222656 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:28:13.528982 test begin: paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), axis=2, keepdim=True, )
[Prof] paddle.Tensor.mode 	 paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), axis=2, keepdim=True, ) 	 25401606 	 1000 	 49.69267439842224 	 9.543587446212769 	 0.00010466575622558594 	 0.0002512931823730469 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:29:15.532647 test begin: paddle.Tensor.mode(Tensor([3, 2822401, 3],"float64"), axis=1, keepdim=False, )
[Prof] paddle.Tensor.mode 	 paddle.Tensor.mode(Tensor([3, 2822401, 3],"float64"), axis=1, keepdim=False, ) 	 25401609 	 1000 	 60.14732050895691 	 10.843981266021729 	 0.00011301040649414062 	 0.0002551078796386719 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:30:31.387791 test begin: paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, ) 	 25401810 	 1000 	 0.012907266616821289 	 0.008683443069458008 	 1.3113021850585938e-05 	 2.1219253540039062e-05 	 0.04937338829040527 	 0.08489131927490234 	 2.9087066650390625e-05 	 6.198883056640625e-05 	 
2025-07-27 19:30:32.618184 test begin: paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401810 	 1000 	 0.007565736770629883 	 0.005968332290649414 	 8.344650268554688e-06 	 3.1948089599609375e-05 	 0.04222249984741211 	 0.05807209014892578 	 3.361701965332031e-05 	 5.1975250244140625e-05 	 
2025-07-27 19:30:33.711112 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 1058401],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 1058401],"float64"), source=0, destination=2, ) 	 25401624 	 1000 	 0.00680088996887207 	 0.005247592926025391 	 1.2636184692382812e-05 	 5.6743621826171875e-05 	 0.04222846031188965 	 0.057932376861572266 	 2.1219253540039062e-05 	 5.9604644775390625e-05 	 
2025-07-27 19:30:34.759280 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, ) 	 25401768 	 1000 	 0.0069580078125 	 0.005016326904296875 	 1.0967254638671875e-05 	 4.649162292480469e-05 	 0.042496681213378906 	 0.058361053466796875 	 3.075599670410156e-05 	 5.5789947509765625e-05 	 
2025-07-27 19:30:37.454102 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401768 	 1000 	 0.012726306915283203 	 0.010462045669555664 	 1.2159347534179688e-05 	 2.3126602172851562e-05 	 0.05007028579711914 	 0.08086013793945312 	 6.580352783203125e-05 	 0.00014281272888183594 	 
2025-07-27 19:30:39.814109 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, ) 	 25401720 	 1000 	 0.007023811340332031 	 0.004744529724121094 	 8.821487426757812e-06 	 1.9073486328125e-05 	 0.042211294174194336 	 0.05984902381896973 	 2.193450927734375e-05 	 5.745887756347656e-05 	 
2025-07-27 19:30:40.889114 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401720 	 1000 	 0.007724761962890625 	 0.0058214664459228516 	 2.193450927734375e-05 	 1.8596649169921875e-05 	 0.042008399963378906 	 0.05947518348693848 	 2.2172927856445312e-05 	 6.532669067382812e-05 	 
2025-07-27 19:30:41.962990 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 635041, 5],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 635041, 5],"float64"), source=0, destination=2, ) 	 25401640 	 1000 	 0.006948947906494141 	 0.0047588348388671875 	 8.344650268554688e-06 	 1.811981201171875e-05 	 0.04230761528015137 	 0.058139801025390625 	 3.647804260253906e-05 	 9.465217590332031e-05 	 
2025-07-27 19:30:43.007437 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, ) 	 25401880 	 1000 	 0.006988048553466797 	 0.004770517349243164 	 8.58306884765625e-06 	 1.811981201171875e-05 	 0.04257559776306152 	 0.06016087532043457 	 2.6464462280273438e-05 	 0.00013518333435058594 	 
2025-07-27 19:30:44.083097 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401880 	 1000 	 0.007524013519287109 	 0.005918264389038086 	 8.106231689453125e-06 	 1.9311904907226562e-05 	 0.041974544525146484 	 0.05897355079650879 	 1.8835067749023438e-05 	 8.153915405273438e-05 	 
2025-07-27 19:30:45.134601 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 423361, 3, 5],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 423361, 3, 5],"float64"), source=0, destination=2, ) 	 25401660 	 1000 	 0.006906032562255859 	 0.004737138748168945 	 9.298324584960938e-06 	 1.9311904907226562e-05 	 0.04216337203979492 	 0.05732011795043945 	 3.647804260253906e-05 	 4.5299530029296875e-05 	 
2025-07-27 19:30:46.309846 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, ) 	 25402020 	 1000 	 0.006985664367675781 	 0.0047550201416015625 	 8.344650268554688e-06 	 1.8358230590820312e-05 	 0.04221010208129883 	 0.061614036560058594 	 4.029273986816406e-05 	 6.771087646484375e-05 	 
2025-07-27 19:30:47.378327 test begin: paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25402020 	 1000 	 0.00752568244934082 	 0.006133079528808594 	 8.106231689453125e-06 	 3.147125244140625e-05 	 0.04330301284790039 	 0.06571722030639648 	 3.147125244140625e-05 	 6.818771362304688e-05 	 
2025-07-27 19:30:48.438097 test begin: paddle.Tensor.moveaxis(x=Tensor([846721, 2, 3, 5],"float64"), source=0, destination=2, )
[Prof] paddle.Tensor.moveaxis 	 paddle.Tensor.moveaxis(x=Tensor([846721, 2, 3, 5],"float64"), source=0, destination=2, ) 	 25401630 	 1000 	 0.0069539546966552734 	 0.004744768142700195 	 1.0013580322265625e-05 	 1.8596649169921875e-05 	 0.04240274429321289 	 0.05833625793457031 	 3.62396240234375e-05 	 8.988380432128906e-05 	 
2025-07-27 19:30:49.513037 test begin: paddle.Tensor.multiply(Tensor([132301, 768],"float16"), Tensor([132301, 1],"float32"), )
W0727 19:30:51.304680 163692 multiply_fwd_func.cc:76] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([132301, 768],"float16"), Tensor([132301, 1],"float32"), ) 	 101739469 	 1000 	 1.0694525241851807 	 0.7302310466766357 	 0.5463600158691406 	 0.713568925857544 	 1.9098572731018066 	 2.126774787902832 	 0.6500418186187744 	 0.5430114269256592 	 
2025-07-27 19:30:58.835331 test begin: paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 1],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 1],"float32"), ) 	 50803520 	 1000 	 0.29646778106689453 	 0.3033778667449951 	 0.2861497402191162 	 0.2911498546600342 	 0.7712807655334473 	 0.9223225116729736 	 0.2623775005340576 	 0.23532342910766602 	 
2025-07-27 19:31:02.685446 test begin: paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 317521],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 317521],"float32"), ) 	 101606720 	 1000 	 0.44982099533081055 	 0.9407463073730469 	 0.4402780532836914 	 0.4346458911895752 	 1.1032016277313232 	 0.8931701183319092 	 1.0364601612091064 	 0.4563930034637451 	 
2025-07-27 19:31:11.435148 test begin: paddle.Tensor.multiply(Tensor([160, 635041],"float16"), Tensor([160, 1],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([160, 635041],"float16"), Tensor([160, 1],"float32"), ) 	 101606720 	 1000 	 1.0711557865142822 	 0.6947407722473145 	 0.5472002029418945 	 0.6820297241210938 	 1.9223861694335938 	 2.137199640274048 	 0.4905884265899658 	 0.4362516403198242 	 
2025-07-27 19:31:21.258966 test begin: paddle.Tensor.multiply(Tensor([16538, 3072],"float32"), Tensor([16538, 1],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([16538, 3072],"float32"), Tensor([16538, 1],"float32"), ) 	 50821274 	 1000 	 0.29539918899536133 	 0.30961012840270996 	 0.2773773670196533 	 0.28839731216430664 	 0.7363417148590088 	 0.8998441696166992 	 0.37616562843322754 	 0.30636096000671387 	 
2025-07-27 19:31:25.157179 test begin: paddle.Tensor.multiply(Tensor([33076, 3072],"float16"), Tensor([33076, 1],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([33076, 3072],"float16"), Tensor([33076, 1],"float32"), ) 	 101642548 	 1000 	 1.066870927810669 	 0.7297732830047607 	 0.5450654029846191 	 0.7102386951446533 	 1.9041719436645508 	 2.130479097366333 	 0.648106575012207 	 0.5439345836639404 	 
2025-07-27 19:31:37.781798 test begin: paddle.Tensor.multiply(Tensor([512, 198451],"float16"), Tensor([512, 1],"float32"), )
[Prof] paddle.Tensor.multiply 	 paddle.Tensor.multiply(Tensor([512, 198451],"float16"), Tensor([512, 1],"float32"), ) 	 101607424 	 1000 	 1.0792198181152344 	 0.6974923610687256 	 0.5458805561065674 	 0.6817772388458252 	 1.946336030960083 	 2.1547274589538574 	 0.4966728687286377 	 0.5501914024353027 	 
2025-07-27 19:31:47.374789 test begin: paddle.Tensor.nansum(Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401840 	 1000 	 1.0635435581207275 	 0.18944931030273438 	 0.27193212509155273 	 0.17333531379699707 	 0.5294959545135498 	 0.4415113925933838 	 0.2705085277557373 	 0.15030908584594727 	 
2025-07-27 19:31:50.230824 test begin: paddle.Tensor.nansum(Tensor([2822401, 3, 3],"float64"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([2822401, 3, 3],"float64"), ) 	 25401609 	 1000 	 0.9351701736450195 	 0.15012669563293457 	 0.19089603424072266 	 0.07668685913085938 	 0.4645543098449707 	 0.4129819869995117 	 0.2372426986694336 	 0.14057493209838867 	 
2025-07-27 19:31:52.806827 test begin: paddle.Tensor.nansum(Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401840 	 1000 	 1.0637309551239014 	 0.18945622444152832 	 0.2719743251800537 	 0.17304563522338867 	 0.5293638706207275 	 0.4414060115814209 	 0.27043867111206055 	 0.1502523422241211 	 
2025-07-27 19:31:55.654509 test begin: paddle.Tensor.nansum(Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401780 	 1000 	 5.656300067901611 	 0.17337417602539062 	 1.1587498188018799 	 0.08855891227722168 	 0.46573400497436523 	 0.41726088523864746 	 0.23794150352478027 	 0.14205050468444824 	 
2025-07-27 19:32:02.919006 test begin: paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401744 	 1000 	 0.9739494323730469 	 0.1902153491973877 	 0.2490239143371582 	 0.17363762855529785 	 0.513237714767456 	 0.4433751106262207 	 0.26225709915161133 	 0.15095114707946777 	 
2025-07-27 19:32:05.645006 test begin: paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, ) 	 25401960 	 1000 	 0.9737133979797363 	 0.19028735160827637 	 0.24897480010986328 	 0.17412376403808594 	 0.5134439468383789 	 0.4438130855560303 	 0.26233768463134766 	 0.15110278129577637 	 
2025-07-27 19:32:08.437605 test begin: paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, ) 	 25402320 	 1000 	 0.9737632274627686 	 0.1899869441986084 	 0.24893546104431152 	 0.17391538619995117 	 0.513164758682251 	 0.4451420307159424 	 0.2621803283691406 	 0.1515214443206787 	 
2025-07-27 19:32:11.158443 test begin: paddle.Tensor.nansum(Tensor([3, 2822401, 3],"float64"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 2822401, 3],"float64"), ) 	 25401609 	 1000 	 0.9350602626800537 	 0.1501328945159912 	 0.19088149070739746 	 0.07668209075927734 	 0.46451687812805176 	 0.4130702018737793 	 0.23734164237976074 	 0.14062023162841797 	 
2025-07-27 19:32:13.688475 test begin: paddle.Tensor.nansum(Tensor([3, 3, 2822401],"float64"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 3, 2822401],"float64"), ) 	 25401609 	 1000 	 0.9350941181182861 	 0.15020322799682617 	 0.19092535972595215 	 0.07675933837890625 	 0.4645242691040039 	 0.4129340648651123 	 0.23730063438415527 	 0.14059734344482422 	 
2025-07-27 19:32:16.134695 test begin: paddle.Tensor.nansum(Tensor([3, 3, 5644801],"float32"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 3, 5644801],"float32"), ) 	 50803209 	 1000 	 1.0093445777893066 	 0.15276837348937988 	 0.20607328414916992 	 0.07801485061645508 	 0.5561466217041016 	 0.5895073413848877 	 0.2841038703918457 	 0.2007920742034912 	 
2025-07-27 19:32:19.380865 test begin: paddle.Tensor.nansum(Tensor([3, 5644801, 3],"float32"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 5644801, 3],"float32"), ) 	 50803209 	 1000 	 1.0092918872833252 	 0.1526947021484375 	 0.20601725578308105 	 0.07800126075744629 	 0.5561106204986572 	 0.5894320011138916 	 0.2841174602508545 	 0.20074129104614258 	 
2025-07-27 19:32:22.556667 test begin: paddle.Tensor.nansum(Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401960 	 1000 	 1.0634219646453857 	 0.1894829273223877 	 0.27190518379211426 	 0.1733105182647705 	 0.5307190418243408 	 0.44179487228393555 	 0.27115345001220703 	 0.15041303634643555 	 
2025-07-27 19:32:25.394021 test begin: paddle.Tensor.nansum(Tensor([5644801, 3, 3],"float32"), )
[Prof] paddle.Tensor.nansum 	 paddle.Tensor.nansum(Tensor([5644801, 3, 3],"float32"), ) 	 50803209 	 1000 	 1.0093131065368652 	 0.15273833274841309 	 0.20606040954589844 	 0.07804560661315918 	 0.5560424327850342 	 0.5894410610198975 	 0.2840883731842041 	 0.2007451057434082 	 
2025-07-27 19:32:28.525091 test begin: paddle.Tensor.neg(Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.neg 	 paddle.Tensor.neg(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.2958409786224365 	 0.2979776859283447 	 0.28603672981262207 	 0.287564754486084 	 0.2958054542541504 	 0.2976553440093994 	 0.24230241775512695 	 0.23332881927490234 	 
2025-07-27 19:32:31.263362 test begin: paddle.Tensor.nonzero(Tensor([3628801, 14],"bool"), )
[Prof] paddle.Tensor.nonzero 	 paddle.Tensor.nonzero(Tensor([3628801, 14],"bool"), ) 	 50803214 	 1000 	 5.884852170944214 	 1.4318656921386719 	 0.004029750823974609 	 0.0012345314025878906 	 None 	 None 	 None 	 None 	 
2025-07-27 19:32:41.943231 test begin: paddle.Tensor.nonzero(Tensor([3907939, 13],"bool"), )
[Prof] paddle.Tensor.nonzero 	 paddle.Tensor.nonzero(Tensor([3907939, 13],"bool"), ) 	 50803207 	 1000 	 5.892798900604248 	 1.4158687591552734 	 0.004004001617431641 	 0.0013196468353271484 	 None 	 None 	 None 	 None 	 
2025-07-27 19:32:49.979521 test begin: paddle.Tensor.nonzero(Tensor([4233601, 12],"bool"), )
[Prof] paddle.Tensor.nonzero 	 paddle.Tensor.nonzero(Tensor([4233601, 12],"bool"), ) 	 50803212 	 1000 	 5.883029460906982 	 1.4138832092285156 	 0.004006624221801758 	 0.0013234615325927734 	 None 	 None 	 None 	 None 	 
2025-07-27 19:32:57.989475 test begin: paddle.Tensor.nonzero(Tensor([52640, 966],"bool"), )
[Prof] paddle.Tensor.nonzero 	 paddle.Tensor.nonzero(Tensor([52640, 966],"bool"), ) 	 50850240 	 1000 	 5.88673996925354 	 1.414966344833374 	 0.004019260406494141 	 0.0013170242309570312 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:05.999971 test begin: paddle.Tensor.norm(Tensor([100352, 507],"float32"), )
[Prof] paddle.Tensor.norm 	 paddle.Tensor.norm(Tensor([100352, 507],"float32"), ) 	 50878464 	 1000 	 0.1526026725769043 	 0.15246319770812988 	 0.05185818672180176 	 0.0778799057006836 	 0.9965865612030029 	 0.9115378856658936 	 0.9408276081085205 	 0.23302102088928223 	 
2025-07-27 19:33:09.068669 test begin: paddle.Tensor.norm(Tensor([507, 100352],"float32"), )
[Prof] paddle.Tensor.norm 	 paddle.Tensor.norm(Tensor([507, 100352],"float32"), ) 	 50878464 	 1000 	 0.15259933471679688 	 0.15243005752563477 	 0.05186939239501953 	 0.07785320281982422 	 0.996614933013916 	 0.9113814830780029 	 0.9410686492919922 	 0.2329397201538086 	 
2025-07-27 19:33:12.050776 test begin: paddle.Tensor.norm(Tensor([6202, 8192],"float32"), )
[Prof] paddle.Tensor.norm 	 paddle.Tensor.norm(Tensor([6202, 8192],"float32"), ) 	 50806784 	 1000 	 0.1524217128753662 	 0.152238130569458 	 0.051802873611450195 	 0.07413744926452637 	 0.9955828189849854 	 0.9100301265716553 	 0.9387423992156982 	 0.2326188087463379 	 
2025-07-27 19:33:15.068394 test begin: paddle.Tensor.norm(Tensor([8192, 6202],"float32"), )
[Prof] paddle.Tensor.norm 	 paddle.Tensor.norm(Tensor([8192, 6202],"float32"), ) 	 50806784 	 1000 	 0.15240979194641113 	 0.15225768089294434 	 0.051822662353515625 	 0.07776284217834473 	 0.9956719875335693 	 0.9099855422973633 	 0.9401860237121582 	 0.23263335227966309 	 
2025-07-27 19:33:18.055213 test begin: paddle.Tensor.norm(Tensor([886, 57344],"float32"), )
[Prof] paddle.Tensor.norm 	 paddle.Tensor.norm(Tensor([886, 57344],"float32"), ) 	 50806784 	 1000 	 0.1523747444152832 	 0.1522233486175537 	 0.051798343658447266 	 0.07774734497070312 	 0.995680570602417 	 0.9100744724273682 	 0.9399495124816895 	 0.23261284828186035 	 
2025-07-27 19:33:21.038781 test begin: paddle.Tensor.not_equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), ) 	 50803456 	 1000 	 0.3103175163269043 	 0.31310296058654785 	 0.30117177963256836 	 0.30168962478637695 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:22.396407 test begin: paddle.Tensor.not_equal(Tensor([13, 1953970],"int64"), Tensor([1],"int64"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([13, 1953970],"int64"), Tensor([1],"int64"), ) 	 25401611 	 1000 	 0.1760721206665039 	 0.18442296981811523 	 0.16564154624938965 	 0.1678309440612793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:23.122870 test begin: paddle.Tensor.not_equal(Tensor([13, 3907939],"bool"), Tensor([1],"bool"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([13, 3907939],"bool"), Tensor([1],"bool"), ) 	 50803208 	 1000 	 0.13753461837768555 	 0.19815826416015625 	 0.12752342224121094 	 0.1858687400817871 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:24.144952 test begin: paddle.Tensor.not_equal(Tensor([1814401, 14],"int64"), Tensor([1],"int64"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([1814401, 14],"int64"), Tensor([1],"int64"), ) 	 25401615 	 1000 	 0.17612576484680176 	 0.18016481399536133 	 0.15832185745239258 	 0.16118812561035156 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:24.937567 test begin: paddle.Tensor.not_equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), ) 	 50803456 	 1000 	 0.31029558181762695 	 0.3131866455078125 	 0.2975914478302002 	 0.3016030788421631 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:26.313511 test begin: paddle.Tensor.not_equal(Tensor([3628801, 14],"bool"), Tensor([1],"bool"), )
[Prof] paddle.Tensor.not_equal 	 paddle.Tensor.not_equal(Tensor([3628801, 14],"bool"), Tensor([1],"bool"), ) 	 50803215 	 1000 	 0.1375586986541748 	 0.1982102394104004 	 0.11931443214416504 	 0.1791841983795166 	 None 	 None 	 None 	 None 	 
2025-07-27 19:33:27.392458 test begin: paddle.Tensor.outer(x=Tensor([12700801, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([12700801, 2],"float64"), y=Tensor([2, 3, 4],"float64"), ) 	 25401626 	 1000 	 3.8769853115081787 	 3.82680606842041 	 0.1584334373474121 	 0.9750442504882812 	 7.481399059295654 	 22.85899043083191 	 2.5468456745147705 	 1.1666176319122314 	 
2025-07-27 19:34:18.623242 test begin: paddle.Tensor.outer(x=Tensor([4, 2, 3175201],"float64"), y=Tensor([4, 2, 3],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2, 3175201],"float64"), y=Tensor([4, 2, 3],"float64"), ) 	 25401632 	 1000 	 3.879751205444336 	 3.8374292850494385 	 0.15843796730041504 	 0.9778666496276855 	 7.480933666229248 	 22.80462622642517 	 2.5469586849212646 	 1.1638298034667969 	 
2025-07-27 19:35:09.354657 test begin: paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3175201],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3175201],"float64"), ) 	 25401632 	 1000 	 4.044171333312988 	 7.110344171524048 	 0.16518425941467285 	 1.8164608478546143 	 7.436866521835327 	 25.531664848327637 	 2.5323421955108643 	 1.3043160438537598 	 
2025-07-27 19:36:06.665172 test begin: paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2116801, 3],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2116801, 3],"float64"), ) 	 25401636 	 1000 	 4.032366514205933 	 7.079386234283447 	 0.16474437713623047 	 1.8085801601409912 	 7.439474105834961 	 25.50488042831421 	 2.533301591873169 	 1.302973985671997 	 
2025-07-27 19:37:06.004857 test begin: paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4233601, 2, 3],"float64"), ) 	 25401630 	 1000 	 5.170151472091675 	 7.124219179153442 	 0.1706714630126953 	 1.8200855255126953 	 7.4470109939575195 	 25.54259943962097 	 2.5357749462127686 	 1.304879903793335 	 
2025-07-27 19:38:06.547175 test begin: paddle.Tensor.outer(x=Tensor([4, 2116801, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2116801, 3],"float64"), y=Tensor([4, 2, 3],"float64"), ) 	 25401636 	 1000 	 3.8796000480651855 	 3.8305420875549316 	 0.15848350524902344 	 0.9785008430480957 	 7.479676723480225 	 22.805375576019287 	 2.546266555786133 	 1.163846492767334 	 
2025-07-27 19:38:57.091911 test begin: paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4233601],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4233601],"float64"), ) 	 25401614 	 1000 	 1.5159552097320557 	 2.3675920963287354 	 0.06180834770202637 	 2.3528385162353516 	 2.7474381923675537 	 8.337552309036255 	 0.9354932308197021 	 1.7032346725463867 	 
2025-07-27 19:39:17.289521 test begin: paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3175201, 4],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3175201, 4],"float64"), ) 	 25401616 	 1000 	 1.5079312324523926 	 2.3598451614379883 	 0.061614990234375 	 2.344982862472534 	 2.7423171997070312 	 8.335347652435303 	 0.9336247444152832 	 1.7027578353881836 	 
2025-07-27 19:39:38.042793 test begin: paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2116801, 3, 4],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2116801, 3, 4],"float64"), ) 	 25401620 	 1000 	 2.049577236175537 	 2.357717275619507 	 0.061337947845458984 	 2.33622145652771 	 2.7432680130004883 	 8.331480503082275 	 0.9340424537658691 	 1.703411340713501 	 
2025-07-27 19:39:59.462561 test begin: paddle.Tensor.outer(x=Tensor([4, 6350401],"float64"), y=Tensor([2, 3, 4],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4, 6350401],"float64"), y=Tensor([2, 3, 4],"float64"), ) 	 25401628 	 1000 	 3.877269983291626 	 3.837862730026245 	 0.15847253799438477 	 0.9786911010742188 	 7.480382442474365 	 22.7641499042511 	 2.547149419784546 	 1.161952018737793 	 
2025-07-27 19:40:51.848553 test begin: paddle.Tensor.outer(x=Tensor([4233601, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
[Prof] paddle.Tensor.outer 	 paddle.Tensor.outer(x=Tensor([4233601, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), ) 	 25401630 	 1000 	 3.881739854812622 	 3.821411609649658 	 0.15841937065124512 	 0.9761652946472168 	 7.479736804962158 	 22.788769960403442 	 2.547060251235962 	 1.163060188293457 	 
2025-07-27 19:41:44.486555 test begin: paddle.Tensor.pow(Tensor([124, 128, 34, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([124, 128, 34, 96],"float32"), 2, ) 	 51806208 	 1000 	 0.37923192977905273 	 0.3072388172149658 	 0.369476318359375 	 0.29044556617736816 	 0.45970892906188965 	 1.0730180740356445 	 0.402846097946167 	 0.36550426483154297 	 
2025-07-27 19:41:48.451593 test begin: paddle.Tensor.pow(Tensor([124, 128, 96, 34],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([124, 128, 96, 34],"float32"), 2, ) 	 51806208 	 1000 	 0.3789961338043213 	 0.30904364585876465 	 0.36930012702941895 	 0.2904999256134033 	 0.4600334167480469 	 1.0729777812957764 	 0.4038355350494385 	 0.3655738830566406 	 
2025-07-27 19:41:52.296226 test begin: paddle.Tensor.pow(Tensor([124, 45, 96, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([124, 45, 96, 96],"float32"), 2, ) 	 51425280 	 1000 	 0.3762547969818115 	 0.30148935317993164 	 0.3664069175720215 	 0.2883479595184326 	 0.4566466808319092 	 1.0651800632476807 	 0.400479793548584 	 0.3628573417663574 	 
2025-07-27 19:41:56.156462 test begin: paddle.Tensor.pow(Tensor([128, 128, 33, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([128, 128, 33, 96],"float32"), 2, ) 	 51904512 	 1000 	 0.3793308734893799 	 0.304196834564209 	 0.362363338470459 	 0.28389835357666016 	 0.46089839935302734 	 1.074988603591919 	 0.3957252502441406 	 0.3662142753601074 	 
2025-07-27 19:42:00.097812 test begin: paddle.Tensor.pow(Tensor([128, 128, 96, 33],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([128, 128, 96, 33],"float32"), 2, ) 	 51904512 	 1000 	 0.3791332244873047 	 0.30414867401123047 	 0.36939501762390137 	 0.29097557067871094 	 0.4608922004699707 	 1.0749878883361816 	 0.40472841262817383 	 0.3662421703338623 	 
2025-07-27 19:42:03.941623 test begin: paddle.Tensor.pow(Tensor([128, 192, 22, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([128, 192, 22, 96],"float32"), 2, ) 	 51904512 	 1000 	 0.3791372776031494 	 0.30416250228881836 	 0.36940765380859375 	 0.2912867069244385 	 0.46083688735961914 	 1.0749201774597168 	 0.40471315383911133 	 0.3661613464355469 	 
2025-07-27 19:42:07.822541 test begin: paddle.Tensor.pow(Tensor([128, 192, 96, 22],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([128, 192, 96, 22],"float32"), 2, ) 	 51904512 	 1000 	 0.3791322708129883 	 0.3109769821166992 	 0.3622281551361084 	 0.2837989330291748 	 0.4610788822174072 	 1.074955701828003 	 0.3956947326660156 	 0.36620140075683594 	 
2025-07-27 19:42:11.742695 test begin: paddle.Tensor.pow(Tensor([128, 44, 96, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([128, 44, 96, 96],"float32"), 2, ) 	 51904512 	 1000 	 0.3789494037628174 	 0.32158780097961426 	 0.36923861503601074 	 0.2908930778503418 	 0.4610750675201416 	 1.074937343597412 	 0.4049263000488281 	 0.3661797046661377 	 
2025-07-27 19:42:15.612732 test begin: paddle.Tensor.pow(Tensor([29, 192, 96, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([29, 192, 96, 96],"float32"), 2, ) 	 51314688 	 1000 	 0.37497782707214355 	 0.3020617961883545 	 0.36526036262512207 	 0.28754687309265137 	 0.45578432083129883 	 1.0629713535308838 	 0.3994719982147217 	 0.36211180686950684 	 
2025-07-27 19:42:19.480555 test begin: paddle.Tensor.pow(Tensor([44, 128, 96, 96],"float32"), 2, )
[Prof] paddle.Tensor.pow 	 paddle.Tensor.pow(Tensor([44, 128, 96, 96],"float32"), 2, ) 	 51904512 	 1000 	 0.37921667098999023 	 0.30627989768981934 	 0.36952924728393555 	 0.2909219264984131 	 0.46091675758361816 	 1.0749893188476562 	 0.4034733772277832 	 0.366194486618042 	 
2025-07-27 19:42:23.325575 test begin: paddle.Tensor.prod(Tensor([1, 386, 65856, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([1, 386, 65856, 2],"float32"), -1, ) 	 50840832 	 1000 	 0.3879539966583252 	 0.4676218032836914 	 0.37186455726623535 	 0.4526982307434082 	 1.6769371032714844 	 2.054767608642578 	 1.6189427375793457 	 0.0007166862487792969 	 
2025-07-27 19:42:29.090958 test begin: paddle.Tensor.prod(Tensor([1, 400, 63505, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([1, 400, 63505, 2],"float32"), -1, ) 	 50804000 	 1000 	 0.38889002799987793 	 1.5511538982391357 	 0.37268686294555664 	 0.45256948471069336 	 1.6764962673187256 	 2.0517401695251465 	 1.6186869144439697 	 0.0007171630859375 	 
2025-07-27 19:42:37.454168 test begin: paddle.Tensor.prod(Tensor([1, 400, 65856, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([1, 400, 65856, 2],"float32"), -1, ) 	 52684800 	 1000 	 0.4019768238067627 	 0.9308779239654541 	 0.3859398365020752 	 0.47005128860473633 	 1.7378966808319092 	 2.1289174556732178 	 1.679797649383545 	 0.0007371902465820312 	 
2025-07-27 19:42:45.297089 test begin: paddle.Tensor.prod(Tensor([2100, 12096, 3],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([2100, 12096, 3],"float32"), -1, ) 	 76204800 	 1000 	 0.4132239818572998 	 0.5119693279266357 	 0.3970179557800293 	 0.4977071285247803 	 1.8898289203643799 	 2.721698760986328 	 1.8320589065551758 	 0.0010094642639160156 	 
2025-07-27 19:42:52.506928 test begin: paddle.Tensor.prod(Tensor([2100, 12097, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([2100, 12097, 2],"float32"), -1, ) 	 50807400 	 1000 	 0.387706995010376 	 0.46738529205322266 	 0.3717348575592041 	 0.45288848876953125 	 1.2663390636444092 	 2.0587079524993896 	 1.2085471153259277 	 0.0007188320159912109 	 
2025-07-27 19:42:57.953858 test begin: paddle.Tensor.prod(Tensor([2101, 12096, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([2101, 12096, 2],"float32"), -1, ) 	 50827392 	 1000 	 0.387972354888916 	 0.46754002571105957 	 0.37088489532470703 	 0.45320773124694824 	 1.2665700912475586 	 2.056877613067627 	 1.2083206176757812 	 0.0007150173187255859 	 
2025-07-27 19:43:03.324995 test begin: paddle.Tensor.prod(Tensor([4, 525, 12096, 3],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([4, 525, 12096, 3],"float32"), -1, ) 	 76204800 	 1000 	 0.4132120609283447 	 0.5119102001190186 	 0.3969602584838867 	 0.49756503105163574 	 2.5053253173828125 	 2.7238047122955322 	 2.446521520614624 	 0.000997304916381836 	 
2025-07-27 19:43:11.176270 test begin: paddle.Tensor.prod(Tensor([4, 525, 12097, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([4, 525, 12097, 2],"float32"), -1, ) 	 50807400 	 1000 	 0.3877248764038086 	 0.4695572853088379 	 0.3630218505859375 	 0.44561100006103516 	 1.6764516830444336 	 2.0543906688690186 	 1.609541416168213 	 0.0007157325744628906 	 
2025-07-27 19:43:16.986088 test begin: paddle.Tensor.prod(Tensor([4, 526, 12096, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([4, 526, 12096, 2],"float32"), -1, ) 	 50899968 	 1000 	 0.38841962814331055 	 0.4681863784790039 	 0.3724701404571533 	 0.45388078689575195 	 1.6793875694274902 	 2.058150053024292 	 1.6211879253387451 	 0.0007171630859375 	 
2025-07-27 19:43:22.853459 test begin: paddle.Tensor.prod(Tensor([5, 525, 12096, 2],"float32"), -1, )
[Prof] paddle.Tensor.prod 	 paddle.Tensor.prod(Tensor([5, 525, 12096, 2],"float32"), -1, ) 	 63504000 	 1000 	 0.48321104049682617 	 0.5824971199035645 	 0.46712422370910645 	 0.5638535022735596 	 2.0931060314178467 	 2.546388626098633 	 2.0346474647521973 	 0.0009026527404785156 	 
2025-07-27 19:43:30.027267 test begin: paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, ) 	 145800 	 1000 	 16.36499047279358 	 0.22712230682373047 	 0.425396203994751 	 6.747245788574219e-05 	 0.2059943675994873 	 0.23832941055297852 	 2.6941299438476562e-05 	 4.267692565917969e-05 	 
2025-07-27 19:43:47.182890 test begin: paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=5, ) 	 145800 	 1000 	 13.117087364196777 	 0.2226250171661377 	 0.3685281276702881 	 7.462501525878906e-05 	 0.21075010299682617 	 0.22456026077270508 	 3.337860107421875e-05 	 7.271766662597656e-05 	 
2025-07-27 19:44:00.982832 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=3, keepdim=True, ) 	 124416 	 1000 	 13.981356382369995 	 0.21956658363342285 	 0.3634648323059082 	 6.4849853515625e-05 	 0.20524382591247559 	 0.24254179000854492 	 2.9087066650390625e-05 	 5.53131103515625e-05 	 
2025-07-27 19:44:15.656741 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=5, ) 	 124416 	 1000 	 0.5403780937194824 	 0.20298266410827637 	 5.221366882324219e-05 	 6.4849853515625e-05 	 0.1863994598388672 	 0.21480584144592285 	 1.7881393432617188e-05 	 7.462501525878906e-05 	 
2025-07-27 19:44:16.809566 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=3, keepdim=True, ) 	 253800 	 1000 	 28.35147452354431 	 0.3006601333618164 	 0.7370059490203857 	 7.653236389160156e-05 	 0.26861095428466797 	 0.2461690902709961 	 5.0067901611328125e-05 	 5.888938903808594e-05 	 
2025-07-27 19:44:47.786163 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=5, ) 	 253800 	 1000 	 22.716925859451294 	 0.2835986614227295 	 0.6380703449249268 	 7.700920104980469e-05 	 0.2428572177886963 	 0.23669719696044922 	 3.719329833984375e-05 	 7.724761962890625e-05 	 
2025-07-27 19:45:11.305681 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, ) 	 253800 	 1000 	 0.5735960006713867 	 0.21685075759887695 	 0.014564037322998047 	 0.00010204315185546875 	 0.2055034637451172 	 0.2462465763092041 	 1.5974044799804688e-05 	 5.078315734863281e-05 	 
2025-07-27 19:45:12.558432 test begin: paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=5, ) 	 253800 	 1000 	 22.719501733779907 	 0.500617504119873 	 0.6382555961608887 	 8.916854858398438e-05 	 0.18951940536499023 	 0.21531319618225098 	 4.7206878662109375e-05 	 7.963180541992188e-05 	 
2025-07-27 19:45:39.710277 test begin: paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, ) 	 253440 	 1000 	 28.323338985443115 	 0.22458434104919434 	 0.7362720966339111 	 7.867813110351562e-05 	 0.21004986763000488 	 0.2474818229675293 	 5.078315734863281e-05 	 7.915496826171875e-05 	 
2025-07-27 19:46:08.760655 test begin: paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=5, ) 	 253440 	 1000 	 22.684549570083618 	 0.21041083335876465 	 0.6374311447143555 	 5.340576171875e-05 	 0.1917111873626709 	 0.21545028686523438 	 4.029273986816406e-05 	 3.4809112548828125e-05 	 
2025-07-27 19:46:32.098876 test begin: paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, ) 	 253440 	 1000 	 28.32005524635315 	 0.23351192474365234 	 0.7363672256469727 	 0.0001666545867919922 	 0.20303559303283691 	 0.23949122428894043 	 4.863739013671875e-05 	 7.081031799316406e-05 	 
2025-07-27 19:47:02.510974 test begin: paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
[Prof] paddle.Tensor.quantile 	 paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, ) 	 253440 	 1000 	 22.680485248565674 	 0.27933287620544434 	 0.63710618019104 	 7.748603820800781e-05 	 0.23832225799560547 	 0.22720980644226074 	 3.743171691894531e-05 	 6.318092346191406e-05 	 
2025-07-27 19:47:25.973022 test begin: paddle.Tensor.rad2deg(x=Tensor([1587601, 4, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([1587601, 4, 4],"float64"), ) 	 25401616 	 1000 	 0.29798388481140137 	 0.29854559898376465 	 0.2810935974121094 	 0.2841048240661621 	 0.2977430820465088 	 0.29832959175109863 	 0.24206328392028809 	 0.22973322868347168 	 
2025-07-27 19:47:28.129310 test begin: paddle.Tensor.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.2976243495941162 	 0.29857349395751953 	 0.2736055850982666 	 0.2766702175140381 	 0.29717397689819336 	 0.2984650135040283 	 0.23454570770263672 	 0.21396160125732422 	 
2025-07-27 19:47:30.351357 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 1587601, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 1587601, 4],"float64"), ) 	 25401616 	 1000 	 0.29801368713378906 	 0.30829453468322754 	 0.2828488349914551 	 0.28313589096069336 	 0.29773879051208496 	 0.29831528663635254 	 0.24419784545898438 	 0.2302553653717041 	 
2025-07-27 19:47:32.512245 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.2976851463317871 	 0.32038331031799316 	 0.28241801261901855 	 0.28380441665649414 	 0.2972278594970703 	 0.29825663566589355 	 0.24371075630187988 	 0.22916078567504883 	 
2025-07-27 19:47:34.675169 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 4, 1587601],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 4, 1587601],"float64"), ) 	 25401616 	 1000 	 0.29797911643981934 	 0.5439684391021729 	 0.2738492488861084 	 0.27608299255371094 	 0.2977454662322998 	 0.29836559295654297 	 0.2354264259338379 	 0.22283387184143066 	 
2025-07-27 19:47:40.033080 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.2976346015930176 	 0.2985093593597412 	 0.28220415115356445 	 0.28381967544555664 	 0.2972679138183594 	 0.29834747314453125 	 0.2403697967529297 	 0.202559232711792 	 
2025-07-27 19:47:42.186649 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 0.29764771461486816 	 0.29854679107666016 	 0.28262877464294434 	 0.28397583961486816 	 0.29715704917907715 	 0.2983207702636719 	 0.2418203353881836 	 0.22910380363464355 	 
2025-07-27 19:47:44.366008 test begin: paddle.Tensor.rad2deg(x=Tensor([4, 6350401],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([4, 6350401],"float64"), ) 	 25401604 	 1000 	 0.29799485206604004 	 0.3039119243621826 	 0.2827494144439697 	 0.28137803077697754 	 0.29778099060058594 	 0.29838085174560547 	 0.24420619010925293 	 0.23063898086547852 	 
2025-07-27 19:47:46.510001 test begin: paddle.Tensor.rad2deg(x=Tensor([6350401, 4],"float64"), )
[Prof] paddle.Tensor.rad2deg 	 paddle.Tensor.rad2deg(x=Tensor([6350401, 4],"float64"), ) 	 25401604 	 1000 	 0.2979755401611328 	 0.2986314296722412 	 0.2828841209411621 	 0.28422045707702637 	 0.29773473739624023 	 0.29831480979919434 	 0.24420475959777832 	 0.22954106330871582 	 
2025-07-27 19:47:48.651339 test begin: paddle.Tensor.rank(Tensor([256, 1536, 3, 44],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 1536, 3, 44],"float32"), ) 	 51904512 	 1000 	 0.04244089126586914 	 0.029716968536376953 	 2.193450927734375e-05 	 6.151199340820312e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:49.543392 test begin: paddle.Tensor.rank(Tensor([256, 1536, 44, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 1536, 44, 3],"float32"), ) 	 51904512 	 1000 	 0.0445103645324707 	 0.030000925064086914 	 3.552436828613281e-05 	 5.7697296142578125e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:50.418952 test begin: paddle.Tensor.rank(Tensor([256, 2048, 3, 33],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 2048, 3, 33],"float32"), ) 	 51904512 	 1000 	 0.04258227348327637 	 0.029344558715820312 	 3.9577484130859375e-05 	 4.4345855712890625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:51.289949 test begin: paddle.Tensor.rank(Tensor([256, 2048, 33, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 2048, 33, 3],"float32"), ) 	 51904512 	 1000 	 0.042966604232788086 	 0.041007041931152344 	 2.4557113647460938e-05 	 8.7738037109375e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:52.197331 test begin: paddle.Tensor.rank(Tensor([256, 22051, 3, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 22051, 3, 3],"float32"), ) 	 50805504 	 1000 	 0.055466651916503906 	 0.03783750534057617 	 2.6941299438476562e-05 	 4.482269287109375e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:53.133776 test begin: paddle.Tensor.rank(Tensor([256, 768, 3, 87],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 768, 3, 87],"float32"), ) 	 51314688 	 1000 	 0.04245352745056152 	 0.02955484390258789 	 3.0040740966796875e-05 	 4.4345855712890625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:53.998581 test begin: paddle.Tensor.rank(Tensor([256, 768, 87, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([256, 768, 87, 3],"float32"), ) 	 51314688 	 1000 	 0.04250454902648926 	 0.029462337493896484 	 1.7642974853515625e-05 	 4.482269287109375e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:54.861714 test begin: paddle.Tensor.rank(Tensor([2757, 2048, 3, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([2757, 2048, 3, 3],"float32"), ) 	 50817024 	 1000 	 0.04204440116882324 	 0.02957439422607422 	 1.9073486328125e-05 	 3.910064697265625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:55.735261 test begin: paddle.Tensor.rank(Tensor([3676, 1536, 3, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([3676, 1536, 3, 3],"float32"), ) 	 50817024 	 1000 	 0.04254031181335449 	 0.02969193458557129 	 2.6464462280273438e-05 	 3.933906555175781e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:56.606764 test begin: paddle.Tensor.rank(Tensor([7351, 768, 3, 3],"float32"), )
[Prof] paddle.Tensor.rank 	 paddle.Tensor.rank(Tensor([7351, 768, 3, 3],"float32"), ) 	 50810112 	 1000 	 0.04243803024291992 	 0.02955341339111328 	 1.5735626220703125e-05 	 4.1484832763671875e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:47:57.463298 test begin: paddle.Tensor.reciprocal(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.295457124710083 	 0.2982668876647949 	 0.28624391555786133 	 0.2878689765930176 	 0.44947385787963867 	 1.0405187606811523 	 0.39365100860595703 	 0.35447239875793457 	 
2025-07-27 19:48:01.155400 test begin: paddle.Tensor.reciprocal(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.295487642288208 	 0.5297634601593018 	 0.28627586364746094 	 0.2791779041290283 	 0.449596643447876 	 1.0405919551849365 	 0.3932003974914551 	 0.3545193672180176 	 
2025-07-27 19:48:07.654825 test begin: paddle.Tensor.reciprocal(Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2955286502838135 	 0.30005502700805664 	 0.2791471481323242 	 0.27916669845581055 	 0.4495255947113037 	 1.0406825542449951 	 0.38428544998168945 	 0.3545207977294922 	 
2025-07-27 19:48:11.291075 test begin: paddle.Tensor.reciprocal(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2954535484313965 	 0.29828405380249023 	 0.2861897945404053 	 0.2879476547241211 	 0.4495737552642822 	 1.040494441986084 	 0.39362144470214844 	 0.3544578552246094 	 
2025-07-27 19:48:14.953695 test begin: paddle.Tensor.reciprocal(Tensor([2540161, 20],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.2954854965209961 	 0.29822778701782227 	 0.28610920906066895 	 0.28774404525756836 	 0.4495818614959717 	 1.0405707359313965 	 0.39372730255126953 	 0.35444140434265137 	 
2025-07-27 19:48:18.567332 test begin: paddle.Tensor.reciprocal(Tensor([4233601, 12],"float32"), )
[Prof] paddle.Tensor.reciprocal 	 paddle.Tensor.reciprocal(Tensor([4233601, 12],"float32"), ) 	 50803212 	 1000 	 0.2955141067504883 	 0.2982325553894043 	 0.28624868392944336 	 0.287736177444458 	 0.4495701789855957 	 1.0406081676483154 	 0.389254093170166 	 0.3544776439666748 	 
2025-07-27 19:48:22.227492 test begin: paddle.Tensor.remainder(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), )
[Prof] paddle.Tensor.remainder 	 paddle.Tensor.remainder(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), ) 	 101606412 	 1000 	 0.450333833694458 	 0.44942665100097656 	 0.44096922874450684 	 0.43779826164245605 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:24.740770 test begin: paddle.Tensor.remainder(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), )
[Prof] paddle.Tensor.remainder 	 paddle.Tensor.remainder(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), ) 	 101606416 	 1000 	 0.4504830837249756 	 0.4492506980895996 	 0.4405839443206787 	 0.43729186058044434 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:27.157064 test begin: paddle.Tensor.remainder(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), )
[Prof] paddle.Tensor.remainder 	 paddle.Tensor.remainder(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), ) 	 101606424 	 1000 	 0.45036745071411133 	 0.4493129253387451 	 0.44067811965942383 	 0.43729114532470703 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:29.585164 test begin: paddle.Tensor.repeat_interleave(Tensor([1, 1, 198451, 128],"float64"), 3, axis=1, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(Tensor([1, 1, 198451, 128],"float64"), 3, axis=1, ) 	 25401728 	 1000 	 0.8995211124420166 	 0.8987607955932617 	 0.4593174457550049 	 0.8655097484588623 	 1.4864163398742676 	 0.5879273414611816 	 0.5066795349121094 	 0.49266743659973145 	 
2025-07-27 19:48:37.502898 test begin: paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 396901],"float64"), 3, axis=1, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 396901],"float64"), 3, axis=1, ) 	 25401664 	 1000 	 1.1574516296386719 	 0.8865787982940674 	 0.4588043689727783 	 0.8499171733856201 	 1.4851531982421875 	 0.5878336429595947 	 0.506244421005249 	 0.48684120178222656 	 
2025-07-27 19:48:44.068200 test begin: paddle.Tensor.repeat_interleave(Tensor([1, 3101, 64, 128],"float64"), 3, axis=1, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(Tensor([1, 3101, 64, 128],"float64"), 3, axis=1, ) 	 25403392 	 1000 	 0.7025177478790283 	 0.6425149440765381 	 0.07436013221740723 	 0.6143932342529297 	 0.9197714328765869 	 0.5946660041809082 	 0.09458255767822266 	 0.5003643035888672 	 
2025-07-27 19:48:48.870093 test begin: paddle.Tensor.repeat_interleave(Tensor([3101, 1, 64, 128],"float64"), 3, axis=1, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(Tensor([3101, 1, 64, 128],"float64"), 3, axis=1, ) 	 25403392 	 1000 	 0.6239633560180664 	 0.6383998394012451 	 0.31825685501098633 	 0.6147749423980713 	 0.9144208431243896 	 0.5947582721710205 	 0.31164002418518066 	 0.4980783462524414 	 
2025-07-27 19:48:54.044601 test begin: paddle.Tensor.repeat_interleave(x=Tensor([158761, 2, 4, 4, 5],"float64"), repeats=2, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(x=Tensor([158761, 2, 4, 4, 5],"float64"), repeats=2, ) 	 25401760 	 1000 	 195.64943838119507 	 0.46619701385498047 	 0.0001087188720703125 	 0.4429793357849121 	 224.8545663356781 	 0.5449960231781006 	 9.441375732421875e-05 	 0.44462108612060547 	 
2025-07-27 19:55:57.589758 test begin: paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 158761, 4, 5],"float64"), repeats=2, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 158761, 4, 5],"float64"), repeats=2, ) 	 25401760 	 1000 	 197.44231462478638 	 0.466261625289917 	 0.0001087188720703125 	 0.4432542324066162 	 224.76877570152283 	 0.5449981689453125 	 9.059906005859375e-05 	 0.44568538665771484 	 
2025-07-27 20:03:02.840331 test begin: paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 158761, 5],"float64"), repeats=2, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 158761, 5],"float64"), repeats=2, ) 	 25401760 	 1000 	 195.74349188804626 	 1.3538384437561035 	 0.00010323524475097656 	 0.44072747230529785 	 222.9931058883667 	 0.5450420379638672 	 8.559226989746094e-05 	 0.4419894218444824 	 
2025-07-27 20:10:09.166193 test begin: paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 198451],"float64"), repeats=2, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 198451],"float64"), repeats=2, ) 	 25401728 	 1000 	 195.8923921585083 	 0.46622133255004883 	 0.0001125335693359375 	 0.44304871559143066 	 224.44475030899048 	 0.5449955463409424 	 9.298324584960938e-05 	 0.43792128562927246 	 
2025-07-27 20:17:13.763053 test begin: paddle.Tensor.repeat_interleave(x=Tensor([4, 79381, 4, 4, 5],"float64"), repeats=2, )
[Prof] paddle.Tensor.repeat_interleave 	 paddle.Tensor.repeat_interleave(x=Tensor([4, 79381, 4, 4, 5],"float64"), repeats=2, ) 	 25401920 	 1000 	 193.70752358436584 	 0.4662313461303711 	 0.00010418891906738281 	 0.442990779876709 	 222.88430786132812 	 0.5446789264678955 	 0.00010752677917480469 	 0.44052863121032715 	 
2025-07-27 20:24:13.382646 test begin: paddle.Tensor.reshape(Tensor([12404, 8192],"bfloat16"), list[-1,8192,], )
[Prof] paddle.Tensor.reshape 	 paddle.Tensor.reshape(Tensor([12404, 8192],"bfloat16"), list[-1,8192,], ) 	 101613568 	 1000 	 0.005174875259399414 	 0.004081249237060547 	 1.1444091796875e-05 	 2.0503997802734375e-05 	 0.04774904251098633 	 0.45356082916259766 	 2.8848648071289062e-05 	 0.3718392848968506 	 
2025-07-27 20:24:17.001348 test begin: paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.5115127563476562 	 0.30342602729797363 	 0.48673248291015625 	 0.28743863105773926 	 0.8213369846343994 	 0.3039546012878418 	 0.41970276832580566 	 0.2318880558013916 	 
2025-07-27 20:24:19.922372 test begin: paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8160178661346436 	 0.3034176826477051 	 0.41704511642456055 	 0.285336971282959 	 0.5114889144897461 	 0.3033792972564697 	 0.4490163326263428 	 0.23186445236206055 	 
2025-07-27 20:24:22.864460 test begin: paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8118634223937988 	 0.30344462394714355 	 0.4148428440093994 	 0.2856478691101074 	 0.5113656520843506 	 0.30297136306762695 	 0.45059871673583984 	 0.23187565803527832 	 
2025-07-27 20:24:25.737847 test begin: paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.5127778053283691 	 0.30418848991394043 	 0.4880948066711426 	 0.2881002426147461 	 0.822655439376831 	 0.3026423454284668 	 0.42035603523254395 	 0.21700191497802734 	 
2025-07-27 20:24:31.062980 test begin: paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.9460506439208984 	 0.31540560722351074 	 0.4835200309753418 	 0.27848124504089355 	 0.5135810375213623 	 0.3043813705444336 	 0.4422762393951416 	 0.2303314208984375 	 
2025-07-27 20:24:35.394563 test begin: paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8117272853851318 	 0.31172752380371094 	 0.4148426055908203 	 0.2855677604675293 	 0.5112574100494385 	 0.30310535430908203 	 0.45035862922668457 	 0.2197895050048828 	 
2025-07-27 20:24:40.936360 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.5139122009277344 	 0.3042452335357666 	 0.4890758991241455 	 0.28808069229125977 	 0.8219614028930664 	 0.30395984649658203 	 0.4199669361114502 	 0.23136091232299805 	 
2025-07-27 20:24:43.906853 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8272147178649902 	 0.3044123649597168 	 0.42268800735473633 	 0.2809162139892578 	 0.5112905502319336 	 0.3033256530761719 	 0.45061540603637695 	 0.2319326400756836 	 
2025-07-27 20:24:46.816171 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8144867420196533 	 0.30438995361328125 	 0.41625046730041504 	 0.28478264808654785 	 0.5132827758789062 	 0.30577611923217773 	 0.45244479179382324 	 0.2339341640472412 	 
2025-07-27 20:24:49.746886 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 0.5138306617736816 	 0.30865907669067383 	 0.4889400005340576 	 0.28820252418518066 	 0.8217599391937256 	 0.3039126396179199 	 0.41994714736938477 	 0.23109889030456543 	 
2025-07-27 20:24:52.692691 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8235945701599121 	 0.3043644428253174 	 0.42083239555358887 	 0.2863619327545166 	 0.5136206150054932 	 0.30622196197509766 	 0.4527716636657715 	 0.23449397087097168 	 
2025-07-27 20:24:55.656198 test begin: paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.Tensor.rot90 	 paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8072996139526367 	 0.30951642990112305 	 0.41249561309814453 	 0.28076910972595215 	 0.511446475982666 	 0.3029940128326416 	 0.45072388648986816 	 0.23122167587280273 	 
2025-07-27 20:24:58.552179 test begin: paddle.Tensor.round(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.Tensor.round 	 paddle.Tensor.round(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.2955918312072754 	 0.2980051040649414 	 0.2865433692932129 	 0.285783052444458 	 0.13408374786376953 	 0.13433122634887695 	 0.08090686798095703 	 0.06683731079101562 	 
2025-07-27 20:25:00.957596 test begin: paddle.Tensor.round(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.Tensor.round 	 paddle.Tensor.round(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2956078052520752 	 0.29948925971984863 	 0.2864570617675781 	 0.2861044406890869 	 0.13409113883972168 	 0.13421225547790527 	 0.08133816719055176 	 0.06643939018249512 	 
2025-07-27 20:25:03.367565 test begin: paddle.Tensor.round(Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.round 	 paddle.Tensor.round(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2956514358520508 	 0.29798126220703125 	 0.2794456481933594 	 0.2796449661254883 	 0.1340482234954834 	 0.1343398094177246 	 0.07269501686096191 	 0.039427995681762695 	 
2025-07-27 20:25:05.973886 test begin: paddle.Tensor.round(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.Tensor.round 	 paddle.Tensor.round(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.295673131942749 	 0.29927778244018555 	 0.2865030765533447 	 0.2862718105316162 	 0.1340632438659668 	 0.13424205780029297 	 0.08098459243774414 	 0.06633758544921875 	 
2025-07-27 20:25:08.384571 test begin: paddle.Tensor.round(Tensor([2540161, 20],"float32"), )
[Prof] paddle.Tensor.round 	 paddle.Tensor.round(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.2956428527832031 	 0.2980310916900635 	 0.2864253520965576 	 0.2862365245819092 	 0.13405680656433105 	 0.1342465877532959 	 0.08095407485961914 	 0.06744098663330078 	 
2025-07-27 20:25:10.792047 test begin: paddle.Tensor.rsqrt(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.Tensor.rsqrt 	 paddle.Tensor.rsqrt(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.29564356803894043 	 0.29799866676330566 	 0.2796323299407959 	 0.2809627056121826 	 0.4494137763977051 	 1.0403919219970703 	 0.38452863693237305 	 0.35443878173828125 	 
2025-07-27 20:25:14.682552 test begin: paddle.Tensor.rsqrt(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.Tensor.rsqrt 	 paddle.Tensor.rsqrt(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2956855297088623 	 0.29808497428894043 	 0.2797260284423828 	 0.2809579372406006 	 0.4496281147003174 	 1.0403554439544678 	 0.37761759757995605 	 0.35441160202026367 	 
2025-07-27 20:25:18.777394 test begin: paddle.Tensor.rsqrt(Tensor([10, 5080321],"float32"), )
[Prof] paddle.Tensor.rsqrt 	 paddle.Tensor.rsqrt(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.29572463035583496 	 0.2979750633239746 	 0.2868661880493164 	 0.28722453117370605 	 0.44962620735168457 	 1.0403461456298828 	 0.39369726181030273 	 0.3543965816497803 	 
2025-07-27 20:25:22.458479 test begin: paddle.Tensor.rsqrt(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.Tensor.rsqrt 	 paddle.Tensor.rsqrt(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2957010269165039 	 0.2979884147644043 	 0.28695249557495117 	 0.2872285842895508 	 0.4495730400085449 	 1.0403597354888916 	 0.39198875427246094 	 0.3543992042541504 	 
2025-07-27 20:25:26.131232 test begin: paddle.Tensor.rsqrt(Tensor([2540161, 20],"float32"), )
[Prof] paddle.Tensor.rsqrt 	 paddle.Tensor.rsqrt(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.29572439193725586 	 0.2979702949523926 	 0.28691601753234863 	 0.28720617294311523 	 0.4495863914489746 	 1.040365219116211 	 0.39319682121276855 	 0.3544793128967285 	 
2025-07-27 20:25:30.057406 test begin: paddle.Tensor.scale(Tensor([100352, 1013],"bfloat16"), 0.006378560586546936, )
[Prof] paddle.Tensor.scale 	 paddle.Tensor.scale(Tensor([100352, 1013],"bfloat16"), 0.006378560586546936, ) 	 101656576 	 1000 	 0.29825830459594727 	 0.5946462154388428 	 0.28852200508117676 	 0.3028120994567871 	 0.5874760150909424 	 0.7498323917388916 	 0.529120922088623 	 0.38307785987854004 	 combined
2025-07-27 20:25:37.343540 test begin: paddle.Tensor.scale(Tensor([1013, 100352],"bfloat16"), 0.006378560586546936, )
[Prof] paddle.Tensor.scale 	 paddle.Tensor.scale(Tensor([1013, 100352],"bfloat16"), 0.006378560586546936, ) 	 101656576 	 1000 	 0.29825305938720703 	 0.6037743091583252 	 0.28853631019592285 	 0.30280184745788574 	 0.5876922607421875 	 0.7498891353607178 	 0.52950119972229 	 0.3831062316894531 	 combined
2025-07-27 20:25:45.020306 test begin: paddle.Tensor.scale(Tensor([12404, 8192],"bfloat16"), 0.006378560586546936, )
[Prof] paddle.Tensor.scale 	 paddle.Tensor.scale(Tensor([12404, 8192],"bfloat16"), 0.006378560586546936, ) 	 101613568 	 1000 	 0.2980921268463135 	 0.5953159332275391 	 0.28832054138183594 	 0.3026163578033447 	 0.5871281623840332 	 0.7495594024658203 	 0.5288503170013428 	 0.38297128677368164 	 combined
2025-07-27 20:25:50.355933 test begin: paddle.Tensor.scale(Tensor([1772, 57344],"bfloat16"), 0.006378560586546936, )
[Prof] paddle.Tensor.scale 	 paddle.Tensor.scale(Tensor([1772, 57344],"bfloat16"), 0.006378560586546936, ) 	 101613568 	 1000 	 0.298084020614624 	 0.593604564666748 	 0.2883298397064209 	 0.30266833305358887 	 0.5871732234954834 	 0.7495286464691162 	 0.5292530059814453 	 0.3829331398010254 	 combined
2025-07-27 20:25:55.853445 test begin: paddle.Tensor.scale(Tensor([8192, 12404],"bfloat16"), 0.006378560586546936, )
[Prof] paddle.Tensor.scale 	 paddle.Tensor.scale(Tensor([8192, 12404],"bfloat16"), 0.006378560586546936, ) 	 101613568 	 1000 	 0.29808616638183594 	 0.5926668643951416 	 0.28818273544311523 	 0.30258870124816895 	 0.587116003036499 	 0.7495462894439697 	 0.5292725563049316 	 0.38296031951904297 	 combined
2025-07-27 20:26:01.356286 test begin: paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3386881],"bool"), list[20,], list[2,], 0, )
[Prof] paddle.Tensor.set_ 	 paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3386881],"bool"), list[20,], list[2,], 0, ) 	 50803235 	 1000 	 0.09360003471374512 	 0.0023276805877685547 	 4.38690185546875e-05 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:02.177992 test begin: paddle.Tensor.set_(Tensor([20],"bool"), Tensor([16934401, 3],"bool"), list[20,], list[2,], 0, )
[Prof] paddle.Tensor.set_ 	 paddle.Tensor.set_(Tensor([20],"bool"), Tensor([16934401, 3],"bool"), list[20,], list[2,], 0, ) 	 50803223 	 1000 	 0.036542415618896484 	 0.0022764205932617188 	 2.5987625122070312e-05 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:02.938471 test begin: paddle.Tensor.set_(Tensor([50803201],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, )
[Prof] paddle.Tensor.set_ 	 paddle.Tensor.set_(Tensor([50803201],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, ) 	 50803246 	 1000 	 0.036421775817871094 	 0.002331256866455078 	 2.6941299438476562e-05 	 1.621246337890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:03.705486 test begin: paddle.Tensor.sigmoid(Tensor([1, 1100, 46185],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1, 1100, 46185],"float32"), ) 	 50803500 	 1000 	 0.2949697971343994 	 0.29848694801330566 	 0.286210298538208 	 0.2881622314453125 	 0.4496893882751465 	 0.44669294357299805 	 0.39350366592407227 	 0.37792038917541504 	 
2025-07-27 20:26:06.727608 test begin: paddle.Tensor.sigmoid(Tensor([1, 12700801, 4],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1, 12700801, 4],"float32"), ) 	 50803204 	 1000 	 0.2946949005126953 	 0.29845094680786133 	 0.28595733642578125 	 0.2878875732421875 	 0.4495387077331543 	 0.4466667175292969 	 0.3936624526977539 	 0.37755322456359863 	 
2025-07-27 20:26:09.833068 test begin: paddle.Tensor.sigmoid(Tensor([1, 6380, 7963],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1, 6380, 7963],"float32"), ) 	 50803940 	 1000 	 0.2946803569793701 	 0.2984294891357422 	 0.2857983112335205 	 0.28780436515808105 	 0.4494442939758301 	 0.4467017650604248 	 0.39377546310424805 	 0.378497838973999 	 
2025-07-27 20:26:12.921889 test begin: paddle.Tensor.sigmoid(Tensor([1, 8550, 5942],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1, 8550, 5942],"float32"), ) 	 50804100 	 1000 	 0.29474949836730957 	 0.2984342575073242 	 0.28594541549682617 	 0.28786396980285645 	 0.4495425224304199 	 0.4466099739074707 	 0.3932616710662842 	 0.3787059783935547 	 
2025-07-27 20:26:15.937346 test begin: paddle.Tensor.sigmoid(Tensor([11547, 1100, 4],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([11547, 1100, 4],"float32"), ) 	 50806800 	 1000 	 0.29465770721435547 	 0.29857754707336426 	 0.28581905364990234 	 0.287811279296875 	 0.44971251487731934 	 0.44667744636535645 	 0.3943157196044922 	 0.3788154125213623 	 
2025-07-27 20:26:19.180646 test begin: paddle.Tensor.sigmoid(Tensor([1486, 8550, 4],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1486, 8550, 4],"float32"), ) 	 50821200 	 1000 	 0.29488348960876465 	 0.29853296279907227 	 0.28597187995910645 	 0.2879195213317871 	 0.44972729682922363 	 0.44680261611938477 	 0.3940722942352295 	 0.37960219383239746 	 
2025-07-27 20:26:22.203683 test begin: paddle.Tensor.sigmoid(Tensor([1991, 6380, 4],"float32"), )
[Prof] paddle.Tensor.sigmoid 	 paddle.Tensor.sigmoid(Tensor([1991, 6380, 4],"float32"), ) 	 50810320 	 1000 	 0.29471778869628906 	 0.2984771728515625 	 0.285905122756958 	 0.28537797927856445 	 0.449507474899292 	 0.44674134254455566 	 0.3937501907348633 	 0.3718445301055908 	 
2025-07-27 20:26:25.275050 test begin: paddle.Tensor.sign(Tensor([1016065, 5, 5],"float64"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([1016065, 5, 5],"float64"), ) 	 25401625 	 1000 	 0.30854272842407227 	 0.2984306812286377 	 0.2998785972595215 	 0.28788232803344727 	 0.2977738380432129 	 0.13454198837280273 	 0.24428725242614746 	 0.06746721267700195 	 
2025-07-27 20:26:27.302562 test begin: paddle.Tensor.sign(Tensor([1124, 45199],"float32"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([1124, 45199],"float32"), ) 	 50803676 	 1000 	 0.34465718269348145 	 0.2979395389556885 	 0.3361492156982422 	 0.287109375 	 0.2956721782684326 	 0.13428521156311035 	 0.24197745323181152 	 0.06837224960327148 	 
2025-07-27 20:26:29.921957 test begin: paddle.Tensor.sign(Tensor([12700801, 2],"float64"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([12700801, 2],"float64"), ) 	 25401602 	 1000 	 0.30863213539123535 	 0.29844069480895996 	 0.3001868724822998 	 0.2877929210662842 	 0.2977728843688965 	 0.13460993766784668 	 0.24439358711242676 	 0.0688776969909668 	 
2025-07-27 20:26:31.927504 test begin: paddle.Tensor.sign(Tensor([1587601, 32],"float32"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([1587601, 32],"float32"), ) 	 50803232 	 1000 	 0.3451359272003174 	 0.30100035667419434 	 0.336622953414917 	 0.2872288227081299 	 0.2958383560180664 	 0.1342160701751709 	 0.24207663536071777 	 0.06768655776977539 	 
2025-07-27 20:26:34.545815 test begin: paddle.Tensor.sign(Tensor([50000, 102, 5],"float64"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([50000, 102, 5],"float64"), ) 	 25500000 	 1000 	 0.30959105491638184 	 0.30982351303100586 	 0.30109238624572754 	 0.28208327293395996 	 0.2990379333496094 	 0.1363391876220703 	 0.24573469161987305 	 0.06165766716003418 	 
2025-07-27 20:26:40.017238 test begin: paddle.Tensor.sign(Tensor([50000, 5, 102],"float64"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([50000, 5, 102],"float64"), ) 	 25500000 	 1000 	 0.3094949722290039 	 0.2994685173034668 	 0.30101799964904785 	 0.2887735366821289 	 0.29900240898132324 	 0.1351165771484375 	 0.2454073429107666 	 0.06755900382995605 	 
2025-07-27 20:26:42.024693 test begin: paddle.Tensor.sign(Tensor([50000, 509],"float64"), )
[Prof] paddle.Tensor.sign 	 paddle.Tensor.sign(Tensor([50000, 509],"float64"), ) 	 25450000 	 1000 	 0.3092076778411865 	 0.29892802238464355 	 0.3006608486175537 	 0.28799962997436523 	 0.2983365058898926 	 0.13487887382507324 	 0.24529719352722168 	 0.06601142883300781 	 
2025-07-27 20:26:44.010578 test begin: paddle.Tensor.signbit(Tensor([12, 10584, 2],"float64"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 10584, 2],"float64"), ) 	 254016 	 1000 	 10.079125165939331 	 0.010143756866455078 	 4.982948303222656e-05 	 3.075599670410156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:26:54.160094 test begin: paddle.Tensor.signbit(Tensor([12, 20, 1058],"float64"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 20, 1058],"float64"), ) 	 253920 	 1000 	 9.870164394378662 	 0.010097265243530273 	 6.198883056640625e-05 	 3.5762786865234375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:27:04.090437 test begin: paddle.Tensor.signbit(Tensor([12, 20, 2116],"float32"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 20, 2116],"float32"), ) 	 507840 	 1000 	 19.621457815170288 	 0.01009368896484375 	 6.4849853515625e-05 	 2.7418136596679688e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:27:23.784522 test begin: paddle.Tensor.signbit(Tensor([12, 20, 4233],"int16"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 20, 4233],"int16"), ) 	 1015920 	 1000 	 39.47309136390686 	 0.01059722900390625 	 5.841255187988281e-05 	 3.8623809814453125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:28:03.356669 test begin: paddle.Tensor.signbit(Tensor([12, 21168, 2],"float32"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 21168, 2],"float32"), ) 	 508032 	 1000 	 19.639479398727417 	 0.010053634643554688 	 5.0067901611328125e-05 	 3.4809112548828125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:28:23.066744 test begin: paddle.Tensor.signbit(Tensor([12, 42336, 2],"int16"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12, 42336, 2],"int16"), ) 	 1016064 	 1000 	 39.48898410797119 	 0.010573863983154297 	 6.4849853515625e-05 	 3.8623809814453125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:29:02.654542 test begin: paddle.Tensor.signbit(Tensor([12700, 20, 2],"float32"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([12700, 20, 2],"float32"), ) 	 508000 	 1000 	 19.774239540100098 	 0.010096073150634766 	 5.626678466796875e-05 	 2.7418136596679688e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:29:22.499957 test begin: paddle.Tensor.signbit(Tensor([25401, 20, 2],"int16"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([25401, 20, 2],"int16"), ) 	 1016040 	 1000 	 39.84294557571411 	 0.4239480495452881 	 5.9604644775390625e-05 	 8.058547973632812e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:30:04.090755 test begin: paddle.Tensor.signbit(Tensor([6350, 20, 2],"float64"), )
[Prof] paddle.Tensor.signbit 	 paddle.Tensor.signbit(Tensor([6350, 20, 2],"float64"), ) 	 254000 	 1000 	 9.863718748092651 	 0.01003575325012207 	 5.507469177246094e-05 	 2.9087066650390625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:30:14.012956 test begin: paddle.Tensor.sin(Tensor([131072, 388],"float32"), )
[Prof] paddle.Tensor.sin 	 paddle.Tensor.sin(Tensor([131072, 388],"float32"), ) 	 50855936 	 1000 	 0.295727014541626 	 0.29854702949523926 	 0.2861452102661133 	 0.28783464431762695 	 0.4504508972167969 	 0.7442831993103027 	 0.39515209197998047 	 0.38028717041015625 	 
2025-07-27 20:30:17.336572 test begin: paddle.Tensor.sin(Tensor([3175201, 16],"float32"), )
[Prof] paddle.Tensor.sin 	 paddle.Tensor.sin(Tensor([3175201, 16],"float32"), ) 	 50803216 	 1000 	 0.29544878005981445 	 0.29825258255004883 	 0.286008358001709 	 0.28760337829589844 	 0.4500730037689209 	 0.743610143661499 	 0.395099401473999 	 0.37992048263549805 	 
2025-07-27 20:30:20.634383 test begin: paddle.Tensor.sin(Tensor([32768, 1551],"float32"), )
[Prof] paddle.Tensor.sin 	 paddle.Tensor.sin(Tensor([32768, 1551],"float32"), ) 	 50823168 	 1000 	 0.29546594619750977 	 0.29880213737487793 	 0.2787923812866211 	 0.28135085105895996 	 0.4501361846923828 	 0.743908166885376 	 0.38598203659057617 	 0.3800632953643799 	 
2025-07-27 20:30:24.151794 test begin: paddle.Tensor.sin(Tensor([396901, 128],"float32"), )
[Prof] paddle.Tensor.sin 	 paddle.Tensor.sin(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.29530906677246094 	 0.29822397232055664 	 0.2850804328918457 	 0.2876615524291992 	 0.4500308036804199 	 0.7436656951904297 	 0.3932931423187256 	 0.379932165145874 	 
2025-07-27 20:30:27.469829 test begin: paddle.Tensor.slice(Tensor([12700801, 4],"float32"), list[1,], list[0,], list[1,], )
[Prof] paddle.Tensor.slice 	 paddle.Tensor.slice(Tensor([12700801, 4],"float32"), list[1,], list[0,], list[1,], ) 	 50803204 	 1000 	 0.007582902908325195 	 0.013344049453735352 	 8.344650268554688e-06 	 2.3365020751953125e-05 	 0.49155545234680176 	 0.4792006015777588 	 0.25112318992614746 	 0.2448108196258545 	 combined
2025-07-27 20:30:29.424695 test begin: paddle.Tensor.slice(Tensor([4, 12700801],"float32"), list[1,], list[0,], list[1,], )
[Prof] paddle.Tensor.slice 	 paddle.Tensor.slice(Tensor([4, 12700801],"float32"), list[1,], list[0,], list[1,], ) 	 50803204 	 1000 	 0.0071256160736083984 	 0.013302803039550781 	 8.821487426757812e-06 	 3.0279159545898438e-05 	 0.14879989624023438 	 0.1377098560333252 	 0.07601332664489746 	 0.06017637252807617 	 combined
2025-07-27 20:30:30.532188 test begin: paddle.Tensor.slice_scatter(Tensor([4233601, 6],"float64"), Tensor([4233601, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
[Prof] paddle.Tensor.slice_scatter 	 paddle.Tensor.slice_scatter(Tensor([4233601, 6],"float64"), Tensor([4233601, 3],"float64"), list[1,], list[0,], list[6,], list[2,], ) 	 38102409 	 1000 	 0.376218318939209 	 0.6881458759307861 	 0.3610646724700928 	 0.2342369556427002 	 1.0710198879241943 	 0.7654421329498291 	 0.1821000576019287 	 0.1955416202545166 	 
2025-07-27 20:30:34.611934 test begin: paddle.Tensor.slice_scatter(Tensor([8, 3175201],"float64"), Tensor([8, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
[Prof] paddle.Tensor.slice_scatter 	 paddle.Tensor.slice_scatter(Tensor([8, 3175201],"float64"), Tensor([8, 3],"float64"), list[1,], list[0,], list[6,], list[2,], ) 	 25401632 	 1000 	 0.015192031860351562 	 0.3248476982116699 	 1.1920928955078125e-05 	 0.10745573043823242 	 0.3243272304534912 	 0.31821227073669434 	 0.05512547492980957 	 0.08108186721801758 	 
2025-07-27 20:30:39.300171 test begin: paddle.Tensor.slice_scatter(Tensor([8467201, 6],"float64"), Tensor([8467201, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
[Prof] paddle.Tensor.slice_scatter 	 paddle.Tensor.slice_scatter(Tensor([8467201, 6],"float64"), Tensor([8467201, 3],"float64"), list[1,], list[0,], list[6,], list[2,], ) 	 76204809 	 1000 	 0.747394323348999 	 1.3647351264953613 	 0.7238867282867432 	 0.46408510208129883 	 2.0993964672088623 	 1.5052611827850342 	 0.35744547843933105 	 0.38449692726135254 	 
2025-07-27 20:30:48.080320 test begin: paddle.Tensor.sqrt(Tensor([276, 80, 48, 48],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([276, 80, 48, 48],"float32"), ) 	 50872320 	 1000 	 0.29499292373657227 	 0.29943346977233887 	 0.2860128879547119 	 0.28227806091308594 	 0.4509456157684326 	 0.7481734752655029 	 0.3862178325653076 	 0.38219141960144043 	 
2025-07-27 20:30:51.511719 test begin: paddle.Tensor.sqrt(Tensor([329, 80, 44, 44],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([329, 80, 44, 44],"float32"), ) 	 50955520 	 1000 	 0.2953066825866699 	 0.30200839042663574 	 0.28615689277648926 	 0.28888678550720215 	 0.4515213966369629 	 0.7495098114013672 	 0.39588284492492676 	 0.38291358947753906 	 
2025-07-27 20:30:54.949341 test begin: paddle.Tensor.sqrt(Tensor([397, 80, 40, 40],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([397, 80, 40, 40],"float32"), ) 	 50816000 	 1000 	 0.2947220802307129 	 0.29906415939331055 	 0.2858245372772217 	 0.2883775234222412 	 0.4504086971282959 	 0.7472901344299316 	 0.3946800231933594 	 0.38180017471313477 	 
2025-07-27 20:30:58.310479 test begin: paddle.Tensor.sqrt(Tensor([64, 345, 48, 48],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 345, 48, 48],"float32"), ) 	 50872320 	 1000 	 0.2949650287628174 	 0.2993438243865967 	 0.2858607769012451 	 0.288409948348999 	 0.4509704113006592 	 0.7482471466064453 	 0.3858814239501953 	 0.3822653293609619 	 
2025-07-27 20:31:01.654853 test begin: paddle.Tensor.sqrt(Tensor([64, 411, 44, 44],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 411, 44, 44],"float32"), ) 	 50924544 	 1000 	 0.2953052520751953 	 0.3012406826019287 	 0.27906203269958496 	 0.288790225982666 	 0.45139336585998535 	 0.7491507530212402 	 0.38696861267089844 	 0.3827834129333496 	 
2025-07-27 20:31:05.064365 test begin: paddle.Tensor.sqrt(Tensor([64, 497, 40, 40],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 497, 40, 40],"float32"), ) 	 50892800 	 1000 	 0.29509544372558594 	 0.30619215965270996 	 0.27873945236206055 	 0.2822895050048828 	 0.4511411190032959 	 0.748525857925415 	 0.38681674003601074 	 0.38243627548217773 	 
2025-07-27 20:31:10.292776 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 207, 48],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 207, 48],"float32"), ) 	 50872320 	 1000 	 0.2949955463409424 	 0.31211113929748535 	 0.2787938117980957 	 0.2820882797241211 	 0.45096778869628906 	 0.7482330799102783 	 0.38681840896606445 	 0.3822641372680664 	 
2025-07-27 20:31:16.338143 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 226, 44],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 226, 44],"float32"), ) 	 50913280 	 1000 	 0.2950732707977295 	 0.2996184825897217 	 0.28610944747924805 	 0.28885626792907715 	 0.4512174129486084 	 0.7488532066345215 	 0.39557456970214844 	 0.38256263732910156 	 
2025-07-27 20:31:19.707177 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 249, 40],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 249, 40],"float32"), ) 	 50995200 	 1000 	 0.2953479290008545 	 0.29996156692504883 	 0.2869253158569336 	 0.2831902503967285 	 0.45197367668151855 	 0.750220537185669 	 0.3872950077056885 	 0.3833174705505371 	 
2025-07-27 20:31:23.196417 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 40, 249],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 40, 249],"float32"), ) 	 50995200 	 1000 	 0.29530858993530273 	 0.30020737648010254 	 0.2862825393676758 	 0.2829170227050781 	 0.45199012756347656 	 0.7501122951507568 	 0.38767266273498535 	 0.38321495056152344 	 
2025-07-27 20:31:26.752747 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 44, 226],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 44, 226],"float32"), ) 	 50913280 	 1000 	 0.2950425148010254 	 0.2995612621307373 	 0.2860431671142578 	 0.28847694396972656 	 0.45127034187316895 	 0.7488434314727783 	 0.395632266998291 	 0.3825976848602295 	 
2025-07-27 20:31:30.084082 test begin: paddle.Tensor.sqrt(Tensor([64, 80, 48, 207],"float32"), )
[Prof] paddle.Tensor.sqrt 	 paddle.Tensor.sqrt(Tensor([64, 80, 48, 207],"float32"), ) 	 50872320 	 1000 	 0.2949686050415039 	 0.2993762493133545 	 0.28553104400634766 	 0.28861308097839355 	 0.45090150833129883 	 0.7482233047485352 	 0.3954012393951416 	 0.38226747512817383 	 
2025-07-27 20:31:33.383317 test begin: paddle.Tensor.square(Tensor([2, 25401601],"float32"), )
[Prof] paddle.Tensor.square 	 paddle.Tensor.square(Tensor([2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.29586029052734375 	 0.5283491611480713 	 0.27971887588500977 	 0.279665470123291 	 0.44971370697021484 	 1.055771827697754 	 0.38089871406555176 	 0.26987552642822266 	 
2025-07-27 20:31:40.338977 test begin: paddle.Tensor.square(Tensor([396901, 128],"float32"), )
[Prof] paddle.Tensor.square 	 paddle.Tensor.square(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.2959740161895752 	 0.2979462146759033 	 0.28705620765686035 	 0.2864718437194824 	 0.44960832595825195 	 1.0555779933929443 	 0.3938889503479004 	 0.2698507308959961 	 
2025-07-27 20:31:44.064257 test begin: paddle.Tensor.square(Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.square 	 paddle.Tensor.square(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.2958638668060303 	 0.29798269271850586 	 0.2873656749725342 	 0.28704237937927246 	 0.44962024688720703 	 1.0555853843688965 	 0.39471960067749023 	 0.269916296005249 	 
2025-07-27 20:31:47.829879 test begin: paddle.Tensor.square(Tensor([8, 6350401],"float32"), )
[Prof] paddle.Tensor.square 	 paddle.Tensor.square(Tensor([8, 6350401],"float32"), ) 	 50803208 	 1000 	 0.2958087921142578 	 0.2982900142669678 	 0.28685641288757324 	 0.28690671920776367 	 0.44963788986206055 	 1.0556375980377197 	 0.39324235916137695 	 0.26986074447631836 	 
2025-07-27 20:31:51.645324 test begin: paddle.Tensor.squeeze(Tensor([1, 2, 3840, 10240],"float32"), 0, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([1, 2, 3840, 10240],"float32"), 0, ) 	 78643200 	 1000 	 0.008904457092285156 	 0.007859230041503906 	 1.1205673217773438e-05 	 3.743171691894531e-05 	 0.05095624923706055 	 0.06613445281982422 	 4.5299530029296875e-05 	 9.226799011230469e-05 	 
2025-07-27 20:31:54.376546 test begin: paddle.Tensor.squeeze(Tensor([1, 3, 1654, 10240],"float32"), 0, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([1, 3, 1654, 10240],"float32"), 0, ) 	 50810880 	 1000 	 0.0043811798095703125 	 0.004194974899291992 	 9.059906005859375e-06 	 1.6689300537109375e-05 	 0.043810367584228516 	 0.05711793899536133 	 4.601478576660156e-05 	 6.389617919921875e-05 	 
2025-07-27 20:31:55.986447 test begin: paddle.Tensor.squeeze(Tensor([1, 3, 3840, 10240],"float32"), 0, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([1, 3, 3840, 10240],"float32"), 0, ) 	 117964800 	 1000 	 0.004434347152709961 	 0.004265546798706055 	 8.58306884765625e-06 	 2.3126602172851562e-05 	 0.045021772384643555 	 0.06490874290466309 	 3.552436828613281e-05 	 4.38690185546875e-05 	 
2025-07-27 20:31:59.606543 test begin: paddle.Tensor.squeeze(Tensor([1, 3, 3840, 4411],"float32"), 0, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([1, 3, 3840, 4411],"float32"), 0, ) 	 50814720 	 1000 	 0.004462242126464844 	 0.004173994064331055 	 7.3909759521484375e-06 	 1.811981201171875e-05 	 0.04386162757873535 	 0.06538128852844238 	 3.743171691894531e-05 	 8.082389831542969e-05 	 
2025-07-27 20:32:01.246735 test begin: paddle.Tensor.squeeze(Tensor([16, 1, 125, 25500],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([16, 1, 125, 25500],"float32"), 1, ) 	 51000000 	 1000 	 0.009434700012207031 	 0.007863283157348633 	 3.457069396972656e-05 	 1.8835067749023438e-05 	 0.05072188377380371 	 0.11770486831665039 	 4.00543212890625e-05 	 8.153915405273438e-05 	 
2025-07-27 20:32:03.191117 test begin: paddle.Tensor.squeeze(Tensor([16, 1, 80, 39691],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([16, 1, 80, 39691],"float32"), 1, ) 	 50804480 	 1000 	 0.009174108505249023 	 0.007791757583618164 	 3.504753112792969e-05 	 1.8596649169921875e-05 	 0.05087685585021973 	 0.0931391716003418 	 3.4332275390625e-05 	 7.176399230957031e-05 	 
2025-07-27 20:32:04.993024 test begin: paddle.Tensor.squeeze(Tensor([16, 2, 80, 25500],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([16, 2, 80, 25500],"float32"), 1, ) 	 65280000 	 1000 	 0.0043201446533203125 	 0.003975868225097656 	 6.9141387939453125e-06 	 1.811981201171875e-05 	 0.04478716850280762 	 0.07675004005432129 	 2.6464462280273438e-05 	 8.940696716308594e-05 	 
2025-07-27 20:32:07.213995 test begin: paddle.Tensor.squeeze(Tensor([200, 1, 127009, 2],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([200, 1, 127009, 2],"float32"), 1, ) 	 50803600 	 1000 	 0.004486560821533203 	 0.00409698486328125 	 7.152557373046875e-06 	 1.71661376953125e-05 	 0.04419422149658203 	 0.08594107627868652 	 1.9073486328125e-05 	 8.273124694824219e-05 	 
2025-07-27 20:32:08.987673 test begin: paddle.Tensor.squeeze(Tensor([200, 1, 37632, 7],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([200, 1, 37632, 7],"float32"), 1, ) 	 52684800 	 1000 	 0.00446009635925293 	 0.004141569137573242 	 1.6927719116210938e-05 	 2.0742416381835938e-05 	 0.044055938720703125 	 0.08353066444396973 	 2.0503997802734375e-05 	 5.2928924560546875e-05 	 
2025-07-27 20:32:10.848194 test begin: paddle.Tensor.squeeze(Tensor([200, 4, 37632, 2],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([200, 4, 37632, 2],"float32"), 1, ) 	 60211200 	 1000 	 0.004314422607421875 	 0.003995656967163086 	 7.867813110351562e-06 	 1.9073486328125e-05 	 0.043701887130737305 	 0.08231759071350098 	 2.6702880859375e-05 	 0.00016021728515625 	 
2025-07-27 20:32:12.979686 test begin: paddle.Tensor.squeeze(Tensor([25, 1, 80, 25500],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([25, 1, 80, 25500],"float32"), 1, ) 	 51000000 	 1000 	 0.004560708999633789 	 0.004168987274169922 	 1.049041748046875e-05 	 1.9788742065429688e-05 	 0.04398059844970703 	 0.06483626365661621 	 3.147125244140625e-05 	 4.839897155761719e-05 	 
2025-07-27 20:32:14.656326 test begin: paddle.Tensor.squeeze(Tensor([676, 1, 37632, 2],"float32"), 1, )
[Prof] paddle.Tensor.squeeze 	 paddle.Tensor.squeeze(Tensor([676, 1, 37632, 2],"float32"), 1, ) 	 50878464 	 1000 	 0.0045015811920166016 	 0.004202842712402344 	 8.106231689453125e-06 	 1.6689300537109375e-05 	 0.04401850700378418 	 0.06534814834594727 	 3.24249267578125e-05 	 6.246566772460938e-05 	 
2025-07-27 20:32:16.344680 test begin: paddle.Tensor.std(Tensor([1024, 1024, 25],"float64"), )
W0727 20:32:16.856909 24769 dygraph_functions.cc:88394] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([1024, 1024, 25],"float64"), ) 	 26214400 	 1000 	 2.2071690559387207 	 0.18438076972961426 	 2.2649765014648438e-05 	 0.09421300888061523 	 1.5293381214141846 	 0.7917685508728027 	 0.19563055038452148 	 0.09020423889160156 	 
2025-07-27 20:32:23.189938 test begin: paddle.Tensor.std(Tensor([1024, 1024, 49],"float32"), )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([1024, 1024, 49],"float32"), ) 	 51380224 	 1000 	 1.1109800338745117 	 0.16832804679870605 	 2.0503997802734375e-05 	 0.08597397804260254 	 1.3532416820526123 	 0.7839670181274414 	 0.17318153381347656 	 0.08931851387023926 	 
2025-07-27 20:32:27.449863 test begin: paddle.Tensor.std(Tensor([1024, 3101, 8],"float64"), )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([1024, 3101, 8],"float64"), ) 	 25403392 	 1000 	 1.3092515468597412 	 0.1791212558746338 	 2.6702880859375e-05 	 0.09151721000671387 	 1.48252534866333 	 0.768944263458252 	 0.18967914581298828 	 0.08758306503295898 	 
2025-07-27 20:32:31.667598 test begin: paddle.Tensor.std(Tensor([1024, 6202, 8],"float32"), )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([1024, 6202, 8],"float32"), ) 	 50806784 	 1000 	 1.1020960807800293 	 0.1666572093963623 	 3.409385681152344e-05 	 0.08511734008789062 	 1.3380961418151855 	 0.7772893905639648 	 0.1711595058441162 	 0.08854532241821289 	 
2025-07-27 20:32:37.454830 test begin: paddle.Tensor.std(Tensor([1444, 35183],"float32"), axis=1, )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([1444, 35183],"float32"), axis=1, ) 	 50804252 	 1000 	 2.1463277339935303 	 0.1768960952758789 	 3.5762786865234375e-05 	 0.1528306007385254 	 1.3621091842651367 	 0.7807333469390869 	 0.17429637908935547 	 0.09990715980529785 	 
2025-07-27 20:32:42.742921 test begin: paddle.Tensor.std(Tensor([3101, 1024, 8],"float64"), )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([3101, 1024, 8],"float64"), ) 	 25403392 	 1000 	 1.3126776218414307 	 0.1790177822113037 	 2.3126602172851562e-05 	 0.09141874313354492 	 1.4826138019561768 	 0.768977165222168 	 0.18980145454406738 	 0.08756709098815918 	 
2025-07-27 20:32:47.044096 test begin: paddle.Tensor.std(Tensor([49613, 1024],"float32"), axis=1, )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([49613, 1024],"float32"), axis=1, ) 	 50803712 	 1000 	 1.0925910472869873 	 0.16784453392028809 	 2.1696090698242188e-05 	 0.1511998176574707 	 1.3477263450622559 	 0.7805564403533936 	 0.19677495956420898 	 0.0998685359954834 	 
2025-07-27 20:32:51.250013 test begin: paddle.Tensor.std(Tensor([6202, 1024, 8],"float32"), )
[Prof] paddle.Tensor.std 	 paddle.Tensor.std(Tensor([6202, 1024, 8],"float32"), ) 	 50806784 	 1000 	 1.1326401233673096 	 0.1666257381439209 	 6.389617919921875e-05 	 0.08510994911193848 	 1.3379950523376465 	 0.7772359848022461 	 0.17114543914794922 	 0.08855295181274414 	 
2025-07-27 20:32:55.510291 test begin: paddle.Tensor.subtract(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.Tensor.subtract 	 paddle.Tensor.subtract(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.44979166984558105 	 0.4467432498931885 	 0.4398374557495117 	 0.4349217414855957 	 0.4691195487976074 	 0.2977278232574463 	 0.40905284881591797 	 0.22673964500427246 	 
2025-07-27 20:32:59.528396 test begin: paddle.Tensor.sum(Tensor([106496, 478],"float32"), axis=-1, )
[Prof] paddle.Tensor.sum 	 paddle.Tensor.sum(Tensor([106496, 478],"float32"), axis=-1, ) 	 50905088 	 1000 	 0.14992570877075195 	 0.15520095825195312 	 0.13738369941711426 	 0.14014291763305664 	 0.1383655071258545 	 0.057098388671875 	 0.08028078079223633 	 5.4836273193359375e-05 	 
2025-07-27 20:33:00.834472 test begin: paddle.Tensor.sum(Tensor([108544, 469],"float32"), axis=-1, )
[Prof] paddle.Tensor.sum 	 paddle.Tensor.sum(Tensor([108544, 469],"float32"), axis=-1, ) 	 50907136 	 1000 	 0.1500098705291748 	 0.1549360752105713 	 0.13753843307495117 	 0.1397547721862793 	 0.1383047103881836 	 0.05749058723449707 	 0.08043265342712402 	 6.365776062011719e-05 	 
2025-07-27 20:33:02.132809 test begin: paddle.Tensor.sum(Tensor([111616, 456],"float32"), axis=-1, )
[Prof] paddle.Tensor.sum 	 paddle.Tensor.sum(Tensor([111616, 456],"float32"), axis=-1, ) 	 50896896 	 1000 	 0.15030908584594727 	 0.1527252197265625 	 0.12963199615478516 	 0.1301572322845459 	 0.13840913772583008 	 0.06408548355102539 	 0.07126832008361816 	 6.532669067382812e-05 	 
2025-07-27 20:33:03.408421 test begin: paddle.Tensor.sum(Tensor([14176, 3584],"float32"), axis=-1, )
[Prof] paddle.Tensor.sum 	 paddle.Tensor.sum(Tensor([14176, 3584],"float32"), axis=-1, ) 	 50806784 	 1000 	 0.14611124992370605 	 0.15569710731506348 	 0.13373923301696777 	 0.14078187942504883 	 0.13727140426635742 	 0.05716061592102051 	 0.0795893669128418 	 5.602836608886719e-05 	 
2025-07-27 20:33:04.664442 test begin: paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, ) 	 50931328 	 1000 	 0.7755820751190186 	 0.4724595546722412 	 0.264157772064209 	 0.4543027877807617 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:17.327211 test begin: paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, ) 	 50803456 	 1000 	 0.3034019470214844 	 0.017575740814208984 	 0.10343289375305176 	 3.528594970703125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:18.883871 test begin: paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, ) 	 101606656 	 1000 	 2.3038697242736816 	 0.7369227409362793 	 0.477203369140625 	 0.7102737426757812 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:29.717418 test begin: paddle.Tensor.take_along_axis(Tensor([50804, 1000],"float32"), indices=Tensor([50804, 1],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([50804, 1000],"float32"), indices=Tensor([50804, 1],"int32"), axis=-1, ) 	 50854804 	 1000 	 0.30835604667663574 	 0.017410755157470703 	 0.10511279106140137 	 3.600120544433594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:31.307716 test begin: paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, ) 	 50883280 	 1000 	 0.7631351947784424 	 0.47040581703186035 	 0.2599046230316162 	 0.452197790145874 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:44.232646 test begin: paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, ) 	 50803360 	 1000 	 0.30333590507507324 	 0.026071548461914062 	 0.10344719886779785 	 4.315376281738281e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:45.873567 test begin: paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, )
[Prof] paddle.Tensor.take_along_axis 	 paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, ) 	 101606560 	 1000 	 1.401747226715088 	 0.7469265460968018 	 0.4776191711425781 	 0.7261683940887451 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:33:55.085433 test begin: paddle.Tensor.tanh(Tensor([1, 16934401, 3],"float32"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([1, 16934401, 3],"float32"), ) 	 50803203 	 1000 	 0.2954411506652832 	 0.29814958572387695 	 0.28613972663879395 	 0.2876439094543457 	 0.44960880279541016 	 0.446544885635376 	 0.3935072422027588 	 0.3790137767791748 	 
2025-07-27 20:33:58.104502 test begin: paddle.Tensor.tanh(Tensor([1, 2, 12700801],"float64"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([1, 2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.2991185188293457 	 0.3042299747467041 	 0.2832787036895752 	 0.28362488746643066 	 0.44791650772094727 	 0.44446730613708496 	 0.3829960823059082 	 0.36919736862182617 	 
2025-07-27 20:34:00.659077 test begin: paddle.Tensor.tanh(Tensor([1, 2, 25401601],"float32"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([1, 2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.2953929901123047 	 0.30014681816101074 	 0.2823002338409424 	 0.28739309310913086 	 0.4496145248413086 	 0.446521520614624 	 0.3936331272125244 	 0.3789401054382324 	 
2025-07-27 20:34:03.691843 test begin: paddle.Tensor.tanh(Tensor([1, 8467201, 3],"float64"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([1, 8467201, 3],"float64"), ) 	 25401603 	 1000 	 0.2991151809692383 	 0.3003835678100586 	 0.29029083251953125 	 0.28988146781921387 	 0.4479491710662842 	 0.4444847106933594 	 0.39240336418151855 	 0.3770625591278076 	 
2025-07-27 20:34:06.194955 test begin: paddle.Tensor.tanh(Tensor([2, 12700801],"float64"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.29912352561950684 	 0.3003427982330322 	 0.2903599739074707 	 0.28992533683776855 	 0.4479663372039795 	 0.44441890716552734 	 0.392258882522583 	 0.3777658939361572 	 
2025-07-27 20:34:08.633498 test begin: paddle.Tensor.tanh(Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([4233601, 2, 3],"float64"), ) 	 25401606 	 1000 	 0.2991182804107666 	 0.3004117012023926 	 0.29044032096862793 	 0.2835080623626709 	 0.4478907585144043 	 0.4447062015533447 	 0.39211249351501465 	 0.3440878391265869 	 
2025-07-27 20:34:11.131929 test begin: paddle.Tensor.tanh(Tensor([6350401, 4],"float64"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([6350401, 4],"float64"), ) 	 25401604 	 1000 	 0.2991495132446289 	 0.3005666732788086 	 0.2903409004211426 	 0.28999996185302734 	 0.44797253608703613 	 0.44470643997192383 	 0.3904421329498291 	 0.35646510124206543 	 
2025-07-27 20:34:13.833594 test begin: paddle.Tensor.tanh(Tensor([8467201, 2, 3],"float32"), )
[Prof] paddle.Tensor.tanh 	 paddle.Tensor.tanh(Tensor([8467201, 2, 3],"float32"), ) 	 50803206 	 1000 	 0.29547762870788574 	 0.29817891120910645 	 0.2792181968688965 	 0.28130292892456055 	 0.4495697021484375 	 0.4466259479522705 	 0.38464927673339844 	 0.34336113929748535 	 
2025-07-27 20:34:17.104864 test begin: paddle.Tensor.tile(Tensor([198451, 1, 256],"float32"), tuple(1,1,1,), )
[Prof] paddle.Tensor.tile 	 paddle.Tensor.tile(Tensor([198451, 1, 256],"float32"), tuple(1,1,1,), ) 	 50803456 	 1000 	 0.2960927486419678 	 0.3131387233734131 	 0.28432798385620117 	 0.15989351272583008 	 0.30689311027526855 	 0.05339241027832031 	 0.15675997734069824 	 5.984306335449219e-05 	 
2025-07-27 20:34:19.601616 test begin: paddle.Tensor.tile(Tensor([36858, 1, 1379],"float32"), tuple(1,1,1,), )
[Prof] paddle.Tensor.tile 	 paddle.Tensor.tile(Tensor([36858, 1, 1379],"float32"), tuple(1,1,1,), ) 	 50827182 	 1000 	 0.2962956428527832 	 0.3132789134979248 	 0.2844207286834717 	 0.15997099876403809 	 0.315185546875 	 0.05297112464904785 	 0.16100835800170898 	 4.482269287109375e-05 	 
2025-07-27 20:34:22.101835 test begin: paddle.Tensor.tile(Tensor([36858, 6, 256],"float32"), tuple(1,1,1,), )
[Prof] paddle.Tensor.tile 	 paddle.Tensor.tile(Tensor([36858, 6, 256],"float32"), tuple(1,1,1,), ) 	 56613888 	 1000 	 0.32935094833374023 	 0.34511852264404297 	 0.3175206184387207 	 0.32420897483825684 	 0.33892035484313965 	 0.05375361442565918 	 0.28075742721557617 	 4.673004150390625e-05 	 
2025-07-27 20:34:24.931035 test begin: paddle.Tensor.tile(Tensor([38402, 1, 1323],"float32"), tuple(1,1,1,), )
[Prof] paddle.Tensor.tile 	 paddle.Tensor.tile(Tensor([38402, 1, 1323],"float32"), tuple(1,1,1,), ) 	 50805846 	 1000 	 0.2963442802429199 	 0.31305670738220215 	 0.28448987007141113 	 0.15990519523620605 	 0.31397557258605957 	 0.060682058334350586 	 0.16040682792663574 	 0.00021767616271972656 	 
2025-07-27 20:34:27.561527 test begin: paddle.Tensor.tile(Tensor([38402, 6, 256],"float32"), tuple(1,1,1,), )
[Prof] paddle.Tensor.tile 	 paddle.Tensor.tile(Tensor([38402, 6, 256],"float32"), tuple(1,1,1,), ) 	 58985472 	 1000 	 0.3429431915283203 	 0.3657805919647217 	 0.33119869232177734 	 0.32871222496032715 	 0.3530538082122803 	 0.07920670509338379 	 0.2945091724395752 	 5.221366882324219e-05 	 
2025-07-27 20:34:31.098403 test begin: paddle.Tensor.tolist(Tensor([11, 16, 32, 43],"int64"), )
[Prof] paddle.Tensor.tolist 	 paddle.Tensor.tolist(Tensor([11, 16, 32, 43],"int64"), ) 	 242176 	 1000 	 13.384120225906372 	 16.795472383499146 	 0.0001327991485595703 	 0.00012874603271484375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:35:01.316725 test begin: paddle.Tensor.tolist(Tensor([11, 25, 21, 43],"int64"), )
[Prof] paddle.Tensor.tolist 	 paddle.Tensor.tolist(Tensor([11, 25, 21, 43],"int64"), ) 	 248325 	 1000 	 14.262786388397217 	 17.557470083236694 	 9.107589721679688e-05 	 0.00014781951904296875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:35:33.170547 test begin: paddle.Tensor.tolist(Tensor([11, 25, 32, 28],"int64"), )
[Prof] paddle.Tensor.tolist 	 paddle.Tensor.tolist(Tensor([11, 25, 32, 28],"int64"), ) 	 246400 	 1000 	 14.883294105529785 	 21.575254440307617 	 9.560585021972656e-05 	 0.0001354217529296875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:36:09.666512 test begin: paddle.Tensor.tolist(Tensor([7, 25, 32, 43],"int64"), )
[Prof] paddle.Tensor.tolist 	 paddle.Tensor.tolist(Tensor([7, 25, 32, 43],"int64"), ) 	 240800 	 1000 	 13.550752401351929 	 17.10163116455078 	 9.274482727050781e-05 	 0.00014352798461914062 	 None 	 None 	 None 	 None 	 
2025-07-27 20:36:40.350340 test begin: paddle.Tensor.topk(Tensor([1, 50803201],"float32"), 5, 1, True, True, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([1, 50803201],"float32"), 5, 1, True, True, ) 	 50803201 	 1000 	 178.3416612148285 	 5.989371061325073 	 178.33065462112427 	 0.3411273956298828 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:15.472563 test begin: paddle.Tensor.topk(Tensor([1024, 1034, 48],"float32"), 2, axis=-1, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([1024, 1034, 48],"float32"), 2, axis=-1, ) 	 50823168 	 1000 	 2.6637492179870605 	 11.154897928237915 	 2.6452724933624268 	 5.699641704559326 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:35.060145 test begin: paddle.Tensor.topk(Tensor([1024, 8, 6202],"float32"), 2, axis=-1, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([1024, 8, 6202],"float32"), 2, axis=-1, ) 	 50806784 	 1000 	 0.38138270378112793 	 1.5383334159851074 	 0.3628983497619629 	 0.08745908737182617 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:42.517909 test begin: paddle.Tensor.topk(Tensor([128, 396901],"float32"), 5, 1, True, True, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([128, 396901],"float32"), 5, 1, True, True, ) 	 50803328 	 1000 	 1.4843249320983887 	 1.4828851222991943 	 1.4738290309906006 	 0.0843191146850586 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:50.667381 test begin: paddle.Tensor.topk(Tensor([132301, 8, 48],"float32"), 2, axis=-1, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([132301, 8, 48],"float32"), 2, axis=-1, ) 	 50803584 	 1000 	 2.6639442443847656 	 11.148815631866455 	 2.6528143882751465 	 5.6967339515686035 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:41:10.442306 test begin: paddle.Tensor.topk(Tensor([50804, 1000],"float32"), 5, 1, True, True, )
[Prof] paddle.Tensor.topk 	 paddle.Tensor.topk(Tensor([50804, 1000],"float32"), 5, 1, True, True, ) 	 50804000 	 1000 	 0.650620698928833 	 2.4142940044403076 	 0.640190839767456 	 0.1373441219329834 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:41:18.608899 test begin: paddle.Tensor.transpose(Tensor([106496, 955],"bfloat16"), list[1,0,], )
[Prof] paddle.Tensor.transpose 	 paddle.Tensor.transpose(Tensor([106496, 955],"bfloat16"), list[1,0,], ) 	 101703680 	 1000 	 0.0034706592559814453 	 0.0057370662689208984 	 9.059906005859375e-06 	 9.226799011230469e-05 	 0.046033382415771484 	 0.45401501655578613 	 4.76837158203125e-05 	 0.36925435066223145 	 
2025-07-27 20:41:22.193224 test begin: paddle.Tensor.transpose(Tensor([108544, 937],"bfloat16"), list[1,0,], )
[Prof] paddle.Tensor.transpose 	 paddle.Tensor.transpose(Tensor([108544, 937],"bfloat16"), list[1,0,], ) 	 101705728 	 1000 	 0.0034110546112060547 	 0.0046808719635009766 	 1.2159347534179688e-05 	 2.0503997802734375e-05 	 0.04591774940490723 	 0.4540586471557617 	 4.4345855712890625e-05 	 0.37224698066711426 	 
2025-07-27 20:41:25.966932 test begin: paddle.Tensor.transpose(Tensor([111616, 911],"bfloat16"), list[1,0,], )
[Prof] paddle.Tensor.transpose 	 paddle.Tensor.transpose(Tensor([111616, 911],"bfloat16"), list[1,0,], ) 	 101682176 	 1000 	 0.003450632095336914 	 0.004652738571166992 	 1.2636184692382812e-05 	 1.9550323486328125e-05 	 0.046038150787353516 	 0.4539780616760254 	 2.6941299438476562e-05 	 0.37189459800720215 	 
2025-07-27 20:41:29.513744 test begin: paddle.Tensor.transpose(Tensor([14176, 7168],"bfloat16"), list[1,0,], )
[Prof] paddle.Tensor.transpose 	 paddle.Tensor.transpose(Tensor([14176, 7168],"bfloat16"), list[1,0,], ) 	 101613568 	 1000 	 0.0034177303314208984 	 0.005963563919067383 	 6.9141387939453125e-06 	 0.00016760826110839844 	 0.0459139347076416 	 0.4536571502685547 	 3.719329833984375e-05 	 0.36624908447265625 	 
2025-07-27 20:41:33.072882 test begin: paddle.Tensor.tril(Tensor([1, 2, 25401601],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([1, 2, 25401601],"float32"), -1, ) 	 50803202 	 1000 	 0.2994203567504883 	 0.7145130634307861 	 0.29116344451904297 	 0.25580453872680664 	 0.2995791435241699 	 0.26727724075317383 	 0.24771451950073242 	 0.19715261459350586 	 
2025-07-27 20:41:40.090741 test begin: paddle.Tensor.tril(Tensor([1, 25401601, 2],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([1, 25401601, 2],"float32"), -1, ) 	 50803202 	 1000 	 0.4193270206451416 	 0.3216230869293213 	 0.4110443592071533 	 0.3100473880767822 	 0.4192636013031006 	 0.3217489719390869 	 0.36441969871520996 	 0.25145745277404785 	 
2025-07-27 20:41:43.129629 test begin: paddle.Tensor.tril(Tensor([12700801, 2, 2],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([12700801, 2, 2],"float32"), -1, ) 	 50803204 	 1000 	 0.4201030731201172 	 0.3312819004058838 	 0.4118373394012451 	 0.312852144241333 	 0.42000579833984375 	 0.3242354393005371 	 0.368180513381958 	 0.2527587413787842 	 
2025-07-27 20:41:46.162323 test begin: paddle.Tensor.tril(Tensor([2, 12700801, 2],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([2, 12700801, 2],"float32"), -1, ) 	 50803204 	 1000 	 0.41936230659484863 	 0.32148170471191406 	 0.4041163921356201 	 0.30350542068481445 	 0.4192624092102051 	 0.3216986656188965 	 0.35392284393310547 	 0.24891185760498047 	 
2025-07-27 20:41:49.317945 test begin: paddle.Tensor.tril(Tensor([2, 2, 12700801],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([2, 2, 12700801],"float32"), -1, ) 	 50803204 	 1000 	 0.29942893981933594 	 0.269254207611084 	 0.2910645008087158 	 0.25569772720336914 	 0.29958224296569824 	 0.2673003673553467 	 0.24781274795532227 	 0.20199322700500488 	 
2025-07-27 20:41:52.006081 test begin: paddle.Tensor.tril(Tensor([2, 25401601],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([2, 25401601],"float32"), -1, ) 	 50803202 	 1000 	 0.2994074821472168 	 0.18532371520996094 	 0.28425097465515137 	 0.16506028175354004 	 0.29958248138427734 	 0.1833031177520752 	 0.2379465103149414 	 0.11077618598937988 	 
2025-07-27 20:41:54.674786 test begin: paddle.Tensor.tril(Tensor([25401601, 2],"float32"), -1, )
[Prof] paddle.Tensor.tril 	 paddle.Tensor.tril(Tensor([25401601, 2],"float32"), -1, ) 	 50803202 	 1000 	 0.41933512687683105 	 0.30632448196411133 	 0.41106271743774414 	 0.2951216697692871 	 0.41927433013916016 	 0.30635523796081543 	 0.36759495735168457 	 0.2410449981689453 	 
2025-07-27 20:41:57.653444 test begin: paddle.Tensor.trunc(Tensor([1814401, 28],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([1814401, 28],"float32"), ) 	 50803228 	 1000 	 0.01575303077697754 	 0.29791998863220215 	 1.6927719116210938e-05 	 0.2810952663421631 	 0.060643911361694336 	 0.13431572914123535 	 2.7894973754882812e-05 	 0.0532221794128418 	 
2025-07-27 20:42:00.009726 test begin: paddle.Tensor.trunc(Tensor([2, 3175201, 8],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([2, 3175201, 8],"float32"), ) 	 50803216 	 1000 	 0.008512735366821289 	 0.2978665828704834 	 1.1920928955078125e-05 	 0.2872805595397949 	 0.05191779136657715 	 0.13418936729431152 	 3.0279159545898438e-05 	 0.06646609306335449 	 
2025-07-27 20:42:02.236239 test begin: paddle.Tensor.trunc(Tensor([2, 8, 3175201],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([2, 8, 3175201],"float32"), ) 	 50803216 	 1000 	 0.015620231628417969 	 0.2999696731567383 	 1.1920928955078125e-05 	 0.2809183597564697 	 0.060425758361816406 	 0.13417577743530273 	 3.743171691894531e-05 	 0.059912919998168945 	 
2025-07-27 20:42:04.545649 test begin: paddle.Tensor.trunc(Tensor([28, 1814401],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([28, 1814401],"float32"), ) 	 50803228 	 1000 	 0.008581876754760742 	 0.29795289039611816 	 9.059906005859375e-06 	 0.28731870651245117 	 0.05202341079711914 	 0.13422513008117676 	 3.5762786865234375e-05 	 0.06731128692626953 	 
2025-07-27 20:42:06.763486 test begin: paddle.Tensor.trunc(Tensor([6350401, 8],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([6350401, 8],"float32"), ) 	 50803208 	 1000 	 0.015546560287475586 	 0.29807257652282715 	 1.3113021850585938e-05 	 0.28122758865356445 	 0.07979559898376465 	 0.13420915603637695 	 4.00543212890625e-05 	 0.06051135063171387 	 
2025-07-27 20:42:09.119231 test begin: paddle.Tensor.trunc(Tensor([793801, 8, 8],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([793801, 8, 8],"float32"), ) 	 50803264 	 1000 	 0.008548498153686523 	 0.29980039596557617 	 1.1682510375976562e-05 	 0.2872352600097656 	 0.051932334899902344 	 0.13424158096313477 	 2.8848648071289062e-05 	 0.04658174514770508 	 
2025-07-27 20:42:11.363895 test begin: paddle.Tensor.trunc(Tensor([8, 6350401],"float32"), )
[Prof] paddle.Tensor.trunc 	 paddle.Tensor.trunc(Tensor([8, 6350401],"float32"), ) 	 50803208 	 1000 	 0.008580207824707031 	 1.886256217956543 	 1.6450881958007812e-05 	 0.28608131408691406 	 0.051888465881347656 	 0.13420891761779785 	 2.1219253540039062e-05 	 0.0676276683807373 	 
2025-07-27 20:42:15.825582 test begin: paddle.Tensor.unbind(Tensor([3, 115, 2304, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 115, 2304, 64],"float32"), 0, ) 	 50872320 	 1000 	 0.008203983306884766 	 0.008196830749511719 	 1.0728836059570312e-05 	 5.650520324707031e-05 	 0.34658360481262207 	 0.30443358421325684 	 0.2879023551940918 	 0.194305419921875 	 
2025-07-27 20:42:19.492385 test begin: paddle.Tensor.unbind(Tensor([3, 1351, 196, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 1351, 196, 64],"float32"), 0, ) 	 50840832 	 1000 	 0.008274316787719727 	 0.006348371505737305 	 8.106231689453125e-06 	 2.288818359375e-05 	 0.34647607803344727 	 0.3042469024658203 	 0.28763556480407715 	 0.20132088661193848 	 
2025-07-27 20:42:21.705680 test begin: paddle.Tensor.unbind(Tensor([3, 60, 2304, 123],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 60, 2304, 123],"float32"), 0, ) 	 51010560 	 1000 	 0.008301019668579102 	 0.006348848342895508 	 8.106231689453125e-06 	 1.8596649169921875e-05 	 0.3466191291809082 	 0.3051636219024658 	 0.2879941463470459 	 0.2119755744934082 	 
2025-07-27 20:42:23.937826 test begin: paddle.Tensor.unbind(Tensor([3, 60, 4411, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 60, 4411, 64],"float32"), 0, ) 	 50814720 	 1000 	 0.008264303207397461 	 0.01073002815246582 	 1.1205673217773438e-05 	 2.288818359375e-05 	 0.34604430198669434 	 0.30411553382873535 	 0.27854466438293457 	 0.17580938339233398 	 
2025-07-27 20:42:26.281555 test begin: paddle.Tensor.unbind(Tensor([3, 864, 196, 101],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 864, 196, 101],"float32"), 0, ) 	 51311232 	 1000 	 0.008230209350585938 	 0.0063381195068359375 	 8.821487426757812e-06 	 1.8596649169921875e-05 	 0.35005617141723633 	 0.30687952041625977 	 0.29158544540405273 	 0.21423745155334473 	 
2025-07-27 20:42:28.513253 test begin: paddle.Tensor.unbind(Tensor([3, 864, 307, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 864, 307, 64],"float32"), 0, ) 	 50927616 	 1000 	 0.008203268051147461 	 0.006333112716674805 	 9.298324584960938e-06 	 2.288818359375e-05 	 0.3469371795654297 	 0.3046839237213135 	 0.2882542610168457 	 0.21145963668823242 	 
2025-07-27 20:42:30.724800 test begin: paddle.Tensor.unbind(Tensor([3, 960, 196, 91],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 960, 196, 91],"float32"), 0, ) 	 51367680 	 1000 	 0.008264541625976562 	 0.010800361633300781 	 9.059906005859375e-06 	 2.0742416381835938e-05 	 0.34957456588745117 	 0.30726051330566406 	 0.2819068431854248 	 0.17788124084472656 	 
2025-07-27 20:42:33.060730 test begin: paddle.Tensor.unbind(Tensor([3, 960, 276, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([3, 960, 276, 64],"float32"), 0, ) 	 50872320 	 1000 	 0.008213281631469727 	 0.009860515594482422 	 9.5367431640625e-06 	 5.4836273193359375e-05 	 0.34650731086730957 	 0.3044424057006836 	 0.28658080101013184 	 0.19550871849060059 	 
2025-07-27 20:42:37.740778 test begin: paddle.Tensor.unbind(Tensor([5, 864, 196, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([5, 864, 196, 64],"float32"), 0, ) 	 54190080 	 1000 	 0.010430574417114258 	 0.008215665817260742 	 1.1682510375976562e-05 	 2.6464462280273438e-05 	 0.36902403831481934 	 0.32197117805480957 	 0.3071863651275635 	 0.21242809295654297 	 
2025-07-27 20:42:40.881618 test begin: paddle.Tensor.unbind(Tensor([5, 960, 196, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([5, 960, 196, 64],"float32"), 0, ) 	 60211200 	 1000 	 0.010412454605102539 	 0.008086442947387695 	 9.059906005859375e-06 	 2.1457672119140625e-05 	 0.4097750186920166 	 0.3573129177093506 	 0.347653865814209 	 0.23586320877075195 	 
2025-07-27 20:42:43.535173 test begin: paddle.Tensor.unbind(Tensor([6, 60, 2304, 64],"float32"), 0, )
[Prof] paddle.Tensor.unbind 	 paddle.Tensor.unbind(Tensor([6, 60, 2304, 64],"float32"), 0, ) 	 53084160 	 1000 	 0.011476755142211914 	 0.008974313735961914 	 8.58306884765625e-06 	 2.1696090698242188e-05 	 0.361586332321167 	 0.31522226333618164 	 0.2963576316833496 	 0.19542551040649414 	 
2025-07-27 20:42:45.853106 test begin: paddle.Tensor.unique(Tensor([25401601],"int64"), )
[Prof] paddle.Tensor.unique 	 paddle.Tensor.unique(Tensor([25401601],"int64"), ) 	 25401601 	 1000 	 6.726999282836914 	 3.268674373626709 	 8.463859558105469e-05 	 0.00015878677368164062 	 None 	 None 	 None 	 None 	 
2025-07-27 20:42:56.252535 test begin: paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 0, )
Warning: The core code of paddle.Tensor.unsqueeze is too complex.
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 0, ) 	 50900992 	 1000 	 0.004083156585693359 	 0.0037505626678466797 	 1.0967254638671875e-05 	 1.71661376953125e-05 	 0.04410552978515625 	 0.057111501693725586 	 2.1696090698242188e-05 	 4.124641418457031e-05 	 
2025-07-27 20:42:57.883535 test begin: paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 1, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 1, ) 	 50900992 	 1000 	 0.004220724105834961 	 0.0037488937377929688 	 1.2159347534179688e-05 	 2.1219253540039062e-05 	 0.04395008087158203 	 0.0572359561920166 	 2.7894973754882812e-05 	 3.266334533691406e-05 	 
2025-07-27 20:42:59.518432 test begin: paddle.Tensor.unsqueeze(Tensor([2, 3840, 10240],"float32"), 0, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([2, 3840, 10240],"float32"), 0, ) 	 78643200 	 1000 	 0.00835561752319336 	 0.007203578948974609 	 1.239776611328125e-05 	 2.002716064453125e-05 	 0.051316022872924805 	 0.06417965888977051 	 2.5272369384765625e-05 	 3.981590270996094e-05 	 
2025-07-27 20:43:02.487746 test begin: paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 0, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 0, ) 	 50809600 	 1000 	 0.008451700210571289 	 0.0072174072265625 	 1.5735626220703125e-05 	 2.1219253540039062e-05 	 0.05308818817138672 	 0.06544923782348633 	 3.6716461181640625e-05 	 5.030632019042969e-05 	 
2025-07-27 20:43:04.418641 test begin: paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 1, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 1, ) 	 50809600 	 1000 	 0.006615877151489258 	 0.0036973953247070312 	 1.6450881958007812e-05 	 1.71661376953125e-05 	 0.04406452178955078 	 0.05698561668395996 	 2.574920654296875e-05 	 3.170967102050781e-05 	 
2025-07-27 20:43:06.052279 test begin: paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 0, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 0, ) 	 50809600 	 1000 	 0.004155158996582031 	 0.003806591033935547 	 7.3909759521484375e-06 	 1.6689300537109375e-05 	 0.043910980224609375 	 0.07426047325134277 	 2.288818359375e-05 	 3.743171691894531e-05 	 
2025-07-27 20:43:07.692577 test begin: paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 1, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 1, ) 	 50809600 	 1000 	 0.0040607452392578125 	 0.0037038326263427734 	 7.3909759521484375e-06 	 1.71661376953125e-05 	 0.044409990310668945 	 0.05798506736755371 	 2.8133392333984375e-05 	 4.5299530029296875e-05 	 
2025-07-27 20:43:09.315656 test begin: paddle.Tensor.unsqueeze(Tensor([3, 1654, 10240],"float32"), 0, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([3, 1654, 10240],"float32"), 0, ) 	 50810880 	 1000 	 0.008514881134033203 	 0.0073795318603515625 	 8.821487426757812e-06 	 4.5299530029296875e-05 	 0.051095008850097656 	 0.06361532211303711 	 2.4557113647460938e-05 	 3.0279159545898438e-05 	 
2025-07-27 20:43:11.029309 test begin: paddle.Tensor.unsqueeze(Tensor([3, 3840, 4411],"float32"), 0, )
[Prof] paddle.Tensor.unsqueeze 	 paddle.Tensor.unsqueeze(Tensor([3, 3840, 4411],"float32"), 0, ) 	 50814720 	 1000 	 0.0040721893310546875 	 0.0038042068481445312 	 7.3909759521484375e-06 	 1.7404556274414062e-05 	 0.04391598701477051 	 0.05727219581604004 	 2.3603439331054688e-05 	 3.266334533691406e-05 	 
2025-07-27 20:43:12.680727 test begin: paddle.Tensor.var(Tensor([1000, 50804],"float32"), axis=0, )
[Prof] paddle.Tensor.var 	 paddle.Tensor.var(Tensor([1000, 50804],"float32"), axis=0, ) 	 50804000 	 1000 	 1.2912790775299072 	 0.17362713813781738 	 5.555152893066406e-05 	 0.14947962760925293 	 1.4312317371368408 	 0.7665233612060547 	 0.20890378952026367 	 0.19572854042053223 	 
2025-07-27 20:43:17.413550 test begin: paddle.Tensor.var(Tensor([100000, 255],"float64"), axis=0, )
[Prof] paddle.Tensor.var 	 paddle.Tensor.var(Tensor([100000, 255],"float64"), axis=0, ) 	 25500000 	 1000 	 1.7710902690887451 	 0.19454431533813477 	 5.698204040527344e-05 	 0.09936666488647461 	 1.7085416316986084 	 0.7630717754364014 	 0.24936866760253906 	 0.1559462547302246 	 
2025-07-27 20:43:25.670916 test begin: paddle.Tensor.var(Tensor([1000000, 26],"float64"), axis=0, )
[Prof] paddle.Tensor.var 	 paddle.Tensor.var(Tensor([1000000, 26],"float64"), axis=0, ) 	 26000000 	 1000 	 6.162096977233887 	 0.1890857219696045 	 5.793571472167969e-05 	 0.09656000137329102 	 3.9214296340942383 	 0.785146951675415 	 0.5726406574249268 	 0.16040921211242676 	 
2025-07-27 20:43:40.693743 test begin: paddle.Tensor.var(Tensor([6350401, 4],"float64"), axis=0, )
[Prof] paddle.Tensor.var 	 paddle.Tensor.var(Tensor([6350401, 4],"float64"), axis=0, ) 	 25401604 	 1000 	 11.525907754898071 	 0.25003862380981445 	 5.3882598876953125e-05 	 0.12770485877990723 	 6.571552276611328 	 0.7662146091461182 	 0.959256649017334 	 0.15655255317687988 	 
2025-07-27 20:44:00.385697 test begin: paddle.Tensor.var(Tensor([64801, 784],"float32"), axis=0, )
[Prof] paddle.Tensor.var 	 paddle.Tensor.var(Tensor([64801, 784],"float32"), axis=0, ) 	 50803984 	 1000 	 1.4421954154968262 	 0.25950026512145996 	 3.62396240234375e-05 	 0.13251256942749023 	 1.4980785846710205 	 0.7998278141021729 	 0.21869587898254395 	 0.16346001625061035 	 
2025-07-27 20:44:05.233467 test begin: paddle.Tensor.zero_(Tensor([100352, 507],"float32"), )
[Prof] paddle.Tensor.zero_ 	 paddle.Tensor.zero_(Tensor([100352, 507],"float32"), ) 	 50878464 	 1000 	 0.1454906463623047 	 0.13418316841125488 	 0.1253049373626709 	 0.12142491340637207 	 None 	 None 	 None 	 None 	 
2025-07-27 20:44:07.116408 test begin: paddle.Tensor.zero_(Tensor([507, 100352],"float32"), )
[Prof] paddle.Tensor.zero_ 	 paddle.Tensor.zero_(Tensor([507, 100352],"float32"), ) 	 50878464 	 1000 	 0.14561820030212402 	 0.1342334747314453 	 0.12486386299133301 	 0.12143921852111816 	 None 	 None 	 None 	 None 	 
2025-07-27 20:44:09.007025 test begin: paddle.Tensor.zero_(Tensor([6202, 8192],"float32"), )
[Prof] paddle.Tensor.zero_ 	 paddle.Tensor.zero_(Tensor([6202, 8192],"float32"), ) 	 50806784 	 1000 	 0.14548373222351074 	 0.1339550018310547 	 0.12517499923706055 	 0.12109637260437012 	 None 	 None 	 None 	 None 	 
2025-07-27 20:44:10.881773 test begin: paddle.Tensor.zero_(Tensor([8192, 6202],"float32"), )
[Prof] paddle.Tensor.zero_ 	 paddle.Tensor.zero_(Tensor([8192, 6202],"float32"), ) 	 50806784 	 1000 	 0.1451253890991211 	 0.13395261764526367 	 0.12473535537719727 	 0.1211848258972168 	 None 	 None 	 None 	 None 	 
2025-07-27 20:44:12.732901 test begin: paddle.Tensor.zero_(Tensor([886, 57344],"float32"), )
[Prof] paddle.Tensor.zero_ 	 paddle.Tensor.zero_(Tensor([886, 57344],"float32"), ) 	 50806784 	 1000 	 0.1452343463897705 	 0.13396787643432617 	 0.1250152587890625 	 0.12120723724365234 	 None 	 None 	 None 	 None 	 
2025-07-27 20:44:14.576247 test begin: paddle.abs(Tensor([13, 64, 256, 256],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([13, 64, 256, 256],"float32"), ) 	 54525952 	 1000 	 0.3169412612915039 	 0.3192458152770996 	 0.2999696731567383 	 0.2993199825286865 	 0.48261475563049316 	 0.7967536449432373 	 0.41854071617126465 	 0.4070916175842285 	 
2025-07-27 20:44:18.180148 test begin: paddle.abs(Tensor([16, 128, 128, 194],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 128, 128, 194],"float32"), ) 	 50855936 	 1000 	 0.2959554195404053 	 0.2981393337249756 	 0.2790515422821045 	 0.27818942070007324 	 0.4503159523010254 	 0.7437810897827148 	 0.3859994411468506 	 0.38000011444091797 	 
2025-07-27 20:44:21.666164 test begin: paddle.abs(Tensor([16, 128, 194, 128],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 128, 194, 128],"float32"), ) 	 50855936 	 1000 	 0.2959775924682617 	 0.30230116844177246 	 0.27914857864379883 	 0.2782130241394043 	 0.4502739906311035 	 0.7437818050384521 	 0.38588595390319824 	 0.37999916076660156 	 
2025-07-27 20:44:25.016154 test begin: paddle.abs(Tensor([16, 194, 128, 128],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 194, 128, 128],"float32"), ) 	 50855936 	 1000 	 0.2959301471710205 	 0.5355968475341797 	 0.2789955139160156 	 0.28507184982299805 	 0.45021891593933105 	 0.7438247203826904 	 0.3858964443206787 	 0.38001012802124023 	 
2025-07-27 20:44:32.720192 test begin: paddle.abs(Tensor([16, 256, 194, 64],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 256, 194, 64],"float32"), ) 	 50855936 	 1000 	 0.2959401607513428 	 0.3026587963104248 	 0.2864065170288086 	 0.2850825786590576 	 0.4501650333404541 	 0.7438907623291016 	 0.3937387466430664 	 0.3799917697906494 	 
2025-07-27 20:44:37.548879 test begin: paddle.abs(Tensor([16, 256, 64, 194],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 256, 64, 194],"float32"), ) 	 50855936 	 1000 	 0.29592418670654297 	 0.30840039253234863 	 0.2864663600921631 	 0.28490447998046875 	 0.4501769542694092 	 0.743743896484375 	 0.3947443962097168 	 0.380047082901001 	 
2025-07-27 20:44:41.360471 test begin: paddle.abs(Tensor([16, 49, 256, 256],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 49, 256, 256],"float32"), ) 	 51380224 	 1000 	 0.29885172843933105 	 0.307281494140625 	 0.28934788703918457 	 0.28797125816345215 	 0.45480799674987793 	 0.7512626647949219 	 0.3955879211425781 	 0.383861780166626 	 
2025-07-27 20:44:44.745904 test begin: paddle.abs(Tensor([16, 64, 194, 256],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 64, 194, 256],"float32"), ) 	 50855936 	 1000 	 0.29601335525512695 	 0.29813408851623535 	 0.28650975227355957 	 0.28503918647766113 	 0.45012617111206055 	 0.7437655925750732 	 0.3943519592285156 	 0.37999463081359863 	 
2025-07-27 20:44:48.143254 test begin: paddle.abs(Tensor([16, 64, 256, 194],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 64, 256, 194],"float32"), ) 	 50855936 	 1000 	 0.2959437370300293 	 0.3076024055480957 	 0.28638625144958496 	 0.2848780155181885 	 0.45017576217651367 	 0.7437264919281006 	 0.39453577995300293 	 0.379955530166626 	 
2025-07-27 20:44:51.477870 test begin: paddle.abs(Tensor([16, 776, 64, 64],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([16, 776, 64, 64],"float32"), ) 	 50855936 	 1000 	 0.29592442512512207 	 0.3002948760986328 	 0.2863883972167969 	 0.28482747077941895 	 0.4502284526824951 	 0.7438161373138428 	 0.3945915699005127 	 0.3799757957458496 	 
2025-07-27 20:44:54.802123 test begin: paddle.abs(Tensor([25, 128, 128, 128],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([25, 128, 128, 128],"float32"), ) 	 52428800 	 1000 	 0.3048727512359619 	 0.30715441703796387 	 0.2954404354095459 	 0.29407525062561035 	 0.4639449119567871 	 0.7664945125579834 	 0.40801525115966797 	 0.39162397384643555 	 
2025-07-27 20:44:58.239496 test begin: paddle.abs(Tensor([49, 256, 64, 64],"float32"), )
[Prof] paddle.abs 	 paddle.abs(Tensor([49, 256, 64, 64],"float32"), ) 	 51380224 	 1000 	 0.29879164695739746 	 0.30117130279541016 	 0.2894406318664551 	 0.28793787956237793 	 0.4547712802886963 	 0.7513339519500732 	 0.3993561267852783 	 0.3838686943054199 	 
2025-07-27 20:45:01.651200 test begin: paddle.acos(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.acos 	 paddle.acos(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.29543352127075195 	 0.2992243766784668 	 0.28627943992614746 	 0.28660058975219727 	 0.44977355003356934 	 2.080827474594116 	 0.3940703868865967 	 0.3544018268585205 	 
2025-07-27 20:45:06.316181 test begin: paddle.acos(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.acos 	 paddle.acos(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2956852912902832 	 0.29779696464538574 	 0.28652524948120117 	 0.28696465492248535 	 0.44998788833618164 	 2.0808873176574707 	 0.39477038383483887 	 0.35447144508361816 	 
2025-07-27 20:45:10.974959 test begin: paddle.acos(Tensor([10, 5080321],"float32"), )
[Prof] paddle.acos 	 paddle.acos(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2956705093383789 	 0.29775047302246094 	 0.2865936756134033 	 0.2867112159729004 	 0.4498872756958008 	 2.0808987617492676 	 0.39430737495422363 	 0.3544454574584961 	 
2025-07-27 20:45:15.773080 test begin: paddle.acos(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.acos 	 paddle.acos(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2956573963165283 	 0.2977280616760254 	 0.286712646484375 	 0.2867610454559326 	 0.4499390125274658 	 2.0809476375579834 	 0.3945176601409912 	 0.35445666313171387 	 
2025-07-27 20:45:20.456949 test begin: paddle.acos(Tensor([5080321, 10],"float32"), )
[Prof] paddle.acos 	 paddle.acos(Tensor([5080321, 10],"float32"), ) 	 50803210 	 1000 	 0.2956714630126953 	 0.2977414131164551 	 0.2865312099456787 	 0.2867419719696045 	 0.44989466667175293 	 2.080970525741577 	 0.39432859420776367 	 0.35449934005737305 	 
2025-07-27 20:45:25.183788 test begin: paddle.acos(x=Tensor([3, 3, 5644801],"float32"), )
[Prof] paddle.acos 	 paddle.acos(x=Tensor([3, 3, 5644801],"float32"), ) 	 50803209 	 1000 	 0.2956814765930176 	 0.2977783679962158 	 0.2790560722351074 	 0.2802741527557373 	 0.4500305652618408 	 2.080768585205078 	 0.3855557441711426 	 0.35445165634155273 	 
2025-07-27 20:45:29.907650 test begin: paddle.acos(x=Tensor([3, 5644801, 3],"float32"), )
[Prof] paddle.acos 	 paddle.acos(x=Tensor([3, 5644801, 3],"float32"), ) 	 50803209 	 1000 	 0.29570674896240234 	 0.2977867126464844 	 0.27898240089416504 	 0.2802891731262207 	 0.4499998092651367 	 2.080824851989746 	 0.3854036331176758 	 0.354449987411499 	 
2025-07-27 20:45:36.678196 test begin: paddle.acos(x=Tensor([5644801, 3, 3],"float32"), )
[Prof] paddle.acos 	 paddle.acos(x=Tensor([5644801, 3, 3],"float32"), ) 	 50803209 	 1000 	 0.2957162857055664 	 0.32059407234191895 	 0.28627872467041016 	 0.27785253524780273 	 0.45008063316345215 	 2.0808916091918945 	 0.39449405670166016 	 0.35445261001586914 	 
2025-07-27 20:45:45.007507 test begin: paddle.acosh(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.acosh 	 paddle.acosh(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.2951500415802002 	 0.30680131912231445 	 0.2860701084136963 	 0.2879204750061035 	 0.4513509273529053 	 1.3381800651550293 	 0.39586973190307617 	 0.3419687747955322 	 
2025-07-27 20:45:49.003929 test begin: paddle.acosh(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.acosh 	 paddle.acosh(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2952587604522705 	 0.29900312423706055 	 0.28626441955566406 	 0.28790950775146484 	 0.45160531997680664 	 1.338249683380127 	 0.39647793769836426 	 0.3419532775878906 	 
2025-07-27 20:45:52.955873 test begin: paddle.acosh(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.acosh 	 paddle.acosh(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2952125072479248 	 0.2990422248840332 	 0.28630566596984863 	 0.28806257247924805 	 0.4515345096588135 	 1.3383572101593018 	 0.3961772918701172 	 0.34203267097473145 	 
2025-07-27 20:45:56.929870 test begin: paddle.add(x=Tensor([2, 256, 320, 352],"float32"), y=Tensor([2, 256, 320, 352],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([2, 256, 320, 352],"float32"), y=Tensor([2, 256, 320, 352],"float32"), ) 	 115343360 	 1000 	 0.5109994411468506 	 0.5065534114837646 	 0.5003705024719238 	 0.49436044692993164 	 0.5480449199676514 	 0.06146502494812012 	 0.48698902130126953 	 6.4849853515625e-05 	 
2025-07-27 20:46:01.387184 test begin: paddle.add(x=Tensor([2, 256, 336, 336],"float32"), y=Tensor([2, 256, 336, 336],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([2, 256, 336, 336],"float32"), y=Tensor([2, 256, 336, 336],"float32"), ) 	 115605504 	 1000 	 0.5122108459472656 	 0.5078420639038086 	 0.5015854835510254 	 0.4910259246826172 	 0.5490038394927979 	 0.06038999557495117 	 0.487689733505249 	 4.863739013671875e-05 	 
2025-07-27 20:46:05.794541 test begin: paddle.add(x=Tensor([2, 256, 352, 352],"float32"), y=Tensor([2, 256, 352, 352],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([2, 256, 352, 352],"float32"), y=Tensor([2, 256, 352, 352],"float32"), ) 	 126877696 	 1000 	 0.5615565776824951 	 0.5567166805267334 	 0.5509977340698242 	 0.5443992614746094 	 0.6023974418640137 	 0.06072378158569336 	 0.5416860580444336 	 5.245208740234375e-05 	 
2025-07-27 20:46:10.435418 test begin: paddle.add(x=Tensor([8, 256, 320, 78],"float32"), y=Tensor([8, 256, 320, 78],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 256, 320, 78],"float32"), y=Tensor([8, 256, 320, 78],"float32"), ) 	 102236160 	 1000 	 0.4524376392364502 	 0.44942688941955566 	 0.4420583248138428 	 0.43703365325927734 	 0.48556089401245117 	 0.06079387664794922 	 0.4244663715362549 	 4.291534423828125e-05 	 
2025-07-27 20:46:14.203253 test begin: paddle.add(x=Tensor([8, 256, 336, 74],"float32"), y=Tensor([8, 256, 336, 74],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 256, 336, 74],"float32"), y=Tensor([8, 256, 336, 74],"float32"), ) 	 101842944 	 1000 	 0.4508209228515625 	 0.44786715507507324 	 0.4407021999359131 	 0.435286283493042 	 0.4836733341217041 	 0.07182455062866211 	 0.4226105213165283 	 8.296966552734375e-05 	 
2025-07-27 20:46:18.231306 test begin: paddle.add(x=Tensor([8, 256, 352, 71],"float32"), y=Tensor([8, 256, 352, 71],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 256, 352, 71],"float32"), y=Tensor([8, 256, 352, 71],"float32"), ) 	 102367232 	 1000 	 0.452972412109375 	 0.4500162601470947 	 0.4427762031555176 	 0.43793535232543945 	 0.48607897758483887 	 0.06627058982849121 	 0.42467808723449707 	 4.482269287109375e-05 	 
2025-07-27 20:46:21.983105 test begin: paddle.add(x=Tensor([8, 256, 71, 352],"float32"), y=Tensor([8, 256, 71, 352],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 256, 71, 352],"float32"), y=Tensor([8, 256, 71, 352],"float32"), ) 	 102367232 	 1000 	 0.45297837257385254 	 0.4500236511230469 	 0.442915678024292 	 0.4377603530883789 	 0.4861938953399658 	 0.06117892265319824 	 0.42473721504211426 	 5.7697296142578125e-05 	 
2025-07-27 20:46:25.699999 test begin: paddle.add(x=Tensor([8, 256, 74, 336],"float32"), y=Tensor([8, 256, 74, 336],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 256, 74, 336],"float32"), y=Tensor([8, 256, 74, 336],"float32"), ) 	 101842944 	 1000 	 0.4507479667663574 	 0.44780635833740234 	 0.4405636787414551 	 0.4351081848144531 	 0.48364853858947754 	 0.06371521949768066 	 0.42218804359436035 	 0.00016117095947265625 	 
2025-07-27 20:46:29.718660 test begin: paddle.add(x=Tensor([8, 52, 352, 352],"float32"), y=Tensor([8, 52, 352, 352],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 52, 352, 352],"float32"), y=Tensor([8, 52, 352, 352],"float32"), ) 	 103088128 	 1000 	 0.4562346935272217 	 0.45626282691955566 	 0.4461855888366699 	 0.44035816192626953 	 0.48952436447143555 	 0.06036710739135742 	 0.428020715713501 	 3.409385681152344e-05 	 
2025-07-27 20:46:33.605084 test begin: paddle.add(x=Tensor([8, 57, 320, 352],"float32"), y=Tensor([8, 57, 320, 352],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 57, 320, 352],"float32"), y=Tensor([8, 57, 320, 352],"float32"), ) 	 102727680 	 1000 	 0.4545629024505615 	 0.4515688419342041 	 0.44437289237976074 	 0.439359188079834 	 0.48799896240234375 	 0.06032443046569824 	 0.4264860153198242 	 2.7418136596679688e-05 	 
2025-07-27 20:46:40.457730 test begin: paddle.add(x=Tensor([8, 57, 336, 336],"float32"), y=Tensor([8, 57, 336, 336],"float32"), )
[Prof] paddle.add 	 paddle.add(x=Tensor([8, 57, 336, 336],"float32"), y=Tensor([8, 57, 336, 336],"float32"), ) 	 102961152 	 1000 	 0.45566678047180176 	 0.452542781829834 	 0.4455127716064453 	 0.43935179710388184 	 0.4891505241394043 	 0.06028175354003906 	 0.427980899810791 	 3.075599670410156e-05 	 
2025-07-27 20:46:44.268298 test begin: paddle.add_n(list[Tensor([194, 128, 64, 64],"float16"),Tensor([194, 128, 64, 64],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([194, 128, 64, 64],"float16"),Tensor([194, 128, 64, 64],"float16"),], ) 	 203423744 	 1000 	 0.5754010677337646 	 2.3951022624969482 	 0.5614588260650635 	 0.7746443748474121 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:52.881879 test begin: paddle.add_n(list[Tensor([388, 256, 32, 32],"float16"),Tensor([388, 256, 32, 32],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([388, 256, 32, 32],"float16"),Tensor([388, 256, 32, 32],"float16"),], ) 	 203423744 	 1000 	 0.5753970146179199 	 1.516965627670288 	 0.5652108192443848 	 0.7751438617706299 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:46:58.626797 test begin: paddle.add_n(list[Tensor([64, 128, 194, 64],"float16"),Tensor([64, 128, 194, 64],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 128, 194, 64],"float16"),Tensor([64, 128, 194, 64],"float16"),], ) 	 203423744 	 1000 	 0.5754334926605225 	 1.5170738697052002 	 0.5651500225067139 	 0.774686336517334 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:04.472277 test begin: paddle.add_n(list[Tensor([64, 128, 64, 194],"float16"),Tensor([64, 128, 64, 194],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 128, 64, 194],"float16"),Tensor([64, 128, 64, 194],"float16"),], ) 	 203423744 	 1000 	 0.575347900390625 	 1.5155491828918457 	 0.5652129650115967 	 0.7744553089141846 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:10.188257 test begin: paddle.add_n(list[Tensor([64, 128, 64, 97],"float32"),Tensor([64, 128, 64, 97],"float32"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 128, 64, 97],"float32"),Tensor([64, 128, 64, 97],"float32"),], ) 	 101711872 	 1000 	 0.4723985195159912 	 1.0589535236358643 	 0.4622917175292969 	 0.5410981178283691 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:13.326210 test begin: paddle.add_n(list[Tensor([64, 128, 97, 64],"float32"),Tensor([64, 128, 97, 64],"float32"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 128, 97, 64],"float32"),Tensor([64, 128, 97, 64],"float32"),], ) 	 101711872 	 1000 	 0.47240400314331055 	 1.059079647064209 	 0.4622359275817871 	 0.5410969257354736 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:16.463145 test begin: paddle.add_n(list[Tensor([64, 1551, 32, 32],"float16"),Tensor([64, 1551, 32, 32],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 1551, 32, 32],"float16"),Tensor([64, 1551, 32, 32],"float16"),], ) 	 203292672 	 1000 	 0.5741596221923828 	 1.516855001449585 	 0.5641021728515625 	 0.7757914066314697 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:22.209299 test begin: paddle.add_n(list[Tensor([64, 194, 64, 64],"float32"),Tensor([64, 194, 64, 64],"float32"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 194, 64, 64],"float32"),Tensor([64, 194, 64, 64],"float32"),], ) 	 101711872 	 1000 	 0.47252798080444336 	 1.0590143203735352 	 0.46224188804626465 	 0.5411813259124756 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:25.285150 test begin: paddle.add_n(list[Tensor([64, 256, 194, 32],"float16"),Tensor([64, 256, 194, 32],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 256, 194, 32],"float16"),Tensor([64, 256, 194, 32],"float16"),], ) 	 203423744 	 1000 	 0.5753893852233887 	 1.518144130706787 	 0.5650794506072998 	 0.7764992713928223 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:31.046987 test begin: paddle.add_n(list[Tensor([64, 256, 32, 194],"float16"),Tensor([64, 256, 32, 194],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 256, 32, 194],"float16"),Tensor([64, 256, 32, 194],"float16"),], ) 	 203423744 	 1000 	 0.5767979621887207 	 1.5224196910858154 	 0.5664727687835693 	 0.7743897438049316 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:38.070051 test begin: paddle.add_n(list[Tensor([64, 388, 64, 64],"float16"),Tensor([64, 388, 64, 64],"float16"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([64, 388, 64, 64],"float16"),Tensor([64, 388, 64, 64],"float16"),], ) 	 203423744 	 1000 	 0.576819896697998 	 1.5159871578216553 	 0.5634129047393799 	 0.7746667861938477 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:43.843387 test begin: paddle.add_n(list[Tensor([97, 128, 64, 64],"float32"),Tensor([97, 128, 64, 64],"float32"),], )
[Prof] paddle.add_n 	 paddle.add_n(list[Tensor([97, 128, 64, 64],"float32"),Tensor([97, 128, 64, 64],"float32"),], ) 	 101711872 	 1000 	 0.4725000858306885 	 1.060218334197998 	 0.4622511863708496 	 0.5423831939697266 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:47:46.934861 test begin: paddle.addmm(Tensor([1016065, 50],"float32"), Tensor([1016065, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([1016065, 50],"float32"), Tensor([1016065, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, ) 	 132092450 	 1000 	 1.0225188732147217 	 1.0154170989990234 	 0.5211498737335205 	 0.33814239501953125 	 2.677701711654663 	 1.8867032527923584 	 0.3907501697540283 	 0.48224735260009766 	 
2025-07-27 20:47:58.672474 test begin: paddle.addmm(Tensor([30, 1693441],"float32"), Tensor([30, 80],"float32"), Tensor([80, 1693441],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([30, 1693441],"float32"), Tensor([30, 80],"float32"), Tensor([80, 1693441],"float32"), alpha=1.0, beta=2.0, ) 	 186280910 	 1000 	 1.1803760528564453 	 1.125661849975586 	 0.40203285217285156 	 0.287783145904541 	 3.214733123779297 	 2.110894203186035 	 0.41072607040405273 	 0.43242597579956055 	 
2025-07-27 20:48:09.955898 test begin: paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1016065],"float32"), Tensor([1016065, 50],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1016065],"float32"), Tensor([1016065, 50],"float32"), alpha=1.0, beta=2.0, ) 	 81286700 	 1000 	 0.3135344982147217 	 0.31319642066955566 	 0.10687446594238281 	 0.10712742805480957 	 1.1015057563781738 	 0.6358580589294434 	 0.1876220703125 	 0.22046470642089844 	 
2025-07-27 20:48:13.621385 test begin: paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1693441],"float32"), Tensor([1693441, 50],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1693441],"float32"), Tensor([1693441, 50],"float32"), alpha=1.0, beta=2.0, ) 	 135476780 	 1000 	 0.5025067329406738 	 0.5040359497070312 	 0.17148923873901367 	 0.17260432243347168 	 1.829254388809204 	 1.0675349235534668 	 0.23396611213684082 	 0.21652603149414062 	 
2025-07-27 20:48:19.758224 test begin: paddle.addmm(Tensor([30, 635041],"float32"), Tensor([30, 80],"float32"), Tensor([80, 635041],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([30, 635041],"float32"), Tensor([30, 80],"float32"), Tensor([80, 635041],"float32"), alpha=1.0, beta=2.0, ) 	 69856910 	 1000 	 0.4240074157714844 	 0.41711854934692383 	 0.21664643287658691 	 0.1420438289642334 	 1.2201900482177734 	 0.7956998348236084 	 0.1781158447265625 	 0.20383024215698242 	 
2025-07-27 20:48:24.049014 test begin: paddle.addmm(Tensor([635041, 50],"float32"), Tensor([635041, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
[Prof] paddle.addmm 	 paddle.addmm(Tensor([635041, 50],"float32"), Tensor([635041, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, ) 	 82559330 	 1000 	 0.6472892761230469 	 0.6301043033599854 	 0.3314692974090576 	 0.21457505226135254 	 1.6933259963989258 	 1.2014920711517334 	 0.24721574783325195 	 0.3079500198364258 	 
2025-07-27 20:48:29.956015 test begin: paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 5080321],"float64"), y=Tensor([5080321, 5],"float64"), )
[Prof] paddle.addmm 	 paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 5080321],"float64"), y=Tensor([5080321, 5],"float64"), ) 	 50803235 	 1000 	 0.6188812255859375 	 0.6219112873077393 	 0.2110273838043213 	 0.21205401420593262 	 3.0070860385894775 	 2.5368096828460693 	 0.22078585624694824 	 0.2593038082122803 	 
2025-07-27 20:48:40.568141 test begin: paddle.all(Tensor([423361, 6, 10],"float64"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([423361, 6, 10],"float64"), None, False, None, ) 	 25401660 	 1000 	 0.20102977752685547 	 0.1504356861114502 	 0.0683741569519043 	 0.0768439769744873 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:41.719368 test begin: paddle.all(Tensor([5, 1016065, 10],"bool"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([5, 1016065, 10],"bool"), None, False, None, ) 	 50803250 	 1000 	 0.0521235466003418 	 0.0608673095703125 	 0.02661299705505371 	 0.03108525276184082 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:42.518809 test begin: paddle.all(Tensor([5, 508033, 10],"float64"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([5, 508033, 10],"float64"), None, False, None, ) 	 25401650 	 1000 	 0.20103740692138672 	 0.15041017532348633 	 0.06837821006774902 	 0.07682514190673828 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:43.353930 test begin: paddle.all(Tensor([5, 6, 1693441],"bool"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([5, 6, 1693441],"bool"), None, False, None, ) 	 50803230 	 1000 	 0.05207347869873047 	 0.06090974807739258 	 0.02659153938293457 	 0.0311124324798584 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:44.158715 test begin: paddle.all(Tensor([5, 6, 846721],"float64"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([5, 6, 846721],"float64"), None, False, None, ) 	 25401630 	 1000 	 0.20294570922851562 	 0.15041565895080566 	 0.06902742385864258 	 0.0768425464630127 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:44.981460 test begin: paddle.all(Tensor([50803201],"bool"), )
[Prof] paddle.all 	 paddle.all(Tensor([50803201],"bool"), ) 	 50803201 	 1000 	 0.052106618881225586 	 0.06089282035827637 	 0.026612043380737305 	 0.03109002113342285 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:45.774993 test begin: paddle.all(Tensor([846721, 6, 10],"bool"), None, False, None, )
[Prof] paddle.all 	 paddle.all(Tensor([846721, 6, 10],"bool"), None, False, None, ) 	 50803260 	 1000 	 0.0521237850189209 	 0.060846805572509766 	 0.026614904403686523 	 0.031064748764038086 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:46.584569 test begin: paddle.allclose(Tensor([1124, 45199],"float32"), Tensor([1124, 45199],"float32"), )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([1124, 45199],"float32"), Tensor([1124, 45199],"float32"), ) 	 101607352 	 1000 	 1.0203790664672852 	 3.4128878116607666 	 1.0081169605255127 	 8.58306884765625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:52.629805 test begin: paddle.allclose(Tensor([13, 32, 122124],"float32"), Tensor([13, 32, 122124],"float32"), rtol=0.0001, atol=0.0001, )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([13, 32, 122124],"float32"), Tensor([13, 32, 122124],"float32"), rtol=0.0001, atol=0.0001, ) 	 101607168 	 1000 	 1.0532476902008057 	 3.416961193084717 	 1.0404624938964844 	 0.00023174285888671875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:00.979068 test begin: paddle.allclose(Tensor([13, 61062, 64],"float32"), Tensor([13, 61062, 64],"float32"), rtol=0.0001, atol=0.0001, )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([13, 61062, 64],"float32"), Tensor([13, 61062, 64],"float32"), rtol=0.0001, atol=0.0001, ) 	 101607168 	 1000 	 1.156120777130127 	 3.424896240234375 	 1.1432406902313232 	 0.00026607513427734375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:07.517709 test begin: paddle.allclose(Tensor([1587601, 32],"float32"), Tensor([1587601, 32],"float32"), )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([1587601, 32],"float32"), Tensor([1587601, 32],"float32"), ) 	 101606464 	 1000 	 1.0563938617706299 	 3.4161038398742676 	 1.0440635681152344 	 0.00025963783264160156 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:13.895912 test begin: paddle.allclose(Tensor([24807, 32, 64],"float32"), Tensor([24807, 32, 64],"float32"), rtol=0.0001, atol=0.0001, )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([24807, 32, 64],"float32"), Tensor([24807, 32, 64],"float32"), rtol=0.0001, atol=0.0001, ) 	 101609472 	 1000 	 1.0376341342926025 	 3.4251656532287598 	 1.024681806564331 	 0.00028204917907714844 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:20.184107 test begin: paddle.allclose(Tensor([30522, 1665],"float32"), Tensor([30522, 1665],"float32"), )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([30522, 1665],"float32"), Tensor([30522, 1665],"float32"), ) 	 101638260 	 1000 	 1.0600063800811768 	 3.4186010360717773 	 1.0477185249328613 	 0.0002720355987548828 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:26.266864 test begin: paddle.allclose(Tensor([6350401, 8],"float32"), Tensor([6350401, 8],"float32"), )
[Prof] paddle.allclose 	 paddle.allclose(Tensor([6350401, 8],"float32"), Tensor([6350401, 8],"float32"), ) 	 101606416 	 1000 	 1.0566096305847168 	 3.4141061305999756 	 1.0442419052124023 	 9.179115295410156e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:32.331128 test begin: paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.22164583206176758 	 0.17806005477905273 	 0.11324596405029297 	 0.09094762802124023 	 1.1017265319824219 	 1.313157320022583 	 0.2253129482269287 	 0.223524808883667 	 
2025-07-27 20:49:41.278697 test begin: paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.23656845092773438 	 0.2001793384552002 	 0.12087607383728027 	 0.1022946834564209 	 1.1146488189697266 	 1.3562612533569336 	 0.2279496192932129 	 0.23097896575927734 	 
2025-07-27 20:49:45.215561 test begin: paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 0.19810032844543457 	 0.16030144691467285 	 0.18615245819091797 	 0.1448652744293213 	 1.0924100875854492 	 1.288855791091919 	 0.27927637100219727 	 0.2632412910461426 	 
2025-07-27 20:49:48.734590 test begin: paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.2215869426727295 	 0.17805242538452148 	 0.11319279670715332 	 0.09096503257751465 	 1.1031155586242676 	 1.3137118816375732 	 0.22533893585205078 	 0.22373223304748535 	 
2025-07-27 20:49:52.386537 test begin: paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.5706906318664551 	 0.45472097396850586 	 0.5573251247406006 	 0.43727874755859375 	 1.3127503395080566 	 1.460313320159912 	 0.3360614776611328 	 0.29823946952819824 	 
2025-07-27 20:49:56.967109 test begin: paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 5.937310218811035 	 0.16577601432800293 	 3.033203601837158 	 0.08468103408813477 	 5.866451263427734 	 1.2955818176269531 	 1.1970958709716797 	 0.22030258178710938 	 
2025-07-27 20:50:11.488274 test begin: paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.4393942356109619 	 0.2912416458129883 	 0.4264826774597168 	 0.2703285217285156 	 1.176792860031128 	 1.3133182525634766 	 0.30063867568969727 	 0.2679252624511719 	 
2025-07-27 20:50:15.503231 test begin: paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.25586986541748047 	 0.2153167724609375 	 0.13076162338256836 	 0.1100313663482666 	 1.130953311920166 	 1.426215648651123 	 0.23127031326293945 	 0.24251461029052734 	 
2025-07-27 20:50:19.580416 test begin: paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amax 	 paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 5.936377048492432 	 0.16580867767333984 	 3.0347518920898438 	 0.0846397876739502 	 5.867801666259766 	 1.2957139015197754 	 1.1971056461334229 	 0.22030162811279297 	 
2025-07-27 20:50:33.705797 test begin: paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.2216780185699463 	 0.17818117141723633 	 0.11327099800109863 	 0.09099268913269043 	 1.1018199920654297 	 1.3138797283172607 	 0.22534465789794922 	 0.22375965118408203 	 
2025-07-27 20:50:41.022431 test begin: paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.23658108711242676 	 0.20023155212402344 	 0.12089347839355469 	 0.10230231285095215 	 1.117091417312622 	 1.3562707901000977 	 0.22795653343200684 	 0.2309401035308838 	 
2025-07-27 20:50:44.789841 test begin: paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 0.19811725616455078 	 0.16170835494995117 	 0.185866117477417 	 0.14509344100952148 	 1.0923855304718018 	 1.2918615341186523 	 0.2791106700897217 	 0.2632932662963867 	 
2025-07-27 20:50:48.399180 test begin: paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.22167253494262695 	 0.17826604843139648 	 0.11326980590820312 	 0.0911405086517334 	 1.1018173694610596 	 1.3131728172302246 	 0.22532892227172852 	 0.22364258766174316 	 
2025-07-27 20:50:52.086661 test begin: paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.5704748630523682 	 0.45456385612487793 	 0.5567269325256348 	 0.43031930923461914 	 1.309809923171997 	 1.4610328674316406 	 0.33463311195373535 	 0.29949188232421875 	 
2025-07-27 20:50:56.884692 test begin: paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 5.9362499713897705 	 0.16704773902893066 	 3.0346457958221436 	 0.08589434623718262 	 6.3349761962890625 	 1.2941420078277588 	 1.6668369770050049 	 0.22031664848327637 	 
2025-07-27 20:51:14.441563 test begin: paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, ) 	 50803300 	 1000 	 0.43941807746887207 	 0.6639385223388672 	 0.42684245109558105 	 0.2653501033782959 	 1.1768202781677246 	 1.3135175704956055 	 0.30065274238586426 	 0.2679252624511719 	 
2025-07-27 20:51:19.686240 test begin: paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, ) 	 50803300 	 1000 	 0.25586938858032227 	 0.21567296981811523 	 0.13076257705688477 	 0.11010456085205078 	 1.1308438777923584 	 1.4260132312774658 	 0.23122406005859375 	 0.24397015571594238 	 
2025-07-27 20:51:23.558338 test begin: paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
[Prof] paddle.amin 	 paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, ) 	 50803300 	 1000 	 5.93614935874939 	 0.16574311256408691 	 3.0345571041107178 	 0.08463764190673828 	 6.222506284713745 	 1.294823169708252 	 1.5518450736999512 	 0.22037220001220703 	 
2025-07-27 20:51:40.746696 test begin: paddle.any(Tensor([1, 12404, 4096],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([1, 12404, 4096],"bool"), ) 	 50806784 	 1000 	 0.05352330207824707 	 0.06434226036071777 	 0.026853322982788086 	 0.03285789489746094 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:41.591999 test begin: paddle.any(Tensor([1, 300, 169345],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([1, 300, 169345],"bool"), ) 	 50803500 	 1000 	 0.052392005920410156 	 0.0643472671508789 	 0.026746749877929688 	 0.03286337852478027 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:42.394551 test begin: paddle.any(Tensor([1124, 45199],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([1124, 45199],"bool"), ) 	 50803676 	 1000 	 0.05241227149963379 	 0.0643470287322998 	 0.026767253875732422 	 0.0328669548034668 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:43.192224 test begin: paddle.any(Tensor([1587601, 32],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([1587601, 32],"bool"), ) 	 50803232 	 1000 	 0.052274465560913086 	 0.06433534622192383 	 0.026697635650634766 	 0.0328516960144043 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:43.996508 test begin: paddle.any(Tensor([42, 300, 4096],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([42, 300, 4096],"bool"), ) 	 51609600 	 1000 	 0.0534510612487793 	 0.06514906883239746 	 0.027297496795654297 	 0.033248186111450195 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:44.834054 test begin: paddle.any(Tensor([512, 99226],"bool"), )
[Prof] paddle.any 	 paddle.any(Tensor([512, 99226],"bool"), ) 	 50803712 	 1000 	 0.05240774154663086 	 0.06429815292358398 	 0.026753664016723633 	 0.032839059829711914 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:45.683739 test begin: paddle.argmax(Tensor([15877, 100, 32],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([15877, 100, 32],"float32"), axis=1, ) 	 50806400 	 1000 	 0.7625172138214111 	 0.18312287330627441 	 0.7514739036560059 	 0.1693122386932373 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:47.457376 test begin: paddle.argmax(Tensor([29151, 100, 18],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([29151, 100, 18],"float32"), axis=1, ) 	 52471800 	 1000 	 0.6405377388000488 	 0.17460012435913086 	 0.6293880939483643 	 0.1606888771057129 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:49.112266 test begin: paddle.argmax(Tensor([29151, 28, 64],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([29151, 28, 64],"float32"), axis=1, ) 	 52238592 	 1000 	 1.5056006908416748 	 0.1765151023864746 	 1.490917444229126 	 0.1573190689086914 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:51.625553 test begin: paddle.argmax(Tensor([29151, 55, 32],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([29151, 55, 32],"float32"), axis=1, ) 	 51305760 	 1000 	 0.7549383640289307 	 0.16866540908813477 	 0.7439913749694824 	 0.1546611785888672 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:53.325006 test begin: paddle.argmax(Tensor([39691, 20, 64],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([39691, 20, 64],"float32"), axis=1, ) 	 50804480 	 1000 	 2.047396421432495 	 0.1761484146118164 	 2.0364928245544434 	 0.1620922088623047 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:56.327265 test begin: paddle.argmax(Tensor([7939, 100, 64],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([7939, 100, 64],"float32"), axis=1, ) 	 50809600 	 1000 	 0.7442526817321777 	 0.18058538436889648 	 0.725816011428833 	 0.1586153507232666 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:58.172923 test begin: paddle.argmax(Tensor([80239, 10, 64],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([80239, 10, 64],"float32"), axis=1, ) 	 51352960 	 1000 	 4.1319990158081055 	 0.19650769233703613 	 4.120980501174927 	 0.17557287216186523 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:03.356829 test begin: paddle.argmax(Tensor([80239, 20, 32],"float32"), axis=1, )
[Prof] paddle.argmax 	 paddle.argmax(Tensor([80239, 20, 32],"float32"), axis=1, ) 	 51352960 	 1000 	 2.068100690841675 	 0.1775054931640625 	 2.056901693344116 	 0.16171026229858398 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:06.522383 test begin: paddle.argmin(Tensor([104534, 3, 3, 3, 3, 3],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([104534, 3, 3, 3, 3, 3],"float64"), axis=0, ) 	 25401762 	 1000 	 0.4779510498046875 	 0.16062474250793457 	 0.46675634384155273 	 0.08204030990600586 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:07.649144 test begin: paddle.argmin(Tensor([203213, 5, 5, 5],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([203213, 5, 5, 5],"float64"), axis=0, ) 	 25401625 	 1000 	 0.4910147190093994 	 0.1627192497253418 	 0.4798765182495117 	 0.08312273025512695 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:08.804197 test begin: paddle.argmin(Tensor([3, 104534, 3, 3, 3, 3],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([3, 104534, 3, 3, 3, 3],"float64"), axis=0, ) 	 25401762 	 1000 	 6.808606147766113 	 0.20359539985656738 	 6.797358751296997 	 0.18827533721923828 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:16.369284 test begin: paddle.argmin(Tensor([3, 3, 104534, 3, 3, 3],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([3, 3, 104534, 3, 3, 3],"float64"), axis=0, ) 	 25401762 	 1000 	 6.808540105819702 	 0.20615434646606445 	 6.7898173332214355 	 0.1811072826385498 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:24.378686 test begin: paddle.argmin(Tensor([3, 3, 3, 104534, 3, 3],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([3, 3, 3, 104534, 3, 3],"float64"), axis=0, ) 	 25401762 	 1000 	 6.810056924819946 	 0.2035353183746338 	 6.798810243606567 	 0.18118786811828613 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:31.947458 test begin: paddle.argmin(Tensor([3, 3, 3, 3, 104534, 3],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([3, 3, 3, 3, 104534, 3],"float64"), axis=0, ) 	 25401762 	 1000 	 6.817742347717285 	 0.20825529098510742 	 6.806474924087524 	 0.1796278953552246 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:40.235419 test begin: paddle.argmin(Tensor([3, 3, 3, 3, 3, 104534],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([3, 3, 3, 3, 3, 104534],"float64"), axis=0, ) 	 25401762 	 1000 	 6.811205148696899 	 0.20345592498779297 	 6.799972772598267 	 0.1882941722869873 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:47.819811 test begin: paddle.argmin(Tensor([4, 4, 4, 4, 99226],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([4, 4, 4, 4, 99226],"float64"), axis=0, ) 	 25401856 	 1000 	 5.107995271682739 	 0.1913454532623291 	 5.096747159957886 	 0.1698319911956787 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:53.708614 test begin: paddle.argmin(Tensor([4, 4, 4, 99226, 4],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([4, 4, 4, 99226, 4],"float64"), axis=0, ) 	 25401856 	 1000 	 5.109301328659058 	 0.19257426261901855 	 5.096762657165527 	 0.17798066139221191 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:59.549411 test begin: paddle.argmin(Tensor([4, 4, 99226, 4, 4],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([4, 4, 99226, 4, 4],"float64"), axis=0, ) 	 25401856 	 1000 	 5.108288764953613 	 0.19121789932250977 	 5.0971479415893555 	 0.17655253410339355 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:05.394714 test begin: paddle.argmin(Tensor([4, 99226, 4, 4, 4],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([4, 99226, 4, 4, 4],"float64"), axis=0, ) 	 25401856 	 1000 	 5.108128786087036 	 0.1912534236907959 	 5.096896409988403 	 0.17666888236999512 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:11.184586 test begin: paddle.argmin(Tensor([5, 203213, 5, 5],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([5, 203213, 5, 5],"float64"), axis=0, ) 	 25401625 	 1000 	 4.087761163711548 	 0.19592642784118652 	 4.076574087142944 	 0.18141984939575195 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:16.006391 test begin: paddle.argmin(Tensor([5, 5, 203213, 5],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([5, 5, 203213, 5],"float64"), axis=0, ) 	 25401625 	 1000 	 4.087896347045898 	 0.20173883438110352 	 4.076629161834717 	 0.18265032768249512 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:20.918047 test begin: paddle.argmin(Tensor([5, 5, 5, 203213],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([5, 5, 5, 203213],"float64"), axis=0, ) 	 25401625 	 1000 	 4.086629629135132 	 0.20070862770080566 	 4.075349807739258 	 0.18128728866577148 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:27.170966 test begin: paddle.argmin(Tensor([99226, 4, 4, 4, 4],"float64"), axis=0, )
[Prof] paddle.argmin 	 paddle.argmin(Tensor([99226, 4, 4, 4, 4],"float64"), axis=0, ) 	 25401856 	 1000 	 0.43381524085998535 	 0.32161951065063477 	 0.41423487663269043 	 0.1642625331878662 	 None 	 None 	 None 	 None 	 
2025-07-27 20:53:30.621960 test begin: paddle.argsort(Tensor([25401601],"float64"), stable=True, )
[Prof] paddle.argsort 	 paddle.argsort(Tensor([25401601],"float64"), stable=True, ) 	 25401601 	 1000 	 14.805564403533936 	 7.499257326126099 	 0.00010395050048828125 	 0.3340909481048584 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:53:58.471787 test begin: paddle.argsort(Tensor([50803201],"float32"), stable=True, )
[Prof] paddle.argsort 	 paddle.argsort(Tensor([50803201],"float32"), stable=True, ) 	 50803201 	 1000 	 16.400470733642578 	 7.873857021331787 	 0.00010895729064941406 	 0.5368614196777344 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:54:34.066313 test begin: paddle.argsort(Tensor([50803201],"int32"), stable=True, )
[Prof] paddle.argsort 	 paddle.argsort(Tensor([50803201],"int32"), stable=True, ) 	 50803201 	 1000 	 23.181167602539062 	 7.227351665496826 	 0.00011873245239257812 	 0.4938235282897949 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:55:14.885466 test begin: paddle.as_complex(Tensor([32, 15, 207, 8, 32, 2],"float32"), )
[Prof] paddle.as_complex 	 paddle.as_complex(Tensor([32, 15, 207, 8, 32, 2],"float32"), ) 	 50872320 	 1000 	 0.0030646324157714844 	 0.00450587272644043 	 8.821487426757812e-06 	 1.8596649169921875e-05 	 0.04301571846008301 	 0.059830427169799805 	 2.9325485229492188e-05 	 5.602836608886719e-05 	 
2025-07-27 20:55:16.237525 test begin: paddle.as_complex(Tensor([32, 15, 8, 207, 32, 2],"float32"), )
[Prof] paddle.as_complex 	 paddle.as_complex(Tensor([32, 15, 8, 207, 32, 2],"float32"), ) 	 50872320 	 1000 	 0.0030612945556640625 	 0.004477977752685547 	 1.1920928955078125e-05 	 1.71661376953125e-05 	 0.04062199592590332 	 0.058373212814331055 	 3.8623809814453125e-05 	 3.695487976074219e-05 	 
2025-07-27 20:55:17.589674 test begin: paddle.as_complex(Tensor([32, 15, 8, 8, 827, 2],"float32"), )
[Prof] paddle.as_complex 	 paddle.as_complex(Tensor([32, 15, 8, 8, 827, 2],"float32"), ) 	 50810880 	 1000 	 0.0030374526977539062 	 0.004494428634643555 	 6.9141387939453125e-06 	 1.7881393432617188e-05 	 0.04013538360595703 	 0.05892229080200195 	 3.5762786865234375e-05 	 5.1021575927734375e-05 	 
2025-07-27 20:55:18.983210 test begin: paddle.as_complex(Tensor([32, 388, 8, 8, 32, 2],"float32"), )
[Prof] paddle.as_complex 	 paddle.as_complex(Tensor([32, 388, 8, 8, 32, 2],"float32"), ) 	 50855936 	 1000 	 0.0030710697174072266 	 0.004525423049926758 	 1.3589859008789062e-05 	 1.6689300537109375e-05 	 0.04034757614135742 	 0.06369709968566895 	 2.574920654296875e-05 	 6.890296936035156e-05 	 
2025-07-27 20:55:20.428418 test begin: paddle.as_complex(Tensor([827, 15, 8, 8, 32, 2],"float32"), )
[Prof] paddle.as_complex 	 paddle.as_complex(Tensor([827, 15, 8, 8, 32, 2],"float32"), ) 	 50810880 	 1000 	 0.0030345916748046875 	 0.00825357437133789 	 1.1444091796875e-05 	 1.9073486328125e-05 	 0.04720020294189453 	 0.08208775520324707 	 2.4080276489257812e-05 	 4.887580871582031e-05 	 
2025-07-27 20:55:21.999057 test begin: paddle.as_strided(Tensor([1587601, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([1587601, 32],"float32"), shape=tuple(3,), stride=tuple(1,), ) 	 50803232 	 1000 	 0.01730513572692871 	 0.004503965377807617 	 1.239776611328125e-05 	 1.71661376953125e-05 	 0.14828944206237793 	 0.1369774341583252 	 0.07574176788330078 	 0.05349993705749512 	 
2025-07-27 20:55:23.085344 test begin: paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,), stride=tuple(1,), ) 	 101606432 	 1000 	 0.01710057258605957 	 0.004544496536254883 	 1.049041748046875e-05 	 1.9550323486328125e-05 	 0.1471564769744873 	 0.1367485523223877 	 0.0751032829284668 	 0.05006766319274902 	 
2025-07-27 20:55:25.212385 test begin: paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), ) 	 101606432 	 1000 	 0.017205238342285156 	 0.00878000259399414 	 1.621246337890625e-05 	 5.316734313964844e-05 	 0.14762663841247559 	 0.1376352310180664 	 0.07531356811523438 	 0.04656195640563965 	 
2025-07-27 20:55:27.529786 test begin: paddle.as_strided(Tensor([32, 1587601],"float32"), shape=tuple(3,), stride=tuple(1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([32, 1587601],"float32"), shape=tuple(3,), stride=tuple(1,), ) 	 50803232 	 1000 	 0.017224788665771484 	 0.004530429840087891 	 9.775161743164062e-06 	 1.7642974853515625e-05 	 0.14850378036499023 	 0.13690876960754395 	 0.07584095001220703 	 0.0557401180267334 	 
2025-07-27 20:55:28.615001 test begin: paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,), stride=tuple(1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,), stride=tuple(1,), ) 	 101606432 	 1000 	 0.017129898071289062 	 0.004510164260864258 	 1.4066696166992188e-05 	 1.9311904907226562e-05 	 0.14735746383666992 	 0.13669776916503906 	 0.07510709762573242 	 0.05513930320739746 	 
2025-07-27 20:55:30.735260 test begin: paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
[Prof] paddle.as_strided 	 paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), ) 	 101606432 	 1000 	 0.02256178855895996 	 0.008223533630371094 	 1.5497207641601562e-05 	 1.9788742065429688e-05 	 0.1477513313293457 	 0.13771414756774902 	 0.07349252700805664 	 0.016906261444091797 	 
2025-07-27 20:55:33.050269 test begin: paddle.asin(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.asin 	 paddle.asin(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.2966291904449463 	 0.7378702163696289 	 0.28756141662597656 	 0.286283016204834 	 0.4500610828399658 	 1.783583402633667 	 0.3939509391784668 	 0.36451077461242676 	 
2025-07-27 20:55:43.930390 test begin: paddle.asin(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.asin 	 paddle.asin(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.29531145095825195 	 0.3140270709991455 	 0.2858772277832031 	 0.28644299507141113 	 0.44985055923461914 	 1.7846393585205078 	 0.3905327320098877 	 0.3644368648529053 	 
2025-07-27 20:55:49.046129 test begin: paddle.asin(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.asin 	 paddle.asin(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.29528355598449707 	 0.29771971702575684 	 0.278961181640625 	 0.28009748458862305 	 0.4497997760772705 	 1.7847509384155273 	 0.3854858875274658 	 0.36448144912719727 	 
2025-07-27 20:55:53.516454 test begin: paddle.asinh(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.asinh 	 paddle.asinh(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.30102968215942383 	 0.3057889938354492 	 0.291881799697876 	 0.2891969680786133 	 0.4500555992126465 	 1.3395795822143555 	 0.3942878246307373 	 0.3433232307434082 	 
2025-07-27 20:55:57.549323 test begin: paddle.asinh(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.asinh 	 paddle.asinh(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.3009002208709717 	 0.3005647659301758 	 0.2896573543548584 	 0.28939318656921387 	 0.44986939430236816 	 1.3381640911102295 	 0.3840160369873047 	 0.3419806957244873 	 
2025-07-27 20:56:01.676221 test begin: paddle.asinh(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.asinh 	 paddle.asinh(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.3019559383392334 	 0.30141210556030273 	 0.29299497604370117 	 0.28931331634521484 	 0.4498722553253174 	 1.3381357192993164 	 0.39392733573913574 	 0.34192895889282227 	 
2025-07-27 20:56:05.642344 test begin: paddle.atan(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.atan 	 paddle.atan(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.29749441146850586 	 0.2976839542388916 	 0.2880728244781494 	 0.28674936294555664 	 0.44978976249694824 	 1.043342113494873 	 0.3910555839538574 	 0.35544919967651367 	 
2025-07-27 20:56:09.359636 test begin: paddle.atan(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.atan 	 paddle.atan(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.29743313789367676 	 0.2976348400115967 	 0.28818345069885254 	 0.286787748336792 	 0.45107007026672363 	 1.0433082580566406 	 0.396331787109375 	 0.3554697036743164 	 
2025-07-27 20:56:12.985281 test begin: paddle.atan(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.atan 	 paddle.atan(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.2973010540008545 	 0.2976229190826416 	 0.28810954093933105 	 0.2866997718811035 	 0.45090746879577637 	 1.0446808338165283 	 0.39614343643188477 	 0.3554692268371582 	 
2025-07-27 20:56:16.628215 test begin: paddle.atan2(Tensor([100],"float64"), Tensor([254017, 100],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(Tensor([100],"float64"), Tensor([254017, 100],"float64"), ) 	 25401800 	 1000 	 0.8815972805023193 	 0.3164396286010742 	 0.3002915382385254 	 0.3041799068450928 	 1.682664155960083 	 2.7440109252929688 	 0.3432440757751465 	 0.2549114227294922 	 
2025-07-27 20:56:23.303244 test begin: paddle.atan2(Tensor([111, 222, 1031],"float64"), Tensor([222, 1031],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(Tensor([111, 222, 1031],"float64"), Tensor([222, 1031],"float64"), ) 	 25634784 	 1000 	 0.8822038173675537 	 0.3185746669769287 	 0.300431489944458 	 0.2992229461669922 	 1.2314434051513672 	 2.9902071952819824 	 0.31420278549194336 	 0.30533337593078613 	 
2025-07-27 20:56:29.792888 test begin: paddle.atan2(Tensor([111, 688, 333],"float64"), Tensor([688, 333],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(Tensor([111, 688, 333],"float64"), Tensor([688, 333],"float64"), ) 	 25659648 	 1000 	 0.8834755420684814 	 0.31897544860839844 	 0.3006749153137207 	 0.29958677291870117 	 1.2347886562347412 	 2.996215343475342 	 0.31605958938598633 	 0.3060619831085205 	 
2025-07-27 20:56:37.957552 test begin: paddle.atan2(Tensor([344, 222, 333],"float64"), Tensor([222, 333],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(Tensor([344, 222, 333],"float64"), Tensor([222, 333],"float64"), ) 	 25504470 	 1000 	 2.6098313331604004 	 0.3207688331604004 	 0.2998836040496826 	 0.3047633171081543 	 1.3121261596679688 	 2.986942768096924 	 0.3345475196838379 	 0.3066110610961914 	 
2025-07-27 20:56:46.382938 test begin: paddle.atan2(x=Tensor([19601, 6, 6, 6, 6],"float64"), y=Tensor([19601, 6, 6, 6, 6],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(x=Tensor([19601, 6, 6, 6, 6],"float64"), y=Tensor([19601, 6, 6, 6, 6],"float64"), ) 	 50805792 	 1000 	 0.44576525688171387 	 0.45369720458984375 	 0.43505334854125977 	 0.4417736530303955 	 0.732806921005249 	 3.4111971855163574 	 0.6731226444244385 	 0.38720703125 	 
2025-07-27 20:56:56.739814 test begin: paddle.atan2(x=Tensor([3, 39201, 6, 6, 6],"float64"), y=Tensor([3, 39201, 6, 6, 6],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(x=Tensor([3, 39201, 6, 6, 6],"float64"), y=Tensor([3, 39201, 6, 6, 6],"float64"), ) 	 50804496 	 1000 	 0.4457707405090332 	 0.4536416530609131 	 0.43526244163513184 	 0.44199681282043457 	 0.733914852142334 	 3.409801721572876 	 0.6727116107940674 	 0.38718485832214355 	 
2025-07-27 20:57:03.208992 test begin: paddle.atan2(x=Tensor([3, 6, 39201, 6, 6],"float64"), y=Tensor([3, 6, 39201, 6, 6],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(x=Tensor([3, 6, 39201, 6, 6],"float64"), y=Tensor([3, 6, 39201, 6, 6],"float64"), ) 	 50804496 	 1000 	 0.4457991123199463 	 0.4537031650543213 	 0.43283677101135254 	 0.44193601608276367 	 0.732515811920166 	 3.410785675048828 	 0.6723523139953613 	 0.38715219497680664 	 
2025-07-27 20:57:09.751632 test begin: paddle.atan2(x=Tensor([3, 6, 6, 39201, 6],"float64"), y=Tensor([3, 6, 6, 39201, 6],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(x=Tensor([3, 6, 6, 39201, 6],"float64"), y=Tensor([3, 6, 6, 39201, 6],"float64"), ) 	 50804496 	 1000 	 0.44577956199645996 	 0.45364904403686523 	 0.4351639747619629 	 0.441805362701416 	 0.7339415550231934 	 3.4099206924438477 	 0.6740028858184814 	 0.3872196674346924 	 
2025-07-27 20:57:16.304044 test begin: paddle.atan2(x=Tensor([3, 6, 6, 6, 39201],"float64"), y=Tensor([3, 6, 6, 6, 39201],"float64"), )
[Prof] paddle.atan2 	 paddle.atan2(x=Tensor([3, 6, 6, 6, 39201],"float64"), y=Tensor([3, 6, 6, 6, 39201],"float64"), ) 	 50804496 	 1000 	 0.445728063583374 	 0.45876073837280273 	 0.4350895881652832 	 0.4416642189025879 	 0.7325589656829834 	 3.411026954650879 	 0.6726922988891602 	 0.38729405403137207 	 
2025-07-27 20:57:22.821395 test begin: paddle.atanh(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.atanh 	 paddle.atanh(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.2968599796295166 	 0.2982916831970215 	 0.28779053688049316 	 0.28737521171569824 	 0.44980478286743164 	 1.6252193450927734 	 0.39368462562561035 	 0.33303070068359375 	 
2025-07-27 20:57:27.112192 test begin: paddle.atanh(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.atanh 	 paddle.atanh(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.2966885566711426 	 0.2983205318450928 	 0.28758764266967773 	 0.2873523235321045 	 0.4496457576751709 	 1.6254348754882812 	 0.3936140537261963 	 0.33316922187805176 	 
2025-07-27 20:57:31.521970 test begin: paddle.atanh(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.atanh 	 paddle.atanh(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.2966282367706299 	 0.3005716800689697 	 0.28735804557800293 	 0.28727054595947266 	 0.449587345123291 	 1.624077320098877 	 0.39362096786499023 	 0.33188891410827637 	 
2025-07-27 20:57:37.949260 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401624 	 1000 	 0.0016353130340576172 	 0.008344173431396484 	 8.344650268554688e-06 	 2.0742416381835938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:40.604814 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 76204872 	 1000 	 0.0028831958770751953 	 0.0073626041412353516 	 8.821487426757812e-06 	 2.1219253540039062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:42.363144 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.0028502941131591797 	 0.010249137878417969 	 1.1444091796875e-05 	 2.193450927734375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:42.908303 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.002844572067260742 	 0.007491350173950195 	 7.62939453125e-06 	 2.0265579223632812e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:43.478383 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401864 	 1000 	 0.002889871597290039 	 0.012589216232299805 	 1.8358230590820312e-05 	 5.602836608886719e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:44.042797 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 25401900 	 1000 	 0.0029001235961914062 	 0.010246515274047852 	 2.4557113647460938e-05 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:44.588838 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.002849102020263672 	 0.007203578948974609 	 6.9141387939453125e-06 	 1.71661376953125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:45.096143 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.0028831958770751953 	 0.007519960403442383 	 1.7881393432617188e-05 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:45.589981 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.0028717517852783203 	 0.007260560989379883 	 7.152557373046875e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:46.159145 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.0028231143951416016 	 0.007370710372924805 	 6.67572021484375e-06 	 2.2649765014648438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:46.667419 test begin: paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.002848386764526367 	 0.007223606109619141 	 7.3909759521484375e-06 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:47.213925 test begin: paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 76204836 	 1000 	 0.0028154850006103516 	 0.007460832595825195 	 7.152557373046875e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:48.647271 test begin: paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.0027892589569091797 	 0.0073125362396240234 	 7.152557373046875e-06 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:49.131794 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.002837657928466797 	 0.007359743118286133 	 6.67572021484375e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:49.716947 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 25401660 	 1000 	 0.002792835235595703 	 0.007445335388183594 	 7.152557373046875e-06 	 2.8848648071289062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:50.204140 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 25401654 	 1000 	 0.0028221607208251953 	 0.008978605270385742 	 6.4373016357421875e-06 	 3.790855407714844e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:50.741634 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.002953767776489258 	 0.007430315017700195 	 1.2874603271484375e-05 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:51.321997 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.0028238296508789062 	 0.010297298431396484 	 9.059906005859375e-06 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:51.893856 test begin: paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.002807140350341797 	 0.00736236572265625 	 6.67572021484375e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:52.378428 test begin: paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), ) 	 25401660 	 1000 	 0.001544952392578125 	 0.0061702728271484375 	 1.0728836059570312e-05 	 1.6927719116210938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:52.859393 test begin: paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.002881765365600586 	 0.0075283050537109375 	 6.67572021484375e-06 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:53.353239 test begin: paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 76204980 	 1000 	 0.002856016159057617 	 0.007429838180541992 	 6.9141387939453125e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:56.477629 test begin: paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.002869129180908203 	 0.010116815567016602 	 9.298324584960938e-06 	 2.574920654296875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:57.400800 test begin: paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 76204818 	 1000 	 0.0028595924377441406 	 0.007414579391479492 	 9.5367431640625e-06 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:59.980903 test begin: paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), ) 	 25401630 	 1000 	 0.0015523433685302734 	 0.006747007369995117 	 1.049041748046875e-05 	 4.744529724121094e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:00.587039 test begin: paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.002842426300048828 	 0.007431983947753906 	 7.62939453125e-06 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:01.147064 test begin: paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 76204890 	 1000 	 0.0028922557830810547 	 0.0073277950286865234 	 7.3909759521484375e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:02.578558 test begin: paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.0027992725372314453 	 0.007458925247192383 	 5.9604644775390625e-06 	 1.9311904907226562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:03.067075 test begin: paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 76204824 	 1000 	 0.0028052330017089844 	 0.007208108901977539 	 6.67572021484375e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:04.488833 test begin: paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), ) 	 25401640 	 1000 	 0.0015459060668945312 	 0.006273508071899414 	 1.4066696166992188e-05 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:04.976103 test begin: paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.002845287322998047 	 0.007264852523803711 	 6.4373016357421875e-06 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:05.518131 test begin: paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_1d 	 paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 76204920 	 1000 	 0.0028824806213378906 	 0.0073430538177490234 	 5.9604644775390625e-06 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:07.027769 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401624 	 1000 	 0.0019550323486328125 	 0.006402015686035156 	 7.152557373046875e-06 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:07.513556 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 76204872 	 1000 	 0.0038623809814453125 	 0.007529258728027344 	 7.62939453125e-06 	 2.5033950805664062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:08.945169 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.0038938522338867188 	 0.0074656009674072266 	 1.4066696166992188e-05 	 2.0742416381835938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:09.439752 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.0038251876831054688 	 0.007500648498535156 	 6.198883056640625e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:09.979011 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401864 	 1000 	 0.003826618194580078 	 0.007214784622192383 	 6.9141387939453125e-06 	 1.71661376953125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:10.517314 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 25401900 	 1000 	 0.0038442611694335938 	 0.0072650909423828125 	 6.198883056640625e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:11.009085 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.0038154125213623047 	 0.00741124153137207 	 6.198883056640625e-06 	 1.8596649169921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:11.498425 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.003818511962890625 	 0.007439851760864258 	 6.4373016357421875e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:11.995684 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.0038299560546875 	 0.007585287094116211 	 6.67572021484375e-06 	 2.4318695068359375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:12.508764 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.003818511962890625 	 0.010418891906738281 	 9.059906005859375e-06 	 2.6226043701171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:13.097393 test begin: paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.00383758544921875 	 0.0074596405029296875 	 6.198883056640625e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:13.591628 test begin: paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 76204836 	 1000 	 0.003865480422973633 	 0.007534027099609375 	 6.4373016357421875e-06 	 2.9325485229492188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:15.037972 test begin: paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.003777742385864258 	 0.007466793060302734 	 5.9604644775390625e-06 	 2.1219253540039062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:15.734545 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.003740072250366211 	 0.007572650909423828 	 5.9604644775390625e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:16.224298 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 25401660 	 1000 	 0.0038013458251953125 	 0.0072994232177734375 	 6.67572021484375e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:16.719604 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 25401654 	 1000 	 0.0037970542907714844 	 0.007494211196899414 	 7.152557373046875e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:17.213112 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.0037963390350341797 	 0.0073909759521484375 	 7.152557373046875e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:17.755448 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.0037941932678222656 	 0.007489204406738281 	 6.9141387939453125e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:18.256543 test begin: paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.003772735595703125 	 0.007379293441772461 	 7.152557373046875e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:18.752870 test begin: paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), ) 	 25401660 	 1000 	 0.001943349838256836 	 0.006218910217285156 	 9.298324584960938e-06 	 1.6927719116210938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:19.291788 test begin: paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.003852367401123047 	 0.0073359012603759766 	 6.67572021484375e-06 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:19.784952 test begin: paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 76204980 	 1000 	 0.003862142562866211 	 0.007243633270263672 	 1.0967254638671875e-05 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:21.316956 test begin: paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.0037636756896972656 	 0.007291555404663086 	 9.775161743164062e-06 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:21.822863 test begin: paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 76204818 	 1000 	 0.003815174102783203 	 0.01119375228881836 	 6.4373016357421875e-06 	 5.269050598144531e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:23.312804 test begin: paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), ) 	 25401630 	 1000 	 0.00191497802734375 	 0.006216764450073242 	 6.9141387939453125e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:23.845127 test begin: paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.0038292407989501953 	 0.007451057434082031 	 8.106231689453125e-06 	 1.8596649169921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:24.339655 test begin: paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 76204890 	 1000 	 0.0038967132568359375 	 0.00732874870300293 	 2.4080276489257812e-05 	 1.9311904907226562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:25.773878 test begin: paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.003727436065673828 	 0.007552623748779297 	 6.9141387939453125e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:26.265367 test begin: paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 76204824 	 1000 	 0.003778219223022461 	 0.00740504264831543 	 7.152557373046875e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:27.754379 test begin: paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), ) 	 25401640 	 1000 	 0.0019142627716064453 	 0.0062274932861328125 	 1.2874603271484375e-05 	 1.6927719116210938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:28.239736 test begin: paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.003856182098388672 	 0.010239839553833008 	 2.09808349609375e-05 	 2.47955322265625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:28.798709 test begin: paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_2d 	 paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 76204920 	 1000 	 0.003880023956298828 	 0.007425069808959961 	 7.3909759521484375e-06 	 3.528594970703125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:30.402319 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401624 	 1000 	 0.002290487289428711 	 0.008353471755981445 	 8.821487426757812e-06 	 2.1219253540039062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:30.925706 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 76204872 	 1000 	 0.004920005798339844 	 0.012565374374389648 	 1.049041748046875e-05 	 5.173683166503906e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:32.455141 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.004822969436645508 	 0.007255077362060547 	 6.9141387939453125e-06 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:32.968299 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401864 	 1000 	 0.004837989807128906 	 0.007316112518310547 	 7.152557373046875e-06 	 1.8596649169921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:33.462938 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), ) 	 25401864 	 1000 	 0.005077362060546875 	 0.01039886474609375 	 1.239776611328125e-05 	 2.0742416381835938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:33.987440 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 25401900 	 1000 	 0.004795551300048828 	 0.007534980773925781 	 6.67572021484375e-06 	 2.7179718017578125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:34.483298 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.004854440689086914 	 0.007470607757568359 	 7.3909759521484375e-06 	 2.3603439331054688e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:35.051279 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.004822731018066406 	 0.0075244903564453125 	 6.9141387939453125e-06 	 3.62396240234375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:38.009854 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.004767656326293945 	 0.007497549057006836 	 6.67572021484375e-06 	 2.0503997802734375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:40.432716 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.0052912235260009766 	 0.00897359848022461 	 2.1696090698242188e-05 	 4.9114227294921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:40.952706 test begin: paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.004828691482543945 	 0.007495403289794922 	 8.106231689453125e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:42.018416 test begin: paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 76204836 	 1000 	 0.004705190658569336 	 0.010342836380004883 	 9.5367431640625e-06 	 2.0265579223632812e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:43.465474 test begin: paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.007340192794799805 	 0.007448673248291016 	 7.152557373046875e-06 	 2.5510787963867188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:43.956260 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401660 	 1000 	 0.0046961307525634766 	 0.007337331771850586 	 5.7220458984375e-06 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:44.445959 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), ) 	 25401660 	 1000 	 0.004662990570068359 	 0.007210731506347656 	 5.9604644775390625e-06 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:45.106287 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 25401654 	 1000 	 0.004736185073852539 	 0.007432222366333008 	 7.152557373046875e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:45.589621 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.005275249481201172 	 0.0073108673095703125 	 9.775161743164062e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:46.081871 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.004691362380981445 	 0.007240772247314453 	 7.152557373046875e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:46.613126 test begin: paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.004730701446533203 	 0.00727391242980957 	 6.198883056640625e-06 	 1.9311904907226562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:47.099113 test begin: paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), ) 	 25401660 	 1000 	 0.0022368431091308594 	 0.006345033645629883 	 7.152557373046875e-06 	 1.811981201171875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:47.669948 test begin: paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401900 	 1000 	 0.00482940673828125 	 0.010134696960449219 	 8.821487426757812e-06 	 2.1219253540039062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:48.229623 test begin: paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), ) 	 76204980 	 1000 	 0.004885673522949219 	 0.00736546516418457 	 9.059906005859375e-06 	 2.2411346435546875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:49.862572 test begin: paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401654 	 1000 	 0.004771232604980469 	 0.0072214603424072266 	 9.059906005859375e-06 	 2.384185791015625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:50.475809 test begin: paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), ) 	 76204818 	 1000 	 0.0047914981842041016 	 0.007326602935791016 	 6.9141387939453125e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:51.909622 test begin: paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), ) 	 25401630 	 1000 	 0.002223968505859375 	 0.0062558650970458984 	 8.344650268554688e-06 	 1.6689300537109375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:52.403920 test begin: paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401870 	 1000 	 0.004791736602783203 	 0.007390260696411133 	 6.4373016357421875e-06 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:52.902844 test begin: paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), ) 	 76204890 	 1000 	 0.004876613616943359 	 0.010375261306762695 	 9.775161743164062e-06 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:54.588116 test begin: paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), ) 	 25401656 	 1000 	 0.004755496978759766 	 0.007157087326049805 	 1.0728836059570312e-05 	 1.8596649169921875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:55.092842 test begin: paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), ) 	 76204824 	 1000 	 0.004742622375488281 	 0.00748133659362793 	 6.9141387939453125e-06 	 1.9788742065429688e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:56.541659 test begin: paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), ) 	 25401640 	 1000 	 0.002217531204223633 	 0.006482839584350586 	 8.821487426757812e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:57.084907 test begin: paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), ) 	 25401880 	 1000 	 0.004833221435546875 	 0.0074062347412109375 	 7.152557373046875e-06 	 2.1457672119140625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:57.576869 test begin: paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
[Prof] paddle.atleast_3d 	 paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), ) 	 76204920 	 1000 	 0.004857778549194336 	 0.007300853729248047 	 6.9141387939453125e-06 	 1.71661376953125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:59.023838 test begin: paddle.bincount(Tensor([25401601],"int64"), minlength=Tensor([1],"int32"), )
[Prof] paddle.bincount 	 paddle.bincount(Tensor([25401601],"int64"), minlength=Tensor([1],"int32"), ) 	 25401602 	 1000 	 1.0009748935699463 	 0.8306305408477783 	 0.0005125999450683594 	 0.0004711151123046875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:02.572317 test begin: paddle.bincount(Tensor([50803201],"int32"), weights=Tensor([50803201],"float32"), )
[Prof] paddle.bincount 	 paddle.bincount(Tensor([50803201],"int32"), weights=Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 1.9798872470855713 	 1.446082592010498 	 0.0012297630310058594 	 0.001064300537109375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:07.538813 test begin: paddle.bincount(x=Tensor([50803201],"int32"), weights=Tensor([50803201],"int32"), )
[Prof] paddle.bincount 	 paddle.bincount(x=Tensor([50803201],"int32"), weights=Tensor([50803201],"int32"), ) 	 101606402 	 1000 	 1.782651424407959 	 1.8095147609710693 	 0.001018524169921875 	 0.0009603500366210938 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:12.561201 test begin: paddle.bitwise_and(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.4489481449127197 	 0.4520578384399414 	 0.4399418830871582 	 0.43784260749816895 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:15.415401 test begin: paddle.bitwise_and(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.4483799934387207 	 0.45043277740478516 	 0.4325854778289795 	 0.43172764778137207 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:18.257022 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.44800448417663574 	 0.45183277130126953 	 0.439056396484375 	 0.4394509792327881 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:21.092240 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), ) 	 203213880 	 1000 	 0.44842958450317383 	 0.4503295421600342 	 0.43875598907470703 	 0.43737268447875977 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:24.150850 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), ) 	 101607264 	 1000 	 0.11790895462036133 	 0.11704325675964355 	 0.10216879844665527 	 0.09823918342590332 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:25.863872 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), ) 	 101607264 	 1000 	 0.4497344493865967 	 0.44669055938720703 	 0.44062328338623047 	 0.4343729019165039 	 None 	 None 	 None 	 None 	 
2025-07-27 20:59:27.839663 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), ) 	 203213664 	 1000 	 0.4489247798919678 	 0.4532945156097412 	 0.4399714469909668 	 0.4382340908050537 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:42.454664 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
W0727 19:17:43.375463 159962 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.18374013900756836 	 0.22938990592956543 	 0.1688838005065918 	 0.21396446228027344 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:43.955456 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.3148212432861328 	 0.48023056983947754 	 0.30485105514526367 	 0.46680688858032227 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:45.741735 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.2966737747192383 	 0.30838513374328613 	 0.28641510009765625 	 0.2951376438140869 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:46.929473 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), ) 	 101608560 	 1000 	 0.11731839179992676 	 0.11629176139831543 	 0.10129523277282715 	 0.09719491004943848 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:48.592063 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), ) 	 101608560 	 1000 	 0.45050859451293945 	 0.4467122554779053 	 0.4413747787475586 	 0.43465566635131836 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:50.710581 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), ) 	 203214960 	 1000 	 0.44976234436035156 	 0.4503357410430908 	 0.44075584411621094 	 0.43815159797668457 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:53.612702 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.1857013702392578 	 0.23072433471679688 	 0.1752629280090332 	 0.21423697471618652 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:54.947825 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 101610720 	 1000 	 0.11844038963317871 	 0.11627626419067383 	 0.1025400161743164 	 0.09773850440979004 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:56.606503 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29669952392578125 	 0.3080286979675293 	 0.2862424850463867 	 0.29477620124816895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:57.803446 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 101610720 	 1000 	 0.45061159133911133 	 0.4468238353729248 	 0.4414668083190918 	 0.42978429794311523 	 None 	 None 	 None 	 None 	 
2025-07-27 19:17:59.878705 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.346097469329834 	 0.47889161109924316 	 0.3288407325744629 	 0.45903921127319336 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:01.707970 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 203217120 	 1000 	 0.44899582862854004 	 0.45035266876220703 	 0.43987607955932617 	 0.4382927417755127 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:04.627682 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), ) 	 101607480 	 1000 	 0.11829137802124023 	 0.1154015064239502 	 0.10928630828857422 	 0.10306286811828613 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:06.275649 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), ) 	 101607480 	 1000 	 0.4506852626800537 	 0.44877028465270996 	 0.44153738021850586 	 0.4344639778137207 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:08.376598 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.1185450553894043 	 0.1183629035949707 	 0.10270142555236816 	 0.09686708450317383 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:10.077977 test begin: paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45087766647338867 	 0.4470808506011963 	 0.4415137767791748 	 0.43470239639282227 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:12.286140 test begin: paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11823248863220215 	 0.11551332473754883 	 0.10945391654968262 	 0.10304665565490723 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:13.945541 test begin: paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4505581855773926 	 0.44673991203308105 	 0.44134068489074707 	 0.43477892875671387 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:16.044838 test begin: paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11827778816223145 	 0.11565065383911133 	 0.10932016372680664 	 0.10307955741882324 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:17.669118 test begin: paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45071864128112793 	 0.44672369956970215 	 0.4413571357727051 	 0.43419814109802246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:19.683413 test begin: paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101608560 	 1000 	 0.11900568008422852 	 0.1161959171295166 	 0.1030275821685791 	 0.09739851951599121 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:21.448077 test begin: paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101608560 	 1000 	 0.4505748748779297 	 0.44669437408447266 	 0.4414668083190918 	 0.43488383293151855 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:23.497241 test begin: paddle.bitwise_and(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_and 	 paddle.bitwise_and(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214960 	 1000 	 0.45185256004333496 	 0.452347993850708 	 0.4401969909667969 	 0.4380533695220947 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:29.950665 test begin: paddle.bitwise_invert(Tensor([12700801, 4, 1],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([12700801, 4, 1],"int32"), ) 	 50803204 	 1000 	 0.2966301441192627 	 0.30252814292907715 	 0.28122663497924805 	 0.2800178527832031 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:31.165388 test begin: paddle.bitwise_invert(Tensor([2, 1270081, 4, 5],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([2, 1270081, 4, 5],"int32"), ) 	 50803240 	 1000 	 0.29605817794799805 	 0.29781556129455566 	 0.2812206745147705 	 0.2801640033721924 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:32.340476 test begin: paddle.bitwise_invert(Tensor([2, 3, 1693441, 5],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([2, 3, 1693441, 5],"int32"), ) 	 50803230 	 1000 	 0.2970254421234131 	 0.29781150817871094 	 0.28768062591552734 	 0.2863144874572754 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:33.543648 test begin: paddle.bitwise_invert(Tensor([2, 3, 4, 2116801],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([2, 3, 4, 2116801],"int32"), ) 	 50803224 	 1000 	 0.2986741065979004 	 0.29946136474609375 	 0.28113651275634766 	 0.2798466682434082 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:34.725492 test begin: paddle.bitwise_invert(Tensor([3, 16934401, 1],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([3, 16934401, 1],"int32"), ) 	 50803203 	 1000 	 1.0442290306091309 	 0.3088197708129883 	 0.287062406539917 	 0.279829740524292 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:39.198298 test begin: paddle.bitwise_invert(Tensor([3, 4, 4233601],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([3, 4, 4233601],"int32"), ) 	 50803212 	 1000 	 0.29659032821655273 	 0.3049812316894531 	 0.28118228912353516 	 0.2800900936126709 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:40.400276 test begin: paddle.bitwise_invert(Tensor([846721, 3, 4, 5],"int32"), )
[Prof] paddle.bitwise_invert 	 paddle.bitwise_invert(Tensor([846721, 3, 4, 5],"int32"), ) 	 50803260 	 1000 	 0.29602766036987305 	 0.2979011535644531 	 0.28109288215637207 	 0.2803192138671875 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:41.591753 test begin: paddle.bitwise_left_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), ) 	 101607000 	 1000 	 0.45066356658935547 	 0.44677305221557617 	 0.43469929695129395 	 0.42856597900390625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:43.670682 test begin: paddle.bitwise_left_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), ) 	 101606800 	 1000 	 0.4505434036254883 	 0.4467191696166992 	 0.4345569610595703 	 0.4284994602203369 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:45.736065 test begin: paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), ) 	 203213200 	 1000 	 0.4479045867919922 	 0.45020174980163574 	 0.4385833740234375 	 0.4383523464202881 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:48.756363 test begin: paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, ) 	 203213200 	 1000 	 0.448117733001709 	 0.4501824378967285 	 0.43897318840026855 	 0.4316403865814209 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:51.686551 test begin: paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), ) 	 203213400 	 1000 	 0.4482851028442383 	 0.45833754539489746 	 0.4390411376953125 	 0.4380202293395996 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:54.611610 test begin: paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
[Prof] paddle.bitwise_left_shift 	 paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, ) 	 203213400 	 1000 	 0.44807910919189453 	 0.450345516204834 	 0.4320042133331299 	 0.43176841735839844 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:57.612153 test begin: paddle.bitwise_not(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101607120 	 1000 	 0.2993028163909912 	 0.2963378429412842 	 0.29065632820129395 	 0.28298497200012207 	 None 	 None 	 None 	 None 	 
2025-07-27 19:18:59.197573 test begin: paddle.bitwise_not(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), ) 	 101607120 	 1000 	 0.2984654903411865 	 0.29631471633911133 	 0.289764404296875 	 0.2846221923828125 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:00.768985 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), ) 	 101607120 	 1000 	 0.29809093475341797 	 0.29818081855773926 	 0.28987646102905273 	 0.28458189964294434 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:02.353054 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), ) 	 101606940 	 1000 	 0.29848265647888184 	 0.2962615489959717 	 0.29018712043762207 	 0.2844886779785156 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:03.981111 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), ) 	 50803632 	 1000 	 0.08971762657165527 	 0.08082079887390137 	 0.0814657211303711 	 0.068817138671875 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:04.843070 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), ) 	 50803632 	 1000 	 0.2967398166656494 	 0.2978641986846924 	 0.28790831565856934 	 0.2860434055328369 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:06.008831 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), ) 	 101606832 	 1000 	 0.29839348793029785 	 0.29631662368774414 	 0.2901449203491211 	 0.28458333015441895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:07.622122 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), ) 	 50804280 	 1000 	 0.08852195739746094 	 0.07983231544494629 	 0.08014059066772461 	 0.06783747673034668 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:08.488016 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), ) 	 50804280 	 1000 	 0.29674553871154785 	 0.2978074550628662 	 0.2878286838531494 	 0.28617095947265625 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:09.643265 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), ) 	 101607480 	 1000 	 0.2979750633239746 	 0.2980935573577881 	 0.28969621658325195 	 0.28460097312927246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:11.224803 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 50805360 	 1000 	 0.08976435661315918 	 0.07988715171813965 	 0.08147096633911133 	 0.06795668601989746 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:12.081136 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 50805360 	 1000 	 0.2967092990875244 	 0.2998161315917969 	 0.28769421577453613 	 0.2860376834869385 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:13.249151 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 101608560 	 1000 	 0.29868149757385254 	 0.2962958812713623 	 0.28897571563720703 	 0.28456783294677734 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:14.806032 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), ) 	 50803740 	 1000 	 0.08963894844055176 	 0.07922673225402832 	 0.08128547668457031 	 0.06733441352844238 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:15.668990 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), ) 	 50803740 	 1000 	 0.29598379135131836 	 0.29784512519836426 	 0.28697705268859863 	 0.2859017848968506 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:16.823486 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), ) 	 50803920 	 1000 	 0.08965849876403809 	 0.0792701244354248 	 0.08123326301574707 	 0.06725811958312988 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:17.683662 test begin: paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), ) 	 50803920 	 1000 	 0.29564881324768066 	 0.2978341579437256 	 0.28328657150268555 	 0.2862682342529297 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:18.841774 test begin: paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), ) 	 50803920 	 1000 	 0.08965945243835449 	 0.0792398452758789 	 0.08133125305175781 	 0.06733441352844238 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:19.710918 test begin: paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), ) 	 50803920 	 1000 	 0.29561352729797363 	 0.2978038787841797 	 0.28719639778137207 	 0.28618860244750977 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:20.875080 test begin: paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50803920 	 1000 	 0.08963346481323242 	 0.0792384147644043 	 0.08133077621459961 	 0.06729960441589355 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:21.735266 test begin: paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50803920 	 1000 	 0.29571533203125 	 0.2978250980377197 	 0.28728175163269043 	 0.28627467155456543 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:22.900578 test begin: paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50804280 	 1000 	 0.08957529067993164 	 0.07986116409301758 	 0.0812540054321289 	 0.06799817085266113 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:23.760122 test begin: paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50804280 	 1000 	 0.29579639434814453 	 0.2978191375732422 	 0.2873404026031494 	 0.28620171546936035 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:24.955094 test begin: paddle.bitwise_not(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_not 	 paddle.bitwise_not(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101607480 	 1000 	 0.3004424571990967 	 0.29630327224731445 	 0.29017043113708496 	 0.2846646308898926 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:26.519308 test begin: paddle.bitwise_or(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.44914793968200684 	 0.4503345489501953 	 0.44019579887390137 	 0.43831634521484375 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:29.420545 test begin: paddle.bitwise_or(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.45079970359802246 	 0.45499610900878906 	 0.4397866725921631 	 0.43805766105651855 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:34.851701 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.45615482330322266 	 0.6882209777832031 	 0.4407169818878174 	 0.43798136711120605 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:40.501406 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), ) 	 203213880 	 1000 	 0.44898080825805664 	 0.4503347873687744 	 0.43996548652648926 	 0.4383547306060791 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:43.419310 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), ) 	 101607264 	 1000 	 0.11831951141357422 	 0.11721134185791016 	 0.10928511619567871 	 0.10377693176269531 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:45.060992 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), ) 	 101607264 	 1000 	 0.45060014724731445 	 0.4467592239379883 	 0.4415271282196045 	 0.43473148345947266 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:47.132175 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), ) 	 203213664 	 1000 	 0.44912266731262207 	 0.45030856132507324 	 0.4401571750640869 	 0.43823862075805664 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:50.047614 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.156019926071167 	 0.2312002182006836 	 0.14629578590393066 	 0.21422290802001953 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:51.144980 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.3147768974304199 	 0.4800834655761719 	 0.3048429489135742 	 0.4669957160949707 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:52.922783 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29671430587768555 	 0.310222864151001 	 0.2866957187652588 	 0.2949504852294922 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:54.110267 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), ) 	 101608560 	 1000 	 0.11827802658081055 	 0.11578059196472168 	 0.109039306640625 	 0.10214400291442871 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:55.798072 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), ) 	 101608560 	 1000 	 0.4507486820220947 	 0.4466893672943115 	 0.44141674041748047 	 0.4347071647644043 	 None 	 None 	 None 	 None 	 
2025-07-27 19:19:57.908210 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), ) 	 203214960 	 1000 	 0.44899654388427734 	 0.45038771629333496 	 0.4397759437561035 	 0.43798065185546875 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:00.786642 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.1741960048675537 	 0.2273726463317871 	 0.16446685791015625 	 0.2140495777130127 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:01.882574 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 101610720 	 1000 	 0.11838006973266602 	 0.11593174934387207 	 0.10933136940002441 	 0.10360217094421387 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:03.583858 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29682207107543945 	 0.308135986328125 	 0.2861757278442383 	 0.29511499404907227 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:04.774355 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 101610720 	 1000 	 0.45052003860473633 	 0.4467799663543701 	 0.4414525032043457 	 0.434873104095459 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:06.813437 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.34598588943481445 	 0.478759765625 	 0.33569908142089844 	 0.4653053283691406 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:08.621401 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 203217120 	 1000 	 0.45034003257751465 	 0.45031261444091797 	 0.43987607955932617 	 0.43835020065307617 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:11.489779 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), ) 	 101607480 	 1000 	 0.11774468421936035 	 0.11493825912475586 	 0.10894513130187988 	 0.10257649421691895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:13.130055 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), ) 	 101607480 	 1000 	 0.4506702423095703 	 0.4489915370941162 	 0.4350855350494385 	 0.428178071975708 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:15.324884 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11808943748474121 	 0.11509943008422852 	 0.10902237892150879 	 0.10266542434692383 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:16.949386 test begin: paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4516754150390625 	 0.44661712646484375 	 0.44145894050598145 	 0.43462157249450684 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:19.008085 test begin: paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11801004409790039 	 0.11498427391052246 	 0.10741686820983887 	 0.10255241394042969 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:20.633053 test begin: paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4505598545074463 	 0.4466235637664795 	 0.44155192375183105 	 0.43469977378845215 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:22.672276 test begin: paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11796903610229492 	 0.11495399475097656 	 0.10917925834655762 	 0.10260748863220215 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:24.292067 test begin: paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45064520835876465 	 0.44830965995788574 	 0.44095826148986816 	 0.4343302249908447 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:26.345703 test begin: paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101608560 	 1000 	 0.11817622184753418 	 0.11985945701599121 	 0.1089620590209961 	 0.10356473922729492 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:27.988272 test begin: paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101608560 	 1000 	 0.45287561416625977 	 0.446638822555542 	 0.44150257110595703 	 0.43474388122558594 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:30.029454 test begin: paddle.bitwise_or(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_or 	 paddle.bitwise_or(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214960 	 1000 	 0.44894909858703613 	 0.4502410888671875 	 0.4400038719177246 	 0.43809938430786133 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:32.893660 test begin: paddle.bitwise_right_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), ) 	 101607000 	 1000 	 0.4538857936859131 	 0.4610004425048828 	 0.44155097007751465 	 0.43372201919555664 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:36.892701 test begin: paddle.bitwise_right_shift(Tensor([200, 127009],"int64"), Tensor([200, 127009],"int64"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([200, 127009],"int64"), Tensor([200, 127009],"int64"), ) 	 50803600 	 1000 	 0.9627091884613037 	 0.45291805267333984 	 0.4329500198364258 	 0.43306922912597656 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:42.678275 test begin: paddle.bitwise_right_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), ) 	 101606800 	 1000 	 0.4505288600921631 	 0.4466698169708252 	 0.44162511825561523 	 0.4343888759613037 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:44.733812 test begin: paddle.bitwise_right_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), ) 	 203213200 	 1000 	 0.4476966857910156 	 0.45015525817871094 	 0.4319746494293213 	 0.4312777519226074 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:47.722049 test begin: paddle.bitwise_right_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), ) 	 203213400 	 1000 	 0.4480016231536865 	 0.4502527713775635 	 0.43900489807128906 	 0.4378788471221924 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:50.711683 test begin: paddle.bitwise_right_shift(Tensor([84673, 300],"int64"), Tensor([84673, 300],"int64"), )
[Prof] paddle.bitwise_right_shift 	 paddle.bitwise_right_shift(Tensor([84673, 300],"int64"), Tensor([84673, 300],"int64"), ) 	 50803800 	 1000 	 0.4489262104034424 	 0.44594478607177734 	 0.43215250968933105 	 0.4269876480102539 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:20:52.489117 test begin: paddle.bitwise_xor(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.45046281814575195 	 0.45319318771362305 	 0.43576908111572266 	 0.43819403648376465 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:55.369881 test begin: paddle.bitwise_xor(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.44904208183288574 	 0.45316457748413086 	 0.4402430057525635 	 0.43799400329589844 	 None 	 None 	 None 	 None 	 
2025-07-27 19:20:58.375920 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), ) 	 203214240 	 1000 	 0.44959068298339844 	 0.4503147602081299 	 0.4408442974090576 	 0.4384329319000244 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:01.251373 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), ) 	 203213880 	 1000 	 0.44905829429626465 	 0.4503185749053955 	 0.4337158203125 	 0.4320697784423828 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:04.199686 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), ) 	 101607264 	 1000 	 0.7180335521697998 	 0.12288975715637207 	 0.10934925079345703 	 0.10485124588012695 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:07.492956 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), ) 	 101607264 	 1000 	 0.45318603515625 	 0.4467592239379883 	 0.4350001811981201 	 0.4283723831176758 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:10.935220 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), ) 	 203213664 	 1000 	 0.4487171173095703 	 0.4502739906311035 	 0.43988609313964844 	 0.43816447257995605 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:13.791324 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.1688535213470459 	 0.2278270721435547 	 0.15863823890686035 	 0.21401381492614746 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:14.967828 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.31615614891052246 	 0.4801318645477295 	 0.2974562644958496 	 0.4568755626678467 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:16.731544 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29670286178588867 	 0.3080425262451172 	 0.2797682285308838 	 0.28845763206481934 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:17.929704 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), ) 	 101608560 	 1000 	 0.11826157569885254 	 0.11613988876342773 	 0.10256052017211914 	 0.09762144088745117 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:19.570670 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), ) 	 101608560 	 1000 	 0.45060086250305176 	 0.44663524627685547 	 0.43492627143859863 	 0.428347110748291 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:21.637331 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), ) 	 203214960 	 1000 	 0.44902539253234863 	 0.450991153717041 	 0.4401240348815918 	 0.43806958198547363 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:24.497208 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 50807520 	 1000 	 0.1775038242340088 	 0.22782063484191895 	 0.16773509979248047 	 0.21448397636413574 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:25.594035 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), ) 	 101610720 	 1000 	 0.11835670471191406 	 0.1162557601928711 	 0.10928463935852051 	 0.10404372215270996 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:27.200064 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 50807520 	 1000 	 0.29679131507873535 	 0.30819272994995117 	 0.28644776344299316 	 0.29499363899230957 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:28.372369 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), ) 	 101610720 	 1000 	 0.450575590133667 	 0.4467282295227051 	 0.44168877601623535 	 0.4349205493927002 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:30.422395 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 101610720 	 1000 	 0.34613871574401855 	 0.4786536693572998 	 0.33602023124694824 	 0.4657254219055176 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:32.283533 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), ) 	 203217120 	 1000 	 0.46454620361328125 	 0.4503343105316162 	 0.439868688583374 	 0.4384627342224121 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:35.153440 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), ) 	 101607480 	 1000 	 0.11781120300292969 	 0.12970852851867676 	 0.1089777946472168 	 0.10319113731384277 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:39.540906 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), ) 	 101607480 	 1000 	 0.4515504837036133 	 0.44667553901672363 	 0.4418060779571533 	 0.434617280960083 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:41.624274 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.5538382530212402 	 0.12106037139892578 	 0.10870623588562012 	 0.1030571460723877 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:45.103019 test begin: paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.4531288146972656 	 0.4466893672943115 	 0.434934139251709 	 0.43466687202453613 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:48.477717 test begin: paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11803936958312988 	 0.11551523208618164 	 0.10217714309692383 	 0.09682631492614746 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:50.109539 test begin: paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45058655738830566 	 0.4467182159423828 	 0.43213462829589844 	 0.42791247367858887 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:52.153354 test begin: paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101607840 	 1000 	 0.11803531646728516 	 0.11548590660095215 	 0.10941791534423828 	 0.1033163070678711 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:53.870184 test begin: paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101607840 	 1000 	 0.45091891288757324 	 0.4466397762298584 	 0.4417383670806885 	 0.43477487564086914 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:56.010459 test begin: paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), ) 	 101608560 	 1000 	 0.1183633804321289 	 0.1161494255065918 	 0.10248923301696777 	 0.09757351875305176 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:57.689817 test begin: paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), ) 	 101608560 	 1000 	 0.4506347179412842 	 0.4466266632080078 	 0.4416079521179199 	 0.4345736503601074 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:59.744849 test begin: paddle.bitwise_xor(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
[Prof] paddle.bitwise_xor 	 paddle.bitwise_xor(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), ) 	 203214960 	 1000 	 0.4485127925872803 	 0.4502847194671631 	 0.43964695930480957 	 0.43832874298095703 	 None 	 None 	 None 	 None 	 
2025-07-27 19:22:02.663331 test begin: paddle.bmm(Tensor([112, 1043, 435],"float32"), Tensor([112, 435, 64],"float32"), )
/usr/local/lib/python3.10/dist-packages/torch/autograd/graph.py:824: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at /pytorch/aten/src/ATen/cuda/CublasHandlePool.cpp:181.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[Prof] paddle.bmm 	 paddle.bmm(Tensor([112, 1043, 435],"float32"), Tensor([112, 435, 64],"float32"), ) 	 53933040 	 1000 	 0.896702766418457 	 0.8969302177429199 	 0.8840928077697754 	 0.8805103302001953 	 1.613173007965088 	 1.6134319305419922 	 0.824254035949707 	 0.8243980407714844 	 
2025-07-27 19:22:09.097906 test begin: paddle.bmm(Tensor([112, 435, 435],"float32"), Tensor([112, 435, 1043],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([112, 435, 435],"float32"), Tensor([112, 435, 1043],"float32"), ) 	 72008160 	 1000 	 3.3685877323150635 	 3.371166944503784 	 3.3560903072357178 	 3.3555660247802734 	 6.957798957824707 	 6.959956169128418 	 3.556623935699463 	 3.5618362426757812 	 
2025-07-27 19:22:31.843605 test begin: paddle.bmm(Tensor([14, 81, 7332],"float32"), Tensor([14, 7332, 512],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([14, 81, 7332],"float32"), Tensor([14, 7332, 512],"float32"), ) 	 60870264 	 1000 	 1.479137897491455 	 1.654024600982666 	 1.4666919708251953 	 1.4634969234466553 	 1.4281857013702393 	 1.4285686016082764 	 0.729698657989502 	 0.7299079895019531 	 
2025-07-27 19:22:40.993264 test begin: paddle.bmm(Tensor([1825, 435, 435],"float32"), Tensor([1825, 435, 64],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([1825, 435, 435],"float32"), Tensor([1825, 435, 64],"float32"), ) 	 396143625 	 1000 	 6.052532434463501 	 6.0399744510650635 	 6.028975486755371 	 6.024191856384277 	 9.997668027877808 	 9.99494218826294 	 5.108307361602783 	 5.107539415359497 	 
2025-07-27 19:23:23.406036 test begin: paddle.bmm(Tensor([26, 1024, 1024],"float32"), Tensor([26, 1024, 1909],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([26, 1024, 1024],"float32"), Tensor([26, 1024, 1909],"float32"), ) 	 78088192 	 1000 	 5.94748592376709 	 5.946393966674805 	 5.933737754821777 	 5.930699825286865 	 12.073520421981812 	 12.079821825027466 	 6.169865846633911 	 6.175912857055664 	 
2025-07-27 19:24:01.676592 test begin: paddle.bmm(Tensor([26, 1909, 1024],"float32"), Tensor([26, 1024, 12],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([26, 1909, 1024],"float32"), Tensor([26, 1024, 12],"float32"), ) 	 51144704 	 1000 	 0.8344042301177979 	 0.8334136009216309 	 0.8209578990936279 	 0.8176701068878174 	 0.9428226947784424 	 0.9428670406341553 	 0.48169374465942383 	 0.48174023628234863 	 
2025-07-27 19:24:06.094724 test begin: paddle.bmm(Tensor([269, 435, 435],"float32"), Tensor([269, 435, 64],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([269, 435, 435],"float32"), Tensor([269, 435, 64],"float32"), ) 	 58390485 	 1000 	 0.901404857635498 	 0.9014468193054199 	 0.8889904022216797 	 0.8853263854980469 	 1.4952754974365234 	 1.4954314231872559 	 0.7640154361724854 	 0.7642297744750977 	 
2025-07-27 19:24:11.954686 test begin: paddle.bmm(Tensor([4, 1733, 7332],"float32"), Tensor([4, 7332, 512],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([4, 1733, 7332],"float32"), Tensor([4, 7332, 512],"float32"), ) 	 65841360 	 1000 	 4.408490419387817 	 4.406902551651001 	 4.3960278034210205 	 4.391144514083862 	 6.321336030960083 	 6.319946765899658 	 3.2308685779571533 	 3.2238030433654785 	 
2025-07-27 19:24:34.537392 test begin: paddle.bmm(Tensor([4, 81, 156801],"float32"), Tensor([4, 156801, 512],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([4, 81, 156801],"float32"), Tensor([4, 156801, 512],"float32"), ) 	 371931972 	 1000 	 31.418993949890137 	 31.43704104423523 	 31.406713008880615 	 31.414313077926636 	 8.228498220443726 	 8.229390144348145 	 4.204801082611084 	 4.204566240310669 	 
2025-07-27 19:26:00.070508 test begin: paddle.bmm(Tensor([4, 81, 24807],"float32"), Tensor([4, 24807, 512],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([4, 81, 24807],"float32"), Tensor([4, 24807, 512],"float32"), ) 	 58842204 	 1000 	 4.981656789779663 	 4.982094764709473 	 4.961371183395386 	 4.959408283233643 	 1.3949358463287354 	 1.3946423530578613 	 0.712740421295166 	 0.7125883102416992 	 
2025-07-27 19:26:14.643233 test begin: paddle.bmm(Tensor([4, 81, 7332],"float32"), Tensor([4, 7332, 1733],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([4, 81, 7332],"float32"), Tensor([4, 7332, 1733],"float32"), ) 	 53200992 	 1000 	 1.4793620109558105 	 1.4795219898223877 	 1.4587321281433105 	 1.4566309452056885 	 1.647268295288086 	 1.6413092613220215 	 0.841578483581543 	 0.8388793468475342 	 
2025-07-27 19:26:21.818940 test begin: paddle.bmm(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 12],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 12],"float32"), ) 	 51982336 	 1000 	 0.8350515365600586 	 0.8339064121246338 	 0.8215272426605225 	 0.8187506198883057 	 0.9945240020751953 	 0.9949488639831543 	 0.5081379413604736 	 0.5084543228149414 	 
2025-07-27 19:26:26.316737 test begin: paddle.bmm(Tensor([86, 81, 7332],"float32"), Tensor([86, 7332, 512],"float32"), )
[Prof] paddle.bmm 	 paddle.bmm(Tensor([86, 81, 7332],"float32"), Tensor([86, 7332, 512],"float32"), ) 	 373917336 	 1000 	 5.8587377071380615 	 5.858126163482666 	 5.846312761306763 	 5.842495918273926 	 8.389641284942627 	 8.391420602798462 	 4.286334991455078 	 4.289122581481934 	 
2025-07-27 19:27:02.442106 test begin: paddle.broadcast_tensors(list[Tensor([127009, 200],"float64"),Tensor([127009, 200],"float64"),], )
[Prof] paddle.broadcast_tensors 	 paddle.broadcast_tensors(list[Tensor([127009, 200],"float64"),Tensor([127009, 200],"float64"),], ) 	 50803600 	 1000 	 0.6145880222320557 	 0.007180452346801758 	 0.31386828422546387 	 2.4318695068359375e-05 	 0.6258962154388428 	 0.061371803283691406 	 0.15987229347229004 	 4.0531158447265625e-05 	 
2025-07-27 19:27:05.842940 test begin: paddle.broadcast_tensors(list[Tensor([200, 127009],"float64"),Tensor([200, 127009],"float64"),], )
[Prof] paddle.broadcast_tensors 	 paddle.broadcast_tensors(list[Tensor([200, 127009],"float64"),Tensor([200, 127009],"float64"),], ) 	 50803600 	 1000 	 0.6146750450134277 	 0.006982564926147461 	 0.31401634216308594 	 1.9073486328125e-05 	 0.6258773803710938 	 0.06302475929260254 	 0.15986013412475586 	 6.127357482910156e-05 	 
2025-07-27 19:27:09.236075 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), ) 	 38102403 	 1000 	 1.3509862422943115 	 1.0473783016204834 	 1.3385748863220215 	 1.0295591354370117 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:15.035221 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), out_int32=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), out_int32=True, ) 	 38102403 	 1000 	 1.34257173538208 	 1.0371758937835693 	 1.3313946723937988 	 1.0255701541900635 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:18.206425 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), right=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), right=True, ) 	 38102403 	 1000 	 1.3502733707427979 	 1.0456247329711914 	 1.338822603225708 	 1.0342860221862793 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:21.394711 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), ) 	 25401606 	 1000 	 0.31716156005859375 	 0.3146953582763672 	 0.30651021003723145 	 0.3034706115722656 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:22.552264 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), out_int32=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), out_int32=True, ) 	 25401606 	 1000 	 0.2847018241882324 	 0.24548745155334473 	 0.2736327648162842 	 0.23388147354125977 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:23.598288 test begin: paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), right=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), right=True, ) 	 25401606 	 1000 	 0.3172323703765869 	 0.31505417823791504 	 0.3062279224395752 	 0.3023545742034912 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:24.747310 test begin: paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), ) 	 76204803 	 1000 	 2.7831132411956787 	 2.152009963989258 	 2.7724037170410156 	 2.140582323074341 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:31.235702 test begin: paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), out_int32=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), out_int32=True, ) 	 76204803 	 1000 	 2.7700510025024414 	 3.246610641479492 	 2.7508480548858643 	 2.1303770542144775 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:41.158946 test begin: paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), right=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), right=True, ) 	 76204803 	 1000 	 2.781850576400757 	 2.1568009853363037 	 2.7704286575317383 	 2.1449999809265137 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:47.552684 test begin: paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), ) 	 25401609 	 1000 	 0.010625123977661133 	 0.010963201522827148 	 1.33514404296875e-05 	 2.4557113647460938e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:48.112190 test begin: paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), out_int32=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), out_int32=True, ) 	 25401609 	 1000 	 0.011761665344238281 	 0.011519193649291992 	 1.3828277587890625e-05 	 4.172325134277344e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:48.629174 test begin: paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), right=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), right=True, ) 	 25401609 	 1000 	 0.011107683181762695 	 0.011257171630859375 	 1.3113021850585938e-05 	 2.956390380859375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:49.178111 test begin: paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), ) 	 25401608 	 1000 	 0.3167095184326172 	 0.31484222412109375 	 0.30564117431640625 	 0.3037595748901367 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:50.333003 test begin: paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), out_int32=True, ) 	 25401608 	 1000 	 0.2829477787017822 	 0.24472999572753906 	 0.2716639041900635 	 0.23287558555603027 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:51.380141 test begin: paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), right=True, )
[Prof] paddle.bucketize 	 paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), right=True, ) 	 25401608 	 1000 	 0.31641316413879395 	 0.31458568572998047 	 0.3055140972137451 	 0.30318593978881836 	 None 	 None 	 None 	 None 	 
2025-07-27 19:27:52.524115 test begin: paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5080],"complex128"),], )
[Prof] paddle.cartesian_prod 	 paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5080],"complex128"),], ) 	 5088 	 1000 	 0.06074190139770508 	 0.07019829750061035 	 3.790855407714844e-05 	 4.220008850097656e-05 	 8.614675283432007 	 0.17389392852783203 	 2.1989593505859375 	 4.3392181396484375e-05 	 
2025-07-27 19:28:01.505108 test begin: paddle.cartesian_prod(list[Tensor([40],"int32"),Tensor([40],"int32"),Tensor([508],"int32"),], )
[Prof] paddle.cartesian_prod 	 paddle.cartesian_prod(list[Tensor([40],"int32"),Tensor([40],"int32"),Tensor([508],"int32"),], ) 	 588 	 1000 	 0.06284070014953613 	 0.07386445999145508 	 0.004054546356201172 	 4.649162292480469e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:28:09.038208 test begin: paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([50803],"int32"),], )
[Prof] paddle.cartesian_prod 	 paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([50803],"int32"),], ) 	 50811 	 1000 	 0.06926608085632324 	 0.07081007957458496 	 0.010073423385620117 	 5.1021575927734375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:29:06.076447 test begin: paddle.cast(Tensor([1, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([1, 1, 32768, 32768],"float16"), dtype=Dtype(float16), ) 	 1073741824 	 1000 	 3.2360408306121826 	 0.0020079612731933594 	 1.6533758640289307 	 2.288818359375e-05 	 3.2344040870666504 	 0.05803728103637695 	 1.6527206897735596 	 4.38690185546875e-05 	 combined
2025-07-27 19:29:53.008639 test begin: paddle.cast(Tensor([128256, 793],"bfloat16"), Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([128256, 793],"bfloat16"), Dtype(float16), ) 	 101707008 	 1000 	 0.2983708381652832 	 0.5110981464385986 	 0.2891373634338379 	 0.4981672763824463 	 0.29807400703430176 	 0.5069565773010254 	 0.24107670783996582 	 0.41362953186035156 	 combined
2025-07-27 19:29:58.068639 test begin: paddle.cast(Tensor([2, 1, 1551, 32768],"float16"), dtype=Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([2, 1, 1551, 32768],"float16"), dtype=Dtype(float16), ) 	 101646336 	 1000 	 0.3101038932800293 	 0.0029845237731933594 	 0.2914447784423828 	 2.0265579223632812e-05 	 0.310225248336792 	 0.05301547050476074 	 0.2460789680480957 	 0.0003495216369628906 	 combined
2025-07-27 19:30:02.883794 test begin: paddle.cast(Tensor([2, 1, 32768, 1551],"float16"), dtype=Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([2, 1, 32768, 1551],"float16"), dtype=Dtype(float16), ) 	 101646336 	 1000 	 0.3100290298461914 	 0.0019788742065429688 	 0.2988734245300293 	 1.5735626220703125e-05 	 0.31017065048217773 	 0.04458284378051758 	 0.25534892082214355 	 6.127357482910156e-05 	 combined
2025-07-27 19:30:07.254356 test begin: paddle.cast(Tensor([2, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([2, 1, 32768, 32768],"float16"), dtype=Dtype(float16), ) 	 2147483648 	 1000 	 6.47161340713501 	 0.0029799938201904297 	 3.305436372756958 	 1.8596649169921875e-05 	 6.472775936126709 	 0.04608583450317383 	 3.3074655532836914 	 6.580352783203125e-05 	 combined
2025-07-27 19:31:50.107207 test begin: paddle.cast(Tensor([2, 1024, 50304],"float16"), dtype="float32", )
[Prof] paddle.cast 	 paddle.cast(Tensor([2, 1024, 50304],"float16"), dtype="float32", ) 	 103022592 	 1000 	 0.48842740058898926 	 0.5588526725769043 	 0.47681474685668945 	 0.5360574722290039 	 0.45708346366882324 	 0.4597609043121338 	 0.4038875102996826 	 0.3889460563659668 	 combined
2025-07-27 19:31:55.653406 test begin: paddle.cast(Tensor([33076, 3072],"bfloat16"), Dtype(float16), )
[Prof] paddle.cast 	 paddle.cast(Tensor([33076, 3072],"bfloat16"), Dtype(float16), ) 	 101609472 	 1000 	 0.2975618839263916 	 0.5108027458190918 	 0.28839683532714844 	 0.4978008270263672 	 0.2977786064147949 	 0.5067205429077148 	 0.24176311492919922 	 0.4330167770385742 	 combined
2025-07-27 19:32:00.722379 test begin: paddle.cast(Tensor([8, 1024, 12404],"float16"), dtype="float32", )
[Prof] paddle.cast 	 paddle.cast(Tensor([8, 1024, 12404],"float16"), dtype="float32", ) 	 101613568 	 1000 	 0.4817795753479004 	 0.551114559173584 	 0.4703490734100342 	 0.535968542098999 	 0.4510490894317627 	 0.4536871910095215 	 0.3978230953216553 	 0.38959503173828125 	 combined
2025-07-27 19:32:06.184978 test begin: paddle.cast(Tensor([8, 253, 50304],"float16"), dtype="float32", )
[Prof] paddle.cast 	 paddle.cast(Tensor([8, 253, 50304],"float16"), dtype="float32", ) 	 101815296 	 1000 	 0.48227739334106445 	 0.5503199100494385 	 0.4709012508392334 	 0.5369768142700195 	 0.451519250869751 	 0.45453858375549316 	 0.39821839332580566 	 0.39047813415527344 	 combined
2025-07-27 19:32:11.594202 test begin: paddle.cdist(Tensor([12700801, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
[Prof] paddle.cdist 	 paddle.cdist(Tensor([12700801, 4],"float32"), Tensor([1, 4],"float32"), p=1, ) 	 50803208 	 1000 	 0.6930751800537109 	 26.787602186203003 	 0.35405445098876953 	 26.76525115966797 	 8.379060983657837 	 14.232412815093994 	 2.8554115295410156 	 2.9038937091827393 	 
2025-07-27 19:33:02.888172 test begin: paddle.cdist(Tensor([6380, 7963],"float32"), Tensor([1, 7963],"float32"), p=1, )
[Prof] paddle.cdist 	 paddle.cdist(Tensor([6380, 7963],"float32"), Tensor([1, 7963],"float32"), p=1, ) 	 50811903 	 1000 	 0.4499540328979492 	 0.19423556327819824 	 0.22989439964294434 	 0.17281532287597656 	 2.1909217834472656 	 1.1747305393218994 	 0.7456958293914795 	 0.2397928237915039 	 
2025-07-27 19:33:07.751220 test begin: paddle.cdist(Tensor([8550, 5942],"float32"), Tensor([1, 5942],"float32"), p=1, )
[Prof] paddle.cdist 	 paddle.cdist(Tensor([8550, 5942],"float32"), Tensor([1, 5942],"float32"), p=1, ) 	 50810042 	 1000 	 0.4504280090332031 	 0.19376039505004883 	 0.23011136054992676 	 0.17192816734313965 	 2.2000911235809326 	 1.1615681648254395 	 0.7489259243011475 	 0.23709964752197266 	 
2025-07-27 19:33:12.606808 test begin: paddle.cdist(Tensor([900, 56449],"float32"), Tensor([1, 56449],"float32"), p=1, )
[Prof] paddle.cdist 	 paddle.cdist(Tensor([900, 56449],"float32"), Tensor([1, 56449],"float32"), p=1, ) 	 50860549 	 1000 	 0.47696399688720703 	 0.2900516986846924 	 0.16232728958129883 	 0.2684817314147949 	 2.1719553470611572 	 1.2205145359039307 	 0.738957405090332 	 0.3117516040802002 	 
2025-07-27 19:33:17.636091 test begin: paddle.ceil(Tensor([12404, 32, 128],"float32"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([12404, 32, 128],"float32"), ) 	 50806784 	 1000 	 0.2959706783294678 	 0.29793882369995117 	 0.2802441120147705 	 0.2805325984954834 	 0.1340656280517578 	 0.13413166999816895 	 0.07408332824707031 	 0.05392313003540039 	 
2025-07-27 19:33:20.217723 test begin: paddle.ceil(Tensor([141121, 6, 3, 1, 2, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([141121, 6, 3, 1, 2, 5],"float64"), ) 	 25401780 	 1000 	 0.2977414131164551 	 0.2985215187072754 	 0.2892899513244629 	 0.2869257926940918 	 0.13388872146606445 	 0.13447260856628418 	 0.08300971984863281 	 0.07181859016418457 	 
2025-07-27 19:33:22.132150 test begin: paddle.ceil(Tensor([3, 141121, 3, 4, 1, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 141121, 3, 4, 1, 5],"float64"), ) 	 25401780 	 1000 	 0.2977569103240967 	 0.29842042922973633 	 0.28545403480529785 	 0.28699517250061035 	 0.13387203216552734 	 0.1345198154449463 	 0.08333969116210938 	 0.06682682037353516 	 
2025-07-27 19:33:24.054425 test begin: paddle.ceil(Tensor([3, 282241, 3, 1, 2, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 282241, 3, 1, 2, 5],"float64"), ) 	 25401690 	 1000 	 0.29784274101257324 	 0.29842305183410645 	 0.28916168212890625 	 0.28075242042541504 	 0.1339406967163086 	 0.13456153869628906 	 0.07478141784667969 	 0.05808258056640625 	 
2025-07-27 19:33:26.035156 test begin: paddle.ceil(Tensor([3, 6, 141121, 1, 2, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 141121, 1, 2, 5],"float64"), ) 	 25401780 	 1000 	 0.29771971702575684 	 0.2983419895172119 	 0.2892463207244873 	 0.28688764572143555 	 0.13388323783874512 	 0.13457989692687988 	 0.08320069313049316 	 0.07187104225158691 	 
2025-07-27 19:33:27.952392 test begin: paddle.ceil(Tensor([3, 6, 3, 1, 2, 235201],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 1, 2, 235201],"float64"), ) 	 25401708 	 1000 	 0.29746341705322266 	 0.2984294891357422 	 0.28895115852355957 	 0.2869274616241455 	 0.13383984565734863 	 0.1344585418701172 	 0.0831136703491211 	 0.07171845436096191 	 
2025-07-27 19:33:29.879915 test begin: paddle.ceil(Tensor([3, 6, 3, 1, 94081, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 1, 94081, 5],"float64"), ) 	 25401870 	 1000 	 0.2979245185852051 	 0.2985055446624756 	 0.28910255432128906 	 0.28035545349121094 	 0.13393020629882812 	 0.1344754695892334 	 0.07296347618103027 	 0.05052995681762695 	 
2025-07-27 19:33:31.805162 test begin: paddle.ceil(Tensor([3, 6, 3, 4, 1, 117601],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 4, 1, 117601],"float64"), ) 	 25401816 	 1000 	 0.2979001998901367 	 0.2983558177947998 	 0.2893867492675781 	 0.2869760990142822 	 0.13385844230651855 	 0.13448739051818848 	 0.08330345153808594 	 0.04265928268432617 	 
2025-07-27 19:33:33.759466 test begin: paddle.ceil(Tensor([3, 6, 3, 4, 23521, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 4, 23521, 5],"float64"), ) 	 25402680 	 1000 	 0.29772090911865234 	 0.30010390281677246 	 0.28916144371032715 	 0.28712010383605957 	 0.13396286964416504 	 0.1345527172088623 	 0.0832674503326416 	 0.07128286361694336 	 
2025-07-27 19:33:37.310137 test begin: paddle.ceil(Tensor([3, 6, 3, 47041, 2, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 47041, 2, 5],"float64"), ) 	 25402140 	 1000 	 0.29788684844970703 	 0.3063805103302002 	 0.2893693447113037 	 0.2870142459869385 	 0.1338825225830078 	 0.1347825527191162 	 0.08303332328796387 	 0.06961250305175781 	 
2025-07-27 19:33:40.147552 test begin: paddle.ceil(Tensor([3, 6, 3, 94081, 1, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 3, 94081, 1, 5],"float64"), ) 	 25401870 	 1000 	 0.2979254722595215 	 0.29842376708984375 	 0.2891683578491211 	 0.28655123710632324 	 0.13409781455993652 	 0.13457131385803223 	 0.0810699462890625 	 0.04256033897399902 	 
2025-07-27 19:33:41.998788 test begin: paddle.ceil(Tensor([3, 6, 70561, 4, 1, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([3, 6, 70561, 4, 1, 5],"float64"), ) 	 25401960 	 1000 	 0.2974729537963867 	 0.29844212532043457 	 0.2890045642852783 	 0.2869575023651123 	 0.1338491439819336 	 0.1345229148864746 	 0.08321428298950195 	 0.060482025146484375 	 
2025-07-27 19:33:43.913412 test begin: paddle.ceil(Tensor([32, 12404, 128],"float32"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([32, 12404, 128],"float32"), ) 	 50806784 	 1000 	 0.29593944549560547 	 1.2965259552001953 	 0.28730297088623047 	 0.2865931987762451 	 0.13396310806274414 	 0.13416624069213867 	 0.08354997634887695 	 0.0735020637512207 	 
2025-07-27 19:33:48.179572 test begin: paddle.ceil(Tensor([32, 32, 49613],"float32"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([32, 32, 49613],"float32"), ) 	 50803712 	 1000 	 0.295684814453125 	 0.30709385871887207 	 0.28705263137817383 	 0.27861952781677246 	 0.13394856452941895 	 0.13414764404296875 	 0.07443976402282715 	 0.06422805786132812 	 
2025-07-27 19:33:51.343188 test begin: paddle.ceil(Tensor([70561, 6, 3, 4, 1, 5],"float64"), )
[Prof] paddle.ceil 	 paddle.ceil(Tensor([70561, 6, 3, 4, 1, 5],"float64"), ) 	 25401960 	 1000 	 0.2974972724914551 	 0.29831886291503906 	 0.28893566131591797 	 0.28694629669189453 	 0.13384008407592773 	 0.1345047950744629 	 0.08339548110961914 	 0.0661771297454834 	 
2025-07-27 19:33:53.259902 test begin: paddle.chunk(Tensor([115, 216, 64, 64],"float16"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([115, 216, 64, 64],"float16"), 3, axis=1, ) 	 101744640 	 1000 	 0.432309627532959 	 0.012499332427978516 	 0.4081003665924072 	 2.193450927734375e-05 	 0.3085465431213379 	 0.5048956871032715 	 0.24010562896728516 	 0.3857297897338867 	 
2025-07-27 19:33:58.290383 test begin: paddle.chunk(Tensor([16, 128, 24807],"float32"), 2, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([16, 128, 24807],"float32"), 2, axis=1, ) 	 50804736 	 1000 	 0.3378596305847168 	 0.00643467903137207 	 0.32389354705810547 	 1.9311904907226562e-05 	 0.3138773441314697 	 0.3078033924102783 	 0.258455753326416 	 0.2321627140045166 	 
2025-07-27 19:34:00.924187 test begin: paddle.chunk(Tensor([16, 128, 25500],"float32"), 2, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([16, 128, 25500],"float32"), 2, axis=1, ) 	 52224000 	 1000 	 0.35367822647094727 	 0.006403684616088867 	 0.339557409286499 	 2.0503997802734375e-05 	 0.32089662551879883 	 0.3152430057525635 	 0.26557064056396484 	 0.23978972434997559 	 
2025-07-27 19:34:03.594023 test begin: paddle.chunk(Tensor([4, 216, 1838, 64],"float16"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([4, 216, 1838, 64],"float16"), 3, axis=1, ) 	 101634048 	 1000 	 0.4300050735473633 	 0.012490510940551758 	 0.40648460388183594 	 1.9550323486328125e-05 	 0.30865049362182617 	 0.5033998489379883 	 0.24068975448608398 	 0.41388487815856934 	 
2025-07-27 19:34:08.697206 test begin: paddle.chunk(Tensor([4, 216, 64, 1838],"float16"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([4, 216, 64, 1838],"float16"), 3, axis=1, ) 	 101634048 	 1000 	 0.4300577640533447 	 0.012507200241088867 	 0.40659427642822266 	 2.2411346435546875e-05 	 0.30858898162841797 	 0.5029523372650146 	 0.24071693420410156 	 0.41283702850341797 	 
2025-07-27 19:34:13.717990 test begin: paddle.chunk(Tensor([4, 216, 64, 919],"float32"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([4, 216, 64, 919],"float32"), 3, axis=1, ) 	 50817024 	 1000 	 0.33893370628356934 	 0.007626771926879883 	 0.3151419162750244 	 2.1219253540039062e-05 	 0.3086206912994385 	 0.3051433563232422 	 0.2498493194580078 	 0.2201392650604248 	 
2025-07-27 19:34:16.512811 test begin: paddle.chunk(Tensor([4, 216, 919, 64],"float32"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([4, 216, 919, 64],"float32"), 3, axis=1, ) 	 50817024 	 1000 	 0.33888936042785645 	 0.012434959411621094 	 0.3151419162750244 	 2.0742416381835938e-05 	 0.30853843688964844 	 0.3052182197570801 	 0.24082732200622559 	 0.20418000221252441 	 
2025-07-27 19:34:19.158113 test begin: paddle.chunk(Tensor([58, 216, 64, 64],"float32"), 3, axis=1, )
[Prof] paddle.chunk 	 paddle.chunk(Tensor([58, 216, 64, 64],"float32"), 3, axis=1, ) 	 51314688 	 1000 	 0.34377360343933105 	 0.012559890747070312 	 0.32036280632019043 	 2.574920654296875e-05 	 0.3110496997833252 	 0.30878376960754395 	 0.24347257614135742 	 0.21421170234680176 	 
2025-07-27 19:34:21.789989 test begin: paddle.clip(Tensor([1408, 36082],"float32"), min=-2, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([1408, 36082],"float32"), min=-2, max=2, ) 	 50803456 	 1000 	 0.29558277130126953 	 0.2981700897216797 	 0.2697148323059082 	 0.27823519706726074 	 0.4505157470703125 	 0.7342526912689209 	 0.3889181613922119 	 0.15007758140563965 	 
2025-07-27 19:34:25.350310 test begin: paddle.clip(Tensor([2, 3840, 10240],"float32"), 0, 255, )
[Prof] paddle.clip 	 paddle.clip(Tensor([2, 3840, 10240],"float32"), 0, 255, ) 	 78643200 	 1000 	 0.45574474334716797 	 0.4584662914276123 	 0.430372953414917 	 0.4383714199066162 	 0.6942687034606934 	 1.1190898418426514 	 0.6323592662811279 	 0.2287888526916504 	 
2025-07-27 19:34:30.666431 test begin: paddle.clip(Tensor([23, 17, 256, 256],"float64"), min=0, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([23, 17, 256, 256],"float64"), min=0, max=2, ) 	 25624576 	 1000 	 0.30102968215942383 	 0.3010406494140625 	 0.27563977241516113 	 0.28145790100097656 	 0.45182013511657715 	 0.725395679473877 	 0.3899097442626953 	 0.14830732345581055 	 
2025-07-27 19:34:33.568501 test begin: paddle.clip(Tensor([24, 17, 244, 256],"float64"), min=0, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([24, 17, 244, 256],"float64"), min=0, max=2, ) 	 25485312 	 1000 	 0.29926156997680664 	 1.1066234111785889 	 0.28262805938720703 	 0.28597426414489746 	 0.44910717010498047 	 0.7218570709228516 	 0.3941934108734131 	 0.14759302139282227 	 
2025-07-27 19:34:41.472589 test begin: paddle.clip(Tensor([24, 17, 256, 244],"float64"), min=0, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([24, 17, 256, 244],"float64"), min=0, max=2, ) 	 25485312 	 1000 	 0.299238920211792 	 0.2994229793548584 	 0.28272294998168945 	 0.28624606132507324 	 0.44968175888061523 	 0.7216629981994629 	 0.39698123931884766 	 0.14755845069885254 	 
2025-07-27 19:34:44.313260 test begin: paddle.clip(Tensor([24, 17, 256, 256],"float64"), min=0, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([24, 17, 256, 256],"float64"), min=0, max=2, ) 	 26738688 	 1000 	 0.31372785568237305 	 0.32048821449279785 	 0.2970314025878906 	 0.30086565017700195 	 0.4714937210083008 	 0.7554526329040527 	 0.41869091987609863 	 0.15444564819335938 	 
2025-07-27 19:34:47.349696 test begin: paddle.clip(Tensor([3, 1654, 10240],"float32"), 0, 255, )
[Prof] paddle.clip 	 paddle.clip(Tensor([3, 1654, 10240],"float32"), 0, 255, ) 	 50810880 	 1000 	 0.29582643508911133 	 0.2979745864868164 	 0.27037954330444336 	 0.2782289981842041 	 0.45041489601135254 	 0.7330842018127441 	 0.38779783248901367 	 0.1499032974243164 	 
2025-07-27 19:34:50.968368 test begin: paddle.clip(Tensor([3, 3840, 4411],"float32"), 0, 255, )
[Prof] paddle.clip 	 paddle.clip(Tensor([3, 3840, 4411],"float32"), 0, 255, ) 	 50814720 	 1000 	 0.2956705093383789 	 0.3118324279785156 	 0.27906131744384766 	 0.285001277923584 	 0.4504883289337158 	 0.7345561981201172 	 0.3975040912628174 	 0.15015220642089844 	 
2025-07-27 19:34:56.764199 test begin: paddle.clip(Tensor([8269, 6144],"float32"), min=-2, max=2, )
[Prof] paddle.clip 	 paddle.clip(Tensor([8269, 6144],"float32"), min=-2, max=2, ) 	 50804736 	 1000 	 0.29580140113830566 	 0.29793643951416016 	 0.27036142349243164 	 0.27724671363830566 	 0.4504392147064209 	 0.7330343723297119 	 0.3881199359893799 	 0.14983677864074707 	 
2025-07-27 19:35:00.376291 test begin: paddle.clone(Tensor([145, 12, 112, 261],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([145, 12, 112, 261],"float32"), ) 	 50863680 	 1000 	 0.3152174949645996 	 0.31357717514038086 	 0.16106343269348145 	 0.16013145446777344 	 0.31621885299682617 	 0.04816412925720215 	 0.16153693199157715 	 3.409385681152344e-05 	 
2025-07-27 19:35:03.016544 test begin: paddle.clone(Tensor([145, 12, 261, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([145, 12, 261, 112],"float32"), ) 	 50863680 	 1000 	 0.31523871421813965 	 0.3135988712310791 	 0.16107678413391113 	 0.16012835502624512 	 0.3162257671356201 	 0.05384182929992676 	 0.16155529022216797 	 5.14984130859375e-05 	 
2025-07-27 19:35:05.681569 test begin: paddle.clone(Tensor([145, 28, 112, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([145, 28, 112, 112],"float32"), ) 	 50928640 	 1000 	 0.31084489822387695 	 0.31166720390319824 	 0.3018927574157715 	 0.29738593101501465 	 0.31073975563049316 	 0.048157691955566406 	 0.2584366798400879 	 3.743171691894531e-05 	 
2025-07-27 19:35:08.298963 test begin: paddle.clone(Tensor([22, 185, 112, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([22, 185, 112, 112],"float32"), ) 	 51054080 	 1000 	 0.3144404888153076 	 0.31467628479003906 	 0.1606736183166504 	 0.1607041358947754 	 0.3144514560699463 	 0.05095720291137695 	 0.16064453125 	 5.316734313964844e-05 	 
2025-07-27 19:35:10.936209 test begin: paddle.clone(Tensor([22, 64, 112, 323],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([22, 64, 112, 323],"float32"), ) 	 50935808 	 1000 	 0.31105637550354004 	 0.3110930919647217 	 0.2950294017791748 	 0.290149450302124 	 0.31084156036376953 	 0.07062697410583496 	 0.2497730255126953 	 5.459785461425781e-05 	 
2025-07-27 19:35:13.551638 test begin: paddle.clone(Tensor([22, 64, 323, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([22, 64, 323, 112],"float32"), ) 	 50935808 	 1000 	 0.31087708473205566 	 0.31111693382263184 	 0.2951960563659668 	 0.291104793548584 	 0.3108210563659668 	 0.0542292594909668 	 0.24737215042114258 	 7.390975952148438e-05 	 
2025-07-27 19:35:16.223874 test begin: paddle.clone(Tensor([338, 12, 112, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([338, 12, 112, 112],"float32"), ) 	 50878464 	 1000 	 0.31052422523498535 	 0.3107788562774658 	 0.2948572635650635 	 0.2907094955444336 	 0.3104579448699951 	 0.05932784080505371 	 0.24953222274780273 	 4.7206878662109375e-05 	 
2025-07-27 19:35:18.925260 test begin: paddle.clone(Tensor([43, 256, 56, 83],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([43, 256, 56, 83],"float32"), ) 	 51165184 	 1000 	 0.3122875690460205 	 0.31258583068847656 	 0.296703577041626 	 0.29293012619018555 	 0.3121962547302246 	 0.05473041534423828 	 0.24839186668395996 	 5.9604644775390625e-05 	 
2025-07-27 19:35:21.645693 test begin: paddle.clone(Tensor([43, 256, 83, 56],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([43, 256, 83, 56],"float32"), ) 	 51165184 	 1000 	 0.31219983100891113 	 0.31250715255737305 	 0.2964775562286377 	 0.2927865982055664 	 0.3122119903564453 	 0.05302095413208008 	 0.24904513359069824 	 7.534027099609375e-05 	 
2025-07-27 19:35:24.421631 test begin: paddle.clone(Tensor([43, 377, 56, 56],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([43, 377, 56, 56],"float32"), ) 	 50837696 	 1000 	 0.3155958652496338 	 0.3130507469177246 	 0.16126513481140137 	 0.15984225273132324 	 0.31505417823791504 	 0.0666806697845459 	 0.16095662117004395 	 8.249282836914062e-05 	 
2025-07-27 19:35:27.024434 test begin: paddle.clone(Tensor([64, 256, 56, 56],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([64, 256, 56, 56],"float32"), ) 	 51380224 	 1000 	 0.3134596347808838 	 0.3137538433074951 	 0.30432772636413574 	 0.300642728805542 	 0.3134756088256836 	 0.04936504364013672 	 0.26023077964782715 	 4.0531158447265625e-05 	 
2025-07-27 19:35:29.705755 test begin: paddle.clone(Tensor([64, 64, 112, 112],"float32"), )
[Prof] paddle.clone 	 paddle.clone(Tensor([64, 64, 112, 112],"float32"), ) 	 51380224 	 1000 	 0.31344151496887207 	 0.31377553939819336 	 0.3045053482055664 	 0.300548791885376 	 0.3134799003601074 	 0.05376625061035156 	 0.2611582279205322 	 3.9577484130859375e-05 	 
2025-07-27 19:35:32.429320 test begin: paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], ) 	 76204872 	 1000 	 0.9295010566711426 	 0.9423620700836182 	 0.913628339767456 	 0.898594856262207 	 0.9287686347961426 	 0.07542061805725098 	 0.8599488735198975 	 4.267692565917969e-05 	 
2025-07-27 19:35:41.198062 test begin: paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], ) 	 25401624 	 1000 	 0.315565824508667 	 0.31320905685424805 	 0.3012361526489258 	 0.15989923477172852 	 0.31051087379455566 	 0.07370114326477051 	 0.25448179244995117 	 8.749961853027344e-05 	 
2025-07-27 19:35:43.263595 test begin: paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.31710267066955566 	 0.32155466079711914 	 0.2935326099395752 	 0.29982972145080566 	 0.3122525215148926 	 0.0684347152709961 	 0.23420166969299316 	 4.0531158447265625e-05 	 
2025-07-27 19:35:45.416567 test begin: paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.31650424003601074 	 0.32082080841064453 	 0.2928478717803955 	 0.2988770008087158 	 0.312885046005249 	 0.07512760162353516 	 0.2343595027923584 	 3.981590270996094e-05 	 
2025-07-27 19:35:47.535425 test begin: paddle.column_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], ) 	 76204836 	 1000 	 0.9272046089172363 	 0.9221429824829102 	 0.9116203784942627 	 0.9073469638824463 	 0.9304847717285156 	 0.0675194263458252 	 0.8622493743896484 	 4.029273986816406e-05 	 
2025-07-27 19:35:53.564826 test begin: paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 25401654 	 1000 	 0.3174922466278076 	 0.3181934356689453 	 0.2938249111175537 	 0.2967252731323242 	 0.31230664253234863 	 0.07606697082519531 	 0.23444175720214844 	 4.363059997558594e-05 	 
2025-07-27 19:35:55.696286 test begin: paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401654 	 1000 	 0.31670451164245605 	 0.5508067607879639 	 0.29834604263305664 	 0.30439019203186035 	 0.31225013732910156 	 0.07034182548522949 	 0.2441554069519043 	 5.53131103515625e-05 	 
2025-07-27 19:36:00.336507 test begin: paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 76204980 	 1000 	 0.9274749755859375 	 0.9285633563995361 	 0.9039018154144287 	 0.9064006805419922 	 0.930788516998291 	 0.0766139030456543 	 0.8526992797851562 	 4.9591064453125e-05 	 
2025-07-27 19:36:06.410278 test begin: paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401660 	 1000 	 0.3145630359649658 	 0.3131752014160156 	 0.30173254013061523 	 0.1599271297454834 	 0.3109111785888672 	 0.05345511436462402 	 0.2552669048309326 	 4.696846008300781e-05 	 
2025-07-27 19:36:08.488529 test begin: paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401654 	 1000 	 0.3168361186981201 	 0.3117408752441406 	 0.3010895252227783 	 0.29759883880615234 	 0.312147855758667 	 0.06805753707885742 	 0.2436354160308838 	 8.797645568847656e-05 	 
2025-07-27 19:36:10.593714 test begin: paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 76204818 	 1000 	 0.9328491687774658 	 0.9272849559783936 	 0.9172842502593994 	 0.9127457141876221 	 0.94606614112854 	 0.06779861450195312 	 0.8734893798828125 	 6.246566772460938e-05 	 
2025-07-27 19:36:16.663940 test begin: paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.3166661262512207 	 0.31526756286621094 	 0.30109262466430664 	 0.3007931709289551 	 0.3123922348022461 	 0.06961297988891602 	 0.24243450164794922 	 0.00011372566223144531 	 
2025-07-27 19:36:18.722254 test begin: paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 76204890 	 1000 	 0.933821439743042 	 0.9374783039093018 	 0.9180500507354736 	 0.9225525856018066 	 0.9430737495422363 	 0.07551932334899902 	 0.8734533786773682 	 6.699562072753906e-05 	 
2025-07-27 19:36:24.779683 test begin: paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401630 	 1000 	 0.3162992000579834 	 0.31319570541381836 	 0.30318427085876465 	 0.15990877151489258 	 0.31188130378723145 	 0.05345320701599121 	 0.2561652660369873 	 2.7894973754882812e-05 	 
2025-07-27 19:36:26.847726 test begin: paddle.column_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], ) 	 76204824 	 1000 	 0.9765000343322754 	 1.3958988189697266 	 0.96083664894104 	 1.3814754486083984 	 0.9597761631011963 	 0.06817102432250977 	 0.8914055824279785 	 4.38690185546875e-05 	 
2025-07-27 19:36:33.471190 test begin: paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 76204920 	 1000 	 0.9252736568450928 	 1.0399563312530518 	 0.9092311859130859 	 1.0074689388275146 	 0.9375607967376709 	 0.06827902793884277 	 0.8686857223510742 	 4.363059997558594e-05 	 
2025-07-27 19:36:42.158986 test begin: paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.column_stack 	 paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401640 	 1000 	 0.3076298236846924 	 0.3132057189941406 	 0.2947423458099365 	 0.15992069244384766 	 0.3261077404022217 	 0.05379915237426758 	 0.2705502510070801 	 3.62396240234375e-05 	 
2025-07-27 19:36:44.189859 test begin: paddle.combinations(Tensor([25401601],"int64"), 0, True, )
[Prof] paddle.combinations 	 paddle.combinations(Tensor([25401601],"int64"), 0, True, ) 	 25401601 	 1000 	 0.012777328491210938 	 0.004138946533203125 	 9.5367431640625e-06 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:36:44.638210 test begin: paddle.combinations(Tensor([50803201],"int32"), 1, True, )
[Prof] paddle.combinations 	 paddle.combinations(Tensor([50803201],"int32"), 1, True, ) 	 50803201 	 1000 	 5.493918180465698 	 2.1232078075408936 	 0.0032393932342529297 	 0.001262664794921875 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:36:58.909392 test begin: paddle.complex(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), ) 	 101606528 	 1000 	 0.5923795700073242 	 0.5879106521606445 	 0.5830085277557373 	 0.5745401382446289 	 0.5914759635925293 	 0.06708097457885742 	 0.5328083038330078 	 9.512901306152344e-05 	 
2025-07-27 19:37:05.790610 test begin: paddle.complex(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), ) 	 101613568 	 1000 	 0.5913567543029785 	 0.5879380702972412 	 0.5820591449737549 	 0.5746772289276123 	 0.5897800922393799 	 0.09728431701660156 	 0.5315790176391602 	 7.963180541992188e-05 	 
2025-07-27 19:37:10.389819 test begin: paddle.complex(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), ) 	 51380224 	 1000 	 0.49068784713745117 	 0.475754976272583 	 0.4703078269958496 	 0.4551107883453369 	 0.5162568092346191 	 0.28715968132019043 	 0.44608116149902344 	 0.19703459739685059 	 
2025-07-27 19:37:14.034667 test begin: paddle.complex(Tensor([20, 2417, 1051],"float32"), Tensor([20, 2417, 1051],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([20, 2417, 1051],"float32"), Tensor([20, 2417, 1051],"float32"), ) 	 101610680 	 1000 	 0.5916686058044434 	 0.5879476070404053 	 0.5824005603790283 	 0.5745744705200195 	 0.591017484664917 	 0.06826996803283691 	 0.5316689014434814 	 0.000110626220703125 	 
2025-07-27 19:37:18.482433 test begin: paddle.complex(Tensor([20, 2538, 1001],"float32"), Tensor([20, 2538, 1001],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([20, 2538, 1001],"float32"), Tensor([20, 2538, 1001],"float32"), ) 	 101621520 	 1000 	 0.5927751064300537 	 0.5880656242370605 	 0.583467960357666 	 0.5660665035247803 	 0.5906887054443359 	 0.1006159782409668 	 0.5231809616088867 	 5.6743621826171875e-05 	 
2025-07-27 19:37:22.977004 test begin: paddle.complex(Tensor([20, 64, 39691],"float32"), Tensor([20, 64, 39691],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([20, 64, 39691],"float32"), Tensor([20, 64, 39691],"float32"), ) 	 101608960 	 1000 	 0.5912806987762451 	 0.587907075881958 	 0.5818803310394287 	 0.5746757984161377 	 0.5904419422149658 	 0.06740307807922363 	 0.531982421875 	 7.939338684082031e-05 	 
2025-07-27 19:37:27.449075 test begin: paddle.complex(Tensor([756, 64, 1051],"float32"), Tensor([756, 64, 1051],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([756, 64, 1051],"float32"), Tensor([756, 64, 1051],"float32"), ) 	 101703168 	 1000 	 0.5918705463409424 	 0.5884177684783936 	 0.582514762878418 	 0.5749452114105225 	 0.5910446643829346 	 0.06756401062011719 	 0.5324282646179199 	 7.724761962890625e-05 	 
2025-07-27 19:37:32.001632 test begin: paddle.complex(Tensor([794, 64, 1001],"float32"), Tensor([794, 64, 1001],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([794, 64, 1001],"float32"), Tensor([794, 64, 1001],"float32"), ) 	 101733632 	 1000 	 0.5926332473754883 	 0.6002438068389893 	 0.5832862854003906 	 0.574254035949707 	 0.5909099578857422 	 0.06998634338378906 	 0.5322170257568359 	 0.0003311634063720703 	 
2025-07-27 19:37:40.190013 test begin: paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), ) 	 51380224 	 1000 	 0.4827425479888916 	 0.4728238582611084 	 0.4726905822753906 	 0.45885205268859863 	 0.5129876136779785 	 0.28712940216064453 	 0.45197153091430664 	 0.20535731315612793 	 
2025-07-27 19:37:44.015164 test begin: paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
[Prof] paddle.complex 	 paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), ) 	 101711872 	 1000 	 0.591956615447998 	 0.5884432792663574 	 0.58258056640625 	 0.5750222206115723 	 0.5903105735778809 	 0.06741690635681152 	 0.5319054126739502 	 4.3392181396484375e-05 	 
2025-07-27 19:37:48.523062 test begin: paddle.concat(list[Tensor([101606401],"bfloat16"),], )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([101606401],"bfloat16"),], ) 	 101606401 	 1000 	 0.3082447052001953 	 0.3135232925415039 	 0.15748381614685059 	 0.16008782386779785 	 0.6242644786834717 	 0.4535183906555176 	 0.31896114349365234 	 0.3785829544067383 	 
2025-07-27 19:37:53.500170 test begin: paddle.concat(list[Tensor([254, 32, 112, 112],"float16"),Tensor([254, 32, 112, 112],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([254, 32, 112, 112],"float16"),Tensor([254, 32, 112, 112],"float16"),], axis=1, ) 	 203915264 	 1000 	 0.6095423698425293 	 0.9077136516571045 	 0.5964231491088867 	 0.8927268981933594 	 0.9357779026031494 	 0.0625152587890625 	 0.8740856647491455 	 9.036064147949219e-05 	 
2025-07-27 19:38:03.663791 test begin: paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, ) 	 205520896 	 1000 	 0.6137237548828125 	 1.1385622024536133 	 0.6006276607513428 	 0.899907112121582 	 0.9354531764984131 	 0.06880807876586914 	 0.872556209564209 	 8.463859558105469e-05 	 
2025-07-27 19:38:15.270960 test begin: paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 32, 112, 112],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 32, 112, 112],"float16"),], axis=1, ) 	 308281344 	 1000 	 0.9228582382202148 	 1.6121020317077637 	 0.9099991321563721 	 1.5947856903076172 	 1.422633171081543 	 0.061502933502197266 	 1.3605778217315674 	 4.935264587402344e-05 	 
2025-07-27 19:38:31.018510 test begin: paddle.concat(list[Tensor([512, 32, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([512, 32, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, ) 	 308281344 	 1000 	 0.9242758750915527 	 1.5469813346862793 	 0.9033756256103516 	 1.5185937881469727 	 1.4211020469665527 	 0.06836318969726562 	 1.349764347076416 	 4.649162292480469e-05 	 
2025-07-27 19:38:46.611077 test begin: paddle.concat(list[Tensor([512, 32, 112, 56],"float16"),Tensor([512, 32, 112, 56],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([512, 32, 112, 56],"float16"),Tensor([512, 32, 112, 56],"float16"),], axis=1, ) 	 205520896 	 1000 	 0.6137027740478516 	 0.9152176380157471 	 0.6008338928222656 	 0.9012470245361328 	 0.9353744983673096 	 0.06319761276245117 	 0.8702154159545898 	 6.604194641113281e-05 	 
2025-07-27 19:38:56.715805 test begin: paddle.concat(list[Tensor([512, 32, 56, 112],"float16"),Tensor([512, 32, 56, 112],"float16"),], axis=1, )
[Prof] paddle.concat 	 paddle.concat(list[Tensor([512, 32, 56, 112],"float16"),Tensor([512, 32, 56, 112],"float16"),], axis=1, ) 	 205520896 	 1000 	 0.6137385368347168 	 0.9147272109985352 	 0.6007161140441895 	 0.9005246162414551 	 0.93548583984375 	 0.06862258911132812 	 0.8721988201141357 	 7.271766662597656e-05 	 
2025-07-27 19:39:06.989642 test begin: paddle.conj(Tensor([2, 20, 2, 635041],"float32"), )
[Prof] paddle.conj 	 paddle.conj(Tensor([2, 20, 2, 635041],"float32"), ) 	 50803280 	 1000 	 0.3073461055755615 	 0.002168893814086914 	 0.2924232482910156 	 1.6927719116210938e-05 	 0.30753064155578613 	 0.06571507453918457 	 0.2488231658935547 	 5.650520324707031e-05 	 
2025-07-27 19:39:09.280667 test begin: paddle.conj(Tensor([2, 20, 423361, 3],"float32"), )
[Prof] paddle.conj 	 paddle.conj(Tensor([2, 20, 423361, 3],"float32"), ) 	 50803320 	 1000 	 0.3073430061340332 	 0.0018167495727539062 	 0.2994720935821533 	 1.5974044799804688e-05 	 0.3074939250946045 	 0.0446622371673584 	 0.25806283950805664 	 4.76837158203125e-05 	 
2025-07-27 19:39:11.562837 test begin: paddle.conj(Tensor([2, 4233601, 2, 3],"float32"), )
[Prof] paddle.conj 	 paddle.conj(Tensor([2, 4233601, 2, 3],"float32"), ) 	 50803212 	 1000 	 0.30927085876464844 	 0.0017886161804199219 	 0.3014340400695801 	 1.5020370483398438e-05 	 0.30878353118896484 	 0.04332089424133301 	 0.2596263885498047 	 3.147125244140625e-05 	 
2025-07-27 19:39:13.841788 test begin: paddle.conj(Tensor([423361, 20, 2, 3],"float32"), )
[Prof] paddle.conj 	 paddle.conj(Tensor([423361, 20, 2, 3],"float32"), ) 	 50803320 	 1000 	 0.30736303329467773 	 0.0017852783203125 	 0.29945993423461914 	 1.5497207641601562e-05 	 0.30753326416015625 	 0.043753623962402344 	 0.2581908702850342 	 3.814697265625e-05 	 
2025-07-27 19:39:17.132944 test begin: paddle.copysign(Tensor([12, 1058401, 2],"float64"), Tensor([12, 1058401, 2],"float64"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([12, 1058401, 2],"float64"), Tensor([12, 1058401, 2],"float64"), ) 	 50803248 	 1000 	 0.44896388053894043 	 0.44701600074768066 	 0.43618035316467285 	 0.4234037399291992 	 0.7389419078826904 	 1.515373706817627 	 0.6789655685424805 	 0.3098318576812744 	 
2025-07-27 19:39:22.647184 test begin: paddle.copysign(Tensor([12, 20, 105841],"float64"), Tensor([12, 20, 105841],"float64"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([12, 20, 105841],"float64"), Tensor([12, 20, 105841],"float64"), ) 	 50803680 	 1000 	 0.44941186904907227 	 0.44302845001220703 	 0.4368283748626709 	 0.43164491653442383 	 0.7388296127319336 	 1.5151197910308838 	 0.6788690090179443 	 0.3097727298736572 	 
2025-07-27 19:39:27.358577 test begin: paddle.copysign(Tensor([12, 20, 211681],"float32"), Tensor([12, 20, 211681],"float32"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([12, 20, 211681],"float32"), Tensor([12, 20, 211681],"float32"), ) 	 101606880 	 1000 	 0.4505350589752197 	 0.44677019119262695 	 0.43752169609069824 	 0.435530424118042 	 1.1315107345581055 	 1.552501916885376 	 1.069279670715332 	 0.31745243072509766 	 
2025-07-27 19:39:33.403744 test begin: paddle.copysign(Tensor([12, 2116801, 2],"float32"), Tensor([12, 2116801, 2],"float32"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([12, 2116801, 2],"float32"), Tensor([12, 2116801, 2],"float32"), ) 	 101606448 	 1000 	 0.4503357410430908 	 0.4525425434112549 	 0.43730878829956055 	 0.4351041316986084 	 1.355499029159546 	 1.5523691177368164 	 1.2946574687957764 	 0.31748247146606445 	 
2025-07-27 19:39:41.023617 test begin: paddle.copysign(Tensor([1270081, 20, 2],"float32"), Tensor([1270081, 20, 2],"float32"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([1270081, 20, 2],"float32"), Tensor([1270081, 20, 2],"float32"), ) 	 101606480 	 1000 	 0.450329065322876 	 0.44668102264404297 	 0.43743085861206055 	 0.4353218078613281 	 1.1348602771759033 	 1.5520915985107422 	 1.0747761726379395 	 0.3173842430114746 	 
2025-07-27 19:39:47.047527 test begin: paddle.copysign(Tensor([635041, 20, 2],"float64"), Tensor([635041, 20, 2],"float64"), )
[Prof] paddle.copysign 	 paddle.copysign(Tensor([635041, 20, 2],"float64"), Tensor([635041, 20, 2],"float64"), ) 	 50803280 	 1000 	 0.4490036964416504 	 0.44303107261657715 	 0.4361591339111328 	 0.43160581588745117 	 0.7387523651123047 	 1.5151910781860352 	 0.6766893863677979 	 0.3098311424255371 	 
2025-07-27 19:39:51.844381 test begin: paddle.cos(Tensor([1587601, 32],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([1587601, 32],"float32"), ) 	 50803232 	 1000 	 0.2955284118652344 	 0.2990133762359619 	 0.28685569763183594 	 0.2872748374938965 	 0.45060181617736816 	 1.040966510772705 	 0.39798927307128906 	 0.35465073585510254 	 
2025-07-27 19:39:55.630680 test begin: paddle.cos(Tensor([198451, 256],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([198451, 256],"float32"), ) 	 50803456 	 1000 	 0.2954368591308594 	 0.30314207077026367 	 0.2867763042449951 	 0.2871716022491455 	 0.4505743980407715 	 1.0410082340240479 	 0.3974125385284424 	 0.3546764850616455 	 
2025-07-27 19:39:59.361397 test begin: paddle.cos(Tensor([32768, 1551],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([32768, 1551],"float32"), ) 	 50823168 	 1000 	 0.29541993141174316 	 0.29822564125061035 	 0.2866227626800537 	 0.28719019889831543 	 0.4505455493927002 	 1.0412170886993408 	 0.39668869972229004 	 0.3547337055206299 	 
2025-07-27 19:40:03.095173 test begin: paddle.cos(Tensor([396901, 128],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.295377254486084 	 0.29808592796325684 	 0.28674745559692383 	 0.2871887683868408 	 0.45047783851623535 	 1.0408825874328613 	 0.39722585678100586 	 0.35461997985839844 	 
2025-07-27 19:40:06.828824 test begin: paddle.cos(Tensor([5000, 10161],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([5000, 10161],"float32"), ) 	 50805000 	 1000 	 0.29549312591552734 	 0.3003106117248535 	 0.2868797779083252 	 0.2871687412261963 	 0.4505152702331543 	 1.0410513877868652 	 0.3973679542541504 	 0.3546724319458008 	 
2025-07-27 19:40:10.583756 test begin: paddle.cos(Tensor([8192, 6202],"float32"), )
[Prof] paddle.cos 	 paddle.cos(Tensor([8192, 6202],"float32"), ) 	 50806784 	 1000 	 0.29537510871887207 	 0.30200791358947754 	 0.2865598201751709 	 0.28711438179016113 	 0.45049452781677246 	 1.0409460067749023 	 0.39667367935180664 	 0.35465097427368164 	 
2025-07-27 19:40:14.316377 test begin: paddle.cosh(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.2948338985443115 	 0.298891544342041 	 0.2859818935394287 	 0.28776073455810547 	 0.4504425525665283 	 0.7432866096496582 	 0.3972961902618408 	 0.3797476291656494 	 
2025-07-27 19:40:17.730490 test begin: paddle.cosh(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2947559356689453 	 0.29862117767333984 	 0.2859621047973633 	 0.2876598834991455 	 0.4503159523010254 	 0.7432377338409424 	 0.3978288173675537 	 0.37972068786621094 	 
2025-07-27 19:40:22.826809 test begin: paddle.cosh(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2947707176208496 	 0.3035411834716797 	 0.2859668731689453 	 0.2878446578979492 	 0.4504263401031494 	 0.7433483600616455 	 0.39694881439208984 	 0.3797907829284668 	 
2025-07-27 19:40:26.708837 test begin: paddle.cosh(Tensor([28, 32, 241, 241],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([28, 32, 241, 241],"float32"), ) 	 52040576 	 1000 	 0.3019406795501709 	 0.3058476448059082 	 0.2931022644042969 	 0.2945559024810791 	 0.4610617160797119 	 0.7613098621368408 	 0.40840721130371094 	 0.38895368576049805 	 
2025-07-27 19:40:30.245187 test begin: paddle.cosh(Tensor([8, 110, 241, 241],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([8, 110, 241, 241],"float32"), ) 	 51111280 	 1000 	 0.2965412139892578 	 0.30048346519470215 	 0.28731799125671387 	 0.2887406349182129 	 0.45282530784606934 	 0.747708797454834 	 0.39914798736572266 	 0.3820042610168457 	 
2025-07-27 19:40:33.695983 test begin: paddle.cosh(Tensor([8, 32, 241, 824],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([8, 32, 241, 824],"float32"), ) 	 50837504 	 1000 	 0.29518747329711914 	 0.30774664878845215 	 0.28635191917419434 	 0.2816128730773926 	 0.4506649971008301 	 0.7438528537750244 	 0.3978996276855469 	 0.380016565322876 	 
2025-07-27 19:40:40.790852 test begin: paddle.cosh(Tensor([8, 32, 824, 241],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(Tensor([8, 32, 824, 241],"float32"), ) 	 50837504 	 1000 	 0.2951498031616211 	 0.30089521408081055 	 0.2861342430114746 	 0.28600430488586426 	 0.450772762298584 	 0.7437288761138916 	 0.3977079391479492 	 0.37998270988464355 	 
2025-07-27 19:40:44.254348 test begin: paddle.cosh(x=Tensor([3, 3, 5644801],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(x=Tensor([3, 3, 5644801],"float32"), ) 	 50803209 	 1000 	 0.29479551315307617 	 0.30477309226989746 	 0.28574466705322266 	 0.28772759437561035 	 0.4503517150878906 	 0.7432475090026855 	 0.39761805534362793 	 0.3797638416290283 	 
2025-07-27 19:40:47.692142 test begin: paddle.cosh(x=Tensor([3, 5644801, 3],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(x=Tensor([3, 5644801, 3],"float32"), ) 	 50803209 	 1000 	 0.2947354316711426 	 0.29863834381103516 	 0.2856457233428955 	 0.2877051830291748 	 0.4503896236419678 	 0.7433779239654541 	 0.39755845069885254 	 0.3798410892486572 	 
2025-07-27 19:40:51.134685 test begin: paddle.cosh(x=Tensor([5644801, 3, 3],"float32"), )
[Prof] paddle.cosh 	 paddle.cosh(x=Tensor([5644801, 3, 3],"float32"), ) 	 50803209 	 1000 	 0.29477381706237793 	 0.29863548278808594 	 0.28566837310791016 	 0.2878377437591553 	 0.4504857063293457 	 0.7432191371917725 	 0.39693450927734375 	 0.37975096702575684 	 
2025-07-27 19:40:54.555865 test begin: paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, ) 	 25401796 	 1000 	 0.6012711524963379 	 0.5251176357269287 	 0.2048792839050293 	 0.1788947582244873 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:56.787036 test begin: paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, ) 	 25401796 	 1000 	 0.601233720779419 	 0.525226354598999 	 0.20483779907226562 	 0.17896819114685059 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 1, 129601, 1]) and output[0] has a shape of torch.Size([1, 129601]).
2025-07-27 19:40:58.947032 test begin: paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=False, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=False, name=None, ) 	 25401670 	 1000 	 0.6176886558532715 	 0.5435574054718018 	 0.15781044960021973 	 0.1388094425201416 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:01.119999 test begin: paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=True, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=True, name=None, ) 	 25401670 	 1000 	 0.6177887916564941 	 0.5436656475067139 	 0.15782761573791504 	 0.138777494430542 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 1, 5, 1]) and output[0] has a shape of torch.Size([1, 5]).
2025-07-27 19:41:03.299058 test begin: paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, ) 	 25401670 	 1000 	 0.6166024208068848 	 0.5526690483093262 	 0.1575613021850586 	 0.14104533195495605 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:08.597623 test begin: paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, ) 	 25401670 	 1000 	 0.6164910793304443 	 0.5526442527770996 	 0.15749573707580566 	 0.14107179641723633 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 1, 5, 1]) and output[0] has a shape of torch.Size([1, 5]).
2025-07-27 19:41:12.629356 test begin: paddle.count_nonzero(Tensor([2, 1270081, 4, 5],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([2, 1270081, 4, 5],"float32"), axis=-1, keepdim=False, ) 	 50803240 	 1000 	 0.9748406410217285 	 1.061628818511963 	 0.3323380947113037 	 0.3617746829986572 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:16.674830 test begin: paddle.count_nonzero(Tensor([2, 3, 1693441, 5],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([2, 3, 1693441, 5],"float32"), axis=-1, keepdim=False, ) 	 50803230 	 1000 	 0.9743959903717041 	 1.0615739822387695 	 0.33208489418029785 	 0.36176085472106934 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:20.671821 test begin: paddle.count_nonzero(Tensor([2, 3, 4, 2116801],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([2, 3, 4, 2116801],"float32"), axis=-1, keepdim=False, ) 	 50803224 	 1000 	 0.8753836154937744 	 0.866767406463623 	 0.22355413436889648 	 0.2213585376739502 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:24.043365 test begin: paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, ) 	 25402580 	 1000 	 0.5930795669555664 	 0.5276603698730469 	 0.20206546783447266 	 0.17976140975952148 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:28.274473 test begin: paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, ) 	 25402580 	 1000 	 0.5929965972900391 	 0.5312891006469727 	 0.2020096778869629 	 0.17985796928405762 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([25921, 1, 5, 1]) and output[0] has a shape of torch.Size([25921, 5]).
2025-07-27 19:41:32.391429 test begin: paddle.count_nonzero(Tensor([846721, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.count_nonzero 	 paddle.count_nonzero(Tensor([846721, 3, 4, 5],"float32"), axis=-1, keepdim=False, ) 	 50803260 	 1000 	 0.9745378494262695 	 1.8889460563659668 	 0.3321802616119385 	 0.3617534637451172 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:41:40.418298 test begin: paddle.crop(x=Tensor([16934401, 3],"float32"), shape=list[2,2,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([16934401, 3],"float32"), shape=list[2,2,], ) 	 50803203 	 1000 	 0.02002429962158203 	 0.014040231704711914 	 2.574920654296875e-05 	 5.1021575927734375e-05 	 0.1534266471862793 	 0.14408183097839355 	 0.09905791282653809 	 0.03642463684082031 	 combined
2025-07-27 19:41:41.651357 test begin: paddle.crop(x=Tensor([2, 1411201, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([2, 1411201, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], ) 	 25401618 	 1000 	 0.01882791519165039 	 0.01820850372314453 	 1.71661376953125e-05 	 2.288818359375e-05 	 0.16403532028198242 	 0.14922833442687988 	 0.11187219619750977 	 0.02539801597595215 	 combined
2025-07-27 19:41:42.533202 test begin: paddle.crop(x=Tensor([2, 3, 1411201, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([2, 3, 1411201, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], ) 	 25401618 	 1000 	 0.09168076515197754 	 0.01805877685546875 	 0.07294154167175293 	 2.193450927734375e-05 	 0.22689175605773926 	 0.5862774848937988 	 0.17460417747497559 	 0.09989213943481445 	 combined
2025-07-27 19:41:44.130033 test begin: paddle.crop(x=Tensor([2, 3, 3, 1411201],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([2, 3, 3, 1411201],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], ) 	 25401618 	 1000 	 0.018611907958984375 	 0.018296003341674805 	 2.6941299438476562e-05 	 2.956390380859375e-05 	 0.1997668743133545 	 0.3976297378540039 	 0.1474294662475586 	 0.0677938461303711 	 combined
2025-07-27 19:41:45.300016 test begin: paddle.crop(x=Tensor([3, 16934401],"float32"), shape=list[2,2,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([3, 16934401],"float32"), shape=list[2,2,], ) 	 50803203 	 1000 	 0.019400835037231445 	 0.013415098190307617 	 2.1457672119140625e-05 	 2.5033950805664062e-05 	 0.18477725982666016 	 0.43932366371154785 	 0.13248205184936523 	 0.08981013298034668 	 combined
2025-07-27 19:41:46.774570 test begin: paddle.crop(x=Tensor([3, 8467201],"float64"), shape=list[2,2,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([3, 8467201],"float64"), shape=list[2,2,], ) 	 25401603 	 1000 	 0.01950860023498535 	 0.013468027114868164 	 1.621246337890625e-05 	 2.1696090698242188e-05 	 0.15066194534301758 	 0.43999671936035156 	 0.09829306602478027 	 0.08993959426879883 	 combined
2025-07-27 19:41:47.929937 test begin: paddle.crop(x=Tensor([8467201, 3],"float64"), shape=list[2,2,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([8467201, 3],"float64"), shape=list[2,2,], ) 	 25401603 	 1000 	 0.019207000732421875 	 0.013313770294189453 	 1.8596649169921875e-05 	 2.2172927856445312e-05 	 0.14890813827514648 	 0.143113374710083 	 0.09699678421020508 	 0.03656005859375 	 combined
2025-07-27 19:41:48.775018 test begin: paddle.crop(x=Tensor([940801, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
[Prof] paddle.crop 	 paddle.crop(x=Tensor([940801, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], ) 	 25401627 	 1000 	 0.02743673324584961 	 0.02811431884765625 	 4.601478576660156e-05 	 2.4080276489257812e-05 	 0.148787260055542 	 0.15402483940124512 	 0.08794116973876953 	 0.008795022964477539 	 combined
2025-07-27 19:41:49.657416 test begin: paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=1, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=1, ) 	 50803218 	 1000 	 0.4503333568572998 	 0.4498324394226074 	 0.43945884704589844 	 0.4354674816131592 	 0.7496988773345947 	 0.8991286754608154 	 0.6895928382873535 	 0.45935988426208496 	 
2025-07-27 19:41:53.892970 test begin: paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=2, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=2, ) 	 50803218 	 1000 	 0.4506230354309082 	 0.4512314796447754 	 0.4400966167449951 	 0.4369523525238037 	 0.7565097808837891 	 0.9015626907348633 	 0.696915864944458 	 0.4606597423553467 	 
2025-07-27 19:41:58.017757 test begin: paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=0, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=0, ) 	 50803218 	 1000 	 0.44740962982177734 	 0.44896364212036133 	 0.4367384910583496 	 0.4320690631866455 	 0.7397029399871826 	 0.8970401287078857 	 0.6761214733123779 	 0.4583587646484375 	 
2025-07-27 19:42:02.163753 test begin: paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=2, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=2, ) 	 50803218 	 1000 	 0.4506063461303711 	 0.4536113739013672 	 0.4399087429046631 	 0.43666982650756836 	 0.7563579082489014 	 0.9014689922332764 	 0.6965718269348145 	 0.46062254905700684 	 
2025-07-27 19:42:06.395895 test begin: paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=0, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=0, ) 	 50803218 	 1000 	 0.44753122329711914 	 0.44901466369628906 	 0.4369537830352783 	 0.43389225006103516 	 0.7397050857543945 	 0.8970141410827637 	 0.6798629760742188 	 0.45831298828125 	 
2025-07-27 19:42:10.501905 test begin: paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=1, )
[Prof] paddle.cross 	 paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=1, ) 	 50803218 	 1000 	 0.4476907253265381 	 0.44817161560058594 	 0.4366757869720459 	 0.43361830711364746 	 0.7411384582519531 	 0.8964557647705078 	 0.6789829730987549 	 0.45799875259399414 	 
2025-07-27 19:42:14.613176 test begin: paddle.cummax(Tensor([100, 2080],"float32"), )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([100, 2080],"float32"), ) 	 208000 	 1000 	 11.346185445785522 	 0.8116059303283691 	 11.321799993515015 	 0.7967660427093506 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:27.159494 test begin: paddle.cummax(Tensor([100, 2080],"float32"), axis=-1, )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([100, 2080],"float32"), axis=-1, ) 	 208000 	 1000 	 0.17613792419433594 	 0.03377866744995117 	 0.1634829044342041 	 0.01889491081237793 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:27.440573 test begin: paddle.cummax(Tensor([100, 2080],"float32"), axis=-2, )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([100, 2080],"float32"), axis=-2, ) 	 208000 	 1000 	 0.02536463737487793 	 0.02452397346496582 	 0.013024091720581055 	 0.009627580642700195 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:27.558713 test begin: paddle.cummax(Tensor([2080, 100],"float32"), )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([2080, 100],"float32"), ) 	 208000 	 1000 	 11.345860719680786 	 1.2795324325561523 	 11.32683253288269 	 0.7866435050964355 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:42.317239 test begin: paddle.cummax(Tensor([2080, 100],"float32"), axis=-1, )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([2080, 100],"float32"), axis=-1, ) 	 208000 	 1000 	 0.02230668067932129 	 0.023209095001220703 	 1.8358230590820312e-05 	 7.128715515136719e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:42.586140 test begin: paddle.cummax(Tensor([2080, 100],"float32"), axis=-2, )
[Prof] paddle.cummax 	 paddle.cummax(Tensor([2080, 100],"float32"), axis=-2, ) 	 208000 	 1000 	 0.43363213539123535 	 0.41541218757629395 	 0.413222074508667 	 0.38858842849731445 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:43.525062 test begin: paddle.cummin(Tensor([100, 508033],"float32"), axis=-1, )
[Prof] paddle.cummin 	 paddle.cummin(Tensor([100, 508033],"float32"), axis=-1, ) 	 50803300 	 1000 	 59.221864461898804 	 2.5652780532836914 	 59.20938444137573 	 2.5313572883605957 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:44:53.303520 test begin: paddle.cummin(Tensor([100, 508033],"float32"), axis=-2, )
[Prof] paddle.cummin 	 paddle.cummin(Tensor([100, 508033],"float32"), axis=-2, ) 	 50803300 	 1000 	 0.790102481842041 	 0.791351318359375 	 0.7776312828063965 	 0.7764229774475098 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:45:03.456339 test begin: paddle.cummin(Tensor([508033, 100],"float32"), axis=-1, )
[Prof] paddle.cummin 	 paddle.cummin(Tensor([508033, 100],"float32"), axis=-1, ) 	 50803300 	 1000 	 1.333650827407837 	 8.544613361358643 	 1.3212952613830566 	 8.529678106307983 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:45:17.660054 test begin: paddle.cummin(Tensor([508033, 100],"float32"), axis=-2, )
[Prof] paddle.cummin 	 paddle.cummin(Tensor([508033, 100],"float32"), axis=-2, ) 	 50803300 	 1000 	 251.07656979560852 	 250.58751249313354 	 251.06406903266907 	 250.5684666633606 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:53:45.816126 test begin: paddle.cumprod(Tensor([2, 127009, 10, 10],"float64"), 1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 127009, 10, 10],"float64"), 1, ) 	 25401800 	 1000 	 66.04952716827393 	 64.2868492603302 	 66.04111742973328 	 64.27563381195068 	 258.2836651802063 	 66.04819989204407 	 0.06601762771606445 	 0.06517457962036133 	 
2025-07-27 20:01:22.118329 test begin: paddle.cumprod(Tensor([2, 3, 10, 423361],"float64"), 1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 10, 423361],"float64"), 1, ) 	 25401660 	 1000 	 0.30211567878723145 	 0.3026418685913086 	 0.2937440872192383 	 0.2915804386138916 	 2.846226692199707 	 2.0399487018585205 	 0.0003561973571777344 	 0.0012683868408203125 	 
2025-07-27 20:01:28.677341 test begin: paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=0, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=0, ) 	 50803272 	 1000 	 0.3294219970703125 	 0.3318145275115967 	 0.32071685791015625 	 0.3007693290710449 	 3.402783155441284 	 2.115487575531006 	 0.0004901885986328125 	 0.0013301372528076172 	 
2025-07-27 20:01:37.424124 test begin: paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=1, ) 	 50803272 	 1000 	 0.32195377349853516 	 0.32025814056396484 	 0.31295251846313477 	 0.3091452121734619 	 3.2661020755767822 	 2.1286182403564453 	 0.00041937828063964844 	 0.0013442039489746094 	 
2025-07-27 20:01:45.391532 test begin: paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=0, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=0, ) 	 50803290 	 1000 	 0.32941508293151855 	 0.3134651184082031 	 0.32082581520080566 	 0.30078721046447754 	 3.4078822135925293 	 2.1136486530303955 	 0.0004863739013671875 	 0.0013277530670166016 	 
2025-07-27 20:01:53.292405 test begin: paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=1, ) 	 50803290 	 1000 	 0.3222801685333252 	 0.32079100608825684 	 0.31362462043762207 	 0.3096632957458496 	 3.2596089839935303 	 2.133615493774414 	 0.00041365623474121094 	 0.0013446807861328125 	 
2025-07-27 20:02:01.021944 test begin: paddle.cumprod(Tensor([2, 3, 423361, 10],"float64"), 1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 423361, 10],"float64"), 1, ) 	 25401660 	 1000 	 0.302074670791626 	 0.30268144607543945 	 0.29383325576782227 	 0.2916419506072998 	 2.8485171794891357 	 2.042073965072632 	 0.0003604888916015625 	 0.001293182373046875 	 
2025-07-27 20:02:07.621870 test begin: paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=0, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=0, ) 	 50803320 	 1000 	 0.3293917179107666 	 0.31207704544067383 	 0.32059621810913086 	 0.30011963844299316 	 3.4084744453430176 	 2.1187644004821777 	 0.0004820823669433594 	 0.001331329345703125 	 
2025-07-27 20:02:15.662978 test begin: paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=1, ) 	 50803320 	 1000 	 0.322206974029541 	 0.32047104835510254 	 0.313521146774292 	 0.30943751335144043 	 3.2545061111450195 	 2.1294143199920654 	 0.0004203319549560547 	 0.0013442039489746094 	 
2025-07-27 20:02:23.981613 test begin: paddle.cumprod(Tensor([2, 423361, 3, 4, 5],"float32"), dim=0, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([2, 423361, 3, 4, 5],"float32"), dim=0, ) 	 50803320 	 1000 	 0.32939743995666504 	 0.3120884895324707 	 0.32074427604675293 	 0.30087757110595703 	 3.4008688926696777 	 2.117816209793091 	 0.0004775524139404297 	 0.0013277530670166016 	 
2025-07-27 20:02:31.827454 test begin: paddle.cumprod(Tensor([282241, 3, 3, 4, 5],"float32"), dim=1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([282241, 3, 3, 4, 5],"float32"), dim=1, ) 	 50803380 	 1000 	 0.32750511169433594 	 0.3266303539276123 	 0.3189115524291992 	 0.30447936058044434 	 3.265845775604248 	 2.1352713108062744 	 0.00042819976806640625 	 0.0013508796691894531 	 
2025-07-27 20:02:41.831313 test begin: paddle.cumprod(Tensor([84673, 3, 10, 10],"float64"), 1, )
[Prof] paddle.cumprod 	 paddle.cumprod(Tensor([84673, 3, 10, 10],"float64"), 1, ) 	 25401900 	 1000 	 0.30353617668151855 	 0.30405282974243164 	 0.29509568214416504 	 0.293149471282959 	 2.842930316925049 	 2.041243076324463 	 0.00034546852111816406 	 0.0013015270233154297 	 
2025-07-27 20:02:48.460719 test begin: paddle.cumsum(Tensor([50803201],"float32"), axis=0, )
[Prof] paddle.cumsum 	 paddle.cumsum(Tensor([50803201],"float32"), axis=0, ) 	 50803201 	 1000 	 0.3458414077758789 	 0.3296241760253906 	 4.553794860839844e-05 	 0.1683492660522461 	 0.3998076915740967 	 0.9452035427093506 	 5.817413330078125e-05 	 0.2416529655456543 	 
2025-07-27 20:02:52.125596 test begin: paddle.deg2rad(Tensor([25401601],"int64"), )
[Prof] paddle.deg2rad 	 paddle.deg2rad(Tensor([25401601],"int64"), ) 	 25401601 	 1000 	 0.378509521484375 	 0.2361440658569336 	 0.19338750839233398 	 0.2179861068725586 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:53.955044 test begin: paddle.deg2rad(Tensor([50803201],"float32"), )
[Prof] paddle.deg2rad 	 paddle.deg2rad(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.2957775592803955 	 0.2978966236114502 	 0.28053832054138184 	 0.2834322452545166 	 0.29587483406066895 	 0.29767870903015137 	 0.24454259872436523 	 0.23288297653198242 	 
2025-07-27 20:02:56.812689 test begin: paddle.deg2rad(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.deg2rad 	 paddle.deg2rad(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.29563021659851074 	 0.29783105850219727 	 0.2807435989379883 	 0.2833127975463867 	 0.2957174777984619 	 0.2976875305175781 	 0.2441694736480713 	 0.23401188850402832 	 
2025-07-27 20:02:59.671805 test begin: paddle.deg2rad(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.deg2rad 	 paddle.deg2rad(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.29593515396118164 	 0.2978644371032715 	 0.27330446243286133 	 0.2833409309387207 	 0.29604148864746094 	 0.29769468307495117 	 0.24479961395263672 	 0.23493313789367676 	 
2025-07-27 20:03:02.519060 test begin: paddle.deg2rad(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.deg2rad 	 paddle.deg2rad(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.2957794666290283 	 0.29791712760925293 	 0.2808372974395752 	 0.28185009956359863 	 0.29585886001586914 	 0.2977027893066406 	 0.24451136589050293 	 0.23369884490966797 	 
2025-07-27 20:03:05.372821 test begin: paddle.diag(Tensor([2000, 25402],"float32"), )
[Prof] paddle.diag 	 paddle.diag(Tensor([2000, 25402],"float32"), ) 	 50804000 	 1000 	 0.008641719818115234 	 0.017216920852661133 	 1.2636184692382812e-05 	 3.743171691894531e-05 	 0.15650653839111328 	 0.14032506942749023 	 0.07994699478149414 	 0.06996345520019531 	 
2025-07-27 20:03:06.529482 test begin: paddle.diag(Tensor([2000, 25402],"float32"), offset=-1, )
[Prof] paddle.diag 	 paddle.diag(Tensor([2000, 25402],"float32"), offset=-1, ) 	 50804000 	 1000 	 0.008859634399414062 	 0.017319679260253906 	 1.0251998901367188e-05 	 3.600120544433594e-05 	 0.15645170211791992 	 0.14031386375427246 	 0.07992100715637207 	 0.07164406776428223 	 
2025-07-27 20:03:07.682294 test begin: paddle.diag(Tensor([2000, 25402],"float32"), offset=1, )
[Prof] paddle.diag 	 paddle.diag(Tensor([2000, 25402],"float32"), offset=1, ) 	 50804000 	 1000 	 0.008894920349121094 	 0.0178830623626709 	 9.775161743164062e-06 	 7.343292236328125e-05 	 0.1564793586730957 	 0.14035606384277344 	 0.07997798919677734 	 0.07166647911071777 	 
2025-07-27 20:03:08.837075 test begin: paddle.diag(Tensor([25402, 2000],"float32"), )
[Prof] paddle.diag 	 paddle.diag(Tensor([25402, 2000],"float32"), ) 	 50804000 	 1000 	 0.008756875991821289 	 0.0172421932220459 	 2.193450927734375e-05 	 4.3392181396484375e-05 	 0.15566349029541016 	 0.13901185989379883 	 0.07949018478393555 	 0.06724023818969727 	 
2025-07-27 20:03:09.988595 test begin: paddle.diag(Tensor([25402, 2000],"float32"), offset=-1, )
[Prof] paddle.diag 	 paddle.diag(Tensor([25402, 2000],"float32"), offset=-1, ) 	 50804000 	 1000 	 0.00899052619934082 	 0.017531871795654297 	 1.239776611328125e-05 	 4.220008850097656e-05 	 0.15582847595214844 	 0.138993501663208 	 0.07956099510192871 	 0.0703744888305664 	 
2025-07-27 20:03:11.171597 test begin: paddle.diag(Tensor([25402, 2000],"float32"), offset=1, )
[Prof] paddle.diag 	 paddle.diag(Tensor([25402, 2000],"float32"), offset=1, ) 	 50804000 	 1000 	 0.015881776809692383 	 0.025623321533203125 	 2.7894973754882812e-05 	 9.059906005859375e-05 	 0.15547490119934082 	 0.1389789581298828 	 0.0792543888092041 	 0.06314969062805176 	 
2025-07-27 20:03:12.446435 test begin: paddle.diag_embed(Tensor([1058401, 3, 8],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([1058401, 3, 8],"float64"), ) 	 25401624 	 1000 	 2.5810706615448 	 2.6107168197631836 	 7.033348083496094e-05 	 1.3338220119476318 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:18.173195 test begin: paddle.diag_embed(Tensor([1411201, 3, 6],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([1411201, 3, 6],"float64"), ) 	 25401618 	 1000 	 2.228139877319336 	 2.1950948238372803 	 5.5789947509765625e-05 	 1.1214008331298828 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:23.188212 test begin: paddle.diag_embed(Tensor([2, 1058401, 12],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([2, 1058401, 12],"float64"), ) 	 25401624 	 1000 	 3.7052104473114014 	 3.860746383666992 	 4.601478576660156e-05 	 0.9801962375640869 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:33.056217 test begin: paddle.diag_embed(Tensor([2, 1587601, 8],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([2, 1587601, 8],"float64"), ) 	 25401616 	 1000 	 2.5836963653564453 	 2.8420398235321045 	 4.935264587402344e-05 	 1.3339662551879883 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:40.610327 test begin: paddle.diag_embed(Tensor([2, 2116801, 6],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([2, 2116801, 6],"float64"), ) 	 25401612 	 1000 	 2.2222087383270264 	 2.1953327655792236 	 4.7206878662109375e-05 	 1.1216189861297607 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:45.622154 test begin: paddle.diag_embed(Tensor([705601, 3, 12],"float64"), )
[Prof] paddle.diag_embed 	 paddle.diag_embed(Tensor([705601, 3, 12],"float64"), ) 	 25401636 	 1000 	 3.7109854221343994 	 3.8365354537963867 	 6.723403930664062e-05 	 0.9802770614624023 	 None 	 None 	 None 	 None 	 
2025-07-27 20:03:53.771306 test begin: paddle.diagonal(x=Tensor([117601, 6, 6, 6],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([117601, 6, 6, 6],"float64"), ) 	 25401816 	 1000 	 0.003619670867919922 	 0.004309654235839844 	 1.2159347534179688e-05 	 1.7881393432617188e-05 	 0.14925217628479004 	 0.13863325119018555 	 0.07615494728088379 	 0.06852889060974121 	 
2025-07-27 20:03:54.657057 test begin: paddle.diagonal(x=Tensor([176401, 6, 6, 2, 2],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([176401, 6, 6, 2, 2],"float64"), ) 	 25401744 	 1000 	 0.0038247108459472656 	 0.007574558258056641 	 0.00012993812561035156 	 1.8358230590820312e-05 	 0.1497352123260498 	 0.13856148719787598 	 0.07643938064575195 	 0.059973955154418945 	 
2025-07-27 20:03:55.485738 test begin: paddle.diagonal(x=Tensor([6, 117601, 6, 6],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 117601, 6, 6],"float64"), ) 	 25401816 	 1000 	 0.007734775543212891 	 0.00812220573425293 	 1.3113021850585938e-05 	 5.4836273193359375e-05 	 0.14914417266845703 	 0.13860535621643066 	 0.07610011100769043 	 0.06752514839172363 	 
2025-07-27 20:03:56.321574 test begin: paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), ) 	 25401744 	 1000 	 0.007764101028442383 	 0.007566213607788086 	 8.821487426757812e-06 	 1.9311904907226562e-05 	 0.1497790813446045 	 0.13856768608093262 	 0.07648086547851562 	 0.059891462326049805 	 
2025-07-27 20:03:57.156313 test begin: paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), axis1=-1, axis2=2, ) 	 25401744 	 1000 	 0.0039026737213134766 	 0.004618644714355469 	 7.152557373046875e-06 	 1.9311904907226562e-05 	 0.3087480068206787 	 0.29915285110473633 	 0.15777134895324707 	 0.15276622772216797 	 
2025-07-27 20:03:58.388733 test begin: paddle.diagonal(x=Tensor([6, 6, 117601, 6],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 117601, 6],"float64"), ) 	 25401816 	 1000 	 0.0036656856536865234 	 0.0043065547943115234 	 7.3909759521484375e-06 	 2.1219253540039062e-05 	 0.19658851623535156 	 0.294360876083374 	 0.10037922859191895 	 0.1503458023071289 	 
2025-07-27 20:03:59.502645 test begin: paddle.diagonal(x=Tensor([6, 6, 176401, 2, 2],"float64"), axis1=-1, axis2=2, )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 176401, 2, 2],"float64"), axis1=-1, axis2=2, ) 	 25401744 	 1000 	 0.0038695335388183594 	 0.005236148834228516 	 7.62939453125e-06 	 5.6743621826171875e-05 	 0.14976024627685547 	 0.1391925811767578 	 0.07644867897033691 	 0.06767487525939941 	 
2025-07-27 20:04:00.339046 test begin: paddle.diagonal(x=Tensor([6, 6, 6, 117601],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 6, 117601],"float64"), ) 	 25401816 	 1000 	 0.007887125015258789 	 0.007851123809814453 	 2.5272369384765625e-05 	 5.888938903808594e-05 	 0.19676518440246582 	 0.2944145202636719 	 0.10049676895141602 	 0.15043354034423828 	 
2025-07-27 20:04:01.477076 test begin: paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), ) 	 25402032 	 1000 	 0.003692626953125 	 0.004565715789794922 	 7.3909759521484375e-06 	 3.123283386230469e-05 	 0.19997787475585938 	 0.2929418087005615 	 0.10214042663574219 	 0.14961504936218262 	 
2025-07-27 20:04:02.595457 test begin: paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), axis1=-1, axis2=2, )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), axis1=-1, axis2=2, ) 	 25402032 	 1000 	 0.003962993621826172 	 0.004494190216064453 	 7.152557373046875e-06 	 1.7642974853515625e-05 	 0.15168190002441406 	 0.1399092674255371 	 0.07741475105285645 	 0.06698727607727051 	 
2025-07-27 20:04:03.417903 test begin: paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), ) 	 25402032 	 1000 	 0.00373077392578125 	 0.004305601119995117 	 7.152557373046875e-06 	 1.7404556274414062e-05 	 0.20021533966064453 	 0.2930572032928467 	 0.10234379768371582 	 0.14766860008239746 	 
2025-07-27 20:04:04.530590 test begin: paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), axis1=-1, axis2=2, )
[Prof] paddle.diagonal 	 paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), axis1=-1, axis2=2, ) 	 25402032 	 1000 	 0.0038716793060302734 	 0.004552125930786133 	 6.4373016357421875e-06 	 1.7881393432617188e-05 	 0.2798488140106201 	 0.27296948432922363 	 0.14301824569702148 	 0.13944101333618164 	 
2025-07-27 20:04:05.703910 test begin: paddle.diagonal_scatter(Tensor([10, 10160641],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([10, 10160641],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, ) 	 101606420 	 1000 	 0.3209974765777588 	 0.3161606788635254 	 0.08185267448425293 	 0.10743474960327148 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:08.618598 test begin: paddle.diagonal_scatter(Tensor([10, 5080321],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([10, 5080321],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, ) 	 50803220 	 1000 	 0.09002256393432617 	 0.0870978832244873 	 0.02293705940246582 	 0.02951645851135254 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:10.318519 test begin: paddle.diagonal_scatter(Tensor([10, 5080321],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([10, 5080321],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, ) 	 50803220 	 1000 	 0.32102203369140625 	 0.316251277923584 	 0.08185029029846191 	 0.1075124740600586 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:12.446159 test begin: paddle.diagonal_scatter(Tensor([10160641, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([10160641, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, ) 	 101606420 	 1000 	 0.32101893424987793 	 0.31618666648864746 	 0.08183717727661133 	 0.10746550559997559 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:15.419460 test begin: paddle.diagonal_scatter(Tensor([5080321, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([5080321, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, ) 	 50803220 	 1000 	 0.08994245529174805 	 0.08702611923217773 	 0.022931814193725586 	 0.029480457305908203 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:17.174799 test begin: paddle.diagonal_scatter(Tensor([5080321, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.diagonal_scatter 	 paddle.diagonal_scatter(Tensor([5080321, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, ) 	 50803220 	 1000 	 0.3210177421569824 	 0.3185384273529053 	 0.08185577392578125 	 0.10747122764587402 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:04:19.317463 test begin: paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.9453275203704834 	 0.26168251037597656 	 0.32201266288757324 	 0.24247527122497559 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:21.077660 test begin: paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.9451136589050293 	 0.2675895690917969 	 0.32197141647338867 	 0.24241995811462402 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:22.826999 test begin: paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 0.9451684951782227 	 0.26148533821105957 	 0.3219585418701172 	 0.2421739101409912 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:24.562176 test begin: paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.8708209991455078 	 0.2614634037017822 	 0.29667067527770996 	 0.24283456802368164 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:26.226702 test begin: paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.8708682060241699 	 0.26148509979248047 	 0.2966783046722412 	 0.24259471893310547 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:27.925427 test begin: paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 0.8707640171051025 	 0.2614474296569824 	 0.2966458797454834 	 0.24249696731567383 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:29.595345 test begin: paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.8707914352416992 	 0.26151013374328613 	 0.2966649532318115 	 0.2426300048828125 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:31.260214 test begin: paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, ) 	 25401664 	 1000 	 1.0701038837432861 	 0.5321574211120605 	 0.36456990242004395 	 0.28055667877197266 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:34.775792 test begin: paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, ) 	 25401664 	 1000 	 1.0701415538787842 	 0.5362911224365234 	 0.36461758613586426 	 0.28058481216430664 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:39.795182 test begin: paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 1.069953441619873 	 0.3124520778656006 	 0.36452746391296387 	 0.2807495594024658 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:42.662765 test begin: paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, ) 	 25401664 	 1000 	 0.8072073459625244 	 0.26525092124938965 	 0.27503347396850586 	 0.2439131736755371 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:44.274606 test begin: paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, )
[Prof] paddle.diff 	 paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, ) 	 25401664 	 1000 	 0.8072340488433838 	 0.26288890838623047 	 0.2750124931335449 	 0.24167823791503906 	 None 	 None 	 None 	 None 	 
2025-07-27 20:04:45.879814 test begin: paddle.digamma(Tensor([16538, 3, 32, 32],"float32"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([16538, 3, 32, 32],"float32"), ) 	 50804736 	 1000 	 0.9640865325927734 	 1.0642766952514648 	 0.9489352703094482 	 1.053342342376709 	 4.498582601547241 	 1.075098991394043 	 4.447482347488403 	 0.549297571182251 	 
2025-07-27 20:04:55.263249 test begin: paddle.digamma(Tensor([8, 3, 32, 33076],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 3, 32, 33076],"float64"), ) 	 25402368 	 1000 	 1.1738502979278564 	 1.143845796585083 	 1.1653244495391846 	 1.1320362091064453 	 8.54931354522705 	 1.0873441696166992 	 8.49143099784851 	 0.5555505752563477 	 
2025-07-27 20:05:08.379747 test begin: paddle.digamma(Tensor([8, 3, 32, 66151],"float32"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 3, 32, 66151],"float32"), ) 	 50803968 	 1000 	 0.9641575813293457 	 1.0656406879425049 	 0.9546740055084229 	 1.0551083087921143 	 4.496226072311401 	 1.0751044750213623 	 4.442119121551514 	 0.5493292808532715 	 
2025-07-27 20:05:17.653610 test begin: paddle.digamma(Tensor([8, 3, 33076, 32],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 3, 33076, 32],"float64"), ) 	 25402368 	 1000 	 1.17390775680542 	 1.144120216369629 	 1.1655406951904297 	 1.133653163909912 	 8.548853158950806 	 1.087451696395874 	 8.497581720352173 	 0.5556552410125732 	 
2025-07-27 20:05:30.769402 test begin: paddle.digamma(Tensor([8, 3, 66151, 32],"float32"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 3, 66151, 32],"float32"), ) 	 50803968 	 1000 	 0.9640817642211914 	 1.763611078262329 	 0.9488935470581055 	 1.3021595478057861 	 4.49561619758606 	 1.0750694274902344 	 4.435298919677734 	 0.5492684841156006 	 
2025-07-27 20:05:42.453441 test begin: paddle.digamma(Tensor([8, 3101, 32, 32],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 3101, 32, 32],"float64"), ) 	 25403392 	 1000 	 1.2539772987365723 	 1.1442310810089111 	 1.2455627918243408 	 1.1275732517242432 	 8.548004388809204 	 1.0876986980438232 	 8.483691215515137 	 0.5557494163513184 	 
2025-07-27 20:05:55.645980 test begin: paddle.digamma(Tensor([8, 6202, 32, 32],"float32"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8, 6202, 32, 32],"float32"), ) 	 50806784 	 1000 	 0.9641282558441162 	 1.0645685195922852 	 0.9556238651275635 	 1.0541560649871826 	 4.496041774749756 	 1.0751843452453613 	 4.443958520889282 	 0.5494520664215088 	 
2025-07-27 20:06:04.914667 test begin: paddle.digamma(Tensor([8269, 3, 32, 32],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(Tensor([8269, 3, 32, 32],"float64"), ) 	 25402368 	 1000 	 1.1739747524261475 	 1.1487982273101807 	 1.1583988666534424 	 1.1301469802856445 	 8.553788900375366 	 1.0876555442810059 	 8.493521451950073 	 0.5557570457458496 	 
2025-07-27 20:06:18.346523 test begin: paddle.digamma(x=Tensor([19601, 6, 6, 6, 6],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(x=Tensor([19601, 6, 6, 6, 6],"float64"), ) 	 25402896 	 1000 	 1.17421293258667 	 1.146880865097046 	 1.1656568050384521 	 1.136197566986084 	 8.562454223632812 	 1.087522268295288 	 8.511128425598145 	 0.5556271076202393 	 
2025-07-27 20:06:31.450996 test begin: paddle.digamma(x=Tensor([3, 39201, 6, 6, 6],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(x=Tensor([3, 39201, 6, 6, 6],"float64"), ) 	 25402248 	 1000 	 1.171797752380371 	 1.1482913494110107 	 1.1631979942321777 	 1.1353867053985596 	 8.560969829559326 	 1.0877349376678467 	 8.509846925735474 	 0.5557312965393066 	 
2025-07-27 20:06:44.482480 test begin: paddle.digamma(x=Tensor([3, 6, 39201, 6, 6],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(x=Tensor([3, 6, 39201, 6, 6],"float64"), ) 	 25402248 	 1000 	 1.1738858222961426 	 1.1471467018127441 	 1.165449857711792 	 1.1367080211639404 	 8.560606002807617 	 1.0876240730285645 	 8.509581565856934 	 0.5557477474212646 	 
2025-07-27 20:06:57.604346 test begin: paddle.digamma(x=Tensor([3, 6, 6, 39201, 6],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(x=Tensor([3, 6, 6, 39201, 6],"float64"), ) 	 25402248 	 1000 	 1.1736505031585693 	 1.1467697620391846 	 1.1651101112365723 	 1.1359031200408936 	 8.56034541130066 	 1.0875179767608643 	 8.509254217147827 	 0.5556421279907227 	 
2025-07-27 20:07:10.719175 test begin: paddle.digamma(x=Tensor([3, 6, 6, 6, 39201],"float64"), )
[Prof] paddle.digamma 	 paddle.digamma(x=Tensor([3, 6, 6, 6, 39201],"float64"), ) 	 25402248 	 1000 	 1.1738057136535645 	 1.1466550827026367 	 1.1652817726135254 	 1.1362216472625732 	 8.569880485534668 	 1.0874314308166504 	 8.513956069946289 	 0.5555727481842041 	 
2025-07-27 20:07:23.881534 test begin: paddle.dist(x=Tensor([10],"float64"), y=Tensor([2540161, 10],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([10],"float64"), y=Tensor([2540161, 10],"float64"), ) 	 25401620 	 1000 	 0.45409083366394043 	 0.45481324195861816 	 0.1157999038696289 	 0.15476512908935547 	 6.750462055206299 	 2.8727991580963135 	 1.3818960189819336 	 0.22572970390319824 	 
2025-07-27 20:07:35.036493 test begin: paddle.dist(x=Tensor([113401, 1, 1, 4, 4],"float64"), y=Tensor([113401, 8, 7, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([113401, 1, 1, 4, 4],"float64"), y=Tensor([113401, 8, 7, 1, 4],"float64"), ) 	 27216240 	 1000 	 1.3800933361053467 	 1.4036693572998047 	 0.35187625885009766 	 0.4777688980102539 	 8.543016910552979 	 11.307833909988403 	 1.7446961402893066 	 0.8888261318206787 	 
2025-07-27 20:07:58.305442 test begin: paddle.dist(x=Tensor([1587601, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([1587601, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), ) 	 25401644 	 1000 	 2.213491439819336 	 2.2979633808135986 	 0.5644495487213135 	 0.7822840213775635 	 15.252211332321167 	 19.248882293701172 	 2.5949857234954834 	 1.405111312866211 	 
2025-07-27 20:08:39.420662 test begin: paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 453601, 7, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 453601, 7, 1, 4],"float64"), ) 	 25401688 	 1000 	 1.3678722381591797 	 1.3940174579620361 	 0.3487823009490967 	 0.47452425956726074 	 9.952751874923706 	 11.31414532661438 	 1.6942899227142334 	 0.8258926868438721 	 
2025-07-27 20:09:04.060709 test begin: paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 396901, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 396901, 1, 4],"float64"), ) 	 25401696 	 1000 	 1.3680353164672852 	 1.3947606086730957 	 0.3489055633544922 	 0.4747788906097412 	 9.950684070587158 	 11.313026428222656 	 1.693882942199707 	 0.8257863521575928 	 
2025-07-27 20:09:28.693448 test begin: paddle.dist(x=Tensor([2, 1, 3175201, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 1, 3175201, 4],"float64"), y=Tensor([7, 1, 4],"float64"), ) 	 25401636 	 1000 	 3.042590856552124 	 3.065838098526001 	 0.7758655548095703 	 1.043515682220459 	 16.214314460754395 	 20.835856437683105 	 2.758483648300171 	 1.5208592414855957 	 
2025-07-27 20:10:12.470536 test begin: paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([6350401, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([6350401, 1, 4],"float64"), ) 	 25401636 	 1000 	 2.6970691680908203 	 2.7533316612243652 	 0.6876983642578125 	 0.937298059463501 	 17.628465175628662 	 22.35959267616272 	 3.0007779598236084 	 1.6321580410003662 	 
2025-07-27 20:11:00.005916 test begin: paddle.dist(x=Tensor([2, 1, 793801, 4, 4],"float64"), y=Tensor([2, 8, 793801, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 1, 793801, 4, 4],"float64"), y=Tensor([2, 8, 793801, 1, 4],"float64"), ) 	 76204896 	 1000 	 3.7553951740264893 	 3.7487168312072754 	 0.9576582908630371 	 1.2756307125091553 	 18.16543674468994 	 24.643549919128418 	 3.7095589637756348 	 1.9369709491729736 	 
2025-07-27 20:11:52.138893 test begin: paddle.dist(x=Tensor([2, 793801, 1, 4, 4],"float64"), y=Tensor([2, 793801, 7, 1, 4],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([2, 793801, 1, 4, 4],"float64"), y=Tensor([2, 793801, 7, 1, 4],"float64"), ) 	 69854488 	 1000 	 2.520655870437622 	 2.5563905239105225 	 0.6427788734436035 	 0.8701720237731934 	 15.266368627548218 	 20.082451581954956 	 3.118279218673706 	 1.5786709785461426 	 
2025-07-27 20:12:34.192555 test begin: paddle.dist(x=Tensor([25401601],"float64"), y=Tensor([4, 25401601],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([25401601],"float64"), y=Tensor([4, 25401601],"float64"), ) 	 127008005 	 1000 	 2.3452389240264893 	 2.35453724861145 	 0.598074197769165 	 0.8010964393615723 	 8.484369277954102 	 12.600095748901367 	 2.165566921234131 	 1.0728511810302734 	 
2025-07-27 20:13:02.830993 test begin: paddle.dist(x=Tensor([6350401],"float64"), y=Tensor([4, 6350401],"float64"), )
[Prof] paddle.dist 	 paddle.dist(x=Tensor([6350401],"float64"), y=Tensor([4, 6350401],"float64"), ) 	 31752005 	 1000 	 0.6015276908874512 	 0.5988593101501465 	 0.15339970588684082 	 0.2038121223449707 	 2.145859956741333 	 3.190045118331909 	 0.547454833984375 	 0.27166318893432617 	 
2025-07-27 20:13:10.040360 test begin: paddle.divide(Tensor([128, 396901],"float32"), Tensor([1, 396901],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([128, 396901],"float32"), Tensor([1, 396901],"float32"), ) 	 51200229 	 1000 	 0.299513578414917 	 0.31157970428466797 	 0.28914952278137207 	 0.2993185520172119 	 0.8016872406005859 	 1.8391141891479492 	 0.40952014923095703 	 0.31310462951660156 	 
2025-07-27 20:13:14.950789 test begin: paddle.divide(Tensor([51059, 995],"float32"), Tensor([1, 995],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([51059, 995],"float32"), Tensor([1, 995],"float32"), ) 	 50804700 	 1000 	 0.29706788063049316 	 0.3099792003631592 	 0.2866806983947754 	 0.2979598045349121 	 0.9034395217895508 	 1.862032413482666 	 0.3074817657470703 	 0.2718467712402344 	 
2025-07-27 20:13:19.984779 test begin: paddle.divide(Tensor([51059, 995],"float32"), Tensor([51059, 995],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([51059, 995],"float32"), Tensor([51059, 995],"float32"), ) 	 101607410 	 1000 	 0.45053601264953613 	 0.45216894149780273 	 0.44115495681762695 	 0.43743324279785156 	 1.1319372653961182 	 2.0918657779693604 	 1.069746971130371 	 0.4276106357574463 	 
2025-07-27 20:13:28.493548 test begin: paddle.divide(Tensor([512, 99226],"float32"), Tensor([1, 99226],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([512, 99226],"float32"), Tensor([1, 99226],"float32"), ) 	 50902938 	 1000 	 0.2952718734741211 	 0.3105964660644531 	 0.2770075798034668 	 0.2918252944946289 	 0.8423418998718262 	 1.8351554870605469 	 0.28662824630737305 	 0.3124704360961914 	 
2025-07-27 20:13:33.444887 test begin: paddle.divide(Tensor([544, 93431],"float32"), Tensor([1, 93431],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([544, 93431],"float32"), Tensor([1, 93431],"float32"), ) 	 50919895 	 1000 	 0.2954680919647217 	 0.32323646545410156 	 0.27756190299987793 	 0.29192423820495605 	 0.8928067684173584 	 1.8397014141082764 	 0.3038475513458252 	 0.31325459480285645 	 
2025-07-27 20:13:40.706895 test begin: paddle.divide(Tensor([544, 93431],"float32"), Tensor([544, 93431],"float32"), )
[Prof] paddle.divide 	 paddle.divide(Tensor([544, 93431],"float32"), Tensor([544, 93431],"float32"), ) 	 101652928 	 1000 	 0.4508850574493408 	 0.4569239616394043 	 0.4338510036468506 	 0.43210744857788086 	 1.1130800247192383 	 2.0925683975219727 	 1.04154634475708 	 0.427746057510376 	 
2025-07-27 20:13:47.399466 test begin: paddle.divide(x=Tensor([16934401, 3],"float32"), y=Tensor([3],"float32"), )
[Prof] paddle.divide 	 paddle.divide(x=Tensor([16934401, 3],"float32"), y=Tensor([3],"float32"), ) 	 50803206 	 1000 	 0.2965085506439209 	 0.3099193572998047 	 0.27802348136901855 	 0.2913689613342285 	 5.672785043716431 	 1.8561713695526123 	 1.9338085651397705 	 0.27097344398498535 	 
2025-07-27 20:13:57.234696 test begin: paddle.divide(x=Tensor([187679, 271],"float32"), y=Tensor([271],"float32"), )
[Prof] paddle.divide 	 paddle.divide(x=Tensor([187679, 271],"float32"), y=Tensor([271],"float32"), ) 	 50861280 	 1000 	 0.2972571849822998 	 0.3099789619445801 	 0.27893590927124023 	 0.2911982536315918 	 1.0057494640350342 	 1.8375542163848877 	 0.34233546257019043 	 0.26825404167175293 	 
2025-07-27 20:14:02.421861 test begin: paddle.dot(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
Warning: The core code of paddle.dot is too complex.
[Prof] paddle.dot 	 paddle.dot(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), ) 	 50803202 	 1000 	 6.13649845123291 	 0.29356908798217773 	 6.125245809555054 	 0.149977445602417 	 0.626380205154419 	 0.6001718044281006 	 0.3199636936187744 	 0.30663132667541504 	 
2025-07-27 20:14:11.231312 test begin: paddle.dot(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), )
[Prof] paddle.dot 	 paddle.dot(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.2958643436431885 	 0.2930333614349365 	 0.27956485748291016 	 0.14970755577087402 	 0.7088539600372314 	 0.604442834854126 	 0.3621513843536377 	 0.30895376205444336 	 
2025-07-27 20:14:14.846344 test begin: paddle.dot(x=Tensor([5080320],"int32"), y=Tensor([5080320],"int32"), )
[Prof] paddle.dot 	 paddle.dot(x=Tensor([5080320],"int32"), y=Tensor([5080320],"int32"), ) 	 10160640 	 1000 	 203.16488575935364 	 0.03835248947143555 	 203.15510654449463 	 0.019568443298339844 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:41.046409 test begin: paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,1,3,], )
W0727 20:17:41.982425 24094 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,1,3,], ) 	 25401618 	 1000 	 0.031090497970581055 	 0.009436607360839844 	 2.3365020751953125e-05 	 2.574920654296875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:42.134828 test begin: paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,], )
W0727 20:17:42.847368 24095 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,], ) 	 25401618 	 1000 	 0.016988754272460938 	 0.007053852081298828 	 2.3365020751953125e-05 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:42.972307 test begin: paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[2,4,], )
W0727 20:17:43.701417 24096 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[2,4,], ) 	 25401618 	 1000 	 0.03995776176452637 	 0.013123273849487305 	 2.8848648071289062e-05 	 2.384185791015625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:43.836339 test begin: paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,1,3,], )
W0727 20:17:44.837875 24097 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,1,3,], ) 	 25401624 	 1000 	 0.05211305618286133 	 0.014722108840942383 	 3.552436828613281e-05 	 2.3603439331054688e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:45.008550 test begin: paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,], )
W0727 20:17:45.729357 24099 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,], ) 	 25401624 	 1000 	 0.016973018646240234 	 0.006947517395019531 	 1.7881393432617188e-05 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:45.853398 test begin: paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[2,4,], )
W0727 20:17:46.585685 24101 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[2,4,], ) 	 25401624 	 1000 	 0.024029970169067383 	 0.008086681365966797 	 2.1219253540039062e-05 	 2.0265579223632812e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:46.714497 test begin: paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,1,3,], )
W0727 20:17:47.796541 24106 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,1,3,], ) 	 25401612 	 1000 	 0.03113842010498047 	 0.009230613708496094 	 1.71661376953125e-05 	 2.3126602172851562e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:48.014145 test begin: paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,], )
W0727 20:17:48.730942 24107 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,], ) 	 25401612 	 1000 	 0.016799449920654297 	 0.00684356689453125 	 2.193450927734375e-05 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:51.480661 test begin: paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[2,4,], )
W0727 20:17:52.207732 24108 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.dsplit 	 paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[2,4,], ) 	 25401612 	 1000 	 0.023955106735229492 	 0.008087873458862305 	 1.4543533325195312e-05 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:17:55.472718 test begin: paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], ) 	 76204872 	 1000 	 0.9428842067718506 	 0.9390802383422852 	 0.9233248233795166 	 0.9244987964630127 	 0.9551270008087158 	 0.08439397811889648 	 0.8860244750976562 	 8.106231689453125e-05 	 
2025-07-27 20:18:01.578265 test begin: paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),], ) 	 25401624 	 1000 	 0.31957530975341797 	 0.31319642066955566 	 0.3047175407409668 	 0.1599414348602295 	 0.3182234764099121 	 0.08414292335510254 	 0.2500491142272949 	 7.43865966796875e-05 	 
2025-07-27 20:18:03.918707 test begin: paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401900 	 1000 	 0.32076549530029297 	 0.3225541114807129 	 0.3014664649963379 	 0.30823469161987305 	 0.32363367080688477 	 0.07968664169311523 	 0.2548339366912842 	 0.00017833709716796875 	 
2025-07-27 20:18:06.014855 test begin: paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401900 	 1000 	 0.32082533836364746 	 0.3287816047668457 	 0.30137157440185547 	 0.31464552879333496 	 0.32398247718811035 	 0.0792384147644043 	 0.25521302223205566 	 7.748603820800781e-05 	 
2025-07-27 20:18:08.112510 test begin: paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], ) 	 76204836 	 1000 	 0.9705014228820801 	 0.9444358348846436 	 0.9512429237365723 	 0.9242606163024902 	 0.9676759243011475 	 0.08479809761047363 	 0.8985378742218018 	 8.559226989746094e-05 	 
2025-07-27 20:18:14.291529 test begin: paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401660 	 1000 	 0.3210432529449463 	 0.31618309020996094 	 0.3016173839569092 	 0.3022444248199463 	 0.3229990005493164 	 0.07700300216674805 	 0.2539951801300049 	 5.793571472167969e-05 	 
2025-07-27 20:18:16.415414 test begin: paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401660 	 1000 	 0.32112908363342285 	 0.3258938789367676 	 0.2958681583404541 	 0.3120713233947754 	 0.32356977462768555 	 0.07673120498657227 	 0.254779577255249 	 6.0558319091796875e-05 	 
2025-07-27 20:18:18.550776 test begin: paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),], ) 	 25401660 	 1000 	 0.32088685035705566 	 0.3228614330291748 	 0.3012962341308594 	 0.3060572147369385 	 0.3235335350036621 	 0.10387778282165527 	 0.2526867389678955 	 0.00010466575622558594 	 
2025-07-27 20:18:20.742722 test begin: paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401900 	 1000 	 0.3207523822784424 	 0.3193202018737793 	 0.3012871742248535 	 0.3051772117614746 	 0.323108434677124 	 0.07729554176330566 	 0.25409388542175293 	 5.269050598144531e-05 	 
2025-07-27 20:18:22.849079 test begin: paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 76204980 	 1000 	 0.9686892032623291 	 0.9459109306335449 	 0.9493227005004883 	 0.9311721324920654 	 0.9674811363220215 	 0.07760763168334961 	 0.8993780612945557 	 5.340576171875e-05 	 
2025-07-27 20:18:29.025300 test begin: paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401660 	 1000 	 0.3206899166107178 	 0.31313371658325195 	 0.30570340156555176 	 0.1599104404449463 	 0.32306337356567383 	 0.05951261520385742 	 0.26198840141296387 	 6.4849853515625e-05 	 
2025-07-27 20:18:31.088654 test begin: paddle.dstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 76204818 	 1000 	 1.5557811260223389 	 2.425783634185791 	 1.536585807800293 	 2.387108325958252 	 2.5875959396362305 	 0.09601521492004395 	 2.518437147140503 	 6.604194641113281e-05 	 
2025-07-27 20:18:43.438921 test begin: paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 76204890 	 1000 	 0.9621744155883789 	 2.5256083011627197 	 0.9427354335784912 	 2.510847568511963 	 1.0693128108978271 	 0.09153246879577637 	 0.9969198703765869 	 7.891654968261719e-05 	 
2025-07-27 20:18:51.285326 test begin: paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401630 	 1000 	 0.39003467559814453 	 0.3131985664367676 	 0.37503600120544434 	 0.159959077835083 	 0.39620351791381836 	 0.06771492958068848 	 0.33978271484375 	 7.62939453125e-05 	 
2025-07-27 20:18:53.551990 test begin: paddle.dstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], ) 	 76204824 	 1000 	 1.5558042526245117 	 2.4153637886047363 	 1.5367166996002197 	 2.3804473876953125 	 2.5880372524261475 	 0.10827255249023438 	 2.5080254077911377 	 8.296966552734375e-05 	 
2025-07-27 20:19:04.338502 test begin: paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 76204920 	 1000 	 0.9622764587402344 	 2.5256569385528564 	 0.943026065826416 	 2.5108275413513184 	 1.066145420074463 	 0.09117889404296875 	 0.9972014427185059 	 5.745887756347656e-05 	 
2025-07-27 20:19:12.181218 test begin: paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.dstack 	 paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401640 	 1000 	 0.38958287239074707 	 0.31717848777770996 	 0.37459564208984375 	 0.15990686416625977 	 0.3961794376373291 	 0.06650471687316895 	 0.3401520252227783 	 4.458427429199219e-05 	 
2025-07-27 20:19:14.419234 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([200, 8, 498, 498],"float32"), Tensor([200, 8, 498, 64],"float32"), )
Warning: The core code of paddle.einsum is too complex.
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([200, 8, 498, 498],"float32"), Tensor([200, 8, 498, 64],"float32"), ) 	 447801600 	 1000 	 6.083268165588379 	 6.081832647323608 	 6.0238165855407715 	 6.029064655303955 	 12.349382877349854 	 9.512354373931885 	 2.5252773761749268 	 4.86031436920166 	 
2025-07-27 20:19:57.050960 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([209, 8, 477, 477],"float32"), Tensor([209, 8, 477, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([209, 8, 477, 477],"float32"), Tensor([209, 8, 477, 64],"float32"), ) 	 431471304 	 1000 	 6.02391791343689 	 6.018846273422241 	 5.9685304164886475 	 5.966822624206543 	 12.352098941802979 	 9.607046365737915 	 2.525402784347534 	 4.908745527267456 	 
2025-07-27 20:20:41.160073 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([218, 8, 457, 457],"float32"), Tensor([218, 8, 457, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([218, 8, 457, 457],"float32"), Tensor([218, 8, 457, 64],"float32"), ) 	 415241168 	 1000 	 6.07809853553772 	 6.300826549530029 	 6.011497497558594 	 6.024874687194824 	 12.435621500015259 	 9.839097023010254 	 2.5430023670196533 	 5.027546167373657 	 
2025-07-27 20:21:25.697909 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([26, 8, 498, 498],"float32"), Tensor([26, 8, 498, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([26, 8, 498, 498],"float32"), Tensor([26, 8, 498, 64],"float32"), ) 	 58214208 	 1000 	 0.8238809108734131 	 0.8241186141967773 	 0.7683744430541992 	 0.77254319190979 	 1.6578359603881836 	 1.2804946899414062 	 0.3390345573425293 	 0.6542611122131348 	 
2025-07-27 20:21:31.336203 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([28, 8, 477, 477],"float32"), Tensor([28, 8, 477, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([28, 8, 477, 477],"float32"), Tensor([28, 8, 477, 64],"float32"), ) 	 57804768 	 1000 	 0.8790140151977539 	 0.8813402652740479 	 0.8237459659576416 	 0.8264591693878174 	 1.747781753540039 	 1.3705716133117676 	 0.35738515853881836 	 0.7001996040344238 	 
2025-07-27 20:21:37.944468 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 54, 498, 498],"float32"), Tensor([30, 54, 498, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 54, 498, 498],"float32"), Tensor([30, 54, 498, 64],"float32"), ) 	 453399120 	 1000 	 6.116459369659424 	 6.1218647956848145 	 6.046040773391724 	 6.069550514221191 	 12.458580732345581 	 9.6011381149292 	 2.548434257507324 	 4.909985780715942 	 
2025-07-27 20:22:21.379015 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 56, 477, 477],"float32"), Tensor([30, 56, 477, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 56, 477, 477],"float32"), Tensor([30, 56, 477, 64],"float32"), ) 	 433535760 	 1000 	 6.084045171737671 	 6.0854692459106445 	 6.017198324203491 	 6.0189361572265625 	 12.445995092391968 	 9.694926738739014 	 2.545210599899292 	 4.9536027908325195 	 
2025-07-27 20:23:03.930643 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 58, 457, 457],"float32"), Tensor([30, 58, 457, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 58, 457, 457],"float32"), Tensor([30, 58, 457, 64],"float32"), ) 	 414288780 	 1000 	 6.0792882442474365 	 6.07919454574585 	 6.013148784637451 	 6.011882781982422 	 12.425157070159912 	 9.833114385604858 	 2.541199207305908 	 5.024011850357056 	 
2025-07-27 20:23:47.301671 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 7, 498, 498],"float32"), Tensor([30, 7, 498, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 7, 498, 498],"float32"), Tensor([30, 7, 498, 64],"float32"), ) 	 58773960 	 1000 	 0.8241384029388428 	 0.8271052837371826 	 0.7673790454864502 	 0.7739443778991699 	 1.6721124649047852 	 1.286860704421997 	 0.3418917655944824 	 0.6573827266693115 	 
2025-07-27 20:23:53.038787 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 426, 498],"float32"), Tensor([30, 8, 498, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 426, 498],"float32"), Tensor([30, 8, 498, 64],"float32"), ) 	 58564800 	 1000 	 0.9266088008880615 	 0.9258823394775391 	 0.869408369064331 	 0.8741567134857178 	 1.6990504264831543 	 1.3267009258270264 	 0.3473930358886719 	 0.6777985095977783 	 
2025-07-27 20:23:59.061319 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 444, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 444, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), ) 	 58155840 	 1000 	 0.88474440574646 	 0.8849647045135498 	 0.8291232585906982 	 0.8319075107574463 	 1.7278282642364502 	 1.3556344509124756 	 0.3532986640930176 	 0.6926205158233643 	 
2025-07-27 20:24:04.998206 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 457, 457],"float32"), Tensor([30, 8, 457, 464],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 457, 457],"float32"), Tensor([30, 8, 457, 464],"float32"), ) 	 101015280 	 1000 	 3.3643341064453125 	 3.3645944595336914 	 3.299481153488159 	 3.2974421977996826 	 7.636505603790283 	 6.7420265674591064 	 1.562429428100586 	 3.4447925090789795 	 
2025-07-27 20:24:31.077219 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 464, 457],"float32"), Tensor([30, 8, 457, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 464, 457],"float32"), Tensor([30, 8, 457, 64],"float32"), ) 	 57911040 	 1000 	 0.8562817573547363 	 0.8598909378051758 	 0.8005499839782715 	 0.7865629196166992 	 1.7520155906677246 	 1.3841264247894287 	 0.35825061798095703 	 0.7069802284240723 	 
2025-07-27 20:24:38.725311 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 444],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 444],"float32"), ) 	 105436080 	 1000 	 3.4816689491271973 	 3.481306314468384 	 3.4259145259857178 	 3.4296422004699707 	 7.681520462036133 	 6.743422508239746 	 1.5700459480285645 	 3.445241689682007 	 
2025-07-27 20:25:02.806526 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), ) 	 61933680 	 1000 	 0.8838043212890625 	 0.8856770992279053 	 0.818793773651123 	 0.8193070888519287 	 1.8128268718719482 	 1.412294626235962 	 0.3706526756286621 	 0.7215163707733154 	 
2025-07-27 20:25:08.971056 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 498, 498],"float32"), Tensor([30, 8, 498, 426],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 498, 498],"float32"), Tensor([30, 8, 498, 426],"float32"), ) 	 110436480 	 1000 	 3.656292200088501 	 3.65380859375 	 3.6006534099578857 	 3.6007301807403564 	 7.761563301086426 	 6.8014726638793945 	 1.5847268104553223 	 3.4753830432891846 	 
2025-07-27 20:25:33.587322 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 9, 457, 457],"float32"), Tensor([30, 9, 457, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 9, 457, 457],"float32"), Tensor([30, 9, 457, 64],"float32"), ) 	 64286190 	 1000 	 0.9502308368682861 	 1.1842608451843262 	 0.8928542137145996 	 0.8926267623901367 	 1.9532239437103271 	 1.5396623611450195 	 0.399411678314209 	 0.7859456539154053 	 
2025-07-27 20:25:44.959370 test begin: paddle.einsum("b h i j, b h j d -> b h i d", Tensor([31, 8, 457, 457],"float32"), Tensor([31, 8, 457, 64],"float32"), )
[Prof] paddle.einsum 	 paddle.einsum("b h i j, b h j d -> b h i d", Tensor([31, 8, 457, 457],"float32"), Tensor([31, 8, 457, 64],"float32"), ) 	 59048056 	 1000 	 0.9434506893157959 	 0.9490797519683838 	 0.887836217880249 	 0.8917703628540039 	 1.8666410446166992 	 1.4898879528045654 	 0.38175201416015625 	 0.7613110542297363 	 
2025-07-27 20:25:51.315342 test begin: paddle.empty_like(Tensor([101606401],"uint8"), )
[Prof] paddle.empty_like 	 paddle.empty_like(Tensor([101606401],"uint8"), ) 	 101606401 	 1000 	 0.019385099411010742 	 0.00999903678894043 	 1.0251998901367188e-05 	 5.316734313964844e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:52.241537 test begin: paddle.empty_like(Tensor([4096, 12404],"bool"), )
[Prof] paddle.empty_like 	 paddle.empty_like(Tensor([4096, 12404],"bool"), ) 	 50806784 	 1000 	 0.011816024780273438 	 0.005817413330078125 	 7.867813110351562e-06 	 4.3392181396484375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:52.952226 test begin: paddle.empty_like(Tensor([4096, 12404],"float32"), )
[Prof] paddle.empty_like 	 paddle.empty_like(Tensor([4096, 12404],"float32"), ) 	 50806784 	 1000 	 0.011734962463378906 	 0.012160062789916992 	 9.059906005859375e-06 	 4.38690185546875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:53.827262 test begin: paddle.empty_like(Tensor([793801, 64],"bool"), )
[Prof] paddle.empty_like 	 paddle.empty_like(Tensor([793801, 64],"bool"), ) 	 50803264 	 1000 	 0.011756658554077148 	 0.01434779167175293 	 8.106231689453125e-06 	 4.839897155761719e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:54.570831 test begin: paddle.empty_like(Tensor([793801, 64],"float32"), )
[Prof] paddle.empty_like 	 paddle.empty_like(Tensor([793801, 64],"float32"), ) 	 50803264 	 1000 	 0.011942625045776367 	 0.0054929256439208984 	 9.298324584960938e-06 	 3.6716461181640625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:55.395427 test begin: paddle.equal(Tensor([4148, 6124],"int64"), Tensor([4148, 6124],"int64"), )
[Prof] paddle.equal 	 paddle.equal(Tensor([4148, 6124],"int64"), Tensor([4148, 6124],"int64"), ) 	 50804704 	 1000 	 0.3089292049407959 	 0.31320762634277344 	 0.2980504035949707 	 0.301868200302124 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:56.840313 test begin: paddle.equal(Tensor([416, 61062],"int64"), 0, )
[Prof] paddle.equal 	 paddle.equal(Tensor([416, 61062],"int64"), 0, ) 	 25401792 	 1000 	 0.1780400276184082 	 0.1682429313659668 	 0.09097027778625488 	 0.15418624877929688 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:57.591928 test begin: paddle.equal(Tensor([512, 49613],"int64"), 0, )
[Prof] paddle.equal 	 paddle.equal(Tensor([512, 49613],"int64"), 0, ) 	 25401856 	 1000 	 0.17730355262756348 	 0.16823577880859375 	 0.09056544303894043 	 0.15410423278808594 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:58.339651 test begin: paddle.equal(Tensor([846721, 30],"int64"), 0, )
[Prof] paddle.equal 	 paddle.equal(Tensor([846721, 30],"int64"), 0, ) 	 25401630 	 1000 	 0.17815327644348145 	 0.1688709259033203 	 0.09101247787475586 	 0.1541454792022705 	 None 	 None 	 None 	 None 	 
2025-07-27 20:25:59.087513 test begin: paddle.equal(Tensor([846721, 30],"int64"), Tensor([846721, 30],"int64"), )
[Prof] paddle.equal 	 paddle.equal(Tensor([846721, 30],"int64"), Tensor([846721, 30],"int64"), ) 	 50803260 	 1000 	 0.3102383613586426 	 0.3131580352783203 	 0.2996664047241211 	 0.3018150329589844 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:00.523155 test begin: paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 2540161],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 2540161],"bool"), ) 	 50803540 	 1000 	 0.01731586456298828 	 0.002452373504638672 	 1.2874603271484375e-05 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:01.232919 test begin: paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), ) 	 50803552 	 1000 	 0.017695188522338867 	 0.0024635791778564453 	 2.0742416381835938e-05 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:01.948453 test begin: paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), ) 	 50803680 	 1000 	 0.017329692840576172 	 0.0024509429931640625 	 8.821487426757812e-06 	 1.3828277587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:02.667619 test begin: paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), ) 	 50803840 	 1000 	 0.017383337020874023 	 0.0024878978729248047 	 1.239776611328125e-05 	 1.3828277587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:03.387956 test begin: paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 16],"bool"), ) 	 50803540 	 1000 	 0.017340660095214844 	 0.0024683475494384766 	 1.0251998901367188e-05 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:04.105173 test begin: paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 2540161],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 2540161],"bool"), ) 	 101606440 	 1000 	 0.16938281059265137 	 0.2042374610900879 	 0.057634592056274414 	 4.76837158203125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:05.873566 test begin: paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), ) 	 50803552 	 1000 	 0.017284870147705078 	 0.0024704933166503906 	 1.621246337890625e-05 	 1.3589859008789062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:06.611785 test begin: paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), ) 	 101606464 	 1000 	 0.16938161849975586 	 0.2054450511932373 	 0.057630062103271484 	 7.319450378417969e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:08.406541 test begin: paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), ) 	 50803680 	 1000 	 0.017303943634033203 	 0.0024912357330322266 	 1.3589859008789062e-05 	 1.3589859008789062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:09.121992 test begin: paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), ) 	 101606720 	 1000 	 0.16937255859375 	 0.20478224754333496 	 0.05764651298522949 	 7.295608520507812e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:10.908593 test begin: paddle.equal_all(Tensor([128],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([128],"float32"), Tensor([50803201],"float32"), ) 	 50803329 	 1000 	 0.017269611358642578 	 0.0024771690368652344 	 1.5974044799804688e-05 	 1.33514404296875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:11.744369 test begin: paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), ) 	 50803840 	 1000 	 0.017288684844970703 	 0.0024971961975097656 	 9.298324584960938e-06 	 1.430511474609375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:12.457593 test begin: paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), ) 	 101607040 	 1000 	 0.16905927658081055 	 0.20516228675842285 	 0.057546138763427734 	 6.842613220214844e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:14.243788 test begin: paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 3175201],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 3175201],"float32"), ) 	 50803472 	 1000 	 0.024404525756835938 	 0.00421905517578125 	 1.1920928955078125e-05 	 1.5735626220703125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:15.078546 test begin: paddle.equal_all(Tensor([16, 16],"float32"), Tensor([3175201, 16],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([16, 16],"float32"), Tensor([3175201, 16],"float32"), ) 	 50803472 	 1000 	 0.017812490463256836 	 0.002511739730834961 	 2.2411346435546875e-05 	 1.3828277587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:15.978321 test begin: paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 16],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 16],"float32"), ) 	 50803472 	 1000 	 0.017272472381591797 	 0.0024864673614501953 	 9.5367431640625e-06 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:16.809734 test begin: paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 3175201],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 3175201],"float32"), ) 	 101606432 	 1000 	 0.37966227531433105 	 0.41740846633911133 	 0.1291205883026123 	 0.0001380443572998047 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:19.231378 test begin: paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([16, 16],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([16, 16],"float32"), ) 	 50803472 	 1000 	 0.017307519912719727 	 0.002488851547241211 	 1.2159347534179688e-05 	 1.3828277587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:20.069544 test begin: paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([3175201, 16],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([3175201, 16],"float32"), ) 	 101606432 	 1000 	 0.3797440528869629 	 0.4174635410308838 	 0.12915992736816406 	 6.866455078125e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:22.488553 test begin: paddle.equal_all(Tensor([50803201],"float32"), Tensor([128],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([50803201],"float32"), Tensor([128],"float32"), ) 	 50803329 	 1000 	 0.017227649688720703 	 0.0024940967559814453 	 9.059906005859375e-06 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:23.328242 test begin: paddle.equal_all(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.equal_all 	 paddle.equal_all(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.3796830177307129 	 0.41840529441833496 	 0.12914061546325684 	 7.05718994140625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:26:25.739266 test begin: paddle.erf(Tensor([11, 2309237],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([11, 2309237],"float64"), ) 	 25401607 	 1000 	 0.338040828704834 	 0.3037238121032715 	 0.3294637203216553 	 0.29281067848205566 	 0.4477529525756836 	 1.6379845142364502 	 0.39525914192199707 	 0.3348720073699951 	 
2025-07-27 20:26:29.650554 test begin: paddle.erf(Tensor([1494212, 17],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([1494212, 17],"float64"), ) 	 25401604 	 1000 	 0.3379330635070801 	 0.3061354160308838 	 0.3293020725250244 	 0.2926197052001953 	 0.44776201248168945 	 1.6378183364868164 	 0.3954000473022461 	 0.334841251373291 	 
2025-07-27 20:26:33.428318 test begin: paddle.erf(Tensor([211681, 2, 3, 5, 4],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([211681, 2, 3, 5, 4],"float64"), ) 	 25401720 	 1000 	 0.3383488655090332 	 1.2353765964508057 	 0.32974934577941895 	 0.2924001216888428 	 0.44844627380371094 	 1.6380815505981445 	 0.39444398880004883 	 0.3349111080169678 	 
2025-07-27 20:26:40.037753 test begin: paddle.erf(Tensor([4, 105841, 3, 5, 4],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 105841, 3, 5, 4],"float64"), ) 	 25401840 	 1000 	 0.33866047859191895 	 0.30588555335998535 	 0.33003973960876465 	 0.28617286682128906 	 0.44854187965393066 	 1.637953281402588 	 0.3941535949707031 	 0.3348660469055176 	 
2025-07-27 20:26:43.852254 test begin: paddle.erf(Tensor([4, 2, 158761, 5, 4],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 2, 158761, 5, 4],"float64"), ) 	 25401760 	 1000 	 0.33803820610046387 	 1.1631155014038086 	 0.3294260501861572 	 0.29250431060791016 	 0.44771385192871094 	 1.6379024982452393 	 0.3953282833099365 	 0.3348240852355957 	 
2025-07-27 20:26:50.787670 test begin: paddle.erf(Tensor([4, 2, 3, 1058401],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 2, 3, 1058401],"float64"), ) 	 25401624 	 1000 	 0.33795762062072754 	 0.30371713638305664 	 0.32924532890319824 	 0.29254746437072754 	 0.4479250907897949 	 1.6378440856933594 	 0.3916933536529541 	 0.3348507881164551 	 
2025-07-27 20:26:54.601138 test begin: paddle.erf(Tensor([4, 2, 3, 264601, 4],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 2, 3, 264601, 4],"float64"), ) 	 25401696 	 1000 	 0.33800268173217773 	 0.30376672744750977 	 0.32937002182006836 	 0.2926325798034668 	 0.4476344585418701 	 1.6378092765808105 	 0.3948225975036621 	 0.3348255157470703 	 
2025-07-27 20:26:58.422996 test begin: paddle.erf(Tensor([4, 2, 3, 5, 211681],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 2, 3, 5, 211681],"float64"), ) 	 25401720 	 1000 	 0.3383479118347168 	 0.30374932289123535 	 0.32968974113464355 	 0.29256725311279297 	 0.4486236572265625 	 1.6379404067993164 	 0.39551472663879395 	 0.33484530448913574 	 
2025-07-27 20:27:02.196681 test begin: paddle.erf(Tensor([4, 2, 635041, 5],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 2, 635041, 5],"float64"), ) 	 25401640 	 1000 	 0.33791375160217285 	 0.30372023582458496 	 0.3223576545715332 	 0.2862715721130371 	 0.4478185176849365 	 1.6377298831939697 	 0.3857862949371338 	 0.33473801612854004 	 
2025-07-27 20:27:06.075082 test begin: paddle.erf(Tensor([4, 423361, 3, 5],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([4, 423361, 3, 5],"float64"), ) 	 25401660 	 1000 	 0.33784914016723633 	 0.30378031730651855 	 0.32190680503845215 	 0.29219937324523926 	 0.44791603088378906 	 1.637960433959961 	 0.38249969482421875 	 0.33486032485961914 	 
2025-07-27 20:27:09.840634 test begin: paddle.erf(Tensor([846721, 2, 3, 5],"float64"), )
[Prof] paddle.erf 	 paddle.erf(Tensor([846721, 2, 3, 5],"float64"), ) 	 25401630 	 1000 	 0.33794355392456055 	 0.3108184337615967 	 0.32926392555236816 	 0.2921714782714844 	 0.4477875232696533 	 1.6378583908081055 	 0.39499568939208984 	 0.33481478691101074 	 
2025-07-27 20:27:13.620936 test begin: paddle.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), ) 	 25401720 	 1000 	 0.3266315460205078 	 0.30498838424682617 	 0.31764674186706543 	 0.2945075035095215 	 0.4480161666870117 	 1.6435487270355225 	 0.3957395553588867 	 0.3359711170196533 	 
2025-07-27 20:27:17.387207 test begin: paddle.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), ) 	 25401840 	 1000 	 0.32657337188720703 	 0.3046891689300537 	 0.3177213668823242 	 0.29424595832824707 	 0.44797730445861816 	 1.6435539722442627 	 0.3959317207336426 	 0.33599042892456055 	 
2025-07-27 20:27:21.179486 test begin: paddle.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), ) 	 25401760 	 1000 	 0.32657957077026367 	 0.30650806427001953 	 0.31760239601135254 	 0.29441142082214355 	 0.4473588466644287 	 1.6435322761535645 	 0.3949401378631592 	 0.33599424362182617 	 
2025-07-27 20:27:24.960221 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), ) 	 25401624 	 1000 	 0.3271005153656006 	 0.3051142692565918 	 0.3180515766143799 	 0.2946159839630127 	 0.4472787380218506 	 1.6435973644256592 	 0.39503026008605957 	 0.3359811305999756 	 
2025-07-27 20:27:28.723008 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), ) 	 25401696 	 1000 	 0.3270702362060547 	 0.3050210475921631 	 0.318004846572876 	 0.2944817543029785 	 0.4474053382873535 	 1.643580675125122 	 0.3949244022369385 	 0.33600354194641113 	 
2025-07-27 20:27:32.487897 test begin: paddle.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), ) 	 25401720 	 1000 	 0.32740259170532227 	 0.30609631538391113 	 0.31850624084472656 	 0.29459261894226074 	 0.44809675216674805 	 1.6435697078704834 	 0.3957967758178711 	 0.3359196186065674 	 
2025-07-27 20:27:37.650524 test begin: paddle.erfinv(x=Tensor([4, 2, 3175201],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 3175201],"float64"), ) 	 25401608 	 1000 	 0.326674222946167 	 0.31841301918029785 	 0.31762075424194336 	 0.29445338249206543 	 0.4472634792327881 	 1.6437346935272217 	 0.3925197124481201 	 0.33600783348083496 	 
2025-07-27 20:27:41.870110 test begin: paddle.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), ) 	 25401640 	 1000 	 0.32736706733703613 	 0.30504274368286133 	 0.318284273147583 	 0.29447150230407715 	 0.4474949836730957 	 1.6434812545776367 	 0.3937358856201172 	 0.3360164165496826 	 
2025-07-27 20:27:45.637983 test begin: paddle.erfinv(x=Tensor([4, 2116801, 3],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 2116801, 3],"float64"), ) 	 25401612 	 1000 	 0.3276326656341553 	 0.306445837020874 	 0.31858229637145996 	 0.2947242259979248 	 0.4472787380218506 	 1.6439805030822754 	 0.39447808265686035 	 0.33611488342285156 	 
2025-07-27 20:27:49.419333 test begin: paddle.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), ) 	 25401660 	 1000 	 0.3278536796569824 	 0.30687475204467773 	 0.31851649284362793 	 0.29397082328796387 	 0.44745397567749023 	 1.643739938735962 	 0.3947126865386963 	 0.33596324920654297 	 
2025-07-27 20:27:56.499262 test begin: paddle.erfinv(x=Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([4233601, 2, 3],"float64"), ) 	 25401606 	 1000 	 0.32639360427856445 	 0.30521082878112793 	 0.317363977432251 	 0.29436612129211426 	 0.4472963809967041 	 1.6434624195098877 	 0.39461278915405273 	 0.33596038818359375 	 
2025-07-27 20:28:00.314789 test begin: paddle.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), )
[Prof] paddle.erfinv 	 paddle.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), ) 	 25401630 	 1000 	 0.3281407356262207 	 0.3046855926513672 	 0.31902074813842773 	 0.29421305656433105 	 0.44722962379455566 	 1.643632173538208 	 0.394667387008667 	 0.33602476119995117 	 
2025-07-27 20:28:04.148421 test begin: paddle.exp(Tensor([125, 1, 640, 640],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([125, 1, 640, 640],"float32"), ) 	 51200000 	 1000 	 0.2981414794921875 	 0.3000621795654297 	 0.28958868980407715 	 0.28906822204589844 	 0.45383143424987793 	 0.45003461837768555 	 0.4007222652435303 	 0.3826010227203369 	 
2025-07-27 20:28:07.305582 test begin: paddle.exp(Tensor([13, 243, 1007, 16],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([13, 243, 1007, 16],"float32"), ) 	 50897808 	 1000 	 0.29607629776000977 	 0.29836058616638184 	 0.2875223159790039 	 0.28688502311706543 	 0.4505753517150879 	 0.44739747047424316 	 0.3978254795074463 	 0.37856459617614746 	 
2025-07-27 20:28:10.528693 test begin: paddle.exp(Tensor([13, 64, 1007, 61],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([13, 64, 1007, 61],"float32"), ) 	 51107264 	 1000 	 0.29738306999206543 	 0.2996511459350586 	 0.28142380714416504 	 0.2810995578765869 	 0.4525277614593506 	 0.4492189884185791 	 0.38962388038635254 	 0.3503851890563965 	 
2025-07-27 20:28:13.821124 test begin: paddle.exp(Tensor([13, 64, 3817, 16],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([13, 64, 3817, 16],"float32"), ) 	 50811904 	 1000 	 0.29562807083129883 	 0.2978174686431885 	 0.28717923164367676 	 0.28629064559936523 	 0.4504542350769043 	 0.4465761184692383 	 0.3972342014312744 	 0.3797609806060791 	 
2025-07-27 20:28:16.950592 test begin: paddle.exp(Tensor([16, 1, 4962, 640],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([16, 1, 4962, 640],"float32"), ) 	 50810880 	 1000 	 0.29582691192626953 	 0.29781341552734375 	 0.28690624237060547 	 0.28694701194763184 	 0.45046091079711914 	 0.4466254711151123 	 0.3975405693054199 	 0.378521203994751 	 
2025-07-27 20:28:20.078198 test begin: paddle.exp(Tensor([16, 1, 640, 4962],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([16, 1, 640, 4962],"float32"), ) 	 50810880 	 1000 	 0.2958405017852783 	 0.2979128360748291 	 0.2873241901397705 	 0.28688669204711914 	 0.45037102699279785 	 0.4466366767883301 	 0.3973674774169922 	 0.379197359085083 	 
2025-07-27 20:28:23.426778 test begin: paddle.exp(Tensor([16, 8, 640, 640],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([16, 8, 640, 640],"float32"), ) 	 52428800 	 1000 	 0.3050656318664551 	 0.30709409713745117 	 0.2964906692504883 	 0.2959918975830078 	 0.4646306037902832 	 0.46062421798706055 	 0.4119551181793213 	 0.3925766944885254 	 
2025-07-27 20:28:26.615156 test begin: paddle.exp(Tensor([50, 64, 1007, 16],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([50, 64, 1007, 16],"float32"), ) 	 51558400 	 1000 	 0.30010175704956055 	 0.30219244956970215 	 0.29128432273864746 	 0.2906777858734131 	 0.4571352005004883 	 0.45313501358032227 	 0.4039328098297119 	 0.37087488174438477 	 
2025-07-27 20:28:29.868098 test begin: paddle.exp(Tensor([56, 1, 960, 960],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([56, 1, 960, 960],"float32"), ) 	 51609600 	 1000 	 0.30025768280029297 	 0.3024728298187256 	 0.2916889190673828 	 0.29111671447753906 	 0.45743823051452637 	 0.4535508155822754 	 0.4045591354370117 	 0.36642956733703613 	 
2025-07-27 20:28:33.020565 test begin: paddle.exp(Tensor([8, 1, 6616, 960],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([8, 1, 6616, 960],"float32"), ) 	 50810880 	 1000 	 0.29584169387817383 	 1.5233592987060547 	 0.28725361824035645 	 0.2867240905761719 	 0.4504852294921875 	 0.4467611312866211 	 0.397625207901001 	 0.35115790367126465 	 
2025-07-27 20:28:39.894466 test begin: paddle.exp(Tensor([8, 1, 960, 6616],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([8, 1, 960, 6616],"float32"), ) 	 50810880 	 1000 	 0.2958073616027832 	 0.2978203296661377 	 0.28691697120666504 	 0.2864036560058594 	 0.45041990280151367 	 0.44667959213256836 	 0.3972289562225342 	 0.327894926071167 	 
2025-07-27 20:28:42.978122 test begin: paddle.exp(Tensor([8, 7, 960, 960],"float32"), )
[Prof] paddle.exp 	 paddle.exp(Tensor([8, 7, 960, 960],"float32"), ) 	 51609600 	 1000 	 0.3002033233642578 	 0.30248045921325684 	 0.2916295528411865 	 0.29098963737487793 	 0.4574775695800781 	 0.4535841941833496 	 0.40452122688293457 	 0.36092686653137207 	 
2025-07-27 20:28:46.168399 test begin: paddle.expand_as(Tensor([1621, 80, 1, 1],"float32"), Tensor([1621, 80, 28, 28],"float16"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([1621, 80, 1, 1],"float32"), Tensor([1621, 80, 28, 28],"float16"), ) 	 101798800 	 1000 	 0.2698981761932373 	 0.0036439895629882812 	 0.25887203216552734 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:28:50.360261 test begin: paddle.expand_as(Tensor([511, 127, 1, 1],"float32"), Tensor([511, 127, 28, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([511, 127, 1, 1],"float32"), Tensor([511, 127, 28, 28],"float32"), ) 	 50944145 	 1000 	 0.13721609115600586 	 0.0036318302154541016 	 0.12619781494140625 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:28:52.276266 test begin: paddle.expand_as(Tensor([511, 80, 1, 1243],"float32"), Tensor([511, 80, 28, 1243],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([511, 80, 1, 1243],"float32"), Tensor([511, 80, 28, 1243],"float32"), ) 	 1473601360 	 1000 	 4.055856466293335 	 0.0035622119903564453 	 4.044600486755371 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:29:47.655240 test begin: paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 28, 45],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 28, 45],"float32"), ) 	 51549680 	 1000 	 0.14038610458374023 	 0.003614187240600586 	 0.12945079803466797 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:29:49.688288 test begin: paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 45, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 45, 28],"float32"), ) 	 51549680 	 1000 	 0.1391134262084961 	 0.003573179244995117 	 0.12804603576660156 	 1.5735626220703125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:29:51.619041 test begin: paddle.expand_as(Tensor([511, 80, 1243, 1],"float32"), Tensor([511, 80, 1243, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([511, 80, 1243, 1],"float32"), Tensor([511, 80, 1243, 28],"float32"), ) 	 1473601360 	 1000 	 4.31790566444397 	 0.003625154495239258 	 4.297348260879517 	 2.4080276489257812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:31:05.029285 test begin: paddle.expand_as(Tensor([512, 127, 1, 1],"float32"), Tensor([512, 127, 28, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 127, 1, 1],"float32"), Tensor([512, 127, 28, 28],"float32"), ) 	 51043840 	 1000 	 0.13893342018127441 	 0.0035812854766845703 	 0.12785673141479492 	 1.5974044799804688e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:31:07.784509 test begin: paddle.expand_as(Tensor([512, 254, 1, 1],"float32"), Tensor([512, 254, 28, 28],"float16"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 254, 1, 1],"float32"), Tensor([512, 254, 28, 28],"float16"), ) 	 102087680 	 1000 	 0.2706177234649658 	 0.003603696823120117 	 0.25963616371154785 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:31:13.345447 test begin: paddle.expand_as(Tensor([512, 80, 1, 1241],"float32"), Tensor([512, 80, 28, 1241],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1, 1241],"float32"), Tensor([512, 80, 28, 1241],"float32"), ) 	 1474109440 	 1000 	 5.547398090362549 	 0.0036444664001464844 	 4.046486139297485 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:32:15.894710 test begin: paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 45],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 45],"float32"), ) 	 51650560 	 1000 	 0.14106059074401855 	 0.0036466121673583984 	 0.13002252578735352 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:32:18.749893 test begin: paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 89],"float16"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 89],"float16"), ) 	 102113280 	 1000 	 0.27127552032470703 	 0.0036072731018066406 	 0.2602851390838623 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:32:22.821015 test begin: paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 45, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 45, 28],"float32"), ) 	 51650560 	 1000 	 0.139404296875 	 0.0035758018493652344 	 0.12851405143737793 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:32:24.795426 test begin: paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 89, 28],"float16"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 89, 28],"float16"), ) 	 102113280 	 1000 	 0.2712528705596924 	 0.003622770309448242 	 0.2604084014892578 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:32:28.835583 test begin: paddle.expand_as(Tensor([512, 80, 1241, 1],"float32"), Tensor([512, 80, 1241, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([512, 80, 1241, 1],"float32"), Tensor([512, 80, 1241, 28],"float32"), ) 	 1474109440 	 1000 	 4.317726373672485 	 0.0036280155181884766 	 4.306194305419922 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:33:28.984885 test begin: paddle.expand_as(Tensor([811, 80, 1, 1],"float32"), Tensor([811, 80, 28, 28],"float32"), )
[Prof] paddle.expand_as 	 paddle.expand_as(Tensor([811, 80, 1, 1],"float32"), Tensor([811, 80, 28, 28],"float32"), ) 	 50930800 	 1000 	 0.13856124877929688 	 0.0036475658416748047 	 0.12544035911560059 	 2.4080276489257812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:33:31.057971 test begin: paddle.expm1(Tensor([198451, 16, 32],"float16"), )
[Prof] paddle.expm1 	 paddle.expm1(Tensor([198451, 16, 32],"float16"), ) 	 101606912 	 1000 	 0.3354487419128418 	 0.7500052452087402 	 0.32682108879089355 	 0.2864494323730469 	 0.4478294849395752 	 0.7455959320068359 	 0.3946352005004883 	 0.3808877468109131 	 
2025-07-27 20:33:39.851205 test begin: paddle.expm1(Tensor([8, 16, 793801],"float16"), )
[Prof] paddle.expm1 	 paddle.expm1(Tensor([8, 16, 793801],"float16"), ) 	 101606528 	 1000 	 0.33580589294433594 	 0.3040938377380371 	 0.32716894149780273 	 0.2930450439453125 	 0.44803762435913086 	 0.7454493045806885 	 0.39513468742370605 	 0.3808422088623047 	 
2025-07-27 20:33:45.425840 test begin: paddle.expm1(Tensor([8, 396901, 32],"float16"), )
[Prof] paddle.expm1 	 paddle.expm1(Tensor([8, 396901, 32],"float16"), ) 	 101606656 	 1000 	 0.33557653427124023 	 0.3040764331817627 	 0.3198096752166748 	 0.28624701499938965 	 0.4475431442260742 	 0.7454423904418945 	 0.3846886157989502 	 0.38083958625793457 	 
2025-07-27 20:33:51.164434 test begin: paddle.fft.fftn(Tensor([226801, 7, 32],"float32"), )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([226801, 7, 32],"float32"), ) 	 50803424 	 1000 	 11.138107538223267 	 15.97910761833191 	 6.151199340820312e-05 	 1.814450740814209 	 19.670575857162476 	 15.521021842956543 	 1.5460448265075684 	 1.9821085929870605 	 
2025-07-27 20:34:55.578925 test begin: paddle.fft.fftn(Tensor([39, 40708, 32],"float32"), )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([39, 40708, 32],"float32"), ) 	 50803584 	 1000 	 9.378266096115112 	 10.609289646148682 	 6.937980651855469e-05 	 1.085242509841919 	 11.943337202072144 	 10.193254709243774 	 1.016218900680542 	 1.3070728778839111 	 
2025-07-27 20:35:40.153564 test begin: paddle.fft.fftn(Tensor([39, 7, 186093],"float32"), )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([39, 7, 186093],"float32"), ) 	 50803389 	 1000 	 6.96139121055603 	 5.994240999221802 	 6.151199340820312e-05 	 0.766160249710083 	 7.560694932937622 	 5.512615919113159 	 0.7722909450531006 	 0.8047270774841309 	 
2025-07-27 20:36:09.265506 test begin: paddle.fft.fftn(Tensor([7, 32, 481, 481],"float32"), axes=list[2,3,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([7, 32, 481, 481],"float32"), axes=list[2,3,], ) 	 51824864 	 1000 	 5.977104902267456 	 4.33324122428894 	 2.4318695068359375e-05 	 0.8859748840332031 	 5.528284311294556 	 3.8464584350585938 	 0.8072206974029541 	 0.9826536178588867 	 
2025-07-27 20:36:30.957738 test begin: paddle.fft.fftn(Tensor([8, 28, 481, 481],"float32"), axes=list[2,3,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([8, 28, 481, 481],"float32"), axes=list[2,3,], ) 	 51824864 	 1000 	 5.992487192153931 	 4.3355889320373535 	 5.6743621826171875e-05 	 0.8859035968780518 	 5.528015851974487 	 3.8463518619537354 	 0.8072044849395752 	 0.9827611446380615 	 
2025-07-27 20:36:53.442870 test begin: paddle.fft.fftn(Tensor([8, 32, 413, 481],"float32"), axes=list[2,3,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([8, 32, 413, 481],"float32"), axes=list[2,3,], ) 	 50855168 	 1000 	 5.972753047943115 	 4.233106851577759 	 5.91278076171875e-05 	 0.8654232025146484 	 5.611407041549683 	 3.751910924911499 	 0.8192963600158691 	 0.958608865737915 	 
2025-07-27 20:37:14.998852 test begin: paddle.fft.fftn(Tensor([8, 32, 481, 413],"float32"), axes=list[2,3,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(Tensor([8, 32, 481, 413],"float32"), axes=list[2,3,], ) 	 50855168 	 1000 	 5.954061269760132 	 4.22774076461792 	 2.2649765014648438e-05 	 0.8643159866333008 	 5.626680374145508 	 3.748990774154663 	 0.8214495182037354 	 0.9578964710235596 	 
2025-07-27 20:37:37.135075 test begin: paddle.fft.fftn(x=Tensor([50, 133, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(x=Tensor([50, 133, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], ) 	 50832600 	 1000 	 6.044202566146851 	 2.9769935607910156 	 5.245208740234375e-05 	 0.6081216335296631 	 4.379387855529785 	 2.492448091506958 	 0.6393632888793945 	 0.636742115020752 	 
2025-07-27 20:37:55.851398 test begin: paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 233],"float32"), axes=list[-3,-2,-1,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 233],"float32"), axes=list[-3,-2,-1,], ) 	 50887200 	 1000 	 6.798257112503052 	 3.693481683731079 	 0.0001468658447265625 	 0.7554545402526855 	 5.959866523742676 	 3.2128989696502686 	 0.8701937198638916 	 0.8211922645568848 	 
2025-07-27 20:38:17.492422 test begin: paddle.fft.fftn(x=Tensor([50, 8, 39, 233, 14],"float32"), axes=list[-3,-2,-1,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(x=Tensor([50, 8, 39, 233, 14],"float32"), axes=list[-3,-2,-1,], ) 	 50887200 	 1000 	 7.204483509063721 	 4.135270118713379 	 4.696846008300781e-05 	 0.8459084033966064 	 6.532742500305176 	 3.652426242828369 	 0.9539165496826172 	 0.9337129592895508 	 
2025-07-27 20:38:40.918743 test begin: paddle.fft.fftn(x=Tensor([50, 8, 649, 14, 14],"float32"), axes=list[-3,-2,-1,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(x=Tensor([50, 8, 649, 14, 14],"float32"), axes=list[-3,-2,-1,], ) 	 50881600 	 1000 	 6.3753743171691895 	 3.5674569606781006 	 2.9802322387695312e-05 	 0.7267284393310547 	 4.963361024856567 	 3.0745930671691895 	 0.7246537208557129 	 0.7852444648742676 	 
2025-07-27 20:39:02.405488 test begin: paddle.fft.fftn(x=Tensor([831, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
[Prof] paddle.fft.fftn 	 paddle.fft.fftn(x=Tensor([831, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], ) 	 50817312 	 1000 	 6.036111831665039 	 2.973620653152466 	 6.198883056640625e-05 	 0.6078276634216309 	 4.3758628368377686 	 2.4914798736572266 	 0.6388595104217529 	 0.6364989280700684 	 
2025-07-27 20:39:20.277404 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 6, 264601],"float64"), s=list[2,4,], axes=tuple(0,1,), )
[Prof] paddle.fft.ifftn 	 paddle.fft.ifftn(x=Tensor([4, 4, 6, 264601],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 	 25401696 	 1000 	 2.986363172531128 	 1.3900604248046875 	 2.7894973754882812e-05 	 0.3550605773925781 	 2.8655641078948975 	 1.9009170532226562 	 0.3661186695098877 	 0.3887505531311035 	 
2025-07-27 20:39:30.405324 test begin: paddle.fft.ifftn(x=Tensor([4, 4, 793801, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
[Prof] paddle.fft.ifftn 	 paddle.fft.ifftn(x=Tensor([4, 4, 793801, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 	 25401632 	 1000 	 2.8474953174591064 	 1.395733118057251 	 3.4332275390625e-05 	 0.35504865646362305 	 2.5969667434692383 	 1.9009923934936523 	 0.3318634033203125 	 0.38872838020324707 	 
2025-07-27 20:39:41.796194 test begin: paddle.fft.ifftn(x=Tensor([4, 529201, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
[Prof] paddle.fft.ifftn 	 paddle.fft.ifftn(x=Tensor([4, 529201, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 	 25401648 	 1000 	 0.24587607383728027 	 0.4930446147918701 	 1.811981201171875e-05 	 0.12569308280944824 	 0.1685187816619873 	 0.7269878387451172 	 0.021512746810913086 	 0.09299802780151367 	 
2025-07-27 20:39:44.013674 test begin: paddle.fft.ifftn(x=Tensor([529201, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
[Prof] paddle.fft.ifftn 	 paddle.fft.ifftn(x=Tensor([529201, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), ) 	 25401648 	 1000 	 0.2317361831665039 	 0.4929947853088379 	 1.9311904907226562e-05 	 0.12567543983459473 	 0.1683344841003418 	 0.2796494960784912 	 0.01891922950744629 	 0.0571744441986084 	 
2025-07-27 20:39:45.783890 test begin: paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), ) 	 25401618 	 1000 	 1.8626902103424072 	 0.7614610195159912 	 0.3808629512786865 	 0.3879880905151367 	 3.4319870471954346 	 2.6252241134643555 	 0.5844178199768066 	 0.5365571975708008 	 
2025-07-27 20:39:55.547651 test begin: paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, ) 	 25401618 	 1000 	 1.9728689193725586 	 0.7647933959960938 	 0.3362557888031006 	 0.39029622077941895 	 2.8719217777252197 	 1.8305420875549316 	 0.3667151927947998 	 0.3739604949951172 	 
2025-07-27 20:40:05.235446 test begin: paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, axis=1, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, axis=1, ) 	 25401618 	 1000 	 0.06904959678649902 	 0.04801607131958008 	 1.5497207641601562e-05 	 5.555152893066406e-05 	 0.16793251037597656 	 0.16422700881958008 	 0.02144598960876465 	 0.00011229515075683594 	 
2025-07-27 20:40:06.209549 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), ) 	 25401624 	 1000 	 1.8625965118408203 	 0.7594490051269531 	 0.3807868957519531 	 0.38792896270751953 	 3.4321343898773193 	 2.624724864959717 	 0.5844204425811768 	 0.536656379699707 	 
2025-07-27 20:40:15.951858 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, ) 	 25401624 	 1000 	 1.9727442264556885 	 0.7641386985778809 	 0.3362150192260742 	 0.3903334140777588 	 2.871345043182373 	 1.8302631378173828 	 0.3666565418243408 	 0.3739502429962158 	 
2025-07-27 20:40:24.491085 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, axis=1, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, axis=1, ) 	 25401624 	 1000 	 1.7388882637023926 	 0.692406415939331 	 0.29633188247680664 	 0.23589491844177246 	 2.469867467880249 	 1.700758695602417 	 0.3152194023132324 	 0.28960442543029785 	 
2025-07-27 20:40:32.061126 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), ) 	 25401624 	 1000 	 6.973108291625977 	 6.106766223907471 	 0.5090515613555908 	 0.5677001476287842 	 13.030656337738037 	 12.01793646812439 	 1.0246047973632812 	 1.2171204090118408 	 
2025-07-27 20:41:12.723323 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, ) 	 25401624 	 1000 	 0.0720210075378418 	 0.037169456481933594 	 2.6226043701171875e-05 	 7.319450378417969e-05 	 0.16719603538513184 	 0.1495048999786377 	 0.020717382431030273 	 0.00011134147644042969 	 
2025-07-27 20:41:15.059157 test begin: paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, axis=1, )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, axis=1, ) 	 25401624 	 1000 	 1.8585615158081055 	 0.6926910877227783 	 0.31694817543029785 	 0.23600983619689941 	 2.4530444145202637 	 1.7009673118591309 	 0.3133735656738281 	 0.289492130279541 	 
2025-07-27 20:41:22.721897 test begin: paddle.fft.ihfft(x=Tensor([705601, 4, 3, 3],"float64"), )
[Prof] paddle.fft.ihfft 	 paddle.fft.ihfft(x=Tensor([705601, 4, 3, 3],"float64"), ) 	 25401636 	 1000 	 1.860546588897705 	 0.7618513107299805 	 0.3803284168243408 	 0.3879523277282715 	 3.433297634124756 	 2.625166416168213 	 0.584632396697998 	 0.5367836952209473 	 
2025-07-27 20:41:32.414892 test begin: paddle.fft.ihfft2(x=Tensor([1270081, 4, 5],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([1270081, 4, 5],"float64"), ) 	 25401620 	 1000 	 2.0967915058135986 	 2.1361842155456543 	 0.3571033477783203 	 0.36284756660461426 	 3.9932467937469482 	 3.5161032676696777 	 0.5831191539764404 	 0.44942641258239746 	 
2025-07-27 20:41:45.920967 test begin: paddle.fft.ihfft2(x=Tensor([2822401, 3, 3],"float64"), s=tuple(1,2,), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([2822401, 3, 3],"float64"), s=tuple(1,2,), ) 	 25401609 	 1000 	 0.7724800109863281 	 0.6309077739715576 	 0.13156747817993164 	 0.1611630916595459 	 1.1499083042144775 	 1.1613500118255615 	 0.1469266414642334 	 0.14836549758911133 	 
2025-07-27 20:41:50.339651 test begin: paddle.fft.ihfft2(x=Tensor([3, 1693441, 5],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([3, 1693441, 5],"float64"), ) 	 25401615 	 1000 	 8.840516805648804 	 7.390370607376099 	 0.6952488422393799 	 0.6868867874145508 	 15.554170370101929 	 8.782938480377197 	 1.1773617267608643 	 0.6894857883453369 	 
2025-07-27 20:42:32.244629 test begin: paddle.fft.ihfft2(x=Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([3, 4, 2116801],"float64"), ) 	 25401612 	 1000 	 9.107954502105713 	 7.314233064651489 	 0.6199238300323486 	 0.4977858066558838 	 13.639027833938599 	 13.13646650314331 	 0.9959070682525635 	 0.8951377868652344 	 
2025-07-27 20:43:16.506421 test begin: paddle.fft.ihfft2(x=Tensor([4, 2116801, 3],"float64"), s=tuple(1,2,), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([4, 2116801, 3],"float64"), s=tuple(1,2,), ) 	 25401612 	 1000 	 0.0928184986114502 	 0.0613398551940918 	 1.3828277587890625e-05 	 5.5789947509765625e-05 	 0.1668391227722168 	 0.1980447769165039 	 0.02132391929626465 	 0.00011181831359863281 	 
2025-07-27 20:43:17.559078 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 2116801],"float64"), s=tuple(1,2,), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([4, 3, 2116801],"float64"), s=tuple(1,2,), ) 	 25401612 	 1000 	 0.09961676597595215 	 0.08426499366760254 	 0.00014352798461914062 	 0.00010800361633300781 	 0.16666102409362793 	 0.30189013481140137 	 0.020328521728515625 	 0.03856396675109863 	 
2025-07-27 20:43:18.759871 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 3, 705601],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([4, 3, 3, 705601],"float64"), ) 	 25401636 	 1000 	 7.28362250328064 	 7.306590557098389 	 0.49579596519470215 	 0.4971768856048584 	 13.620948076248169 	 12.740358352661133 	 0.9941573143005371 	 0.8681867122650146 	 
2025-07-27 20:44:01.003726 test begin: paddle.fft.ihfft2(x=Tensor([4, 3, 705601, 3],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([4, 3, 705601, 3],"float64"), ) 	 25401636 	 1000 	 9.46293592453003 	 8.998734474182129 	 0.7442278861999512 	 0.7084341049194336 	 15.114379405975342 	 10.495073556900024 	 1.1033251285552979 	 0.7148821353912354 	 
2025-07-27 20:44:46.220728 test begin: paddle.fft.ihfft2(x=Tensor([4, 705601, 3, 3],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([4, 705601, 3, 3],"float64"), ) 	 25401636 	 1000 	 2.2662315368652344 	 2.382155418395996 	 0.3859748840332031 	 0.405792236328125 	 4.037991762161255 	 3.8564505577087402 	 0.5895872116088867 	 0.4929013252258301 	 
2025-07-27 20:44:59.784228 test begin: paddle.fft.ihfft2(x=Tensor([940801, 3, 3, 3],"float64"), )
[Prof] paddle.fft.ihfft2 	 paddle.fft.ihfft2(x=Tensor([940801, 3, 3, 3],"float64"), ) 	 25401627 	 1000 	 2.2675139904022217 	 2.3820643424987793 	 0.3863534927368164 	 0.40577054023742676 	 4.039464712142944 	 3.8567733764648438 	 0.5898904800415039 	 0.49309420585632324 	 
2025-07-27 20:45:13.614900 test begin: paddle.fft.ihfftn(Tensor([1270081, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([1270081, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401620 	 1000 	 2.0964748859405518 	 2.130650281906128 	 0.3570239543914795 	 0.36292147636413574 	 3.9929707050323486 	 3.5178120136260986 	 0.58292555809021 	 0.44956040382385254 	 
2025-07-27 20:45:26.409660 test begin: paddle.fft.ihfftn(Tensor([3, 1693441, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([3, 1693441, 5],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401615 	 1000 	 8.8396897315979 	 7.385080575942993 	 0.6950724124908447 	 0.6865990161895752 	 15.50918436050415 	 8.782662153244019 	 1.1323466300964355 	 0.6895084381103516 	 
2025-07-27 20:46:08.145541 test begin: paddle.fft.ihfftn(Tensor([3, 4, 2116801],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([3, 4, 2116801],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401612 	 1000 	 9.106438159942627 	 7.311215400695801 	 0.6197879314422607 	 0.49776577949523926 	 13.638511896133423 	 13.135987997055054 	 0.9956464767456055 	 0.8949460983276367 	 
2025-07-27 20:46:53.369104 test begin: paddle.fft.ihfftn(Tensor([4, 3, 3, 705601],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([4, 3, 3, 705601],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401636 	 1000 	 7.28276515007019 	 7.304789781570435 	 0.49583864212036133 	 0.4970734119415283 	 13.620319366455078 	 12.744144916534424 	 0.9944112300872803 	 0.8694238662719727 	 
2025-07-27 20:47:35.334938 test begin: paddle.fft.ihfftn(Tensor([4, 3, 705601, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([4, 3, 705601, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401636 	 1000 	 9.464669942855835 	 9.002110719680786 	 0.7442595958709717 	 0.7083525657653809 	 15.118572473526001 	 10.497989177703857 	 1.1033482551574707 	 0.7147905826568604 	 
2025-07-27 20:48:20.549082 test begin: paddle.fft.ihfftn(Tensor([4, 705601, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([4, 705601, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401636 	 1000 	 2.267632246017456 	 2.3833563327789307 	 0.38613247871398926 	 0.40702056884765625 	 4.0390708446502686 	 3.857048273086548 	 0.5894815921783447 	 0.49285078048706055 	 
2025-07-27 20:48:34.359902 test begin: paddle.fft.ihfftn(Tensor([940801, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(Tensor([940801, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, ) 	 25401627 	 1000 	 2.267807722091675 	 2.399538040161133 	 0.38639307022094727 	 0.40592098236083984 	 4.039552927017212 	 3.8587875366210938 	 0.5897936820983887 	 0.4927978515625 	 
2025-07-27 20:48:48.247922 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 1058401, 2],"float64"), )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(x=Tensor([4, 3, 1058401, 2],"float64"), ) 	 25401624 	 1000 	 15.197434663772583 	 14.198500394821167 	 0.9127886295318604 	 1.111743688583374 	 18.413691759109497 	 14.263346910476685 	 1.0472495555877686 	 1.0410168170928955 	 
2025-07-27 20:49:51.943339 test begin: paddle.fft.ihfftn(x=Tensor([4, 3, 5, 423361],"float64"), )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(x=Tensor([4, 3, 5, 423361],"float64"), ) 	 25401660 	 1000 	 7.312478303909302 	 6.399026155471802 	 0.44024658203125 	 0.4667954444885254 	 15.400388956069946 	 10.887058734893799 	 0.9854710102081299 	 0.7954823970794678 	 
2025-07-27 20:50:32.968293 test begin: paddle.fft.ihfftn(x=Tensor([4, 635041, 5, 2],"float64"), )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(x=Tensor([4, 635041, 5, 2],"float64"), ) 	 25401640 	 1000 	 16.85855984687805 	 15.652327299118042 	 1.012244462966919 	 1.142094612121582 	 19.942933559417725 	 15.79381537437439 	 1.1319143772125244 	 1.1523666381835938 	 
2025-07-27 20:51:43.150017 test begin: paddle.fft.ihfftn(x=Tensor([846721, 3, 5, 2],"float64"), )
[Prof] paddle.fft.ihfftn 	 paddle.fft.ihfftn(x=Tensor([846721, 3, 5, 2],"float64"), ) 	 25401630 	 1000 	 18.90415859222412 	 15.566780805587769 	 1.1345033645629883 	 1.3240742683410645 	 17.120891094207764 	 15.70871615409851 	 0.9728789329528809 	 1.3353326320648193 	 
2025-07-27 20:52:52.967315 test begin: paddle.fft.rfft(Tensor([20, 1210, 2101],"float32"), )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([20, 1210, 2101],"float32"), ) 	 50844200 	 1000 	 2.607673168182373 	 2.020643711090088 	 0.5319278240203857 	 0.6881680488586426 	 4.908641576766968 	 3.380218029022217 	 1.0025970935821533 	 1.1522729396820068 	 
2025-07-27 20:53:07.709109 test begin: paddle.fft.rfft(Tensor([20, 1270, 2001],"float32"), )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([20, 1270, 2001],"float32"), ) 	 50825400 	 1000 	 1.984281301498413 	 1.332463026046753 	 0.4054415225982666 	 0.4543631076812744 	 3.6915316581726074 	 2.0225048065185547 	 0.7531180381774902 	 0.6884667873382568 	 
2025-07-27 20:53:18.236290 test begin: paddle.fft.rfft(Tensor([20, 64, 39691],"float32"), )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([20, 64, 39691],"float32"), ) 	 50804480 	 1000 	 4.735257148742676 	 4.10918927192688 	 0.4833085536956787 	 0.525148868560791 	 9.101227521896362 	 7.512867212295532 	 0.9289414882659912 	 0.9605708122253418 	 
2025-07-27 20:53:48.031464 test begin: paddle.fft.rfft(Tensor([378, 64, 2101],"float32"), )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([378, 64, 2101],"float32"), ) 	 50827392 	 1000 	 2.6055455207824707 	 2.010241746902466 	 0.5318529605865479 	 0.6846442222595215 	 4.886016845703125 	 3.3782618045806885 	 0.997351884841919 	 1.1522643566131592 	 
2025-07-27 20:54:02.420871 test begin: paddle.fft.rfft(Tensor([397, 64, 2001],"float32"), )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([397, 64, 2001],"float32"), ) 	 50841408 	 1000 	 1.9866209030151367 	 1.33353853225708 	 0.40562939643859863 	 0.45452260971069336 	 3.663736581802368 	 2.0240988731384277 	 0.7497451305389404 	 0.6895270347595215 	 
2025-07-27 20:54:12.910535 test begin: paddle.fft.rfft(Tensor([4, 32, 32, 12404],"float32"), axis=-1, norm="forward", )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([4, 32, 32, 12404],"float32"), axis=-1, norm="forward", ) 	 50806784 	 1000 	 4.892772912979126 	 4.317192077636719 	 0.4994368553161621 	 0.5512449741363525 	 10.132554769515991 	 8.734482526779175 	 0.9423491954803467 	 0.994591474533081 	 
2025-07-27 20:54:42.720411 test begin: paddle.fft.rfft(Tensor([4, 32, 6202, 64],"float32"), axis=-1, norm="forward", )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([4, 32, 6202, 64],"float32"), axis=-1, norm="forward", ) 	 50806784 	 1000 	 1.2798359394073486 	 0.6293032169342041 	 0.32659316062927246 	 0.31987524032592773 	 3.5172033309936523 	 1.8371491432189941 	 0.5997741222381592 	 0.46961092948913574 	 
2025-07-27 20:54:51.429112 test begin: paddle.fft.rfft(Tensor([4, 6202, 32, 64],"float32"), axis=-1, norm="forward", )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([4, 6202, 32, 64],"float32"), axis=-1, norm="forward", ) 	 50806784 	 1000 	 1.2795383930206299 	 0.6306531429290771 	 0.3279988765716553 	 0.31999754905700684 	 3.5160114765167236 	 1.8372395038604736 	 0.5985240936279297 	 0.46962594985961914 	 
2025-07-27 20:55:00.134604 test begin: paddle.fft.rfft(Tensor([776, 32, 32, 64],"float32"), axis=-1, norm="forward", )
[Prof] paddle.fft.rfft 	 paddle.fft.rfft(Tensor([776, 32, 32, 64],"float32"), axis=-1, norm="forward", ) 	 50855936 	 1000 	 1.2801413536071777 	 0.6282320022583008 	 0.32700276374816895 	 0.321552038192749 	 3.520040512084961 	 1.8387844562530518 	 0.5992519855499268 	 0.4700310230255127 	 
2025-07-27 20:55:08.872218 test begin: paddle.fft.rfft2(Tensor([26, 32, 250, 250],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([26, 32, 250, 250],"float32"), ) 	 52000000 	 1000 	 1.4836585521697998 	 0.8288507461547852 	 0.37896227836608887 	 0.424576997756958 	 3.6046459674835205 	 1.9250712394714355 	 0.6136140823364258 	 0.49214625358581543 	 
2025-07-27 20:55:18.190465 test begin: paddle.fft.rfft2(Tensor([32, 26, 250, 250],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([32, 26, 250, 250],"float32"), ) 	 52000000 	 1000 	 1.4854578971862793 	 0.8374526500701904 	 0.38049960136413574 	 0.4247281551361084 	 3.6051645278930664 	 1.924968957901001 	 0.613785982131958 	 0.4921433925628662 	 
2025-07-27 20:55:27.471108 test begin: paddle.fft.rfft2(Tensor([32, 32, 199, 250],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([32, 32, 199, 250],"float32"), ) 	 50944000 	 1000 	 2.695927143096924 	 1.5018432140350342 	 0.6889286041259766 	 0.7606899738311768 	 6.167271137237549 	 3.2517011165618896 	 1.2217023372650146 	 0.8315718173980713 	 
2025-07-27 20:55:43.927302 test begin: paddle.fft.rfft2(Tensor([32, 32, 250, 199],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([32, 32, 250, 199],"float32"), ) 	 50944000 	 1000 	 2.738091230392456 	 1.6391346454620361 	 0.46603822708129883 	 0.418196439743042 	 5.24005126953125 	 2.7150111198425293 	 0.892641544342041 	 0.6953635215759277 	 
2025-07-27 20:55:57.973044 test begin: paddle.fft.rfft2(Tensor([8, 102, 250, 250],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([8, 102, 250, 250],"float32"), ) 	 51000000 	 1000 	 1.45143461227417 	 0.814572811126709 	 0.371234655380249 	 0.41634178161621094 	 3.535909414291382 	 1.8882524967193604 	 0.601616621017456 	 0.48240184783935547 	 
2025-07-27 20:56:07.237508 test begin: paddle.fft.rfft2(Tensor([8, 32, 250, 794],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([8, 32, 250, 794],"float32"), ) 	 50816000 	 1000 	 2.1063995361328125 	 1.4676055908203125 	 0.4302830696105957 	 0.5002460479736328 	 4.388777494430542 	 2.7339296340942383 	 0.7481317520141602 	 0.7003269195556641 	 
2025-07-27 20:56:19.384892 test begin: paddle.fft.rfft2(Tensor([8, 32, 794, 250],"float32"), )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(Tensor([8, 32, 794, 250],"float32"), ) 	 50816000 	 1000 	 2.3227386474609375 	 1.6287457942962646 	 0.5934512615203857 	 0.8328385353088379 	 5.2500739097595215 	 3.5120832920074463 	 0.893078088760376 	 0.8980977535247803 	 
2025-07-27 20:56:33.707645 test begin: paddle.fft.rfft2(x=Tensor([32, 15, 15, 7057],"float32"), axes=tuple(1,2,), norm="ortho", )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(x=Tensor([32, 15, 15, 7057],"float32"), axes=tuple(1,2,), norm="ortho", ) 	 50810400 	 1000 	 1.5993082523345947 	 1.5951268672943115 	 0.32685351371765137 	 0.4068930149078369 	 3.931291103363037 	 3.047736644744873 	 0.6693956851959229 	 0.6233813762664795 	 
2025-07-27 20:56:45.531617 test begin: paddle.fft.rfft2(x=Tensor([32, 15, 414, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(x=Tensor([32, 15, 414, 256],"float32"), axes=tuple(1,2,), norm="ortho", ) 	 50872320 	 1000 	 2.3227694034576416 	 1.8690481185913086 	 0.33893895149230957 	 0.38034749031066895 	 4.266723394393921 	 3.1262435913085938 	 0.62296462059021 	 0.5326085090637207 	 
2025-07-27 20:56:58.658316 test begin: paddle.fft.rfft2(x=Tensor([32, 414, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(x=Tensor([32, 414, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", ) 	 50872320 	 1000 	 1.673112392425537 	 1.6825494766235352 	 0.34178781509399414 	 0.4307689666748047 	 4.3065197467803955 	 3.4309492111206055 	 0.6278591156005859 	 0.5841341018676758 	 
2025-07-27 20:57:11.421121 test begin: paddle.fft.rfft2(x=Tensor([883, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
[Prof] paddle.fft.rfft2 	 paddle.fft.rfft2(x=Tensor([883, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", ) 	 50860800 	 1000 	 1.5670955181121826 	 1.565345287322998 	 0.3200249671936035 	 0.39983415603637695 	 3.8991541862487793 	 3.027311086654663 	 0.6649091243743896 	 0.6185939311981201 	 
2025-07-27 20:57:23.072409 test begin: paddle.fft.rfftn(Tensor([26, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([26, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 52000000 	 1000 	 1.4807791709899902 	 0.8268330097198486 	 0.37821078300476074 	 0.42331647872924805 	 3.600348711013794 	 1.925255537033081 	 0.6126461029052734 	 0.49187493324279785 	 
2025-07-27 20:57:32.340559 test begin: paddle.fft.rfftn(Tensor([32, 15, 15, 7057],"float32"), None, tuple(1,2,), "ortho", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 15, 15, 7057],"float32"), None, tuple(1,2,), "ortho", None, ) 	 50810400 	 1000 	 1.599097728729248 	 1.6003894805908203 	 0.3268446922302246 	 0.40527796745300293 	 3.931359052658081 	 3.0479657649993896 	 0.6693470478057861 	 0.6234180927276611 	 
2025-07-27 20:57:45.353277 test begin: paddle.fft.rfftn(Tensor([32, 15, 414, 256],"float32"), None, tuple(1,2,), "ortho", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 15, 414, 256],"float32"), None, tuple(1,2,), "ortho", None, ) 	 50872320 	 1000 	 2.32222056388855 	 1.85276460647583 	 0.3388707637786865 	 0.37856173515319824 	 4.2698280811309814 	 3.1281638145446777 	 0.6230394840240479 	 0.5326633453369141 	 
2025-07-27 20:57:59.929063 test begin: paddle.fft.rfftn(Tensor([32, 26, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 26, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 52000000 	 1000 	 1.48195481300354 	 0.8284754753112793 	 0.3795928955078125 	 0.42343926429748535 	 3.5995311737060547 	 1.9236340522766113 	 0.6128334999084473 	 0.4917917251586914 	 
2025-07-27 20:58:09.149281 test begin: paddle.fft.rfftn(Tensor([32, 32, 199, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 32, 199, 250],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 50944000 	 1000 	 2.696575403213501 	 1.4904053211212158 	 0.6891129016876221 	 0.7621805667877197 	 5.961599111557007 	 3.2530517578125 	 1.0151925086975098 	 0.8331191539764404 	 
2025-07-27 20:58:23.916386 test begin: paddle.fft.rfftn(Tensor([32, 32, 250, 199],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 32, 250, 199],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 50944000 	 1000 	 2.7382326126098633 	 1.6394190788269043 	 0.46613144874572754 	 0.4182617664337158 	 5.2394773960113525 	 2.71459698677063 	 0.8925096988677979 	 0.694176435470581 	 
2025-07-27 20:58:38.032126 test begin: paddle.fft.rfftn(Tensor([32, 414, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([32, 414, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, ) 	 50872320 	 1000 	 1.670781135559082 	 1.684039831161499 	 0.34168553352355957 	 0.42952704429626465 	 4.303614377975464 	 3.4316678047180176 	 0.6279716491699219 	 0.5857453346252441 	 
2025-07-27 20:58:50.698448 test begin: paddle.fft.rfftn(Tensor([8, 102, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([8, 102, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 51000000 	 1000 	 1.450286865234375 	 0.809730052947998 	 0.37042737007141113 	 0.414506196975708 	 3.531076192855835 	 1.888066053390503 	 0.600853681564331 	 0.4823884963989258 	 
2025-07-27 20:58:59.774653 test begin: paddle.fft.rfftn(Tensor([8, 32, 250, 794],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([8, 32, 250, 794],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 50816000 	 1000 	 2.1083807945251465 	 1.466167688369751 	 0.431760311126709 	 0.4990372657775879 	 4.389863014221191 	 2.7349603176116943 	 0.7482197284698486 	 0.6991231441497803 	 
2025-07-27 20:59:11.889949 test begin: paddle.fft.rfftn(Tensor([8, 32, 794, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([8, 32, 794, 250],"float32"), None, tuple(-2,-1,), "backward", None, ) 	 50816000 	 1000 	 2.323221445083618 	 1.6343233585357666 	 0.5949792861938477 	 0.8317580223083496 	 5.250916481018066 	 3.514235019683838 	 0.8933560848236084 	 0.8996660709381104 	 
2025-07-27 20:59:26.049960 test begin: paddle.fft.rfftn(Tensor([883, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
[Prof] paddle.fft.rfftn 	 paddle.fft.rfftn(Tensor([883, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, ) 	 50860800 	 1000 	 1.5656800270080566 	 1.5825469493865967 	 0.32003045082092285 	 0.3999946117401123 	 3.8977198600769043 	 3.0248329639434814 	 0.663400411605835 	 0.6186439990997314 	 
2025-07-27 20:59:39.498968 test begin: paddle.flatten(Tensor([4051, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([4051, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 	 50815744 	 1000 	 0.005805015563964844 	 0.004267215728759766 	 1.1205673217773438e-05 	 1.8596649169921875e-05 	 0.042006492614746094 	 0.06714773178100586 	 2.9802322387695312e-05 	 6.604194641113281e-05 	 
2025-07-27 20:59:41.303669 test begin: paddle.flatten(Tensor([4096, 254, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([4096, 254, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 	 50978816 	 1000 	 0.005804300308227539 	 0.004253387451171875 	 1.5497207641601562e-05 	 2.0265579223632812e-05 	 0.041765451431274414 	 0.06953263282775879 	 3.552436828613281e-05 	 4.9114227294921875e-05 	 
2025-07-27 20:59:43.103393 test begin: paddle.flatten(Tensor([4096, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([4096, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 	 51380224 	 1000 	 0.010659933090209961 	 0.007589101791381836 	 1.430511474609375e-05 	 2.1457672119140625e-05 	 0.0490567684173584 	 0.06365275382995605 	 3.9577484130859375e-05 	 5.269050598144531e-05 	 
2025-07-27 20:59:45.110755 test begin: paddle.flatten(Tensor([416, 50, 10, 256],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([416, 50, 10, 256],"float32"), start_axis=2, ) 	 53248000 	 1000 	 0.0056912899017333984 	 0.007390737533569336 	 9.059906005859375e-06 	 1.7642974853515625e-05 	 0.041594505310058594 	 0.0803976058959961 	 0.00017142295837402344 	 6.628036499023438e-05 	 
2025-07-27 20:59:46.962628 test begin: paddle.flatten(Tensor([416, 50, 7, 349],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([416, 50, 7, 349],"float32"), start_axis=2, ) 	 50814400 	 1000 	 0.005608558654785156 	 0.004097938537597656 	 9.298324584960938e-06 	 1.5735626220703125e-05 	 0.04210090637207031 	 0.05706977844238281 	 3.24249267578125e-05 	 5.1021575927734375e-05 	 
2025-07-27 20:59:48.774267 test begin: paddle.flatten(Tensor([416, 69, 7, 256],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([416, 69, 7, 256],"float32"), start_axis=2, ) 	 51437568 	 1000 	 0.0056650638580322266 	 0.00408935546875 	 6.9141387939453125e-06 	 1.7404556274414062e-05 	 0.04181861877441406 	 0.0574033260345459 	 4.4345855712890625e-05 	 5.1975250244140625e-05 	 
2025-07-27 20:59:50.591057 test begin: paddle.flatten(Tensor([512, 50, 7, 284],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([512, 50, 7, 284],"float32"), start_axis=2, ) 	 50892800 	 1000 	 0.0056035518646240234 	 0.004052639007568359 	 1.52587890625e-05 	 2.09808349609375e-05 	 0.04191946983337402 	 0.08047008514404297 	 2.9802322387695312e-05 	 6.937980651855469e-05 	 
2025-07-27 20:59:52.543057 test begin: paddle.flatten(Tensor([512, 50, 8, 256],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([512, 50, 8, 256],"float32"), start_axis=2, ) 	 52428800 	 1000 	 0.005572795867919922 	 0.004108905792236328 	 9.059906005859375e-06 	 1.6689300537109375e-05 	 0.04176211357116699 	 0.057212114334106445 	 3.337860107421875e-05 	 3.933906555175781e-05 	 
2025-07-27 20:59:54.387279 test begin: paddle.flatten(Tensor([512, 56, 7, 256],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([512, 56, 7, 256],"float32"), start_axis=2, ) 	 51380224 	 1000 	 0.005703449249267578 	 0.004019498825073242 	 6.9141387939453125e-06 	 1.6689300537109375e-05 	 0.041907310485839844 	 0.05690956115722656 	 3.0040740966796875e-05 	 4.7206878662109375e-05 	 
2025-07-27 20:59:56.174664 test begin: paddle.flatten(Tensor([568, 50, 7, 256],"float32"), start_axis=2, )
[Prof] paddle.flatten 	 paddle.flatten(Tensor([568, 50, 7, 256],"float32"), start_axis=2, ) 	 50892800 	 1000 	 0.005701780319213867 	 0.004128694534301758 	 1.1205673217773438e-05 	 1.811981201171875e-05 	 0.04168200492858887 	 0.05769491195678711 	 4.6253204345703125e-05 	 5.14984130859375e-05 	 
2025-07-27 20:59:57.951161 test begin: paddle.flip(Tensor([127, 8, 224, 224],"float32"), axis=list[3,], )
[Prof] paddle.flip 	 paddle.flip(Tensor([127, 8, 224, 224],"float32"), axis=list[3,], ) 	 50978816 	 1000 	 0.9663794040679932 	 0.31337666511535645 	 0.9568343162536621 	 0.2983546257019043 	 0.9650347232818604 	 0.3130805492401123 	 0.9138846397399902 	 0.24264764785766602 	 
2025-07-27 21:00:02.221976 test begin: paddle.flip(Tensor([1351, 3, 112, 112],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([1351, 3, 112, 112],"float32"), axis=-1, ) 	 50840832 	 1000 	 0.9681923389434814 	 0.31437158584594727 	 0.9589352607727051 	 0.29831695556640625 	 0.9654417037963867 	 0.3127467632293701 	 0.9145960807800293 	 0.24414944648742676 	 
2025-07-27 21:00:08.152554 test begin: paddle.flip(Tensor([3, 338, 224, 224],"float32"), axis=list[3,], )
[Prof] paddle.flip 	 paddle.flip(Tensor([3, 338, 224, 224],"float32"), axis=list[3,], ) 	 50878464 	 1000 	 0.9634664058685303 	 0.3318462371826172 	 0.9471359252929688 	 0.2992124557495117 	 0.9647159576416016 	 0.31247949600219727 	 0.9052433967590332 	 0.24216365814208984 	 
2025-07-27 21:00:12.492462 test begin: paddle.flip(Tensor([3, 8, 224, 9451],"float32"), axis=list[3,], )
[Prof] paddle.flip 	 paddle.flip(Tensor([3, 8, 224, 9451],"float32"), axis=list[3,], ) 	 50808576 	 1000 	 0.9622881412506104 	 0.3184981346130371 	 0.9530336856842041 	 0.29967331886291504 	 0.9624414443969727 	 0.31382298469543457 	 0.9119148254394531 	 0.24124503135681152 	 
2025-07-27 21:00:16.713563 test begin: paddle.flip(Tensor([3, 8, 9451, 224],"float32"), axis=list[3,], )
[Prof] paddle.flip 	 paddle.flip(Tensor([3, 8, 9451, 224],"float32"), axis=list[3,], ) 	 50808576 	 1000 	 0.9621737003326416 	 0.31215333938598633 	 0.9530165195465088 	 0.29791831970214844 	 0.9623019695281982 	 0.3148467540740967 	 0.9118893146514893 	 0.2464432716369629 	 
2025-07-27 21:00:20.973409 test begin: paddle.flip(Tensor([52, 3, 112, 2908],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([52, 3, 112, 2908],"float32"), axis=-1, ) 	 50808576 	 1000 	 0.9626369476318359 	 0.3124547004699707 	 0.9463009834289551 	 0.29091763496398926 	 0.9627478122711182 	 0.31369972229003906 	 0.903092622756958 	 0.24243402481079102 	 
2025-07-27 21:00:25.243884 test begin: paddle.flip(Tensor([52, 3, 2908, 112],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([52, 3, 2908, 112],"float32"), axis=-1, ) 	 50808576 	 1000 	 0.9651002883911133 	 0.31241464614868164 	 0.9556903839111328 	 0.2981579303741455 	 0.9648704528808594 	 0.31251049041748047 	 0.9086811542510986 	 0.24420714378356934 	 
2025-07-27 21:00:29.580334 test begin: paddle.flip(Tensor([52, 78, 112, 112],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([52, 78, 112, 112],"float32"), axis=-1, ) 	 50878464 	 1000 	 0.9660968780517578 	 0.31277966499328613 	 0.9566962718963623 	 0.29809141159057617 	 0.9659481048583984 	 0.3127875328063965 	 0.9152708053588867 	 0.2373511791229248 	 
2025-07-27 21:00:33.812080 test begin: paddle.flip(Tensor([64, 3, 112, 2363],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([64, 3, 112, 2363],"float32"), axis=-1, ) 	 50813952 	 1000 	 0.964005708694458 	 0.8014180660247803 	 0.9476690292358398 	 0.29805755615234375 	 0.9625928401947021 	 0.31244850158691406 	 0.9090909957885742 	 0.24456191062927246 	 
2025-07-27 21:00:39.346906 test begin: paddle.flip(Tensor([64, 3, 2363, 112],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([64, 3, 2363, 112],"float32"), axis=-1, ) 	 50813952 	 1000 	 0.9691433906555176 	 0.31244874000549316 	 0.9596114158630371 	 0.2982172966003418 	 0.964818000793457 	 0.3125483989715576 	 0.9138102531433105 	 0.2435469627380371 	 
2025-07-27 21:00:43.550681 test begin: paddle.flip(Tensor([64, 64, 112, 112],"float32"), axis=-1, )
[Prof] paddle.flip 	 paddle.flip(Tensor([64, 64, 112, 112],"float32"), axis=-1, ) 	 51380224 	 1000 	 0.9786651134490967 	 0.3159205913543701 	 0.9694111347198486 	 0.30079102516174316 	 0.9755759239196777 	 0.3158578872680664 	 0.9221198558807373 	 0.23830008506774902 	 
2025-07-27 21:00:47.941104 test begin: paddle.floor(Tensor([100000, 170, 3],"float32"), )
[Prof] paddle.floor 	 paddle.floor(Tensor([100000, 170, 3],"float32"), ) 	 51000000 	 1000 	 0.2967979907989502 	 0.3014547824859619 	 0.28809213638305664 	 0.28895020484924316 	 0.1347341537475586 	 0.13450860977172852 	 0.08189177513122559 	 0.06717038154602051 	 
2025-07-27 21:00:50.529071 test begin: paddle.floor(Tensor([100000, 2, 255],"float32"), )
[Prof] paddle.floor 	 paddle.floor(Tensor([100000, 2, 255],"float32"), ) 	 51000000 	 1000 	 0.29677295684814453 	 0.2989664077758789 	 0.2880537509918213 	 0.28767824172973633 	 0.13459491729736328 	 0.14223742485046387 	 0.08118438720703125 	 0.07482671737670898 	 
2025-07-27 21:00:53.080537 test begin: paddle.floor(Tensor([322, 157920],"float32"), )
[Prof] paddle.floor 	 paddle.floor(Tensor([322, 157920],"float32"), ) 	 50850240 	 1000 	 0.29727768898010254 	 0.30142807960510254 	 0.2884807586669922 	 0.28725266456604004 	 0.13417816162109375 	 0.13411235809326172 	 0.08347582817077637 	 0.06875491142272949 	 
2025-07-27 21:00:55.626387 test begin: paddle.floor(Tensor([4, 12700801],"float32"), )
[Prof] paddle.floor 	 paddle.floor(Tensor([4, 12700801],"float32"), ) 	 50803204 	 1000 	 0.29578399658203125 	 0.297837495803833 	 0.2870137691497803 	 0.28705358505249023 	 0.13404178619384766 	 0.13403844833374023 	 0.08334922790527344 	 0.06836819648742676 	 
2025-07-27 21:00:58.165347 test begin: paddle.floor(Tensor([8467201, 2, 3],"float32"), )
[Prof] paddle.floor 	 paddle.floor(Tensor([8467201, 2, 3],"float32"), ) 	 50803206 	 1000 	 0.29719114303588867 	 0.297802209854126 	 0.28850698471069336 	 0.2869446277618408 	 0.13405847549438477 	 0.13398313522338867 	 0.08353734016418457 	 0.06559252738952637 	 
2025-07-27 21:01:00.687283 test begin: paddle.floor(x=Tensor([100, 352, 38, 38],"float32"), )
[Prof] paddle.floor 	 paddle.floor(x=Tensor([100, 352, 38, 38],"float32"), ) 	 50828800 	 1000 	 0.2959930896759033 	 0.2979545593261719 	 0.2870302200317383 	 0.28700900077819824 	 0.13413476943969727 	 0.13546490669250488 	 0.08302927017211914 	 0.06596899032592773 	 
2025-07-27 21:01:03.218732 test begin: paddle.floor(x=Tensor([100, 4, 3343, 38],"float32"), )
[Prof] paddle.floor 	 paddle.floor(x=Tensor([100, 4, 3343, 38],"float32"), ) 	 50813600 	 1000 	 0.29705357551574707 	 1.2963576316833496 	 0.2879912853240967 	 0.28682923316955566 	 0.13412189483642578 	 0.13411974906921387 	 0.08349943161010742 	 0.06072402000427246 	 
2025-07-27 21:01:07.438605 test begin: paddle.floor(x=Tensor([100, 4, 38, 3343],"float32"), )
[Prof] paddle.floor 	 paddle.floor(x=Tensor([100, 4, 38, 3343],"float32"), ) 	 50813600 	 1000 	 0.29582977294921875 	 0.3005208969116211 	 0.2868316173553467 	 0.2869236469268799 	 0.13408279418945312 	 0.13406777381896973 	 0.08266758918762207 	 0.06310820579528809 	 
2025-07-27 21:01:10.496287 test begin: paddle.floor(x=Tensor([8796, 4, 38, 38],"float32"), )
[Prof] paddle.floor 	 paddle.floor(x=Tensor([8796, 4, 38, 38],"float32"), ) 	 50805696 	 1000 	 0.29563307762145996 	 0.3017466068267822 	 0.28676533699035645 	 0.28386569023132324 	 0.13401293754577637 	 0.1341245174407959 	 0.08319401741027832 	 0.06641697883605957 	 
2025-07-27 21:01:15.529726 test begin: paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 50803600 	 1000 	 0.42721056938171387 	 0.4999217987060547 	 0.41715574264526367 	 0.48099184036254883 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:17.364328 test begin: paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), ) 	 50803600 	 1000 	 0.42656588554382324 	 0.49315357208251953 	 0.4086320400238037 	 0.479569673538208 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:19.134111 test begin: paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 101606800 	 1000 	 0.452406644821167 	 0.45784664154052734 	 0.4433622360229492 	 0.44360804557800293 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:21.816999 test begin: paddle.floor_divide(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), ) 	 50803220 	 1000 	 0.44775867462158203 	 0.44744443893432617 	 0.4389324188232422 	 0.4347705841064453 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:23.541409 test begin: paddle.floor_divide(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), ) 	 101606420 	 1000 	 0.4519956111907959 	 0.4550819396972656 	 0.4429006576538086 	 0.44243311882019043 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:26.218377 test begin: paddle.floor_divide(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), ) 	 50804736 	 1000 	 0.4479353427886963 	 0.4474501609802246 	 0.43910813331604004 	 0.4348483085632324 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:27.949625 test begin: paddle.floor_divide(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.floor_divide 	 paddle.floor_divide(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), ) 	 101606440 	 1000 	 0.4534132480621338 	 0.45508408546447754 	 0.4442918300628662 	 0.4424288272857666 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:30.531046 test begin: paddle.fmax(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), ) 	 558835211 	 1000 	 4.472716808319092 	 4.412797689437866 	 4.43661642074585 	 4.396533727645874 	 45.20610737800598 	 27.210344552993774 	 45.14705729484558 	 1.984588623046875 	 
2025-07-27 21:03:11.974865 test begin: paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), ) 	 101606420 	 1000 	 0.4497694969177246 	 0.4463951587677002 	 0.4401125907897949 	 0.4350454807281494 	 0.736710786819458 	 2.6473422050476074 	 0.6786179542541504 	 0.20784711837768555 	 
2025-07-27 21:03:18.833305 test begin: paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), ) 	 55883531 	 1000 	 0.4499995708465576 	 0.4521477222442627 	 0.4390726089477539 	 0.4281799793243408 	 4.528967380523682 	 2.751725196838379 	 4.469398498535156 	 0.20063471794128418 	 
2025-07-27 21:03:29.182353 test begin: paddle.fmax(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), ) 	 101616000 	 1000 	 0.4515421390533447 	 0.46427273750305176 	 0.44181108474731445 	 0.43620729446411133 	 0.736504077911377 	 2.641641855239868 	 0.6772985458374023 	 0.20776081085205078 	 
2025-07-27 21:03:37.568187 test begin: paddle.fmax(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), ) 	 101608800 	 1000 	 0.45017075538635254 	 0.44643545150756836 	 0.43949460983276367 	 0.43505287170410156 	 0.7390182018280029 	 2.6454761028289795 	 0.6748359203338623 	 0.20805668830871582 	 
2025-07-27 21:03:44.540179 test begin: paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), ) 	 50803230 	 1000 	 0.29790472984313965 	 0.3128530979156494 	 0.2868485450744629 	 0.2928485870361328 	 8.358946084976196 	 2.4750654697418213 	 8.29808497428894 	 0.16841602325439453 	 
2025-07-27 21:03:57.807050 test begin: paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), ) 	 101606430 	 1000 	 0.44974470138549805 	 0.44631361961364746 	 0.43999218940734863 	 0.43498873710632324 	 0.7366642951965332 	 2.6473746299743652 	 0.6783759593963623 	 0.20782732963562012 	 
2025-07-27 21:04:04.647584 test begin: paddle.fmax(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), )
[Prof] paddle.fmax 	 paddle.fmax(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), ) 	 101616000 	 1000 	 0.45023512840270996 	 0.4476940631866455 	 0.4401087760925293 	 0.43559861183166504 	 0.7365295886993408 	 2.6415820121765137 	 0.6682209968566895 	 0.20774078369140625 	 
2025-07-27 19:17:44.611633 test begin: paddle.fmin(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), )
W0727 19:17:55.916352 160009 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.fmin 	 paddle.fmin(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), ) 	 558835211 	 1000 	 4.445425748825073 	 4.406049489974976 	 4.432046413421631 	 4.392435312271118 	 45.24231553077698 	 27.186758041381836 	 45.17923665046692 	 1.9847190380096436 	 
2025-07-27 19:19:28.680212 test begin: paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), ) 	 101606420 	 1000 	 1.187361717224121 	 0.45833468437194824 	 0.4403843879699707 	 0.4355344772338867 	 0.7333505153656006 	 2.641854763031006 	 0.6761939525604248 	 0.2077486515045166 	 
2025-07-27 19:19:40.026803 test begin: paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), ) 	 55883531 	 1000 	 0.45273303985595703 	 0.44560790061950684 	 0.43245625495910645 	 0.4338076114654541 	 4.5258629322052 	 2.747745990753174 	 4.456954002380371 	 0.2005009651184082 	 
2025-07-27 19:19:50.075487 test begin: paddle.fmin(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), ) 	 101616000 	 1000 	 0.4506540298461914 	 0.4467132091522217 	 0.44093894958496094 	 0.43578410148620605 	 0.7330470085144043 	 2.640078067779541 	 0.6761133670806885 	 0.20757102966308594 	 
2025-07-27 19:19:56.792994 test begin: paddle.fmin(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), ) 	 101608800 	 1000 	 0.45073795318603516 	 0.44669175148010254 	 0.44090771675109863 	 0.4356496334075928 	 0.7340831756591797 	 2.6440577507019043 	 0.6768209934234619 	 0.20791387557983398 	 
2025-07-27 19:20:03.549616 test begin: paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), ) 	 50803230 	 1000 	 0.29710817337036133 	 0.30725717544555664 	 0.28560471534729004 	 0.29164648056030273 	 8.340341806411743 	 2.480020761489868 	 8.281492471694946 	 0.16878914833068848 	 
2025-07-27 19:20:16.730927 test begin: paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), ) 	 101606430 	 1000 	 0.45049476623535156 	 0.4467344284057617 	 0.4405784606933594 	 0.43574070930480957 	 0.7336990833282471 	 2.6417462825775146 	 0.6758716106414795 	 0.20773887634277344 	 
2025-07-27 19:20:23.456960 test begin: paddle.fmin(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), )
[Prof] paddle.fmin 	 paddle.fmin(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), ) 	 101616000 	 1000 	 0.45059967041015625 	 0.4467751979827881 	 0.4407827854156494 	 0.43587779998779297 	 0.7330756187438965 	 2.639810562133789 	 0.675410270690918 	 0.20757436752319336 	 
2025-07-27 19:20:30.220405 test begin: paddle.frac(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.8085119724273682 	 0.2979152202606201 	 0.7854321002960205 	 0.2874014377593994 	 1.183824062347412 	 0.04871845245361328 	 0.6047461032867432 	 5.984306335449219e-05 	 
2025-07-27 19:20:34.206778 test begin: paddle.frac(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.8142971992492676 	 0.3066833019256592 	 0.7713479995727539 	 0.28534483909606934 	 1.18353271484375 	 0.055407047271728516 	 0.6046195030212402 	 6.651878356933594e-05 	 
2025-07-27 19:20:42.675935 test begin: paddle.frac(Tensor([16934401, 3],"float32"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([16934401, 3],"float32"), ) 	 50803203 	 1000 	 0.8088641166687012 	 0.2978370189666748 	 0.7844717502593994 	 0.2854628562927246 	 1.1830787658691406 	 0.055945396423339844 	 0.604400634765625 	 4.291534423828125e-05 	 
2025-07-27 19:20:46.673961 test begin: paddle.frac(Tensor([2, 12700801],"float64"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.7482445240020752 	 0.2981429100036621 	 0.7206504344940186 	 0.28131604194641113 	 1.0638513565063477 	 0.06421637535095215 	 0.5436000823974609 	 0.00011658668518066406 	 
2025-07-27 19:20:49.942373 test begin: paddle.frac(Tensor([2, 25401601],"float32"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.8078970909118652 	 0.2977776527404785 	 0.7851524353027344 	 0.28737545013427734 	 1.1835885047912598 	 0.05101132392883301 	 0.6045584678649902 	 4.9591064453125e-05 	 
2025-07-27 19:20:53.953017 test begin: paddle.frac(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.8076992034912109 	 0.29781103134155273 	 0.7835907936096191 	 0.28101015090942383 	 1.1834802627563477 	 0.05445671081542969 	 0.6047492027282715 	 6.079673767089844e-05 	 
2025-07-27 19:20:57.927208 test begin: paddle.frac(Tensor([8467201, 3],"float64"), )
[Prof] paddle.frac 	 paddle.frac(Tensor([8467201, 3],"float64"), ) 	 25401603 	 1000 	 0.7482452392578125 	 0.2980198860168457 	 0.724865198135376 	 0.28765368461608887 	 1.064026117324829 	 0.04873943328857422 	 0.5436842441558838 	 6.008148193359375e-05 	 
2025-07-27 19:21:01.129149 test begin: paddle.full_like(Tensor([1, 1, 2048, 24807],"bool"), -65504.0, dtype=Dtype(float16), )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([1, 1, 2048, 24807],"bool"), -65504.0, dtype=Dtype(float16), ) 	 50804736 	 1000 	 0.06909513473510742 	 0.07046627998352051 	 0.05803275108337402 	 0.05634307861328125 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:01.974579 test begin: paddle.full_like(Tensor([1, 1, 24807, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([1, 1, 24807, 2048],"bool"), -65504.0, dtype=Dtype(float16), ) 	 50804736 	 1000 	 0.06877350807189941 	 0.06865501403808594 	 0.057677268981933594 	 0.056392669677734375 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:02.811107 test begin: paddle.full_like(Tensor([1, 13, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([1, 13, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), ) 	 54525952 	 1000 	 0.07357382774353027 	 0.07351016998291016 	 0.06265139579772949 	 0.057512760162353516 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:03.706790 test begin: paddle.full_like(Tensor([1, 300, 169345],"float32"), 1, )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([1, 300, 169345],"float32"), 1, ) 	 50803500 	 1000 	 0.1340651512145996 	 0.13420343399047852 	 0.12338685989379883 	 0.12232470512390137 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:04.792048 test begin: paddle.full_like(Tensor([13, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([13, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), ) 	 54525952 	 1000 	 0.4930422306060791 	 0.5927767753601074 	 0.06307721138000488 	 0.05457568168640137 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:07.428103 test begin: paddle.full_like(Tensor([199, 256000],"float32"), 0.0, )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([199, 256000],"float32"), 0.0, ) 	 50944000 	 1000 	 0.13943862915039062 	 0.14678955078125 	 0.12398004531860352 	 0.12229251861572266 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:10.137139 test begin: paddle.full_like(Tensor([42, 300, 4096],"float32"), 1, )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([42, 300, 4096],"float32"), 1, ) 	 51609600 	 1000 	 0.1397113800048828 	 0.13636445999145508 	 0.12556672096252441 	 0.12320351600646973 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:11.252139 test begin: paddle.full_like(Tensor([6, 8467201],"float32"), 0.0, )
[Prof] paddle.full_like 	 paddle.full_like(Tensor([6, 8467201],"float32"), 0.0, ) 	 50803206 	 1000 	 0.13629889488220215 	 0.13418078422546387 	 0.1235361099243164 	 0.12225937843322754 	 None 	 None 	 None 	 None 	 
2025-07-27 19:21:12.353412 test begin: paddle.gammainc(Tensor([1270081, 40],"float32"), y=Tensor([1270081, 40],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([1270081, 40],"float32"), y=Tensor([1270081, 40],"float32"), ) 	 101606480 	 1000 	 4.205409526824951 	 2.263538360595703 	 0.003048419952392578 	 2.252274513244629 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:21:22.773834 test begin: paddle.gammainc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), ) 	 101606480 	 1000 	 4.205238580703735 	 2.263514518737793 	 0.003036975860595703 	 2.2522144317626953 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:21:33.164504 test begin: paddle.gammainc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), ) 	 101606460 	 1000 	 4.20952296257019 	 2.2634520530700684 	 0.003047466278076172 	 2.2496211528778076 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:21:45.097845 test begin: paddle.gammainc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), ) 	 101606448 	 1000 	 4.228634357452393 	 2.2697980403900146 	 0.003034830093383789 	 2.252235174179077 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:21:56.364211 test begin: paddle.gammainc(Tensor([3, 16934401],"float32"), y=Tensor([3, 16934401],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([3, 16934401],"float32"), y=Tensor([3, 16934401],"float32"), ) 	 101606406 	 1000 	 4.212099552154541 	 2.2663204669952393 	 0.0030210018157958984 	 2.254976749420166 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:22:06.867772 test begin: paddle.gammainc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
[Prof] paddle.gammainc 	 paddle.gammainc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), ) 	 101606520 	 1000 	 4.204137325286865 	 2.2673137187957764 	 0.003043651580810547 	 2.2555320262908936 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igamma: input' is not implemented.
2025-07-27 19:22:17.355718 test begin: paddle.gammaincc(Tensor([1270081, 40],"float32"), Tensor([1270081, 40],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([1270081, 40],"float32"), Tensor([1270081, 40],"float32"), ) 	 101606480 	 1000 	 3.910876750946045 	 7.104469537734985 	 0.0027451515197753906 	 7.093216896057129 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:22:31.989557 test begin: paddle.gammaincc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), ) 	 101606480 	 1000 	 3.9147775173187256 	 7.106042146682739 	 0.0027625560760498047 	 7.0911548137664795 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:22:47.545032 test begin: paddle.gammaincc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), ) 	 101606460 	 1000 	 3.918342351913452 	 7.104419946670532 	 0.0027763843536376953 	 7.093086004257202 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:23:02.524900 test begin: paddle.gammaincc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), ) 	 101606448 	 1000 	 3.9069743156433105 	 7.105362892150879 	 0.0027701854705810547 	 7.092650651931763 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:23:17.106004 test begin: paddle.gammaincc(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), ) 	 101606406 	 1000 	 3.9135355949401855 	 7.105245590209961 	 0.002768993377685547 	 7.087425947189331 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:23:31.743086 test begin: paddle.gammaincc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
[Prof] paddle.gammaincc 	 paddle.gammaincc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), ) 	 101606520 	 1000 	 3.9073891639709473 	 7.1111133098602295 	 0.002771139144897461 	 7.089227914810181 	 None 	 None 	 None 	 None 	 
[Error] the derivative for 'igammac: input' is not implemented.
2025-07-27 19:23:47.561500 test begin: paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([482, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([482, 1],"int64"), ) 	 58720738 	 1000 	 0.08820295333862305 	 19.311405897140503 	 0.07662200927734375 	 0.0002722740173339844 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:24:08.608828 test begin: paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([496, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([496, 1],"int64"), ) 	 58720752 	 1000 	 0.08884501457214355 	 16.314951181411743 	 0.0789334774017334 	 0.00022220611572265625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:24:26.604718 test begin: paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([512, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([512, 1],"int64"), ) 	 58720768 	 1000 	 0.09302663803100586 	 16.769886016845703 	 0.0830526351928711 	 0.0001246929168701172 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:24:45.056075 test begin: paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([482, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([482, 1],"int64"), ) 	 58720738 	 1000 	 0.0889437198638916 	 15.773419857025146 	 0.07770037651062012 	 0.00022649765014648438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:25:02.719723 test begin: paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([496, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([496, 1],"int64"), ) 	 58720752 	 1000 	 0.08880615234375 	 16.426491498947144 	 0.0787973403930664 	 0.0002262592315673828 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:25:20.845365 test begin: paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([512, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([512, 1],"int64"), ) 	 58720768 	 1000 	 0.0924990177154541 	 18.3546724319458 	 0.0824897289276123 	 0.00025153160095214844 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:25:40.895520 test begin: paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([482, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([482, 1],"int64"), ) 	 50878946 	 1000 	 0.11796045303344727 	 16.189773321151733 	 0.10805439949035645 	 0.000217437744140625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:25:58.569500 test begin: paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([496, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([496, 1],"int64"), ) 	 50878960 	 1000 	 0.12071990966796875 	 16.41504168510437 	 0.11059165000915527 	 0.00023174285888671875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:26:16.475432 test begin: paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([512, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([512, 1],"int64"), ) 	 50878976 	 1000 	 0.12417340278625488 	 17.219748497009277 	 0.10694575309753418 	 0.0002162456512451172 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:26:37.355903 test begin: paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([482, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([482, 1],"int64"), ) 	 50878946 	 1000 	 0.5122237205505371 	 15.990896940231323 	 0.2724192142486572 	 0.0002453327178955078 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:26:57.541710 test begin: paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([496, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([496, 1],"int64"), ) 	 50878960 	 1000 	 0.28940820693969727 	 21.646143436431885 	 0.279451847076416 	 0.0002460479736328125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:27:21.969739 test begin: paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([512, 1],"int64"), )
[Prof] paddle.gather 	 paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([512, 1],"int64"), ) 	 50878976 	 1000 	 0.29862260818481445 	 21.039576292037964 	 0.2885406017303467 	 0.00024437904357910156 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:27:45.855332 test begin: paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([778, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([778, 2],"int64"), ) 	 1016128 	 1000 	 0.01324152946472168 	 74.3510172367096 	 1.3113021850585938e-05 	 0.000186920166015625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:29:00.406528 test begin: paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([816, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([816, 2],"int64"), ) 	 1016204 	 1000 	 0.011062145233154297 	 64.35683298110962 	 2.288818359375e-05 	 0.00020623207092285156 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:30:04.937987 test begin: paddle.gather_nd(Tensor([1, 819, 1240],"bfloat16"), Tensor([778, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([1, 819, 1240],"bfloat16"), Tensor([778, 2],"int64"), ) 	 1017116 	 1000 	 0.012096643447875977 	 67.04993176460266 	 0.0013837814331054688 	 0.00025582313537597656 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:31:12.159571 test begin: paddle.gather_nd(Tensor([1, 8192, 124],"bfloat16"), Tensor([816, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([1, 8192, 124],"bfloat16"), Tensor([816, 2],"int64"), ) 	 1017440 	 1000 	 0.010753393173217773 	 65.76277613639832 	 1.2636184692382812e-05 	 0.00016951560974121094 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:32:18.090539 test begin: paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([10, 50, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([10, 50, 2],"int64"), ) 	 529640 	 1000 	 0.011235952377319336 	 44.394678354263306 	 1.239776611328125e-05 	 0.0005576610565185547 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:33:02.614824 test begin: paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([20, 50, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([20, 50, 2],"int64"), ) 	 530640 	 1000 	 0.011188745498657227 	 79.46813464164734 	 1.1682510375976562e-05 	 0.0003142356872558594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:34:22.255347 test begin: paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([5, 50, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([5, 50, 2],"int64"), ) 	 529140 	 1000 	 0.011327743530273438 	 20.44828462600708 	 1.1682510375976562e-05 	 0.0006632804870605469 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:34:42.812345 test begin: paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([778, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([778, 2],"int64"), ) 	 1162772 	 1000 	 0.037494659423828125 	 63.0360631942749 	 0.026781797409057617 	 0.0006320476531982422 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:35:46.166905 test begin: paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([816, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([816, 2],"int64"), ) 	 1162848 	 1000 	 0.03825497627258301 	 65.32667875289917 	 0.027234315872192383 	 0.0002703666687011719 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:36:51.802980 test begin: paddle.gather_nd(Tensor([20, 198, 128],"float32"), index=Tensor([20, 50, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([20, 198, 128],"float32"), index=Tensor([20, 50, 2],"int64"), ) 	 508880 	 1000 	 0.019266843795776367 	 85.49040579795837 	 1.1682510375976562e-05 	 0.00027251243591308594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:17.522487 test begin: paddle.gather_nd(Tensor([20, 413, 62],"float32"), index=Tensor([20, 50, 2],"int64"), )
[Prof] paddle.gather_nd 	 paddle.gather_nd(Tensor([20, 413, 62],"float32"), index=Tensor([20, 50, 2],"int64"), ) 	 514120 	 1000 	 0.019057035446166992 	 86.10537338256836 	 1.2159347534179688e-05 	 0.0002524852752685547 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:39:43.855292 test begin: paddle.gcd(Tensor([10, 50803],"int32"), Tensor([10, 50803],"int32"), )
W0727 19:39:52.308668   620 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(Tensor([10, 50803],"int32"), Tensor([10, 50803],"int32"), ) 	 1016060 	 1000 	 8.39585542678833 	 0.02610039710998535 	 8.7738037109375e-05 	 0.009773731231689453 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:39:52.344195 test begin: paddle.gcd(Tensor([25401, 20],"int32"), Tensor([25401, 20],"int32"), )
W0727 19:39:58.570597   629 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(Tensor([25401, 20],"int32"), Tensor([25401, 20],"int32"), ) 	 1016040 	 1000 	 6.203559875488281 	 0.02624964714050293 	 4.363059997558594e-05 	 0.016299962997436523 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:39:58.605365 test begin: paddle.gcd(x=Tensor([12700, 2, 4, 5],"int32"), y=Tensor([12700, 2, 4, 5],"int32"), )
W0727 19:40:05.184150   634 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([12700, 2, 4, 5],"int32"), y=Tensor([12700, 2, 4, 5],"int32"), ) 	 1016000 	 1000 	 6.558603048324585 	 0.025828838348388672 	 3.218650817871094e-05 	 0.015839576721191406 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:05.215847 test begin: paddle.gcd(x=Tensor([25401, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
W0727 19:40:11.493024   643 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([25401, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 	 508030 	 1000 	 6.249202728271484 	 0.0560152530670166 	 4.982948303222656e-05 	 0.04498624801635742 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:11.557778 test begin: paddle.gcd(x=Tensor([6, 1, 16934, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
W0727 19:40:17.692729   653 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([6, 1, 16934, 5],"int32"), y=Tensor([2, 1, 5],"int32"), ) 	 508030 	 1000 	 6.111069679260254 	 0.056223154067993164 	 2.288818359375e-05 	 0.04522085189819336 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:17.756907 test begin: paddle.gcd(x=Tensor([6, 1, 4, 21168],"int32"), y=Tensor([2, 1, 21168],"int32"), )
W0727 19:40:24.378556   664 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([6, 1, 4, 21168],"int32"), y=Tensor([2, 1, 21168],"int32"), ) 	 550368 	 1000 	 6.5907464027404785 	 0.0556795597076416 	 4.601478576660156e-05 	 0.04452872276306152 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:25.554697 test begin: paddle.gcd(x=Tensor([6, 2, 4, 10584],"int32"), y=Tensor([6, 2, 4, 10584],"int32"), )
W0727 19:40:32.061311   670 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([6, 2, 4, 10584],"int32"), y=Tensor([6, 2, 4, 10584],"int32"), ) 	 1016064 	 1000 	 6.467794418334961 	 0.02625107765197754 	 2.3126602172851562e-05 	 0.015871524810791016 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:32.096188 test begin: paddle.gcd(x=Tensor([6, 2, 8467, 5],"int32"), y=Tensor([6, 2, 8467, 5],"int32"), )
W0727 19:40:38.822686   678 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([6, 2, 8467, 5],"int32"), y=Tensor([6, 2, 8467, 5],"int32"), ) 	 1016040 	 1000 	 6.699314832687378 	 0.02592301368713379 	 3.743171691894531e-05 	 0.015426397323608398 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:40.790285 test begin: paddle.gcd(x=Tensor([6, 4233, 4, 5],"int32"), y=Tensor([6, 4233, 4, 5],"int32"), )
W0727 19:40:47.852957   689 backward.cc:462] While running Node (RemainderGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.gcd 	 paddle.gcd(x=Tensor([6, 4233, 4, 5],"int32"), y=Tensor([6, 4233, 4, 5],"int32"), ) 	 1015920 	 1000 	 7.012160539627075 	 0.026462793350219727 	 5.602836608886719e-05 	 0.01006317138671875 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:40:47.888246 test begin: paddle.geometric.segment_max(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_max 	 paddle.geometric.segment_max(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), ) 	 50803280 	 1000 	 0.8755283355712891 	 10.058976411819458 	 0.0008530616760253906 	 0.00043392181396484375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:41:01.248600 test begin: paddle.geometric.segment_max(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_max 	 paddle.geometric.segment_max(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), ) 	 101606480 	 1000 	 1.8153698444366455 	 11.521803379058838 	 0.0017807483673095703 	 0.0004601478576660156 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:41:20.356427 test begin: paddle.geometric.segment_max(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_max 	 paddle.geometric.segment_max(Tensor([40, 635041],"float64"), Tensor([40],"int64"), ) 	 25401680 	 1000 	 0.5345346927642822 	 12.104743003845215 	 0.0005028247833251953 	 0.00023174285888671875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:41:34.595517 test begin: paddle.geometric.segment_mean(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), ) 	 26671701 	 1000 	 0.3739657402038574 	 0.5243973731994629 	 0.00033736228942871094 	 0.00024390220642089844 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:41:41.108798 test begin: paddle.geometric.segment_mean(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 8.320894718170166 	 9.156285047531128 	 0.008270263671875 	 0.000888824462890625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:29.037036 test begin: paddle.geometric.segment_mean(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 4.808304786682129 	 8.098062992095947 	 0.004740715026855469 	 0.0009975433349609375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:43:19.245296 test begin: paddle.geometric.segment_mean(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 10.503941535949707 	 23.068347215652466 	 0.010450363159179688 	 0.004537343978881836 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:45:16.826539 test begin: paddle.geometric.segment_mean(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), ) 	 53343381 	 1000 	 0.5578861236572266 	 1.0584847927093506 	 0.0005164146423339844 	 0.00014019012451171875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:45:22.947785 test begin: paddle.geometric.segment_mean(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), ) 	 50803280 	 1000 	 0.3655233383178711 	 0.4755215644836426 	 0.0003247261047363281 	 6.604194641113281e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:46:09.276252 test begin: paddle.geometric.segment_mean(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([40, 635041],"float64"), Tensor([40],"int64"), ) 	 25401680 	 1000 	 0.3766593933105469 	 0.6742892265319824 	 0.00033402442932128906 	 0.00010466575622558594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:21.176604 test begin: paddle.geometric.segment_mean(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), )
[Prof] paddle.geometric.segment_mean 	 paddle.geometric.segment_mean(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), ) 	 106686741 	 1000 	 2.0144028663635254 	 3.5857717990875244 	 0.0019969940185546875 	 0.0006351470947265625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:43.779192 test begin: paddle.geometric.segment_min(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), ) 	 26671701 	 1000 	 0.6629538536071777 	 1.1348719596862793 	 0.0006291866302490234 	 0.0002269744873046875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:47.286258 test begin: paddle.geometric.segment_min(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 11.009562730789185 	 24.165451049804688 	 0.010918855667114258 	 0.0023660659790039062 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:46.079599 test begin: paddle.geometric.segment_min(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 10.244293689727783 	 15.972943305969238 	 0.010176897048950195 	 0.0029900074005126953 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:41.271518 test begin: paddle.geometric.segment_min(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), ) 	 533433621 	 1000 	 11.032594919204712 	 19.868146419525146 	 0.010954856872558594 	 0.002128124237060547 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:45.185167 test begin: paddle.geometric.segment_min(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), ) 	 53343381 	 1000 	 1.0201621055603027 	 1.6170713901519775 	 0.000978708267211914 	 0.0002543926239013672 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.330681 test begin: paddle.geometric.segment_min(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), ) 	 50803280 	 1000 	 0.7420644760131836 	 0.82834792137146 	 0.00070953369140625 	 0.00011992454528808594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.840728 test begin: paddle.geometric.segment_min(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), ) 	 101606480 	 1000 	 1.3759989738464355 	 1.6938636302947998 	 0.0013113021850585938 	 0.00023436546325683594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:00.250442 test begin: paddle.geometric.segment_min(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([40, 635041],"float64"), Tensor([40],"int64"), ) 	 25401680 	 1000 	 0.3511025905609131 	 0.5192983150482178 	 0.0003254413604736328 	 0.0001499652862548828 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:02.188068 test begin: paddle.geometric.segment_min(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), )
[Prof] paddle.geometric.segment_min 	 paddle.geometric.segment_min(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), ) 	 106686741 	 1000 	 2.168518543243408 	 5.022188425064087 	 0.0021462440490722656 	 0.0003590583801269531 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:14.837918 test begin: paddle.geometric.segment_sum(Tensor([25401601, 15],"float16"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([25401601, 15],"float16"), Tensor([25401601],"int64"), ) 	 406425616 	 1000 	 5.874913692474365 	 5.321704626083374 	 0.005811929702758789 	 2.3768908977508545 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:44.565195 test begin: paddle.geometric.segment_sum(Tensor([25401601, 15],"float32"), Tensor([25401601],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([25401601, 15],"float32"), Tensor([25401601],"int64"), ) 	 406425616 	 1000 	 3.664597988128662 	 3.0240235328674316 	 0.0036163330078125 	 1.5452735424041748 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:05.480250 test begin: paddle.geometric.segment_sum(Tensor([2540161, 20],"float32"), Tensor([2540161],"int32"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([2540161, 20],"float32"), Tensor([2540161],"int32"), ) 	 53343381 	 1000 	 0.7008543014526367 	 0.5604159832000732 	 0.0006763935089111328 	 0.2862553596496582 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:08.840587 test begin: paddle.geometric.segment_sum(Tensor([30, 1693441],"float32"), Tensor([30],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([30, 1693441],"float32"), Tensor([30],"int64"), ) 	 50803260 	 1000 	 0.6634411811828613 	 0.5051577091217041 	 0.0006380081176757812 	 0.2580380439758301 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:12.296336 test begin: paddle.geometric.segment_sum(Tensor([30, 3386881],"float16"), Tensor([30],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([30, 3386881],"float16"), Tensor([30],"int64"), ) 	 101606460 	 1000 	 1.2990317344665527 	 1.0361649990081787 	 0.0012743473052978516 	 0.5294015407562256 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:18.274696 test begin: paddle.geometric.segment_sum(Tensor([3386881, 15],"float32"), Tensor([3386881],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([3386881, 15],"float32"), Tensor([3386881],"int64"), ) 	 54190096 	 1000 	 0.7128207683563232 	 0.568159818649292 	 0.0006957054138183594 	 0.29021334648132324 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:21.882237 test begin: paddle.geometric.segment_sum(Tensor([40, 1270081],"float32"), Tensor([40],"int32"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([40, 1270081],"float32"), Tensor([40],"int32"), ) 	 50803280 	 1000 	 0.6378908157348633 	 0.4774444103240967 	 0.0006120204925537109 	 0.24390316009521484 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:25.200047 test begin: paddle.geometric.segment_sum(Tensor([50803201, 20],"float32"), Tensor([50803201],"int32"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([50803201, 20],"float32"), Tensor([50803201],"int32"), ) 	 1066867221 	 1000 	 8.652501106262207 	 6.8155412673950195 	 0.008618593215942383 	 2.323233127593994 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:08.944685 test begin: paddle.geometric.segment_sum(Tensor([6773761, 15],"float16"), Tensor([6773761],"int64"), )
[Prof] paddle.geometric.segment_sum 	 paddle.geometric.segment_sum(Tensor([6773761, 15],"float16"), Tensor([6773761],"int64"), ) 	 108380176 	 1000 	 1.768038034439087 	 1.3935942649841309 	 0.001741170883178711 	 0.7120733261108398 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:16.485159 test begin: paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, ) 	 25401640 	 1000 	 1.014294147491455 	 3.6902029514312744 	 0.3457157611846924 	 0.0006787776947021484 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:23.547360 test begin: paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, ) 	 25401640 	 1000 	 1.0754680633544922 	 4.117732048034668 	 0.21962738037109375 	 0.0002353191375732422 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:30.671443 test begin: paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, ) 	 25401640 	 1000 	 1.0370705127716064 	 3.6943695545196533 	 0.35348010063171387 	 0.0004744529724121094 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:39.605331 test begin: paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, ) 	 25401650 	 1000 	 0.45336461067199707 	 2.2584447860717773 	 0.15355801582336426 	 0.000690460205078125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:44.090804 test begin: paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, ) 	 25401650 	 1000 	 0.3604722023010254 	 2.5681662559509277 	 0.07373738288879395 	 0.00018477439880371094 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:48.253298 test begin: paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
[Prof] paddle.geometric.send_u_recv 	 paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, ) 	 25401650 	 1000 	 0.4507865905761719 	 2.2343859672546387 	 0.15349245071411133 	 0.00046253204345703125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:52.160419 test begin: paddle.geometric.send_ue_recv(Tensor([10, 1693441],"float64"), Tensor([15, 1693441],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 1693441],"float64"), Tensor([15, 1693441],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, ) 	 42336055 	 1000 	 0.8707547187805176 	 2.738546848297119 	 0.1773996353149414 	 0.0006189346313476562 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:58.173918 test begin: paddle.geometric.send_ue_recv(Tensor([10, 2540161],"float64"), Tensor([15, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 2540161],"float64"), Tensor([15, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, ) 	 63504055 	 1000 	 1.2769739627838135 	 3.6415860652923584 	 0.26073336601257324 	 0.00028443336486816406 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:54:06.751025 test begin: paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, ) 	 33022175 	 1000 	 51.45396971702576 	 3.498934745788574 	 9.918212890625e-05 	 0.0005650520324707031 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:49.321099 test begin: paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, ) 	 33022175 	 1000 	 39.70222330093384 	 2.62746524810791 	 0.00011563301086425781 	 0.00010609626770019531 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:58:15.373284 test begin: paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, ) 	 25401830 	 1000 	 45.58337616920471 	 3.3791630268096924 	 0.00011515617370605469 	 0.0005025863647460938 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:01:55.220264 test begin: paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, ) 	 25401830 	 1000 	 49.61893963813782 	 2.388056755065918 	 9.465217590332031e-05 	 6.437301635742188e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:06:06.080641 test begin: paddle.geometric.send_ue_recv(Tensor([1270081, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([1270081, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, ) 	 25401950 	 1000 	 0.3613290786743164 	 1.6116199493408203 	 0.07386565208435059 	 0.00010323524475097656 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:06:09.259577 test begin: paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, ) 	 25401790 	 1000 	 0.7846856117248535 	 1.6499881744384766 	 5.1975250244140625e-05 	 0.0004749298095703125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:06:13.136544 test begin: paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
[Prof] paddle.geometric.send_ue_recv 	 paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, ) 	 25401790 	 1000 	 0.9622130393981934 	 1.4123833179473877 	 5.7220458984375e-05 	 0.0002231597900390625 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:06:17.549886 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", ) 	 50805302 	 1000 	 8.517754077911377 	 6.062787771224976 	 8.678436279296875e-05 	 3.0967350006103516 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:07:23.830674 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "mul", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "mul", ) 	 50805302 	 1000 	 8.504252672195435 	 6.060805082321167 	 9.72747802734375e-05 	 3.0966787338256836 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:08:23.276990 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 25401830 	 1000 	 3.5691912174224854 	 0.050253868103027344 	 0.00011849403381347656 	 0.0389256477355957 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:08:29.182325 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", ) 	 25401830 	 1000 	 2.9474620819091797 	 0.05448436737060547 	 9.250640869140625e-05 	 0.038294076919555664 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:08:42.006072 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 25401750 	 1000 	 0.33194613456726074 	 0.010968923568725586 	 5.555152893066406e-05 	 4.458427429199219e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:08:43.046012 test begin: paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", ) 	 25401750 	 1000 	 0.4764986038208008 	 0.011178255081176758 	 5.221366882324219e-05 	 5.1975250244140625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:08:44.584157 test begin: paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", ) 	 50805302 	 1000 	 9.09706711769104 	 6.545794248580933 	 0.00011348724365234375 	 3.581563711166382 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:09:41.414855 test begin: paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 25403631 	 1000 	 0.8900127410888672 	 0.01775336265563965 	 5.745887756347656e-05 	 3.3855438232421875e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:09:50.766742 test begin: paddle.geometric.send_uv(Tensor([100, 254017],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([100, 254017],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 25401830 	 1000 	 3.4074535369873047 	 0.050193071365356445 	 6.031990051269531e-05 	 0.03880476951599121 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:09:56.639924 test begin: paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 26671731 	 1000 	 0.3072633743286133 	 0.011222124099731445 	 4.482269287109375e-05 	 2.8133392333984375e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:09:58.048802 test begin: paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", ) 	 26671731 	 1000 	 0.32149672508239746 	 0.011684656143188477 	 4.100799560546875e-05 	 5.1975250244140625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:09:59.891283 test begin: paddle.geometric.send_uv(Tensor([1270081, 20],"float64"), Tensor([1270081, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([1270081, 20],"float64"), Tensor([1270081, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 26671731 	 1000 	 0.09162259101867676 	 0.011018514633178711 	 4.38690185546875e-05 	 4.982948303222656e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:10:01.105422 test begin: paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 533433651 	 1000 	 0.10983014106750488 	 0.011153936386108398 	 5.4836273193359375e-05 	 3.600120544433594e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:10:23.601099 test begin: paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", ) 	 533433651 	 1000 	 0.09068131446838379 	 0.011170387268066406 	 3.7670135498046875e-05 	 5.221366882324219e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:10:45.758694 test begin: paddle.geometric.send_uv(Tensor([25401601, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
[Prof] paddle.geometric.send_uv 	 paddle.geometric.send_uv(Tensor([25401601, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", ) 	 533433651 	 1000 	 0.09335803985595703 	 0.011401176452636719 	 2.2172927856445312e-05 	 5.0067901611328125e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:11:10.512059 test begin: paddle.greater_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), ) 	 38103936 	 1000 	 0.564032793045044 	 0.5053110122680664 	 0.5424976348876953 	 0.4895927906036377 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:16.854508 test begin: paddle.greater_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), ) 	 38102688 	 1000 	 0.5545754432678223 	 0.5016067028045654 	 0.5307860374450684 	 0.4827580451965332 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:18.523077 test begin: paddle.greater_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), ) 	 31753280 	 1000 	 0.2132251262664795 	 0.2191929817199707 	 0.19633173942565918 	 0.20080041885375977 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:19.482010 test begin: paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), ) 	 25403456 	 1000 	 0.5648922920227051 	 0.4439523220062256 	 0.5478127002716064 	 0.4255104064941406 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:20.913896 test begin: paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), ) 	 25405120 	 1000 	 1.045790195465088 	 0.9085903167724609 	 1.0286197662353516 	 0.8902490139007568 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:23.294320 test begin: paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), ) 	 228616128 	 1000 	 1.7904415130615234 	 1.568915843963623 	 1.780271291732788 	 1.5569567680358887 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:30.432021 test begin: paddle.greater_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), ) 	 76205064 	 1000 	 1.1158132553100586 	 0.9976077079772949 	 1.0986945629119873 	 0.9793646335601807 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:33.847483 test begin: paddle.greater_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), ) 	 76205376 	 1000 	 1.6855692863464355 	 1.928314208984375 	 1.6649761199951172 	 0.9808144569396973 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:40.968963 test begin: paddle.greater_equal(Tensor([16935, 10, 15, 20],"float32"), Tensor([16935, 10, 15, 20],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([16935, 10, 15, 20],"float32"), Tensor([16935, 10, 15, 20],"float32"), ) 	 101610000 	 1000 	 0.3268449306488037 	 0.3316957950592041 	 0.3106086254119873 	 0.31040525436401367 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:43.326509 test begin: paddle.greater_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), ) 	 76205184 	 1000 	 1.1143977642059326 	 0.9983644485473633 	 1.1005098819732666 	 0.9750857353210449 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:46.798920 test begin: paddle.greater_equal(Tensor([49613, 1024, 1, 1],"float32"), Tensor([1],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([49613, 1024, 1, 1],"float32"), Tensor([1],"float32"), ) 	 50803713 	 1000 	 0.18882226943969727 	 0.24579405784606934 	 0.17816448211669922 	 0.2057647705078125 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:48.069579 test begin: paddle.greater_equal(Tensor([5, 10, 15, 67738],"float32"), Tensor([5, 10, 15, 67738],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([5, 10, 15, 67738],"float32"), Tensor([5, 10, 15, 67738],"float32"), ) 	 101607000 	 1000 	 0.32729649543762207 	 0.3338801860809326 	 0.31781792640686035 	 0.31643009185791016 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:50.436045 test begin: paddle.greater_equal(Tensor([5, 10, 50804, 20],"float32"), Tensor([5, 10, 50804, 20],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([5, 10, 50804, 20],"float32"), Tensor([5, 10, 50804, 20],"float32"), ) 	 101608000 	 1000 	 0.32705020904541016 	 0.3278224468231201 	 0.31785106658935547 	 0.3137977123260498 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:52.789853 test begin: paddle.greater_equal(Tensor([5, 33869, 15, 20],"float32"), Tensor([5, 33869, 15, 20],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([5, 33869, 15, 20],"float32"), Tensor([5, 33869, 15, 20],"float32"), ) 	 101607000 	 1000 	 0.3282897472381592 	 0.32794666290283203 	 0.3178741931915283 	 0.31697535514831543 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:55.108218 test begin: paddle.greater_equal(Tensor([8, 1024, 1, 6202],"float32"), Tensor([1],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([8, 1024, 1, 6202],"float32"), Tensor([1],"float32"), ) 	 50806785 	 1000 	 0.18721914291381836 	 0.23114871978759766 	 0.1771233081817627 	 0.21904683113098145 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:56.365679 test begin: paddle.greater_equal(Tensor([8, 1024, 6202, 1],"float32"), Tensor([1],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([8, 1024, 6202, 1],"float32"), Tensor([1],"float32"), ) 	 50806785 	 1000 	 0.18721413612365723 	 0.2311563491821289 	 0.16978096961975098 	 0.21117353439331055 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:57.602047 test begin: paddle.greater_equal(Tensor([8, 6350401, 1, 1],"float32"), Tensor([1],"float32"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([8, 6350401, 1, 1],"float32"), Tensor([1],"float32"), ) 	 50803209 	 1000 	 0.18790674209594727 	 0.2311093807220459 	 0.17780303955078125 	 0.21726512908935547 	 None 	 None 	 None 	 None 	 
2025-07-27 20:11:58.836048 test begin: paddle.greater_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), )
[Prof] paddle.greater_equal 	 paddle.greater_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), ) 	 38102784 	 1000 	 0.5550565719604492 	 0.5025923252105713 	 0.544957160949707 	 0.4906296730041504 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:00.511861 test begin: paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 50803600 	 1000 	 0.19019746780395508 	 0.2489163875579834 	 0.17989039421081543 	 0.23625969886779785 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:01.771685 test begin: paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), ) 	 50803600 	 1000 	 0.18778610229492188 	 0.24946355819702148 	 0.17747044563293457 	 0.2367541790008545 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:03.033187 test begin: paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 101606800 	 1000 	 0.32714080810546875 	 0.3277771472930908 	 0.3176577091217041 	 0.3167378902435303 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:05.321663 test begin: paddle.greater_than(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), ) 	 101606420 	 1000 	 0.32825493812561035 	 0.3333585262298584 	 0.31755709648132324 	 0.3168509006500244 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:07.678402 test begin: paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), )
W0727 20:12:11.024220  2521 dygraph_functions.cc:90428] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), ) 	 203212812 	 1000 	 1.1317470073699951 	 0.7185459136962891 	 0.5777003765106201 	 0.7069659233093262 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:13.046856 test begin: paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float64"), ) 	 203212812 	 1000 	 2.327239751815796 	 0.9783627986907959 	 1.1080336570739746 	 0.9666504859924316 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:23.803729 test begin: paddle.greater_than(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), ) 	 101606440 	 1000 	 0.3272573947906494 	 0.3288862705230713 	 0.310976505279541 	 0.31032729148864746 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:26.212005 test begin: paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), ) 	 203212816 	 1000 	 1.130478858947754 	 0.7233455181121826 	 0.5776903629302979 	 0.7060327529907227 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:31.625444 test begin: paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float64"), ) 	 203212816 	 1000 	 2.5443270206451416 	 0.9876430034637451 	 1.5423402786254883 	 0.9653871059417725 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:41.653734 test begin: paddle.greater_than(Tensor([4, 3, 2116801],"float16"), Tensor([4, 3, 2116801],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 3, 2116801],"float16"), Tensor([4, 3, 2116801],"float64"), ) 	 50803224 	 1000 	 0.5164339542388916 	 0.25072813034057617 	 0.2639122009277344 	 0.23697710037231445 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:43.376548 test begin: paddle.greater_than(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), ) 	 101606424 	 1000 	 0.5695779323577881 	 0.36618685722351074 	 0.29104137420654297 	 0.35187458992004395 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:46.017621 test begin: paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), ) 	 203212824 	 1000 	 1.1306886672973633 	 0.7194862365722656 	 0.5777499675750732 	 0.7065277099609375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:51.225459 test begin: paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float64"), ) 	 203212824 	 1000 	 2.0284652709960938 	 0.9780640602111816 	 1.0364866256713867 	 0.9605951309204102 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:58.251562 test begin: paddle.greater_than(Tensor([4, 3175201, 2],"float16"), Tensor([4, 3175201, 2],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 3175201, 2],"float16"), Tensor([4, 3175201, 2],"float64"), ) 	 50803216 	 1000 	 0.5164101123809814 	 0.2506842613220215 	 0.2638216018676758 	 0.23328685760498047 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:00.028725 test begin: paddle.greater_than(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), ) 	 101606416 	 1000 	 0.5695452690124512 	 0.36318206787109375 	 0.29102468490600586 	 0.3456740379333496 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:02.756186 test begin: paddle.greater_than(Tensor([4233601, 3, 2],"float16"), Tensor([4233601, 3, 2],"float64"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([4233601, 3, 2],"float16"), Tensor([4233601, 3, 2],"float64"), ) 	 50803212 	 1000 	 0.5164744853973389 	 0.25072503089904785 	 0.263901948928833 	 0.23337459564208984 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:04.531953 test begin: paddle.greater_than(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), )
[Prof] paddle.greater_than 	 paddle.greater_than(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), ) 	 101606412 	 1000 	 0.5696630477905273 	 0.3678431510925293 	 0.2911207675933838 	 0.3453245162963867 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:07.237946 test begin: paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([1],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([1],"float32"), ) 	 50804737 	 1000 	 0.29844069480895996 	 0.30296921730041504 	 0.2792186737060547 	 0.29084181785583496 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:13:44.347835 test begin: paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([2048],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([2048],"float32"), ) 	 50806784 	 1000 	 0.2975797653198242 	 0.305774450302124 	 0.2867274284362793 	 0.2937748432159424 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:13:47.852290 test begin: paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([24807, 2048],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([24807, 2048],"float32"), ) 	 101609472 	 1000 	 0.45351600646972656 	 0.44674205780029297 	 0.44097042083740234 	 0.4354572296142578 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:13:51.895734 test begin: paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([169345],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([169345],"float32"), ) 	 50972845 	 1000 	 0.2960226535797119 	 0.3102240562438965 	 0.2847177982330322 	 0.29370546340942383 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:13:54.773579 test begin: paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([1],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([1],"float32"), ) 	 50803501 	 1000 	 0.2964756488800049 	 0.3030226230621338 	 0.28541040420532227 	 0.2842690944671631 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:14:33.434806 test begin: paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), )
[Prof] paddle.heaviside 	 paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), ) 	 101607000 	 1000 	 0.450531005859375 	 0.4604470729827881 	 0.440662145614624 	 0.43015360832214355 	 None 	 None 	 None 	 None 	 
[Error] derivative for aten::heaviside is not implemented
2025-07-27 20:14:40.179302 test begin: paddle.histogram(input=Tensor([4, 6350401],"int64"), )
[Prof] paddle.histogram 	 paddle.histogram(input=Tensor([4, 6350401],"int64"), ) 	 25401604 	 1000 	 6.405599594116211 	 0.7654628753662109 	 0.0003674030303955078 	 0.00041556358337402344 	 None 	 None 	 None 	 None 	 
2025-07-27 20:14:47.753082 test begin: paddle.histogram(input=Tensor([6350401, 4],"int64"), )
[Prof] paddle.histogram 	 paddle.histogram(input=Tensor([6350401, 4],"int64"), ) 	 25401604 	 1000 	 6.411887884140015 	 0.7745091915130615 	 0.0003731250762939453 	 0.0004074573516845703 	 None 	 None 	 None 	 None 	 
2025-07-27 20:14:55.416877 test begin: paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0, max=1, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0, max=1, ) 	 50803220 	 1000 	 0.12064456939697266 	 0.023852825164794922 	 3.314018249511719e-05 	 4.7206878662109375e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:14:56.400489 test begin: paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0.2, max=0.9, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0.2, max=0.9, ) 	 50803220 	 1000 	 0.1216733455657959 	 0.02398681640625 	 3.337860107421875e-05 	 5.507469177246094e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:14:57.362928 test begin: paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=1, max=1, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=1, max=1, ) 	 50803220 	 1000 	 0.12821578979492188 	 0.02391815185546875 	 3.8623809814453125e-05 	 5.340576171875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:14:58.343709 test begin: paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0, max=1, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0, max=1, ) 	 50803205 	 1000 	 0.09724211692810059 	 0.015863656997680664 	 3.170967102050781e-05 	 4.076957702636719e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:14:59.272208 test begin: paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0.2, max=0.9, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0.2, max=0.9, ) 	 50803205 	 1000 	 0.12069582939147949 	 0.02394700050354004 	 3.3855438232421875e-05 	 4.1961669921875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:15:00.228902 test begin: paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=1, max=1, )
[Prof] paddle.histogram_bin_edges 	 paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=1, max=1, ) 	 50803205 	 1000 	 0.09799385070800781 	 0.01615309715270996 	 1.9311904907226562e-05 	 4.00543212890625e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:15:01.155495 test begin: paddle.histogramdd(Tensor([1270, 2, 2],"float64"), bins=5, weights=Tensor([1270, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
/usr/local/lib/python3.10/dist-packages/paddle/tensor/linalg.py:5741: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach(), rather than paddle.to_tensor(sourceTensor).
  edge = paddle.to_tensor(edge)
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([1270, 2, 2],"float64"), bins=5, weights=Tensor([1270, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, ) 	 7620 	 1000 	 1.9109563827514648 	 0.07528376579284668 	 3.0517578125e-05 	 6.890296936035156e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:15:03.215842 test begin: paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=False, )
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=False, ) 	 317520 	 1000 	 3.9593214988708496 	 1.248277187347412 	 3.528594970703125e-05 	 0.00150299072265625 	 None 	 None 	 None 	 None 	 
2025-07-27 20:15:08.451377 test begin: paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=True, )
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=True, ) 	 317520 	 1000 	 4.136494159698486 	 1.271409034729004 	 6.961822509765625e-05 	 0.00030994415283203125 	 None 	 None 	 None 	 None 	 
2025-07-27 20:15:13.881928 test begin: paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=False, )
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=False, ) 	 1270080 	 1000 	 22.081722259521484 	 4.514090538024902 	 3.695487976074219e-05 	 0.0002560615539550781 	 None 	 None 	 None 	 None 	 
2025-07-27 20:15:40.554276 test begin: paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=True, )
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=True, ) 	 1270080 	 1000 	 21.475685119628906 	 4.583754539489746 	 3.600120544433594e-05 	 0.0003070831298828125 	 None 	 None 	 None 	 None 	 
2025-07-27 20:16:06.670866 test begin: paddle.histogramdd(Tensor([63504, 2, 2],"float64"), bins=5, weights=Tensor([63504, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
[Prof] paddle.histogramdd 	 paddle.histogramdd(Tensor([63504, 2, 2],"float64"), bins=5, weights=Tensor([63504, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, ) 	 381024 	 1000 	 3.6078457832336426 	 0.1554422378540039 	 0.00012135505676269531 	 0.0001246929168701172 	 None 	 None 	 None 	 None 	 
2025-07-27 20:16:10.454675 test begin: paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,1,3,], )
W0727 20:16:11.421998 23996 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,1,3,], ) 	 25401618 	 1000 	 0.03190493583679199 	 0.009485244750976562 	 2.3603439331054688e-05 	 2.2649765014648438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:11.580830 test begin: paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,], )
W0727 20:16:12.302979 23998 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,], ) 	 25401618 	 1000 	 0.01725172996520996 	 0.006940364837646484 	 1.0967254638671875e-05 	 2.193450927734375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:12.428142 test begin: paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[2,4,], )
W0727 20:16:13.155025 23999 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[2,4,], ) 	 25401618 	 1000 	 0.024386882781982422 	 0.008320808410644531 	 1.4066696166992188e-05 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:13.278829 test begin: paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,1,3,], )
W0727 20:16:14.369800 24000 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,1,3,], ) 	 25401612 	 1000 	 0.0314326286315918 	 0.009409666061401367 	 1.0013580322265625e-05 	 3.409385681152344e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:14.548042 test begin: paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,], )
W0727 20:16:15.261866 24001 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,], ) 	 25401612 	 1000 	 0.030771732330322266 	 0.012021303176879883 	 4.5299530029296875e-05 	 2.5033950805664062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:15.367913 test begin: paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[2,4,], )
W0727 20:16:16.103555 24002 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[2,4,], ) 	 25401612 	 1000 	 0.02427196502685547 	 0.013593673706054688 	 1.7881393432617188e-05 	 3.409385681152344e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:16.245413 test begin: paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,1,3,], )
W0727 20:16:17.219517 24003 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,1,3,], ) 	 25401624 	 1000 	 0.05626034736633301 	 0.015044212341308594 	 5.245208740234375e-05 	 2.8133392333984375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:17.396209 test begin: paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,], )
W0727 20:16:18.120239 24005 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,], ) 	 25401624 	 1000 	 0.01747727394104004 	 0.006894111633300781 	 1.52587890625e-05 	 2.6226043701171875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:18.243361 test begin: paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[2,4,], )
W0727 20:16:18.975616 24006 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.hsplit 	 paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[2,4,], ) 	 25401624 	 1000 	 0.02438497543334961 	 0.008172273635864258 	 8.58306884765625e-06 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:16:19.102127 test begin: paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], ) 	 76204872 	 1000 	 0.9288897514343262 	 0.9278438091278076 	 0.9102528095245361 	 0.9068858623504639 	 0.9288711547851562 	 0.07707929611206055 	 0.8621277809143066 	 4.935264587402344e-05 	 
2025-07-27 20:16:25.113067 test begin: paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),], ) 	 25401624 	 1000 	 0.316211462020874 	 0.313159704208374 	 0.30110621452331543 	 0.15989279747009277 	 0.3109736442565918 	 0.07819604873657227 	 0.2559845447540283 	 6.699562072753906e-05 	 
2025-07-27 20:16:27.147628 test begin: paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.31603240966796875 	 0.3204035758972168 	 0.2982633113861084 	 0.30617523193359375 	 0.312957763671875 	 0.08566045761108398 	 0.24555182456970215 	 7.82012939453125e-05 	 
2025-07-27 20:16:29.248492 test begin: paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.317643404006958 	 0.32041430473327637 	 0.29086852073669434 	 0.2988131046295166 	 0.3136429786682129 	 0.08431792259216309 	 0.2349402904510498 	 7.176399230957031e-05 	 
2025-07-27 20:16:31.372886 test begin: paddle.hstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], ) 	 76204836 	 1000 	 0.9245219230651855 	 0.928769588470459 	 0.9067800045013428 	 0.8967342376708984 	 0.9311203956604004 	 0.07742810249328613 	 0.8533294200897217 	 7.843971252441406e-05 	 
2025-07-27 20:16:39.778079 test begin: paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 25401654 	 1000 	 0.33118200302124023 	 0.3174417018890381 	 0.2921786308288574 	 0.29619717597961426 	 0.3135511875152588 	 0.08733153343200684 	 0.2339475154876709 	 6.699562072753906e-05 	 
2025-07-27 20:16:41.947986 test begin: paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401654 	 1000 	 0.31653642654418945 	 0.5494096279144287 	 0.28990745544433594 	 0.29665398597717285 	 0.31333446502685547 	 0.08880949020385742 	 0.23492956161499023 	 7.915496826171875e-05 	 
2025-07-27 20:16:45.605735 test begin: paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 76204980 	 1000 	 0.9299743175506592 	 0.9309484958648682 	 0.9005982875823975 	 0.9138007164001465 	 0.930828332901001 	 0.07729029655456543 	 0.8636915683746338 	 7.748603820800781e-05 	 
2025-07-27 20:16:53.211300 test begin: paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401660 	 1000 	 0.3175196647644043 	 0.3131539821624756 	 0.29422855377197266 	 0.1599280834197998 	 0.31171727180480957 	 0.06694865226745605 	 0.24709606170654297 	 6.67572021484375e-05 	 
2025-07-27 20:16:55.286650 test begin: paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401654 	 1000 	 0.3166482448577881 	 0.3114609718322754 	 0.2905924320220947 	 0.290241003036499 	 0.3133225440979004 	 0.07855892181396484 	 0.23695921897888184 	 8.678436279296875e-05 	 
2025-07-27 20:16:57.426691 test begin: paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 76204818 	 1000 	 0.9313395023345947 	 0.9283699989318848 	 0.9052472114562988 	 0.9046549797058105 	 0.9457285404205322 	 0.10640358924865723 	 0.8691623210906982 	 0.0001049041748046875 	 
2025-07-27 20:17:03.512066 test begin: paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401870 	 1000 	 0.3171963691711426 	 0.3153669834136963 	 0.29837703704833984 	 0.29994797706604004 	 0.31252479553222656 	 0.07840275764465332 	 0.24506378173828125 	 6.341934204101562e-05 	 
2025-07-27 20:17:05.592002 test begin: paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 76204890 	 1000 	 0.934246301651001 	 0.9387588500976562 	 0.9056017398834229 	 0.9168298244476318 	 0.942633867263794 	 0.0826406478881836 	 0.8646159172058105 	 6.079673767089844e-05 	 
2025-07-27 20:17:12.062581 test begin: paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401630 	 1000 	 0.319155216217041 	 0.3154454231262207 	 0.30403566360473633 	 0.15987157821655273 	 0.3125917911529541 	 0.06094717979431152 	 0.2580695152282715 	 0.0001735687255859375 	 
2025-07-27 20:17:14.141857 test begin: paddle.hstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], ) 	 76204824 	 1000 	 0.9731853008270264 	 1.395094871520996 	 0.9552614688873291 	 1.3798694610595703 	 0.9591925144195557 	 0.07661843299865723 	 0.8927161693572998 	 7.033348083496094e-05 	 
2025-07-27 20:17:20.797897 test begin: paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 76204920 	 1000 	 0.9268820285797119 	 1.0300743579864502 	 0.9081370830535889 	 1.0154130458831787 	 0.9377200603485107 	 0.09963083267211914 	 0.8703618049621582 	 0.00010251998901367188 	 
2025-07-27 20:17:26.815788 test begin: paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.hstack 	 paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401640 	 1000 	 0.30926036834716797 	 0.3131251335144043 	 0.2858119010925293 	 0.15988445281982422 	 0.3276095390319824 	 0.06663799285888672 	 0.26261019706726074 	 6.175041198730469e-05 	 
2025-07-27 20:17:28.885759 test begin: paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 1],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 1],"float32"), ) 	 50803220 	 1000 	 0.9640138149261475 	 0.3216361999511719 	 0.24621939659118652 	 0.3029744625091553 	 1.1268641948699951 	 1.83199143409729 	 0.23026251792907715 	 0.3116600513458252 	 
2025-07-27 20:17:34.845833 test begin: paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), ) 	 101606420 	 1000 	 1.489025592803955 	 0.45323610305786133 	 0.3788416385650635 	 0.43666696548461914 	 1.6651771068572998 	 1.7915840148925781 	 0.34058690071105957 	 0.45767855644226074 	 
2025-07-27 20:17:44.545137 test begin: paddle.hypot(Tensor([2540161, 20],"float32"), Tensor([2540161, 20],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([2540161, 20],"float32"), Tensor([2540161, 20],"float32"), ) 	 101606440 	 1000 	 1.4818687438964844 	 0.4574770927429199 	 0.37862110137939453 	 0.43599510192871094 	 1.6648938655853271 	 1.791640281677246 	 0.34052586555480957 	 0.4578430652618408 	 
2025-07-27 20:17:55.517687 test begin: paddle.hypot(Tensor([50803201],"float32"), Tensor([1],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([50803201],"float32"), Tensor([1],"float32"), ) 	 50803202 	 1000 	 0.9647016525268555 	 0.3146088123321533 	 0.2461400032043457 	 0.2961885929107666 	 1.0595271587371826 	 1.8042099475860596 	 0.2165675163269043 	 0.30690693855285645 	 
2025-07-27 20:18:01.421201 test begin: paddle.hypot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 1.484215497970581 	 0.4483461380004883 	 0.3785884380340576 	 0.4373354911804199 	 1.6652195453643799 	 1.7915878295898438 	 0.3405759334564209 	 0.4577324390411377 	 
2025-07-27 20:18:09.262792 test begin: paddle.hypot(Tensor([5080321, 10],"float32"), Tensor([5080321, 1],"float32"), )
[Prof] paddle.hypot 	 paddle.hypot(Tensor([5080321, 10],"float32"), Tensor([5080321, 1],"float32"), ) 	 55883531 	 1000 	 1.0150799751281738 	 0.3354983329772949 	 0.25943970680236816 	 0.3163936138153076 	 1.2990050315856934 	 2.0957000255584717 	 0.33147668838500977 	 0.4284029006958008 	 
2025-07-27 20:18:15.951542 test begin: paddle.i0(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.i0 	 paddle.i0(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.4658660888671875 	 0.4074890613555908 	 0.455657958984375 	 0.39755797386169434 	 0.44729018211364746 	 0.8563249111175537 	 0.3957390785217285 	 0.43753790855407715 	 
2025-07-27 20:18:19.768230 test begin: paddle.i0(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.i0 	 paddle.i0(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.4676954746246338 	 0.4085359573364258 	 0.4583451747894287 	 0.39864134788513184 	 0.4446830749511719 	 0.856151819229126 	 0.3877885341644287 	 0.4376373291015625 	 
2025-07-27 20:18:23.581265 test begin: paddle.i0(Tensor([25401601],"float64"), )
[Prof] paddle.i0 	 paddle.i0(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.4958970546722412 	 0.4643688201904297 	 0.4857673645019531 	 0.4546043872833252 	 0.5109021663665771 	 0.9179332256317139 	 0.4596710205078125 	 0.4690895080566406 	 
2025-07-27 20:18:27.040016 test begin: paddle.i0(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.i0 	 paddle.i0(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.46724367141723633 	 0.40757298469543457 	 0.4580802917480469 	 0.3977782726287842 	 0.4449458122253418 	 0.8561391830444336 	 0.39339542388916016 	 0.43750786781311035 	 
2025-07-27 20:18:30.826225 test begin: paddle.i0(Tensor([50803201],"float32"), )
[Prof] paddle.i0 	 paddle.i0(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.46737170219421387 	 0.40751123428344727 	 0.4581310749053955 	 0.39753150939941406 	 0.4447963237762451 	 0.8564388751983643 	 0.39247632026672363 	 0.43773317337036133 	 
2025-07-27 20:18:34.679902 test begin: paddle.i0e(Tensor([25401601],"float64"), )
[Prof] paddle.i0e 	 paddle.i0e(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.39636659622192383 	 0.3747825622558594 	 0.384868860244751 	 0.35402393341064453 	 0.5880062580108643 	 2.004228115081787 	 0.5357480049133301 	 0.40969324111938477 	 
2025-07-27 20:18:42.749189 test begin: paddle.i0e(Tensor([50803201],"float32"), )
[Prof] paddle.i0e 	 paddle.i0e(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.4301912784576416 	 0.3886568546295166 	 0.42093825340270996 	 0.3575105667114258 	 0.5868172645568848 	 1.9305753707885742 	 0.5346777439117432 	 0.39465928077697754 	 
2025-07-27 20:18:47.677416 test begin: paddle.i1(Tensor([25401601],"float64"), )
[Prof] paddle.i1 	 paddle.i1(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.499758243560791 	 0.4716508388519287 	 0.490703821182251 	 0.4614682197570801 	 0.599384069442749 	 3.2046616077423096 	 0.5474643707275391 	 0.2977004051208496 	 
2025-07-27 20:18:53.457384 test begin: paddle.i1(Tensor([50803201],"float32"), )
[Prof] paddle.i1 	 paddle.i1(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.34282922744750977 	 0.8653440475463867 	 0.33234095573425293 	 0.3945157527923584 	 0.5890984535217285 	 3.3402974605560303 	 0.5372004508972168 	 0.31032657623291016 	 
2025-07-27 20:19:02.146059 test begin: paddle.i1e(Tensor([25401601],"float64"), )
[Prof] paddle.i1e 	 paddle.i1e(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 0.3950073719024658 	 0.3727409839630127 	 0.3861570358276367 	 0.3628718852996826 	 0.589932918548584 	 3.84672212600708 	 0.5384008884429932 	 0.30280184745788574 	 
2025-07-27 20:19:08.400882 test begin: paddle.i1e(Tensor([50803201],"float32"), )
[Prof] paddle.i1e 	 paddle.i1e(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.31945276260375977 	 0.29728102684020996 	 0.31054186820983887 	 0.2875359058380127 	 0.587212324142456 	 4.043399333953857 	 0.5358133316040039 	 0.3182485103607178 	 
2025-07-27 20:19:15.262642 test begin: paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 13412],"bfloat16"), Tensor([7576, 13412],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
/usr/local/lib/python3.10/dist-packages/paddle/incubate/nn/functional/fused_dropout_add.py:100: UserWarning: Currently, fused_dropout_add maybe has precision problem, so it falls back to dropout + add. 
  warnings.warn(
[Prof] paddle.incubate.nn.functional.fused_dropout_add 	 paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 13412],"bfloat16"), Tensor([7576, 13412],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, ) 	 203218624 	 1000 	 0.45067524909973145 	 0.4498860836029053 	 0.43809986114501953 	 0.41964054107666016 	 0.9624457359313965 	 0.4532792568206787 	 0.8979322910308838 	 0.35665106773376465 	 combined
2025-07-27 20:19:22.532070 test begin: paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 13176],"bfloat16"), Tensor([7712, 13176],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
[Prof] paddle.incubate.nn.functional.fused_dropout_add 	 paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 13176],"bfloat16"), Tensor([7712, 13176],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, ) 	 203226624 	 1000 	 0.4495518207550049 	 0.4499654769897461 	 0.4377176761627197 	 0.4280822277069092 	 0.9623394012451172 	 0.45319080352783203 	 0.8967745304107666 	 0.36939263343811035 	 combined
2025-07-27 20:19:29.716632 test begin: paddle.incubate.nn.functional.fused_dropout_add(Tensor([79381, 1280],"bfloat16"), Tensor([79381, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
[Prof] paddle.incubate.nn.functional.fused_dropout_add 	 paddle.incubate.nn.functional.fused_dropout_add(Tensor([79381, 1280],"bfloat16"), Tensor([79381, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, ) 	 203215360 	 1000 	 0.44937658309936523 	 0.4576413631439209 	 0.4373798370361328 	 0.42621350288391113 	 0.9623732566833496 	 0.4531853199005127 	 0.898439884185791 	 0.3697059154510498 	 combined
2025-07-27 20:19:40.590867 test begin: paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 12440],"bfloat16"), Tensor([8168, 12440],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
[Prof] paddle.incubate.nn.functional.fused_dropout_add 	 paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 12440],"bfloat16"), Tensor([8168, 12440],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, ) 	 203219840 	 1000 	 0.45029139518737793 	 0.44989895820617676 	 0.4316537380218506 	 0.4275388717651367 	 0.9623692035675049 	 0.4531879425048828 	 0.8967211246490479 	 0.36933135986328125 	 combined
2025-07-27 20:19:47.785654 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 14176, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
W0727 20:20:04.896413 24212 backward.cc:462] While running Node (FusedGemmEpilogueGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 14176, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), ) 	 193376768 	 1000 	 10.686279058456421 	 10.72047734260559 	 10.664621829986572 	 10.681353330612183 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:20:41.344798 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 12404],"bfloat16"), Tensor([12404, 8192],"bfloat16"), None, False, None, )
W0727 20:20:49.376011 24230 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 12404],"bfloat16"), Tensor([12404, 8192],"bfloat16"), None, False, None, ) 	 152420352 	 1000 	 5.206927299499512 	 5.304736375808716 	 2.66715145111084 	 2.712116241455078 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:21:07.453604 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 6202],"bfloat16"), None, False, None, )
W0727 20:21:18.579891 24238 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 6202],"bfloat16"), None, False, None, ) 	 168722432 	 1000 	 5.777955770492554 	 5.7769694328308105 	 2.948866844177246 	 2.9518227577209473 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:21:37.984174 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 24807],"bfloat16"), Tensor([24807, 8192],"bfloat16"), None, False, None, )
W0727 20:22:01.791484 24258 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 24807],"bfloat16"), Tensor([24807, 8192],"bfloat16"), None, False, None, ) 	 304828416 	 1000 	 18.76288151741028 	 21.145306825637817 	 9.587358474731445 	 10.803657531738281 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:23:10.871706 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 12404],"bfloat16"), None, transpose_weight=False, )
W0727 20:23:19.204121 24302 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 12404],"bfloat16"), None, transpose_weight=False, ) 	 135168000 	 1000 	 5.560237169265747 	 5.599414110183716 	 5.540867805480957 	 5.5705955028533936 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:23:37.460143 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 6202, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
W0727 20:23:48.445802 24312 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 6202, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, ) 	 235831296 	 1000 	 6.764835357666016 	 6.762057304382324 	 6.745106220245361 	 6.732336521148682 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:24:09.391380 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 12404],"bfloat16"), Tensor([12404, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
W0727 20:24:31.106189 24326 backward.cc:462] While running Node (FusedGemmEpilogueGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 12404],"bfloat16"), Tensor([12404, 12800],"bfloat16"), Tensor([12800],"bfloat16"), ) 	 260397568 	 1000 	 15.979781866073608 	 16.329155206680298 	 15.963173866271973 	 16.28964114189148 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:25:20.017146 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 14176],"bfloat16"), Tensor([14176],"bfloat16"), )
W0727 20:25:31.198417 24379 backward.cc:462] While running Node (FusedGemmEpilogueGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 14176],"bfloat16"), Tensor([14176],"bfloat16"), ) 	 160348000 	 1000 	 6.882214307785034 	 6.922129154205322 	 6.854482412338257 	 6.87579870223999 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:25:53.573758 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([2, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
W0727 20:26:07.247005 24403 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([2, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, ) 	 268435456 	 1000 	 8.666066884994507 	 8.649091482162476 	 8.642514944076538 	 8.607434034347534 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:26:34.322087 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([2, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
W0727 20:26:55.306293 24466 backward.cc:462] While running Node (FusedGemmEpilogueGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([2, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), ) 	 209203712 	 1000 	 12.126447677612305 	 12.123689889907837 	 12.100395202636719 	 12.079955816268921 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:27:33.258657 test begin: paddle.incubate.nn.functional.fused_linear(Tensor([4, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, )
W0727 20:30:02.945947 24512 backward.cc:462] While running Node (MatmulGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.fused_linear 	 paddle.incubate.nn.functional.fused_linear(Tensor([4, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, ) 	 956301312 	 1000 	 109.00206303596497 	 110.07747673988342 	 108.93724155426025 	 109.99616813659668 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:35:48.777114 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, ) 	 50805250 	 1000 	 0.4714677333831787 	 0.4714627265930176 	 0.455735445022583 	 0.4442758560180664 	 0.9017860889434814 	 0.8991959095001221 	 0.30691981315612793 	 0.30612683296203613 	 
2025-07-27 20:35:53.133779 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, ) 	 50805250 	 1000 	 0.4669630527496338 	 0.46610069274902344 	 0.4518415927886963 	 0.44878530502319336 	 0.9080178737640381 	 0.9071786403656006 	 0.30938267707824707 	 0.3083662986755371 	 
2025-07-27 20:35:57.541998 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1270081, 30],"float32"), Tensor([40, 1270081],"float32"), None, True, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1270081, 30],"float32"), Tensor([40, 1270081],"float32"), None, True, True, ) 	 88905670 	 1000 	 0.39687681198120117 	 0.3946108818054199 	 0.20276808738708496 	 0.20160794258117676 	 0.6902115345001221 	 0.6874608993530273 	 0.17635512351989746 	 0.17548203468322754 	 
2025-07-27 20:36:01.145811 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1693441, 30],"float32"), Tensor([40, 1693441],"float32"), None, True, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1693441, 30],"float32"), Tensor([40, 1693441],"float32"), None, True, True, ) 	 118540870 	 1000 	 0.5209767818450928 	 0.5184566974639893 	 0.2662086486816406 	 0.2649416923522949 	 0.9176697731018066 	 0.9190902709960938 	 0.23585200309753418 	 0.23804974555969238 	 
2025-07-27 20:36:05.964334 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([1270081, 40],"float32"), None, False, False, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([1270081, 40],"float32"), None, False, False, ) 	 88905670 	 1000 	 0.41891956329345703 	 0.41390061378479004 	 0.21408677101135254 	 0.2115030288696289 	 0.7243123054504395 	 0.7298662662506104 	 0.18477892875671387 	 0.186445951461792 	 
2025-07-27 20:36:09.870682 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([40, 1270081],"float32"), None, False, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([40, 1270081],"float32"), None, False, True, ) 	 88905670 	 1000 	 0.40529346466064453 	 0.40289759635925293 	 0.20706868171691895 	 0.2059164047241211 	 0.676363468170166 	 0.6816792488098145 	 0.17274808883666992 	 0.17401838302612305 	 
2025-07-27 20:36:13.416009 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([1693441, 40],"float32"), None, False, False, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([1693441, 40],"float32"), None, False, False, ) 	 118540870 	 1000 	 0.5414652824401855 	 0.5366935729980469 	 0.27649950981140137 	 0.2739720344543457 	 0.954789400100708 	 0.9542520046234131 	 0.24393320083618164 	 0.24470877647399902 	 
2025-07-27 20:36:18.251089 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([40, 1693441],"float32"), None, False, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([40, 1693441],"float32"), None, False, True, ) 	 118540870 	 1000 	 0.5312721729278564 	 0.5287055969238281 	 0.27111005783081055 	 0.26994943618774414 	 0.9130005836486816 	 0.9073467254638672 	 0.233506441116333 	 0.23416662216186523 	 
2025-07-27 20:36:23.029127 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([1016065, 50],"float32"), None, False, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([1016065, 50],"float32"), None, False, True, ) 	 50804750 	 1000 	 0.30181288719177246 	 0.30180978775024414 	 0.28485870361328125 	 0.2729663848876953 	 0.6271140575408936 	 0.6302030086517334 	 0.21326541900634766 	 0.21445560455322266 	 
2025-07-27 20:36:26.203483 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 1016065],"float32"), None, False, False, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 1016065],"float32"), None, False, False, ) 	 50804750 	 1000 	 0.29794955253601074 	 0.2930934429168701 	 0.28351759910583496 	 0.2620995044708252 	 0.6467270851135254 	 0.6496539115905762 	 0.2196810245513916 	 0.22118258476257324 	 
2025-07-27 20:36:29.407588 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 1016065],"float32"), Tensor([40, 50],"float32"), None, True, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 1016065],"float32"), Tensor([40, 50],"float32"), None, True, True, ) 	 50805250 	 1000 	 0.46016502380371094 	 0.45995545387268066 	 0.4442915916442871 	 0.4126307964324951 	 0.8866398334503174 	 0.8830902576446533 	 0.30185866355895996 	 0.3002758026123047 	 
2025-07-27 20:36:33.597931 test begin: paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([1016065, 50],"float32"), None, True, True, )
[Prof] paddle.incubate.nn.functional.fused_matmul_bias 	 paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([1016065, 50],"float32"), None, True, True, ) 	 50804750 	 1000 	 0.30434679985046387 	 0.819739580154419 	 0.28852224349975586 	 0.25928568840026855 	 0.6514120101928711 	 0.6539955139160156 	 0.22144675254821777 	 0.22252917289733887 	 
2025-07-27 20:36:39.492875 test begin: paddle.incubate.nn.functional.swiglu(Tensor([14176, 7168],"bfloat16"), )
W0727 20:36:41.977624 25013 backward.cc:462] While running Node (SwigluGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (float32) does not match the type of data (bfloat16) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():16 != phi::CppTypeToDataType<T>::Type():10.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.incubate.nn.functional.swiglu 	 paddle.incubate.nn.functional.swiglu(Tensor([14176, 7168],"bfloat16"), ) 	 101613568 	 1000 	 0.22961950302124023 	 0.522998571395874 	 0.21993470191955566 	 0.2671520709991455 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:36:45.057824 test begin: paddle.incubate.segment_max(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_max" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_max" instead.
    Reason: paddle.incubate.segment_max will be removed in future [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_max" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_max" instead.
    Reason: paddle.incubate.segment_max will be removed in future [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
[Prof] paddle.incubate.segment_max 	 paddle.incubate.segment_max(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), ) 	 50803206 	 1000 	 1.277021884918213 	 1.064284086227417 	 0.0010018348693847656 	 0.00022673606872558594 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:36:50.383475 test begin: paddle.incubate.segment_mean(Tensor([3, 1693440],"float32"), Tensor([3],"int32"), )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_mean" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_mean" instead.
    Reason: paddle.incubate.segment_mean will be removed in future [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_mean" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_mean" instead.
    Reason: paddle.incubate.segment_mean will be removed in future [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
[Prof] paddle.incubate.segment_mean 	 paddle.incubate.segment_mean(Tensor([3, 1693440],"float32"), Tensor([3],"int32"), ) 	 5080323 	 1000 	 0.06209373474121094 	 0.26101255416870117 	 3.0279159545898438e-05 	 4.887580871582031e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:36:57.335827 test begin: paddle.incubate.segment_min(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_min" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_min" instead.
    Reason: paddle.incubate.segment_min will be removed in future [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_min" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_min" instead.
    Reason: paddle.incubate.segment_min will be removed in future [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
[Prof] paddle.incubate.segment_min 	 paddle.incubate.segment_min(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), ) 	 50803206 	 1000 	 1.1058118343353271 	 1.1982719898223877 	 0.0010838508605957031 	 0.0003352165222167969 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:37:02.076681 test begin: paddle.incubate.segment_sum(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_sum" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_sum" instead.
    Reason: paddle.incubate.segment_sum will be removed in future [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.incubate.tensor.math.segment_sum" is deprecated since 2.4.0, and will be removed in future versions. Please use "paddle.geometric.segment_sum" instead.
    Reason: paddle.incubate.segment_sum will be removed in future [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
[Prof] paddle.incubate.segment_sum 	 paddle.incubate.segment_sum(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), ) 	 50803206 	 1000 	 0.5265419483184814 	 0.5090675354003906 	 0.0005030632019042969 	 0.2601048946380615 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:37:04.823384 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1013, 1, 224, 224],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1013, 1, 224, 224],"float32"), ) 	 50828288 	 1000 	 0.2635006904602051 	 0.6090614795684814 	 0.2547128200531006 	 0.15582942962646484 	 0.3274383544921875 	 0.8938512802124023 	 0.27677202224731445 	 0.45667505264282227 	 combined
2025-07-27 20:37:08.549347 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([145, 7, 224, 224],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([145, 7, 224, 224],"float32"), ) 	 50928640 	 1000 	 0.26121044158935547 	 0.6101808547973633 	 0.2519843578338623 	 0.15614914894104004 	 0.33123159408569336 	 0.8953433036804199 	 0.2809178829193115 	 0.45740771293640137 	 combined
2025-07-27 20:37:12.279135 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 338, 224, 224],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 338, 224, 224],"float32"), ) 	 50878464 	 1000 	 0.26170873641967773 	 0.6114630699157715 	 0.2515075206756592 	 0.15601301193237305 	 0.33040642738342285 	 0.8944990634918213 	 0.26816344261169434 	 0.4570338726043701 	 combined
2025-07-27 20:37:16.114337 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4511, 11, 32, 32],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4511, 11, 32, 32],"float32"), ) 	 50811904 	 1000 	 0.7481575012207031 	 0.6779086589813232 	 0.7381885051727295 	 0.1729428768157959 	 0.44997429847717285 	 0.8940844535827637 	 0.3993349075317383 	 0.4568326473236084 	 combined
2025-07-27 20:37:20.503851 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 203, 224, 224],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 203, 224, 224],"float32"), ) 	 50928640 	 1000 	 0.26054883003234863 	 0.6101868152618408 	 0.25188422203063965 	 0.15610718727111816 	 0.33123183250427246 	 0.8954441547393799 	 0.28035497665405273 	 0.457505464553833 	 combined
2025-07-27 20:37:24.268402 test begin: paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 7088, 32, 32],"float32"), )
[Prof] paddle.incubate.softmax_mask_fuse_upper_triangle 	 paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 7088, 32, 32],"float32"), ) 	 50806784 	 1000 	 0.7473976612091064 	 0.6761925220489502 	 0.7386887073516846 	 0.17275190353393555 	 0.4499373435974121 	 0.8938789367675781 	 0.39963579177856445 	 0.4566833972930908 	 combined
2025-07-27 20:37:28.653886 test begin: paddle.index_add(Tensor([100, 100, 25402],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 25402],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 100, 25402],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 25402],"float32"), ) 	 304824020 	 1000 	 1.995673418045044 	 3.4280359745025635 	 0.6788821220397949 	 0.00021648406982421875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:37:45.998084 test begin: paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([5081],"int32"), 2, Tensor([100, 100, 5081],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([5081],"int32"), 2, Tensor([100, 100, 5081],"float32"), ) 	 51065081 	 1000 	 1.7549266815185547 	 360.86157631874084 	 0.8967609405517578 	 0.00022363662719726562 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:43:51.507828 test begin: paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5081],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5081],"float32"), ) 	 60972020 	 1000 	 0.4162569046020508 	 1.768575668334961 	 0.14156508445739746 	 6.461143493652344e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:43:55.913437 test begin: paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), ) 	 51010020 	 1000 	 0.3399386405944824 	 2.350573778152466 	 0.11554574966430664 	 0.00012159347534179688 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:00.552958 test begin: paddle.index_add(Tensor([100, 101607, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 101607, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), ) 	 50813520 	 1000 	 0.3111155033111572 	 1.754943609237671 	 0.10571646690368652 	 6.103515625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:04.561718 test begin: paddle.index_add(Tensor([100, 2540161],"float32"), Tensor([20],"int32"), 0, Tensor([20, 2540161],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 2540161],"float32"), Tensor([20],"int32"), 0, Tensor([20, 2540161],"float32"), ) 	 304819340 	 1000 	 1.9977424144744873 	 3.2992169857025146 	 0.6796448230743408 	 6.103515625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:21.226325 test begin: paddle.index_add(Tensor([100, 508033],"float32"), Tensor([20],"int32"), 0, Tensor([20, 508033],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([100, 508033],"float32"), Tensor([20],"int32"), 0, Tensor([20, 508033],"float32"), ) 	 60963980 	 1000 	 0.4061238765716553 	 1.739654779434204 	 0.13815593719482422 	 7.200241088867188e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:25.639238 test begin: paddle.index_add(Tensor([10160641, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
[Prof] paddle.index_add 	 paddle.index_add(Tensor([10160641, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), ) 	 50803325 	 1000 	 0.31824183464050293 	 3.3280913829803467 	 0.10820364952087402 	 0.00020194053649902344 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:32.721972 test begin: paddle.index_fill(Tensor([10, 1016065, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 1016065, 10],"float16"), Tensor([5],"int64"), 1, 0.5, ) 	 101606505 	 1000 	 0.8219537734985352 	 1.3090171813964844 	 0.0006852149963378906 	 0.10780000686645508 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:40.637846 test begin: paddle.index_fill(Tensor([10, 15, 169345],"int64"), Tensor([5],"int32"), 1, -1, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 15, 169345],"int64"), Tensor([5],"int32"), 1, -1, ) 	 25401755 	 1000 	 1.0064570903778076 	 0.36901378631591797 	 0.06380581855773926 	 0.12546157836914062 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:43.828295 test begin: paddle.index_fill(Tensor([10, 15, 338689],"bool"), Tensor([5],"int32"), 1, True, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 15, 338689],"bool"), Tensor([5],"int32"), 1, True, ) 	 50803355 	 1000 	 0.9194326400756836 	 0.1699974536895752 	 0.0007419586181640625 	 0.05787825584411621 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:47.249987 test begin: paddle.index_fill(Tensor([10, 15, 677377],"float16"), Tensor([5],"int64"), 1, 0.5, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 15, 677377],"float16"), Tensor([5],"int64"), 1, 0.5, ) 	 101606555 	 1000 	 2.0480175018310547 	 0.48418402671813965 	 0.00186920166015625 	 0.164686918258667 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:44:55.650463 test begin: paddle.index_fill(Tensor([10, 254017, 10],"int64"), Tensor([5],"int32"), 1, -1, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 254017, 10],"int64"), Tensor([5],"int32"), 1, -1, ) 	 25401705 	 1000 	 0.6609394550323486 	 0.317122220993042 	 0.0448760986328125 	 0.10774469375610352 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:58.128169 test begin: paddle.index_fill(Tensor([10, 508033, 10],"bool"), Tensor([5],"int32"), 1, True, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([10, 508033, 10],"bool"), Tensor([5],"int32"), 1, True, ) 	 50803305 	 1000 	 0.3335990905761719 	 0.08790016174316406 	 0.00020503997802734375 	 0.029890060424804688 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:45:00.235503 test begin: paddle.index_fill(Tensor([169345, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([169345, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, ) 	 25401755 	 1000 	 1.0967278480529785 	 0.4685404300689697 	 0.06975984573364258 	 0.15938782691955566 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:45:03.724096 test begin: paddle.index_fill(Tensor([338689, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([338689, 15, 10],"bool"), Tensor([5],"int32"), 1, True, ) 	 50803355 	 1000 	 1.0856437683105469 	 0.1651768684387207 	 0.0009429454803466797 	 0.05624270439147949 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:45:07.413108 test begin: paddle.index_fill(Tensor([677377, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
[Prof] paddle.index_fill 	 paddle.index_fill(Tensor([677377, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, ) 	 101606555 	 1000 	 2.4635541439056396 	 0.5033957958221436 	 0.0022745132446289062 	 0.17070245742797852 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:16.775925 test begin: paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, ) 	 25628144 	 1000 	 0.3639037609100342 	 0.4573171138763428 	 0.021823883056640625 	 0.012366533279418945 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:19.088573 test begin: paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, ) 	 25628144 	 1000 	 0.35671496391296387 	 0.329087495803833 	 0.026015758514404297 	 0.08390164375305176 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:21.185125 test begin: paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, ) 	 25628144 	 1000 	 0.3564884662628174 	 0.4447493553161621 	 0.026018857955932617 	 0.013252496719360352 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:23.385590 test begin: paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, ) 	 25541904 	 1000 	 0.3566877841949463 	 0.4577023983001709 	 0.021399259567260742 	 0.012362957000732422 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:25.605526 test begin: paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, ) 	 25541904 	 1000 	 0.3486909866333008 	 0.3282182216644287 	 0.025450944900512695 	 0.08367705345153809 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:27.709295 test begin: paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, ) 	 25541904 	 1000 	 0.3486776351928711 	 0.443828821182251 	 0.02544379234313965 	 0.013222217559814453 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:29.891827 test begin: paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, ) 	 25435280 	 1000 	 0.35465168952941895 	 0.4543731212615967 	 0.021281719207763672 	 0.012301206588745117 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:32.178380 test begin: paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
[Prof] paddle.index_put 	 paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, ) 	 25435280 	 1000 	 0.3473498821258545 	 1.1827235221862793 	 0.025346040725708008 	 0.013127803802490234 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:37.207624 test begin: paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 14],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 14],"int64"), ) 	 212685696 	 1000 	 0.7518844604492188 	 1.1558353900909424 	 0.7397811412811279 	 0.38834452629089355 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:46.658271 test begin: paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 14],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 14],"int64"), ) 	 78357888 	 1000 	 0.5247020721435547 	 0.8055367469787598 	 0.5157179832458496 	 0.274630069732666 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:50.167108 test begin: paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 1],"int64"), ) 	 54104256 	 1000 	 0.41568565368652344 	 0.15351009368896484 	 0.4065728187561035 	 0.07839369773864746 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:52.063556 test begin: paddle.index_sample(Tensor([25401601, 100],"float32"), Tensor([25401601, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([25401601, 100],"float32"), Tensor([25401601, 1],"int64"), ) 	 2565561701 	 1000 	 5.046979904174805 	 2.0946414470672607 	 4.523244619369507 	 1.0702028274536133 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:00.930536 test begin: paddle.index_sample(Tensor([25401601, 20],"float32"), Tensor([25401601, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([25401601, 20],"float32"), Tensor([25401601, 1],"int64"), ) 	 533433621 	 1000 	 4.336665630340576 	 1.7975127696990967 	 4.327526569366455 	 0.9177534580230713 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:22.986811 test begin: paddle.index_sample(Tensor([2540161, 20],"float32"), Tensor([2540161, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([2540161, 20],"float32"), Tensor([2540161, 1],"int64"), ) 	 53343381 	 1000 	 0.5393223762512207 	 0.1978158950805664 	 0.5305449962615967 	 0.10107016563415527 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:25.227198 test begin: paddle.index_sample(Tensor([508033, 100],"float32"), Tensor([508033, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([508033, 100],"float32"), Tensor([508033, 1],"int64"), ) 	 51311333 	 1000 	 0.11943888664245605 	 0.05505657196044922 	 0.11061716079711914 	 0.0056879520416259766 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:26.485890 test begin: paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 1],"int64"), ) 	 56488256 	 1000 	 0.9594712257385254 	 0.3165874481201172 	 0.9507687091827393 	 0.16179227828979492 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:29.872317 test begin: paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 5],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 5],"int64"), ) 	 77029440 	 1000 	 1.070744514465332 	 0.8622579574584961 	 1.0617594718933105 	 0.29398107528686523 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:34.436661 test begin: paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 5],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 5],"int64"), ) 	 128382400 	 1000 	 1.1663250923156738 	 0.9950981140136719 	 1.156761646270752 	 0.337662935256958 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:41.682208 test begin: paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 28],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 28],"int64"), ) 	 119402496 	 1000 	 0.5063948631286621 	 0.8782644271850586 	 0.49474167823791504 	 0.29946398735046387 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:46.363867 test begin: paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 1],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 1],"int64"), ) 	 52238592 	 1000 	 0.21303653717041016 	 0.08618903160095215 	 0.20397400856018066 	 0.04005742073059082 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:47.946779 test begin: paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 28],"int64"), )
[Prof] paddle.index_sample 	 paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 28],"int64"), ) 	 77425056 	 1000 	 0.38943910598754883 	 0.7785787582397461 	 0.38078927993774414 	 0.26545047760009766 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:51.410727 test begin: paddle.index_select(Tensor([16, 11109, 286],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([16, 11109, 286],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50834864 	 1000 	 0.20249152183532715 	 0.22281980514526367 	 0.1854410171508789 	 0.19554424285888672 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:54.237769 test begin: paddle.index_select(Tensor([16, 12096, 263],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([16, 12096, 263],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50900048 	 1000 	 0.21173787117004395 	 0.2267928123474121 	 0.19491362571716309 	 0.2066357135772705 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:47:57.265438 test begin: paddle.index_select(Tensor([16, 39201, 81],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([16, 39201, 81],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50804576 	 1000 	 0.6333861351013184 	 0.5619471073150635 	 0.6167619228363037 	 0.5415949821472168 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:00.971404 test begin: paddle.index_select(Tensor([205, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([205, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50811380 	 1000 	 0.63258957862854 	 0.5596599578857422 	 0.6230983734130859 	 0.5439629554748535 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:04.539384 test begin: paddle.index_select(Tensor([52, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([52, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50948432 	 1000 	 0.634634256362915 	 0.5628316402435303 	 0.6251749992370605 	 0.5495889186859131 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:08.131265 test begin: paddle.index_select(Tensor([57, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([57, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, ) 	 51290333 	 1000 	 0.6379365921020508 	 0.5670375823974609 	 0.6285574436187744 	 0.5536315441131592 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:11.719667 test begin: paddle.index_select(Tensor([64, 3060, 260],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([64, 3060, 260],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50918480 	 1000 	 0.21216416358947754 	 0.22297024726867676 	 0.20264744758605957 	 0.20992398262023926 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:13.743426 test begin: paddle.index_select(Tensor([64, 9801, 81],"float32"), Tensor([80],"int64"), axis=-1, )
[Prof] paddle.index_select 	 paddle.index_select(Tensor([64, 9801, 81],"float32"), Tensor([80],"int64"), axis=-1, ) 	 50808464 	 1000 	 0.6323182582855225 	 0.5576169490814209 	 0.6155045032501221 	 0.5341830253601074 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:48:17.500528 test begin: paddle.inner(Tensor([20, 1270081],"float64"), Tensor([1270081],"float64"), )
[Prof] paddle.inner 	 paddle.inner(Tensor([20, 1270081],"float64"), Tensor([1270081],"float64"), ) 	 26671701 	 1000 	 0.16371369361877441 	 0.16507506370544434 	 0.0835716724395752 	 0.08424067497253418 	 0.3568885326385498 	 0.3638174533843994 	 0.12149977684020996 	 0.1237649917602539 	 
2025-07-27 20:48:19.152140 test begin: paddle.inner(Tensor([20, 25401601],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.inner 	 paddle.inner(Tensor([20, 25401601],"float64"), Tensor([25401601],"float64"), ) 	 533433621 	 1000 	 3.047394037246704 	 3.0550365447998047 	 1.556610345840454 	 1.560384750366211 	 6.865220785140991 	 6.872862339019775 	 0.27187252044677734 	 0.2690129280090332 	 
2025-07-27 20:48:51.307898 test begin: paddle.inner(Tensor([508033, 50],"float64"), Tensor([50],"float64"), )
[Prof] paddle.inner 	 paddle.inner(Tensor([508033, 50],"float64"), Tensor([50],"float64"), ) 	 25401700 	 1000 	 0.1559915542602539 	 0.15533447265625 	 0.09842991828918457 	 0.12795400619506836 	 0.37839436531066895 	 0.37126684188842773 	 0.12878036499023438 	 0.12626981735229492 	 
2025-07-27 20:48:52.913053 test begin: paddle.is_complex(Tensor([100352, 507],"float32"), )
[Prof] paddle.is_complex 	 paddle.is_complex(Tensor([100352, 507],"float32"), ) 	 50878464 	 1000 	 0.00463104248046875 	 0.0017423629760742188 	 1.8358230590820312e-05 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:53.822363 test begin: paddle.is_complex(Tensor([507, 100352],"float32"), )
[Prof] paddle.is_complex 	 paddle.is_complex(Tensor([507, 100352],"float32"), ) 	 50878464 	 1000 	 0.0037326812744140625 	 0.0017578601837158203 	 7.152557373046875e-06 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:54.673799 test begin: paddle.is_complex(Tensor([6202, 8192],"float32"), )
[Prof] paddle.is_complex 	 paddle.is_complex(Tensor([6202, 8192],"float32"), ) 	 50806784 	 1000 	 0.003713369369506836 	 0.0017447471618652344 	 6.198883056640625e-06 	 1.5497207641601562e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:55.521476 test begin: paddle.is_complex(Tensor([8192, 6202],"float32"), )
[Prof] paddle.is_complex 	 paddle.is_complex(Tensor([8192, 6202],"float32"), ) 	 50806784 	 1000 	 0.0037567615509033203 	 0.001722574234008789 	 5.9604644775390625e-06 	 1.52587890625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:56.363341 test begin: paddle.is_complex(Tensor([886, 57344],"float32"), )
[Prof] paddle.is_complex 	 paddle.is_complex(Tensor([886, 57344],"float32"), ) 	 50806784 	 1000 	 0.0037162303924560547 	 0.0017170906066894531 	 5.9604644775390625e-06 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:48:57.184853 test begin: paddle.is_empty(Tensor([10160641, 5],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(Tensor([10160641, 5],"float32"), ) 	 50803205 	 1000 	 0.0035104751586914062 	 0.0014753341674804688 	 7.152557373046875e-06 	 1.5735626220703125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:48:58.014324 test begin: paddle.is_empty(Tensor([16934401, 3],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(Tensor([16934401, 3],"float32"), ) 	 50803203 	 1000 	 0.0035254955291748047 	 0.0014765262603759766 	 7.152557373046875e-06 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:48:58.831406 test begin: paddle.is_empty(Tensor([2, 25401601],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(Tensor([2, 25401601],"float32"), ) 	 50803202 	 1000 	 0.0035109519958496094 	 0.0014846324920654297 	 6.9141387939453125e-06 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:48:59.660468 test begin: paddle.is_empty(Tensor([3, 16934401],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(Tensor([3, 16934401],"float32"), ) 	 50803203 	 1000 	 0.0035250186920166016 	 0.00147247314453125 	 1.9788742065429688e-05 	 1.4066696166992188e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:49:00.480774 test begin: paddle.is_empty(x=Tensor([4, 32, 396901],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(x=Tensor([4, 32, 396901],"float32"), ) 	 50803328 	 1000 	 0.0037605762481689453 	 0.001458883285522461 	 6.4373016357421875e-06 	 1.5020370483398438e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:49:01.321818 test begin: paddle.is_empty(x=Tensor([4, 396901, 32],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(x=Tensor([4, 396901, 32],"float32"), ) 	 50803328 	 1000 	 0.0037071704864501953 	 0.0014603137969970703 	 6.4373016357421875e-06 	 1.4543533325195312e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:49:02.138272 test begin: paddle.is_empty(x=Tensor([49613, 32, 32],"float32"), )
[Prof] paddle.is_empty 	 paddle.is_empty(x=Tensor([49613, 32, 32],"float32"), ) 	 50803712 	 1000 	 0.0036749839782714844 	 0.0014934539794921875 	 6.4373016357421875e-06 	 1.4781951904296875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:49:02.954196 test begin: paddle.isclose(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), rtol=1e-05, atol=1e-08, )
[Prof] paddle.isclose 	 paddle.isclose(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), rtol=1e-05, atol=1e-08, ) 	 50803220 	 1000 	 0.36294078826904297 	 3.081164836883545 	 0.34992408752441406 	 0.2417154312133789 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:07.484002 test begin: paddle.isclose(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), rtol=1e-05, atol=1e-08, )
[Prof] paddle.isclose 	 paddle.isclose(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), rtol=1e-05, atol=1e-08, ) 	 50803220 	 1000 	 0.36298251152038574 	 3.08128023147583 	 0.3420219421386719 	 0.24174904823303223 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:11.999388 test begin: paddle.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), )
[Prof] paddle.isclose 	 paddle.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), ) 	 50803240 	 1000 	 0.36281347274780273 	 3.0796453952789307 	 0.3497741222381592 	 0.24164605140686035 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:16.547618 test begin: paddle.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
[Prof] paddle.isclose 	 paddle.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), ) 	 50803202 	 1000 	 0.3643314838409424 	 3.079777240753174 	 0.35137295722961426 	 0.24169921875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:21.058576 test begin: paddle.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), )
[Prof] paddle.isclose 	 paddle.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), ) 	 50803230 	 1000 	 0.36440587043762207 	 3.0798323154449463 	 0.35135650634765625 	 0.24164319038391113 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:25.559203 test begin: paddle.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), )
[Prof] paddle.isclose 	 paddle.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), ) 	 50803224 	 1000 	 0.36403536796569824 	 3.0797765254974365 	 0.35102009773254395 	 0.24164962768554688 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:30.055398 test begin: paddle.isfinite(Tensor([1738, 94, 311],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([1738, 94, 311],"float32"), ) 	 50808692 	 1000 	 0.23315024375915527 	 0.7878932952880859 	 0.22545647621154785 	 0.20121431350708008 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:31.930097 test begin: paddle.isfinite(Tensor([28462, 17, 5, 6, 7],"float16"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([28462, 17, 5, 6, 7],"float16"), ) 	 101609340 	 1000 	 0.3948822021484375 	 0.974280595779419 	 0.3873631954193115 	 0.2482006549835205 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:35.190495 test begin: paddle.isfinite(Tensor([4, 280, 376, 25, 5],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 280, 376, 25, 5],"float32"), ) 	 52640000 	 1000 	 0.24221277236938477 	 0.8139584064483643 	 0.23448443412780762 	 0.20784759521484375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:41.288620 test begin: paddle.isfinite(Tensor([4, 280, 376, 41, 3],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 280, 376, 41, 3],"float32"), ) 	 51797760 	 1000 	 0.23870038986206055 	 0.8023324012756348 	 0.23102521896362305 	 0.20491456985473633 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:43.162881 test begin: paddle.isfinite(Tensor([4, 280, 605, 25, 3],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 280, 605, 25, 3],"float32"), ) 	 50820000 	 1000 	 0.23380756378173828 	 0.7881836891174316 	 0.226090669631958 	 0.20128345489501953 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:45.012971 test begin: paddle.isfinite(Tensor([4, 40839, 311],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 40839, 311],"float32"), ) 	 50803716 	 1000 	 0.23350834846496582 	 0.7867019176483154 	 0.22582435607910156 	 0.20075631141662598 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:46.847095 test begin: paddle.isfinite(Tensor([4, 451, 376, 25, 3],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 451, 376, 25, 3],"float32"), ) 	 50872800 	 1000 	 0.23432660102844238 	 0.7877881526947021 	 0.22664761543273926 	 0.20118498802185059 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:48.702532 test begin: paddle.isfinite(Tensor([4, 94, 135115],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([4, 94, 135115],"float32"), ) 	 50803240 	 1000 	 0.23397350311279297 	 0.7882111072540283 	 0.2262744903564453 	 0.20218539237976074 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:50.547953 test begin: paddle.isfinite(Tensor([7, 280, 376, 25, 3],"float32"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([7, 280, 376, 25, 3],"float32"), ) 	 55272000 	 1000 	 0.25458812713623047 	 0.8537635803222656 	 0.24688148498535156 	 0.2180948257446289 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:52.547868 test begin: paddle.isfinite(Tensor([8, 17, 17789, 6, 7],"float16"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([8, 17, 17789, 6, 7],"float16"), ) 	 101610768 	 1000 	 0.395951509475708 	 0.9727358818054199 	 0.38833093643188477 	 0.2477707862854004 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:55.786053 test begin: paddle.isfinite(Tensor([8, 17, 5, 21346, 7],"float16"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([8, 17, 5, 21346, 7],"float16"), ) 	 101606960 	 1000 	 0.3948702812194824 	 0.9723606109619141 	 0.38724708557128906 	 0.24908208847045898 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:59.038091 test begin: paddle.isfinite(Tensor([8, 17, 5, 6, 24904],"float16"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([8, 17, 5, 6, 24904],"float16"), ) 	 101608320 	 1000 	 0.39474916458129883 	 0.9714746475219727 	 0.38713645935058594 	 0.24816656112670898 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:02.284059 test begin: paddle.isfinite(Tensor([8, 60481, 5, 6, 7],"float16"), )
[Prof] paddle.isfinite 	 paddle.isfinite(Tensor([8, 60481, 5, 6, 7],"float16"), ) 	 101608080 	 1000 	 0.39043688774108887 	 0.9878225326538086 	 0.3827061653137207 	 0.24809741973876953 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:09.718087 test begin: paddle.isin(Tensor([396901, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([396901, 64],"float64"), Tensor([4, 256],"float64"), False, False, ) 	 25402688 	 1000 	 2.77616024017334 	 21.28222918510437 	 0.0024662017822265625 	 0.0008661746978759766 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:34.433830 test begin: paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, False, ) 	 50804288 	 1000 	 4.514779329299927 	 25.2487895488739 	 0.004187345504760742 	 0.0020372867584228516 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:07.818754 test begin: paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, True, ) 	 50804288 	 1000 	 4.589358568191528 	 25.270030736923218 	 0.004270315170288086 	 0.0020411014556884766 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:40.755152 test begin: paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, False, ) 	 254016320 	 1000 	 91.023996591568 	 45.198017597198486 	 0.05257439613342285 	 0.002607107162475586 	 None 	 None 	 None 	 None 	 
2025-07-27 20:54:01.938960 test begin: paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, True, ) 	 254016320 	 1000 	 104.92412114143372 	 45.196675300598145 	 0.05250215530395508 	 0.0025873184204101562 	 None 	 None 	 None 	 None 	 
2025-07-27 20:56:37.985082 test begin: paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 256],"float64"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 256],"float64"), False, False, ) 	 25402632 	 1000 	 2.762037992477417 	 21.28984761238098 	 0.0024459362030029297 	 0.0008692741394042969 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:02.589487 test begin: paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 3175201],"float64"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 3175201],"float64"), False, False, ) 	 38102412 	 1000 	 24.39300274848938 	 27.177694082260132 	 0.01743769645690918 	 0.0009789466857910156 	 None 	 None 	 None 	 None 	 
2025-07-27 20:57:56.468825 test begin: paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, False, ) 	 50804232 	 1000 	 4.509870529174805 	 25.276163339614868 	 0.004247903823852539 	 0.002016305923461914 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:27.145460 test begin: paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, True, ) 	 50804232 	 1000 	 4.594027519226074 	 25.258567333221436 	 0.0043354034423828125 	 0.002029895782470703 	 None 	 None 	 None 	 None 	 
2025-07-27 20:58:57.905288 test begin: paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, False, ) 	 76204812 	 1000 	 53.32519268989563 	 29.96615505218506 	 0.035662174224853516 	 0.002211332321166992 	 None 	 None 	 None 	 None 	 
2025-07-27 21:00:22.567959 test begin: paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, True, ) 	 76204812 	 1000 	 58.085264921188354 	 29.958478927612305 	 0.035701751708984375 	 0.0021953582763671875 	 None 	 None 	 None 	 None 	 
2025-07-27 21:01:51.982520 test begin: paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, False, ) 	 50803968 	 1000 	 16.682898998260498 	 8.283182859420776 	 5.173683166503906e-05 	 0.0002796649932861328 	 None 	 None 	 None 	 None 	 
2025-07-27 21:02:17.946968 test begin: paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, True, ) 	 50803968 	 1000 	 21.970857858657837 	 8.30077338218689 	 6.031990051269531e-05 	 0.0002837181091308594 	 None 	 None 	 None 	 None 	 
2025-07-27 21:02:50.055890 test begin: paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, False, ) 	 50803716 	 1000 	 16.718214988708496 	 8.291601181030273 	 5.412101745605469e-05 	 0.0002803802490234375 	 None 	 None 	 None 	 None 	 
2025-07-27 21:03:15.990928 test begin: paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, True, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, True, ) 	 50803716 	 1000 	 24.621199131011963 	 8.30307936668396 	 6.651878356933594e-05 	 0.0002772808074951172 	 None 	 None 	 None 	 None 	 
2025-07-27 21:03:49.909794 test begin: paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 6350401],"float64"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 6350401],"float64"), False, False, ) 	 25402116 	 1000 	 10.864385604858398 	 12.003689050674438 	 5.698204040527344e-05 	 0.0003135204315185547 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:13.446883 test begin: paddle.isin(Tensor([8, 64],"float64"), Tensor([99226, 256],"float64"), False, False, )
[Prof] paddle.isin 	 paddle.isin(Tensor([8, 64],"float64"), Tensor([99226, 256],"float64"), False, False, ) 	 25402368 	 1000 	 11.303916931152344 	 12.037784576416016 	 3.4809112548828125e-05 	 0.000278472900390625 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:39.302205 test begin: paddle.isinf(Tensor([14, 226801, 16],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([14, 226801, 16],"float32"), ) 	 50803424 	 1000 	 0.23526740074157715 	 0.4878213405609131 	 0.22709894180297852 	 0.2491610050201416 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:40.834911 test begin: paddle.isinf(Tensor([14, 36655, 99],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([14, 36655, 99],"float32"), ) 	 50803830 	 1000 	 0.2322828769683838 	 0.4853250980377197 	 0.22420549392700195 	 0.2479994297027588 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:42.345354 test begin: paddle.isinf(Tensor([14, 64, 56701],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([14, 64, 56701],"float32"), ) 	 50804096 	 1000 	 0.23317170143127441 	 0.4853808879852295 	 0.2251875400543213 	 0.24800467491149902 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:43.857973 test begin: paddle.isinf(Tensor([14, 7, 518401],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([14, 7, 518401],"float32"), ) 	 50803298 	 1000 	 0.23575520515441895 	 0.4866671562194824 	 0.22772955894470215 	 0.24935340881347656 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:45.432654 test begin: paddle.isinf(Tensor([28462, 17, 5, 6, 7],"float16"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([28462, 17, 5, 6, 7],"float16"), ) 	 101609340 	 1000 	 0.38869309425354004 	 0.5202450752258301 	 0.3805971145629883 	 0.26582813262939453 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:48.254290 test begin: paddle.isinf(Tensor([49613, 64, 16],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([49613, 64, 16],"float32"), ) 	 50803712 	 1000 	 0.23492121696472168 	 0.48664021492004395 	 0.22693395614624023 	 0.24796795845031738 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:49.838616 test begin: paddle.isinf(Tensor([73310, 7, 99],"float32"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([73310, 7, 99],"float32"), ) 	 50803830 	 1000 	 0.2323288917541504 	 0.4853637218475342 	 0.22417044639587402 	 0.24799680709838867 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:51.345738 test begin: paddle.isinf(Tensor([8, 17, 17789, 6, 7],"float16"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([8, 17, 17789, 6, 7],"float16"), ) 	 101610768 	 1000 	 0.3912794589996338 	 0.5208780765533447 	 0.38318538665771484 	 0.26583027839660645 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:54.306255 test begin: paddle.isinf(Tensor([8, 17, 5, 21346, 7],"float16"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([8, 17, 5, 21346, 7],"float16"), ) 	 101606960 	 1000 	 0.3893404006958008 	 0.5229942798614502 	 0.38158249855041504 	 0.26582813262939453 	 None 	 None 	 None 	 None 	 
2025-07-27 21:04:57.147830 test begin: paddle.isinf(Tensor([8, 17, 5, 6, 24904],"float16"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([8, 17, 5, 6, 24904],"float16"), ) 	 101608320 	 1000 	 0.39022231101989746 	 0.5202164649963379 	 0.3760519027709961 	 0.26581549644470215 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:00.195613 test begin: paddle.isinf(Tensor([8, 60481, 5, 6, 7],"float16"), )
[Prof] paddle.isinf 	 paddle.isinf(Tensor([8, 60481, 5, 6, 7],"float16"), ) 	 101608080 	 1000 	 0.384873628616333 	 0.5244772434234619 	 0.37712931632995605 	 0.26700258255004883 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:03.172954 test begin: paddle.isnan(Tensor([10445, 4864],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([10445, 4864],"float32"), ) 	 50804480 	 1000 	 0.23378777503967285 	 0.18585872650146484 	 0.226226806640625 	 0.17556142807006836 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:04.441073 test begin: paddle.isnan(Tensor([16, 64, 320, 320],"float16"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([16, 64, 320, 320],"float16"), ) 	 104857600 	 1000 	 0.4051175117492676 	 0.2320408821105957 	 0.3973374366760254 	 0.22106480598449707 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:07.038622 test begin: paddle.isnan(Tensor([4, 125, 320, 320],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 125, 320, 320],"float32"), ) 	 51200000 	 1000 	 0.23561739921569824 	 0.18850255012512207 	 0.2279376983642578 	 0.17611265182495117 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:08.314534 test begin: paddle.isnan(Tensor([4, 249, 320, 320],"float16"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 249, 320, 320],"float16"), ) 	 101990400 	 1000 	 0.39310598373413086 	 0.22565460205078125 	 0.3853154182434082 	 0.2108752727508545 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:10.841177 test begin: paddle.isnan(Tensor([4, 64, 1241, 320],"float16"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 64, 1241, 320],"float16"), ) 	 101662720 	 1000 	 0.39299464225769043 	 0.22720813751220703 	 0.3787870407104492 	 0.20734262466430664 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:13.452659 test begin: paddle.isnan(Tensor([4, 64, 320, 1241],"float16"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 64, 320, 1241],"float16"), ) 	 101662720 	 1000 	 0.3916177749633789 	 0.22481656074523926 	 0.383777379989624 	 0.20993590354919434 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:16.005417 test begin: paddle.isnan(Tensor([4, 64, 320, 621],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 64, 320, 621],"float32"), ) 	 50872320 	 1000 	 0.23539972305297852 	 0.18619537353515625 	 0.22626852989196777 	 0.1757946014404297 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:17.448575 test begin: paddle.isnan(Tensor([4, 64, 621, 320],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4, 64, 621, 320],"float32"), ) 	 50872320 	 1000 	 0.2339954376220703 	 0.18616747856140137 	 0.2195289134979248 	 0.16892075538635254 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:18.756618 test begin: paddle.isnan(Tensor([4864, 10445],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([4864, 10445],"float32"), ) 	 50804480 	 1000 	 0.23377466201782227 	 0.18587398529052734 	 0.22616267204284668 	 0.17567086219787598 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:20.036135 test begin: paddle.isnan(Tensor([8, 64, 320, 320],"float32"), )
[Prof] paddle.isnan 	 paddle.isnan(Tensor([8, 64, 320, 320],"float32"), ) 	 52428800 	 1000 	 0.2428739070892334 	 0.19281315803527832 	 0.23521828651428223 	 0.1822671890258789 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:21.604196 test begin: paddle.isneginf(Tensor([11, 17, 2716],"int32"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([11, 17, 2716],"int32"), ) 	 507892 	 1000 	 20.491470336914062 	 0.014822006225585938 	 4.744529724121094e-05 	 6.628036499023438e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:05:42.143927 test begin: paddle.isneginf(Tensor([11, 17, 5433],"int16"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([11, 17, 5433],"int16"), ) 	 1015971 	 1000 	 41.07377028465271 	 0.012687921524047852 	 5.5789947509765625e-05 	 5.650520324707031e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:06:23.284977 test begin: paddle.isneginf(Tensor([11, 4618, 10],"int32"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([11, 4618, 10],"int32"), ) 	 507980 	 1000 	 20.537431240081787 	 0.010898113250732422 	 5.936622619628906e-05 	 5.364418029785156e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:06:43.862756 test begin: paddle.isneginf(Tensor([11, 46184],"float32"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([11, 46184],"float32"), ) 	 508024 	 1000 	 20.426435947418213 	 0.010195016860961914 	 5.173683166503906e-05 	 3.504753112792969e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:07:04.330159 test begin: paddle.isneginf(Tensor([11, 9236, 10],"int16"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([11, 9236, 10],"int16"), ) 	 1015960 	 1000 	 40.87602400779724 	 0.011431694030761719 	 6.29425048828125e-05 	 5.4836273193359375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:07:45.270989 test begin: paddle.isneginf(Tensor([2988, 17, 10],"int32"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([2988, 17, 10],"int32"), ) 	 507960 	 1000 	 20.591712713241577 	 0.010753631591796875 	 5.3882598876953125e-05 	 3.361701965332031e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:08:05.901425 test begin: paddle.isneginf(Tensor([29884, 17],"float32"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([29884, 17],"float32"), ) 	 508028 	 1000 	 20.584212064743042 	 0.016425371170043945 	 6.29425048828125e-05 	 3.647804260253906e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:08:26.554629 test begin: paddle.isneginf(Tensor([5976, 17, 10],"int16"), )
[Prof] paddle.isneginf 	 paddle.isneginf(Tensor([5976, 17, 10],"int16"), ) 	 1015920 	 1000 	 40.55608010292053 	 0.011510848999023438 	 5.316734313964844e-05 	 5.364418029785156e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:09:07.174329 test begin: paddle.isposinf(Tensor([11, 17, 2716],"int32"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([11, 17, 2716],"int32"), ) 	 507892 	 1000 	 20.908106565475464 	 0.011322498321533203 	 6.031990051269531e-05 	 3.933906555175781e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:09:28.125879 test begin: paddle.isposinf(Tensor([11, 17, 5433],"int16"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([11, 17, 5433],"int16"), ) 	 1015971 	 1000 	 41.518394470214844 	 0.013155221939086914 	 5.3882598876953125e-05 	 5.555152893066406e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:10:09.723130 test begin: paddle.isposinf(Tensor([11, 4618, 10],"int32"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([11, 4618, 10],"int32"), ) 	 507980 	 1000 	 20.69896125793457 	 0.0108642578125 	 6.914138793945312e-05 	 3.62396240234375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:10:30.464282 test begin: paddle.isposinf(Tensor([11, 46184],"float32"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([11, 46184],"float32"), ) 	 508024 	 1000 	 20.572389364242554 	 0.010113239288330078 	 5.91278076171875e-05 	 2.9325485229492188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:10:51.076721 test begin: paddle.isposinf(Tensor([11, 9236, 10],"int16"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([11, 9236, 10],"int16"), ) 	 1015960 	 1000 	 40.86811447143555 	 0.011434078216552734 	 5.316734313964844e-05 	 4.363059997558594e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:11:32.008142 test begin: paddle.isposinf(Tensor([2988, 17, 10],"int32"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([2988, 17, 10],"int32"), ) 	 507960 	 1000 	 20.530704975128174 	 0.010833263397216797 	 5.4836273193359375e-05 	 2.9087066650390625e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:11:52.577069 test begin: paddle.isposinf(Tensor([29884, 17],"float32"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([29884, 17],"float32"), ) 	 508028 	 1000 	 20.70475721359253 	 0.009996891021728516 	 6.437301635742188e-05 	 3.266334533691406e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:12:13.345348 test begin: paddle.isposinf(Tensor([5976, 17, 10],"int16"), )
[Prof] paddle.isposinf 	 paddle.isposinf(Tensor([5976, 17, 10],"int16"), ) 	 1015920 	 1000 	 40.88044786453247 	 0.027748584747314453 	 5.555152893066406e-05 	 5.269050598144531e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 21:12:54.432507 test begin: paddle.isreal(Tensor([1587601, 32],"bool"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([1587601, 32],"bool"), ) 	 50803232 	 1000 	 0.04230046272277832 	 0.0356745719909668 	 0.02582573890686035 	 0.024794340133666992 	 None 	 None 	 None 	 None 	 
2025-07-27 21:12:55.216286 test begin: paddle.isreal(Tensor([3175201, 32],"bfloat16"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([3175201, 32],"bfloat16"), ) 	 101606432 	 1000 	 0.08060860633850098 	 0.06966733932495117 	 0.06285238265991211 	 0.05324983596801758 	 None 	 None 	 None 	 None 	 
2025-07-27 21:12:57.092366 test begin: paddle.isreal(Tensor([3175201, 32],"float16"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([3175201, 32],"float16"), ) 	 101606432 	 1000 	 0.07990694046020508 	 0.0723733901977539 	 0.0634768009185791 	 0.05747795104980469 	 None 	 None 	 None 	 None 	 
2025-07-27 21:12:59.245325 test begin: paddle.isreal(Tensor([64, 1587601],"bfloat16"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([64, 1587601],"bfloat16"), ) 	 101606464 	 1000 	 0.08016014099121094 	 0.07190179824829102 	 0.06339120864868164 	 0.05736565589904785 	 None 	 None 	 None 	 None 	 
2025-07-27 21:13:01.094370 test begin: paddle.isreal(Tensor([64, 1587601],"float16"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([64, 1587601],"float16"), ) 	 101606464 	 1000 	 0.07961344718933105 	 0.08654999732971191 	 0.0629281997680664 	 0.05725455284118652 	 None 	 None 	 None 	 None 	 
2025-07-27 21:13:03.361806 test begin: paddle.isreal(Tensor([64, 793801],"bool"), )
[Prof] paddle.isreal 	 paddle.isreal(Tensor([64, 793801],"bool"), ) 	 50803264 	 1000 	 0.04204201698303223 	 0.03566884994506836 	 0.025186538696289062 	 0.024837493896484375 	 None 	 None 	 None 	 None 	 
2025-07-27 21:13:04.145441 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([22336, 5, 4, 3, 2],"float32"), )
[Prof] paddle.kron 	 paddle.kron(Tensor([10, 10],"float32"), Tensor([22336, 5, 4, 3, 2],"float32"), ) 	 2680420 	 1000 	 9.789889335632324 	 1.377248764038086 	 0.00010728836059570312 	 1.3500497341156006 	 15.018770933151245 	 5.925312519073486 	 7.581710815429688e-05 	 1.21295166015625 	 
2025-07-27 21:13:42.372513 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 22336, 4, 3, 2],"float32"), )
[Prof] paddle.kron 	 paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 22336, 4, 3, 2],"float32"), ) 	 2680420 	 1000 	 9.787567615509033 	 1.3753645420074463 	 0.00010633468627929688 	 1.3455605506896973 	 15.008893966674805 	 5.918184995651245 	 8.106231689453125e-05 	 1.209423542022705 	 
2025-07-27 21:14:19.443797 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 13868, 3, 2],"float32"), )
[Prof] paddle.kron 	 paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 13868, 3, 2],"float32"), ) 	 2080300 	 1000 	 7.619018077850342 	 1.056713342666626 	 0.00010013580322265625 	 1.0406863689422607 	 11.640388488769531 	 4.7631402015686035 	 7.104873657226562e-05 	 0.9723241329193115 	 
2025-07-27 21:14:48.162832 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 15401, 2],"float32"), )
[Prof] paddle.kron 	 paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 15401, 2],"float32"), ) 	 3080300 	 1000 	 11.153086423873901 	 1.5808374881744385 	 0.00010895729064941406 	 1.550337314605713 	 16.968791484832764 	 6.489822864532471 	 7.343292236328125e-05 	 1.325951337814331 	 
2025-07-27 21:15:30.726284 test begin: paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 8934],"float32"), )
[Prof] paddle.kron 	 paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 8934],"float32"), ) 	 2680300 	 1000 	 9.727126598358154 	 1.3663125038146973 	 0.00010204315185546875 	 1.3496716022491455 	 17.283557176589966 	 5.004922151565552 	 7.605552673339844e-05 	 1.023881196975708 	 
2025-07-27 21:16:09.547232 test begin: paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, ) 	 50808000 	 1000 	 4.006612777709961 	 4.135661602020264 	 1.0212416648864746 	 4.116740465164185 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:16:18.845557 test begin: paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, keepdim=True, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, keepdim=True, ) 	 50808000 	 1000 	 4.007091999053955 	 4.130098104476929 	 1.0213747024536133 	 4.105727910995483 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:16:28.133467 test begin: paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=2, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=2, ) 	 50808000 	 1000 	 3.0839858055114746 	 2.491032361984253 	 3.0739126205444336 	 2.4728474617004395 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:16:34.749157 test begin: paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, ) 	 50804400 	 1000 	 4.495251655578613 	 11.214365243911743 	 1.1471927165985107 	 11.1878821849823 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:16:52.262927 test begin: paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, keepdim=True, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, keepdim=True, ) 	 50804400 	 1000 	 4.481617212295532 	 11.026473760604858 	 1.1411855220794678 	 11.002124071121216 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:17:09.637514 test begin: paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=2, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=2, ) 	 50804400 	 1000 	 5.226776599884033 	 5.138844728469849 	 5.208877086639404 	 5.112298011779785 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:17:21.582372 test begin: paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, ) 	 50808000 	 1000 	 3.980924129486084 	 4.136564254760742 	 1.014958143234253 	 4.117484092712402 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:17:30.798530 test begin: paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, keepdim=True, ) 	 50808000 	 1000 	 3.9766035079956055 	 4.130778789520264 	 1.0133931636810303 	 4.109145402908325 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:17:40.187401 test begin: paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=2, )
[Prof] paddle.kthvalue 	 paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=2, ) 	 50808000 	 1000 	 5.218948602676392 	 5.136013507843018 	 5.208747625350952 	 5.117612361907959 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:17:51.897158 test begin: paddle.lcm(Tensor([1],"int64"), Tensor([25401601],"int64"), )
[Prof] paddle.lcm 	 paddle.lcm(Tensor([1],"int64"), Tensor([25401601],"int64"), ) 	 25401602 	 1000 	 87.84266710281372 	 5.637991189956665 	 0.002231597900390625 	 0.0009160041809082031 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:19:26.415785 test begin: paddle.lcm(Tensor([25401601],"int64"), Tensor([1],"int64"), )
[Prof] paddle.lcm 	 paddle.lcm(Tensor([25401601],"int64"), Tensor([1],"int64"), ) 	 25401602 	 1000 	 92.48925590515137 	 5.7286057472229 	 0.0022656917572021484 	 0.0009069442749023438 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:21:07.493089 test begin: paddle.lcm(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
[Prof] paddle.lcm 	 paddle.lcm(Tensor([25401601],"int64"), Tensor([25401601],"int64"), ) 	 50803202 	 1000 	 106.75793600082397 	 5.886691331863403 	 0.002382993698120117 	 0.0009057521820068359 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:23:03.498240 test begin: paddle.lcm(Tensor([50803201],"int32"), Tensor([1],"int32"), )
[Prof] paddle.lcm 	 paddle.lcm(Tensor([50803201],"int32"), Tensor([1],"int32"), ) 	 50803202 	 1000 	 96.24693775177002 	 8.040893793106079 	 0.002234935760498047 	 0.0013072490692138672 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:24:49.481912 test begin: paddle.ldexp(Tensor([25401601],"float64"), Tensor([25401601],"int32"), )
[Prof] paddle.ldexp 	 paddle.ldexp(Tensor([25401601],"float64"), Tensor([25401601],"int32"), ) 	 50803202 	 1000 	 1.2829914093017578 	 1.085184097290039 	 0.32875561714172363 	 0.36937522888183594 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:26:18.592927 test begin: paddle.ldexp(Tensor([25401601],"int64"), Tensor([25401601],"int32"), )
[Prof] paddle.ldexp 	 paddle.ldexp(Tensor([25401601],"int64"), Tensor([25401601],"int32"), ) 	 50803202 	 1000 	 0.8261754512786865 	 0.6425058841705322 	 0.16895723342895508 	 0.2198948860168457 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:26:53.575715 test begin: paddle.ldexp(Tensor([50803201],"float64"), Tensor([50803201],"int32"), )
[Prof] paddle.ldexp 	 paddle.ldexp(Tensor([50803201],"float64"), Tensor([50803201],"int32"), ) 	 101606402 	 1000 	 2.5508482456207275 	 2.1742300987243652 	 0.6522421836853027 	 0.7342872619628906 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:29:51.968751 test begin: paddle.ldexp(Tensor([50803201],"int32"), Tensor([50803201],"int32"), )
[Prof] paddle.ldexp 	 paddle.ldexp(Tensor([50803201],"int32"), Tensor([50803201],"int32"), ) 	 101606402 	 1000 	 1.473297119140625 	 1.1340646743774414 	 0.3022189140319824 	 0.38561582565307617 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:31:00.435203 test begin: paddle.ldexp(Tensor([50803201],"int64"), Tensor([50803201],"int32"), )
[Prof] paddle.ldexp 	 paddle.ldexp(Tensor([50803201],"int64"), Tensor([50803201],"int32"), ) 	 101606402 	 1000 	 1.6302635669708252 	 1.2744886875152588 	 0.33429646492004395 	 0.4345738887786865 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:32:09.690602 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 604801],"float32"), 0.36, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 604801],"float32"), 0.36, ) 	 50803285 	 1000 	 0.29867005348205566 	 0.30257534980773926 	 0.15256762504577637 	 0.2887253761291504 	 0.6294615268707275 	 0.7486875057220459 	 0.21419811248779297 	 0.19100499153137207 	 
2025-07-27 21:32:13.298589 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 604801, 28],"float32"), 0.36, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 604801, 28],"float32"), 0.36, ) 	 50803285 	 1000 	 0.29988574981689453 	 0.31729888916015625 	 0.15382599830627441 	 0.2902688980102539 	 0.6294069290161133 	 0.748664140701294 	 0.21412158012390137 	 0.19102215766906738 	 
2025-07-27 21:32:16.953715 test begin: paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([64801, 28, 28],"float32"), 0.36, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([64801, 28, 28],"float32"), 0.36, ) 	 50803985 	 1000 	 0.2988595962524414 	 0.303743839263916 	 0.15270113945007324 	 0.29037952423095703 	 0.6345410346984863 	 0.7499215602874756 	 0.2162795066833496 	 0.19108963012695312 	 
2025-07-27 21:32:20.657942 test begin: paddle.lerp(Tensor([1, 1814401, 28],"float32"), Tensor([3, 1814401, 28],"float32"), 1.0, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 1814401, 28],"float32"), Tensor([3, 1814401, 28],"float32"), 1.0, ) 	 203212912 	 1000 	 1.3443539142608643 	 1.3255066871643066 	 0.6861104965209961 	 1.311180830001831 	 2.21268630027771 	 2.359785318374634 	 1.129913330078125 	 0.8032519817352295 	 
2025-07-27 21:32:33.857487 test begin: paddle.lerp(Tensor([1, 28, 1814401],"float32"), Tensor([3, 28, 1814401],"float32"), 1.0, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 28, 1814401],"float32"), Tensor([3, 28, 1814401],"float32"), 1.0, ) 	 203212912 	 1000 	 1.3401072025299072 	 1.3269562721252441 	 0.6848340034484863 	 1.3057599067687988 	 2.2104485034942627 	 2.357992172241211 	 1.1273674964904785 	 0.8019254207611084 	 
2025-07-27 21:32:47.865434 test begin: paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, ) 	 50804768 	 1000 	 0.29816484451293945 	 0.3046450614929199 	 0.1523599624633789 	 0.29123830795288086 	 0.7932226657867432 	 0.7838394641876221 	 0.2704019546508789 	 0.19937396049499512 	 
2025-07-27 21:32:51.710004 test begin: paddle.lerp(Tensor([3, 28, 604801],"float32"), Tensor([3, 28, 604801],"float32"), 1.2, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([3, 28, 604801],"float32"), Tensor([3, 28, 604801],"float32"), 1.2, ) 	 101606568 	 1000 	 0.45383405685424805 	 0.44682741165161133 	 0.23255395889282227 	 0.4346334934234619 	 0.4742107391357422 	 0.5965125560760498 	 0.41524791717529297 	 0.3040914535522461 	 
2025-07-27 21:32:56.290132 test begin: paddle.lerp(Tensor([3, 604801, 28],"float32"), Tensor([3, 604801, 28],"float32"), 1.2, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([3, 604801, 28],"float32"), Tensor([3, 604801, 28],"float32"), 1.2, ) 	 101606568 	 1000 	 0.45243048667907715 	 0.44685983657836914 	 0.23116827011108398 	 0.4344754219055176 	 0.47406554222106934 	 0.5952367782592773 	 0.40862607955932617 	 0.30408573150634766 	 
2025-07-27 21:33:02.199674 test begin: paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, ) 	 101607968 	 1000 	 0.45234155654907227 	 0.4468424320220947 	 0.23113632202148438 	 0.43446803092956543 	 0.4748258590698242 	 0.5966536998748779 	 0.4164705276489258 	 0.3040640354156494 	 
2025-07-27 21:33:06.750160 test begin: paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.2, )
[Prof] paddle.lerp 	 paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.2, ) 	 101607968 	 1000 	 0.45236754417419434 	 0.44997143745422363 	 0.23112225532531738 	 0.4355897903442383 	 0.47330522537231445 	 0.5951640605926514 	 0.41501641273498535 	 0.30404162406921387 	 
2025-07-27 21:33:11.224603 test begin: paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 50803600 	 1000 	 0.19062495231628418 	 0.24361062049865723 	 0.18030643463134766 	 0.2322673797607422 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:12.523565 test begin: paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), ) 	 50803600 	 1000 	 0.18813204765319824 	 0.24413394927978516 	 0.17779254913330078 	 0.2334427833557129 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:13.787557 test begin: paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 101606800 	 1000 	 0.3264317512512207 	 0.327495813369751 	 0.3168175220489502 	 0.3149852752685547 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:16.332218 test begin: paddle.less(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), ) 	 101606420 	 1000 	 0.3264281749725342 	 0.32752156257629395 	 0.31676435470581055 	 0.3169288635253906 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:18.664060 test begin: paddle.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), ) 	 101606420 	 1000 	 0.32642626762390137 	 0.3275151252746582 	 0.3168506622314453 	 0.31746625900268555 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:21.095780 test begin: paddle.less(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), ) 	 101606440 	 1000 	 0.3264448642730713 	 0.3274657726287842 	 0.316817045211792 	 0.31744956970214844 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:23.466644 test begin: paddle.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), ) 	 101607424 	 1000 	 0.32613134384155273 	 0.3287174701690674 	 0.3165438175201416 	 0.3168647289276123 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:25.766504 test begin: paddle.less(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.less 	 paddle.less(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 0.32643938064575195 	 0.32749271392822266 	 0.31679844856262207 	 0.3176243305206299 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:28.146721 test begin: paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 50803600 	 1000 	 0.19061779975891113 	 0.24372148513793945 	 0.18071913719177246 	 0.22943687438964844 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:29.403565 test begin: paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), ) 	 50803600 	 1000 	 0.18816399574279785 	 0.24419212341308594 	 0.16949152946472168 	 0.22617673873901367 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:30.656119 test begin: paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 101606800 	 1000 	 0.32784247398376465 	 0.32872486114501953 	 0.3115966320037842 	 0.31205105781555176 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:33.334149 test begin: paddle.less_equal(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), ) 	 101606420 	 1000 	 0.3264656066894531 	 0.32753610610961914 	 0.31720829010009766 	 0.31125593185424805 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:39.444642 test begin: paddle.less_equal(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), )
W0727 21:33:42.887600 21420 dygraph_functions.cc:90806] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), ) 	 203212812 	 1000 	 1.1280455589294434 	 0.7216782569885254 	 0.5763659477233887 	 0.7086431980133057 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:44.917888 test begin: paddle.less_equal(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), ) 	 101606440 	 1000 	 0.3264758586883545 	 0.3275156021118164 	 0.3173050880432129 	 0.31731438636779785 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:47.220196 test begin: paddle.less_equal(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), ) 	 203212816 	 1000 	 1.1294100284576416 	 0.7208752632141113 	 0.576380729675293 	 0.7011735439300537 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:52.994014 test begin: paddle.less_equal(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), ) 	 101606424 	 1000 	 0.5706067085266113 	 0.3664858341217041 	 0.2909355163574219 	 0.35510921478271484 	 None 	 None 	 None 	 None 	 
2025-07-27 21:33:55.702014 test begin: paddle.less_equal(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), ) 	 203212824 	 1000 	 1.1321501731872559 	 0.719343900680542 	 0.5791773796081543 	 0.7080841064453125 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:01.231318 test begin: paddle.less_equal(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), ) 	 101606416 	 1000 	 0.5705783367156982 	 0.36353611946105957 	 0.29211854934692383 	 0.35225844383239746 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:04.138480 test begin: paddle.less_equal(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), )
[Prof] paddle.less_equal 	 paddle.less_equal(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), ) 	 101606412 	 1000 	 0.5694229602813721 	 1.0314996242523193 	 0.29097986221313477 	 0.3512740135192871 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:07.558820 test begin: paddle.less_than(Tensor([1, 128, 198451],"int64"), Tensor([1, 128, 198451],"int64"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 128, 198451],"int64"), Tensor([1, 128, 198451],"int64"), ) 	 50803456 	 1000 	 0.30988144874572754 	 0.313126802444458 	 0.2931346893310547 	 0.29637670516967773 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:09.889176 test begin: paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), ) 	 50855936 	 1000 	 0.19185519218444824 	 0.24420547485351562 	 0.17420291900634766 	 0.23340916633605957 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:11.277451 test begin: paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), ) 	 25460736 	 1000 	 0.2066028118133545 	 0.18158602714538574 	 0.18890738487243652 	 0.15961503982543945 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:12.060887 test begin: paddle.less_than(Tensor([1, 128, 396901],"float32"), Tensor([1, 128, 396901],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 128, 396901],"float32"), Tensor([1, 128, 396901],"float32"), ) 	 101606656 	 1000 	 0.326671838760376 	 0.32752323150634766 	 0.3169126510620117 	 0.31712913513183594 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:14.291575 test begin: paddle.less_than(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 256],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 256],"float32"), ) 	 101606912 	 1000 	 0.3292114734649658 	 0.3275015354156494 	 0.3193783760070801 	 0.31702351570129395 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:16.648237 test begin: paddle.less_than(Tensor([1, 99226, 256],"int64"), Tensor([1, 99226, 256],"int64"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1, 99226, 256],"int64"), Tensor([1, 99226, 256],"int64"), ) 	 50803712 	 1000 	 0.3099679946899414 	 0.31307554244995117 	 0.3000051975250244 	 0.30249500274658203 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:18.022363 test begin: paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), ) 	 50855936 	 1000 	 0.18967914581298828 	 0.24584436416625977 	 0.1790754795074463 	 0.23474597930908203 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:19.269838 test begin: paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), ) 	 101646336 	 1000 	 0.3262159824371338 	 0.3277277946472168 	 0.31641578674316406 	 0.31733059883117676 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:21.557931 test begin: paddle.less_than(Tensor([3101, 1, 128, 128],"float32"), Tensor([3101, 1, 128, 128],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([3101, 1, 128, 128],"float32"), Tensor([3101, 1, 128, 128],"float32"), ) 	 101613568 	 1000 	 0.3260352611541748 	 0.3288092613220215 	 0.31635451316833496 	 0.31862592697143555 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:23.917590 test begin: paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), ) 	 25460736 	 1000 	 0.1756744384765625 	 0.18285703659057617 	 0.1654529571533203 	 0.17205524444580078 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:24.722865 test begin: paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), ) 	 50855936 	 1000 	 0.3101792335510254 	 0.3134806156158447 	 0.30048513412475586 	 0.3034498691558838 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:26.191241 test begin: paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), ) 	 50987008 	 1000 	 0.1941077709197998 	 0.25894713401794434 	 0.1799612045288086 	 0.24789905548095703 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:27.474293 test begin: paddle.less_than(Tensor([8, 1, 128, 49613],"float32"), Tensor([8, 1, 128, 49613],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([8, 1, 128, 49613],"float32"), Tensor([8, 1, 128, 49613],"float32"), ) 	 101607424 	 1000 	 0.32742738723754883 	 0.32891201972961426 	 0.31772279739379883 	 0.3188629150390625 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:29.897056 test begin: paddle.less_than(Tensor([8, 1, 49613, 128],"float32"), Tensor([8, 1, 49613, 128],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([8, 1, 49613, 128],"float32"), Tensor([8, 1, 49613, 128],"float32"), ) 	 101607424 	 1000 	 0.326127290725708 	 0.3275165557861328 	 0.3095059394836426 	 0.31048083305358887 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:32.263143 test begin: paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), ) 	 50987008 	 1000 	 0.19151806831359863 	 0.26065945625305176 	 0.18092751502990723 	 0.24934053421020508 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:33.563240 test begin: paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
[Prof] paddle.less_than 	 paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), ) 	 101711872 	 1000 	 0.3264274597167969 	 0.327923059463501 	 0.30957555770874023 	 0.31105470657348633 	 None 	 None 	 None 	 None 	 
2025-07-27 21:34:37.100562 test begin: paddle.lgamma(Tensor([10, 10, 10, 25402],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([10, 10, 10, 25402],"float64"), ) 	 25402000 	 1000 	 0.7127242088317871 	 0.6923122406005859 	 0.7037506103515625 	 0.6713485717773438 	 1.3893942832946777 	 1.5889971256256104 	 1.3389832973480225 	 0.8105993270874023 	 
2025-07-27 21:34:42.654048 test begin: paddle.lgamma(Tensor([10, 10, 127009, 2],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([10, 10, 127009, 2],"float64"), ) 	 25401800 	 1000 	 0.7127077579498291 	 0.6955184936523438 	 0.703361988067627 	 0.6810986995697021 	 1.3869285583496094 	 1.5861232280731201 	 1.3362703323364258 	 0.8104233741760254 	 
2025-07-27 21:34:48.059660 test begin: paddle.lgamma(Tensor([10, 127009, 10, 2],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([10, 127009, 10, 2],"float64"), ) 	 25401800 	 1000 	 0.7154018878936768 	 0.6902668476104736 	 0.7063312530517578 	 0.680497407913208 	 1.3855774402618408 	 1.587764024734497 	 1.335155963897705 	 0.8125605583190918 	 
2025-07-27 21:34:53.584201 test begin: paddle.lgamma(Tensor([100, 254017],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([100, 254017],"float64"), ) 	 25401700 	 1000 	 0.7156405448913574 	 0.6896867752075195 	 0.7035117149353027 	 0.6758549213409424 	 1.3825900554656982 	 1.587773323059082 	 1.3325526714324951 	 0.8085644245147705 	 
2025-07-27 21:34:59.142362 test begin: paddle.lgamma(Tensor([127009, 10, 10, 2],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([127009, 10, 10, 2],"float64"), ) 	 25401800 	 1000 	 0.7138538360595703 	 0.702272891998291 	 0.7048983573913574 	 0.6800525188446045 	 1.3828215599060059 	 1.5891056060791016 	 1.3325588703155518 	 0.8126022815704346 	 
2025-07-27 21:35:04.610323 test begin: paddle.lgamma(Tensor([1948, 26080],"float32"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([1948, 26080],"float32"), ) 	 50803840 	 1000 	 0.3983805179595947 	 0.37950944900512695 	 0.3892397880554199 	 0.3666715621948242 	 0.9648904800415039 	 1.5130798816680908 	 0.9145240783691406 	 0.771021842956543 	 
2025-07-27 21:35:09.646321 test begin: paddle.lgamma(Tensor([254017, 100],"float64"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([254017, 100],"float64"), ) 	 25401700 	 1000 	 0.7117807865142822 	 1.868377685546875 	 0.7027590274810791 	 0.6799426078796387 	 1.3818449974060059 	 1.5917446613311768 	 1.3314158916473389 	 0.8126003742218018 	 
2025-07-27 21:35:16.914305 test begin: paddle.lgamma(Tensor([50803201, 1],"float32"), )
[Prof] paddle.lgamma 	 paddle.lgamma(Tensor([50803201, 1],"float32"), ) 	 50803201 	 1000 	 0.39878249168395996 	 0.3832266330718994 	 0.3896303176879883 	 0.37065601348876953 	 0.9623475074768066 	 1.5141181945800781 	 0.9119372367858887 	 0.7708616256713867 	 
2025-07-27 21:35:21.875937 test begin: paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-1, )
[Prof] paddle.linalg.cond 	 paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-1, ) 	 25401664 	 1000 	 91.67100286483765 	 3.490143299102783 	 0.0011937618255615234 	 0.053468942642211914 	 None 	 None 	 None 	 None 	 
[Error] one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.DoubleTensor [4, 396901, 4, 4]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
2025-07-27 21:37:18.244290 test begin: paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-math.inf, )
[Prof] paddle.linalg.cond 	 paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-math.inf, ) 	 25401664 	 1000 	 88.03722095489502 	 3.479832172393799 	 0.0011446475982666016 	 0.05318403244018555 	 None 	 None 	 None 	 None 	 
[Error] one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.DoubleTensor [4, 396901, 4, 4]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
2025-07-27 21:39:11.067676 test begin: paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-1, )
[Prof] paddle.linalg.cond 	 paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-1, ) 	 25401632 	 1000 	 78.52291250228882 	 3.48726749420166 	 0.0012090206146240234 	 0.053465843200683594 	 None 	 None 	 None 	 None 	 
[Error] one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.DoubleTensor [793801, 2, 4, 4]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
2025-07-27 21:40:54.386912 test begin: paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-math.inf, )
[Prof] paddle.linalg.cond 	 paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-math.inf, ) 	 25401632 	 1000 	 77.81448125839233 	 3.4732701778411865 	 0.00115203857421875 	 0.05322718620300293 	 None 	 None 	 None 	 None 	 
[Error] one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.DoubleTensor [793801, 2, 4, 4]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
2025-07-27 21:42:37.299384 test begin: paddle.linalg.corrcoef(Tensor([4, 12700801],"float32"), )
[Prof] paddle.linalg.corrcoef 	 paddle.linalg.corrcoef(Tensor([4, 12700801],"float32"), ) 	 50803204 	 1000 	 2.889225721359253 	 2.332456111907959 	 0.1642012596130371 	 0.0019969940185546875 	 4.535589218139648 	 3.4394896030426025 	 0.10511660575866699 	 0.0635366439819336 	 
2025-07-27 21:42:52.381339 test begin: paddle.linalg.corrcoef(Tensor([4, 6350401],"float64"), )
[Prof] paddle.linalg.corrcoef 	 paddle.linalg.corrcoef(Tensor([4, 6350401],"float64"), ) 	 25401604 	 1000 	 1.9644010066986084 	 1.3003909587860107 	 0.11127543449401855 	 0.0009508132934570312 	 4.959324836730957 	 3.357022762298584 	 0.15346622467041016 	 0.07863783836364746 	 
2025-07-27 21:43:04.536544 test begin: paddle.linalg.corrcoef(Tensor([5, 10160641],"float32"), rowvar=False, )
[Error] 

--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   paddle::pybind::eager_api_matmul(_object*, _object*, _object*)
1   matmul_ad_func(paddle::Tensor const&, paddle::Tensor const&, bool, bool)
2   paddle::experimental::matmul(paddle::Tensor const&, paddle::Tensor const&, bool, bool)
3   void phi::MatmulKernel<float, phi::GPUContext>(phi::GPUContext const&, phi::DenseTensor const&, phi::DenseTensor const&, bool, bool, phi::DenseTensor*)
4   void phi::MatMulFunctionImplWithBlas<phi::GPUContext, float>(phi::GPUContext const&, phi::DenseTensor const&, phi::DenseTensor const&, std::vector<long, std::allocator<long> > const&, std::vector<long, std::allocator<long> > const&, phi::DenseTensor*, bool, bool, bool, phi::funcs::MatmulPlanner*)
5   float* phi::DeviceContext::Alloc<float>(phi::TensorBase*, unsigned long, bool) const
6   phi::DenseTensor::AllocateFrom(phi::Allocator*, phi::DataType, unsigned long, bool)
7   paddle::memory::allocation::Allocator::Allocate(unsigned long)
8   paddle::memory::allocation::StatAllocator::AllocateImpl(unsigned long)
9   paddle::memory::allocation::Allocator::Allocate(unsigned long)
10  paddle::memory::allocation::Allocator::Allocate(unsigned long)
11  std::string phi::enforce::GetCompleteTraceBackString<std::string >(std::string&&, char const*, int)
12  common::enforce::GetCurrentTraceBackString[abi:cxx11](bool)

----------------------
Error Message Summary:
----------------------
ResourceExhaustedError: 

Out of memory error on GPU 0. Cannot allocate 375.579932TB memory on GPU 0, 14.965820GB memory has been allocated and available memory is only 24.428040GB.

Please check whether there is any other process using GPU 0.
1. If yes, please stop them, or start PaddlePaddle on another GPU.
2. If no, please decrease the batch size of your model. 
 (at ../paddle/phi/core/memory/allocation/cuda_allocator.cc:71)

2025-07-27 21:43:15.569553 test begin: paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([50803201],"int32"), )
W0727 21:43:16.264201 64657 backward.cc:462] While running Node (CastGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([50803201],"int32"), ) 	 50803401 	 1000 	 0.687260627746582 	 0.4481477737426758 	 2.1219253540039062e-05 	 7.414817810058594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:16.716134 test begin: paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([25401601],"float64"), )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([25401601],"float64"), ) 	 25401811 	 1000 	 0.9998281002044678 	 0.5445458889007568 	 2.193450927734375e-05 	 7.581710815429688e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:18.868834 test begin: paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([10],"float64"), )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([10],"float64"), ) 	 25401811 	 1000 	 0.7750720977783203 	 0.4248344898223877 	 1.9073486328125e-05 	 8.273124694824219e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:20.541335 test begin: paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([50803201],"int32"), aweights=None, )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([50803201],"int32"), aweights=None, ) 	 50803401 	 1000 	 0.6311736106872559 	 0.3113737106323242 	 1.8835067749023438e-05 	 6.866455078125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:21.849547 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
W0727 21:43:25.027832 65188 backward.cc:462] While running Node (CastGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), ) 	 25401630 	 1000 	 2.1783831119537354 	 1.6887922286987305 	 0.0016734600067138672 	 0.0009264945983886719 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:26.797067 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([1270081],"int32"), )
W0727 21:43:29.878306 65574 backward.cc:462] While running Node (CastGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([1270081],"int32"), ) 	 26671701 	 1000 	 2.1383628845214844 	 1.6928954124450684 	 0.0016617774963378906 	 0.0009098052978515625 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:31.644783 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, ) 	 25401630 	 1000 	 2.2943243980407715 	 1.6841909885406494 	 0.0016775131225585938 	 0.0009148120880126953 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:41.394632 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), ) 	 25401640 	 1000 	 2.4674978256225586 	 1.796499252319336 	 0.0016717910766601562 	 0.000911712646484375 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:51.031280 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int32"), aweights=None, )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int32"), aweights=None, ) 	 26671701 	 1000 	 2.278771162033081 	 1.7318751811981201 	 0.0016124248504638672 	 0.0008928775787353516 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:43:59.944776 test begin: paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int64"), aweights=Tensor([1270081],"float64"), )
[Prof] paddle.linalg.cov 	 paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int64"), aweights=Tensor([1270081],"float64"), ) 	 27941782 	 1000 	 2.444628953933716 	 1.8446342945098877 	 0.001661062240600586 	 0.0009050369262695312 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:44:09.190767 test begin: paddle.linalg.cov(Tensor([20, 25401601],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([25401601],"float64"), )
[Error] CUDA out of memory. Tried to allocate 3.79 GiB. GPU 0 has a total capacity of 39.39 GiB of which 1.72 GiB is free. Process 44963 has 37.67 GiB memory in use. Of the allocated memory 4.59 GiB is allocated by PyTorch, and 359.82 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-07-27 21:46:29.803904 test begin: paddle.linalg.det(Tensor([12737, 3, 5, 5],"float32"), )
W0727 21:46:30.360772 78959 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.linalg.det 	 paddle.linalg.det(Tensor([12737, 3, 5, 5],"float32"), ) 	 955275 	 1000 	 11.731903791427612 	 0.13811993598937988 	 0.00011491775512695312 	 9.059906005859375e-05 	 2.0446369647979736 	 0.24656462669372559 	 6.723403930664062e-05 	 8.082389831542969e-05 	 
2025-07-27 21:46:45.355774 test begin: paddle.linalg.det(Tensor([3, 12737, 5, 5],"float32"), )
[Prof] paddle.linalg.det 	 paddle.linalg.det(Tensor([3, 12737, 5, 5],"float32"), ) 	 955275 	 1000 	 11.71845555305481 	 0.13150763511657715 	 0.00014328956604003906 	 8.106231689453125e-05 	 1.9804208278656006 	 0.22498822212219238 	 5.9604644775390625e-05 	 6.747245788574219e-05 	 
2025-07-27 21:46:59.581041 test begin: paddle.linalg.inv(x=Tensor([5, 31752, 4, 4],"float64"), )
[Prof] paddle.linalg.inv 	 paddle.linalg.inv(x=Tensor([5, 31752, 4, 4],"float64"), ) 	 2540160 	 1000 	 7.253422975540161 	 0.35303831100463867 	 0.00011849403381347656 	 0.0001246929168701172 	 3.873899221420288 	 1.9742705821990967 	 0.9184191226959229 	 0.2881600856781006 	 
2025-07-27 21:47:13.822685 test begin: paddle.linalg.inv(x=Tensor([52920, 3, 4, 4],"float64"), )
[Prof] paddle.linalg.inv 	 paddle.linalg.inv(x=Tensor([52920, 3, 4, 4],"float64"), ) 	 2540160 	 1000 	 7.4839982986450195 	 0.33853888511657715 	 0.00011944770812988281 	 7.271766662597656e-05 	 3.7124438285827637 	 1.9719536304473877 	 0.335221529006958 	 0.28795814514160156 	 
2025-07-27 21:47:27.460062 test begin: paddle.linalg.lu(Tensor([103, 5, 5, 5],"float64"), )
/usr/local/lib/python3.10/dist-packages/torch/functional.py:2162: UserWarning: torch.lu is deprecated in favor of torch.linalg.lu_factor / torch.linalg.lu_factor_ex and will be removed in a future PyTorch release.
LU, pivots = torch.lu(A, compute_pivots)
should be replaced with
LU, pivots = torch.linalg.lu_factor(A, compute_pivots)
and
LU, pivots, info = torch.lu(A, compute_pivots, get_infos=True)
should be replaced with
LU, pivots, info = torch.linalg.lu_factor_ex(A, compute_pivots) (Triggered internally at /pytorch/aten/src/ATen/native/BatchLinearAlgebra.cpp:2055.)
  return torch._lu_with_info(A, pivot=pivot, check_errors=(not get_infos))
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([103, 5, 5, 5],"float64"), ) 	 12875 	 1000 	 13.502552032470703 	 0.04078245162963867 	 0.00012111663818359375 	 5.459785461425781e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:47:45.690465 test begin: paddle.linalg.lu(Tensor([106, 5, 5, 5],"float32"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([106, 5, 5, 5],"float32"), ) 	 13250 	 1000 	 13.834324836730957 	 0.04087042808532715 	 0.00011301040649414062 	 9.250640869140625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:48:04.291025 test begin: paddle.linalg.lu(Tensor([3, 138, 5, 5],"float64"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 138, 5, 5],"float64"), ) 	 10350 	 1000 	 10.92331600189209 	 0.04822850227355957 	 0.00011277198791503906 	 4.673004150390625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:48:19.028178 test begin: paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), ) 	 13275 	 1000 	 13.862836837768555 	 0.04046440124511719 	 0.00010752677917480469 	 4.315376281738281e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:48:39.104390 test begin: paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), pivot=True, get_infos=True, )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), pivot=True, get_infos=True, ) 	 13275 	 1000 	 14.214236497879028 	 0.04042649269104004 	 0.00011968612670898438 	 3.838539123535156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:48:58.044106 test begin: paddle.linalg.lu(Tensor([3, 5, 138, 5],"float64"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 138, 5],"float64"), ) 	 10350 	 1000 	 0.5684328079223633 	 0.11992979049682617 	 4.1961669921875e-05 	 6.151199340820312e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:48:59.316790 test begin: paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), ) 	 13275 	 1000 	 0.5368854999542236 	 0.13376379013061523 	 4.220008850097656e-05 	 7.486343383789062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:00.682679 test begin: paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), pivot=True, get_infos=True, )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), pivot=True, get_infos=True, ) 	 13275 	 1000 	 0.5360217094421387 	 0.1321558952331543 	 4.220008850097656e-05 	 7.176399230957031e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:02.039896 test begin: paddle.linalg.lu(Tensor([3, 5, 5, 138],"float64"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 5, 138],"float64"), ) 	 10350 	 1000 	 0.6457083225250244 	 0.16575336456298828 	 5.3882598876953125e-05 	 6.4849853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:03.547261 test begin: paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), ) 	 13275 	 1000 	 0.635988712310791 	 0.15674543380737305 	 4.696846008300781e-05 	 5.841255187988281e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:04.894506 test begin: paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), pivot=True, get_infos=True, )
[Prof] paddle.linalg.lu 	 paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), pivot=True, get_infos=True, ) 	 13275 	 1000 	 0.6311447620391846 	 0.17542505264282227 	 4.649162292480469e-05 	 6.771087646484375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:06.441668 test begin: paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float32"), Tensor([203, 5, 5],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float32"), Tensor([203, 5, 5],"int32"), ) 	 2545200 	 1000 	 9.108904838562012 	 0.12702250480651855 	 0.0001049041748046875 	 0.014086484909057617 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([203, 5, 5, 5]) and output[0] has a shape of torch.Size([20321, 5, 5, 5]).
2025-07-27 21:49:16.031010 test begin: paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float64"), Tensor([203, 5, 5],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float64"), Tensor([203, 5, 5],"int32"), ) 	 2545200 	 1000 	 9.27242660522461 	 0.1471867561340332 	 0.00010538101196289062 	 0.01871943473815918 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([203, 5, 5, 5]) and output[0] has a shape of torch.Size([20321, 5, 5, 5]).
2025-07-27 21:49:25.949803 test begin: paddle.linalg.lu_unpack(Tensor([3, 5, 5, 338689],"float64"), Tensor([3, 5, 5],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([3, 5, 5, 338689],"float64"), Tensor([3, 5, 5],"int32"), ) 	 25401750 	 1000 	 0.949570894241333 	 0.37129783630371094 	 7.62939453125e-05 	 0.04652070999145508 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:29.883565 test begin: paddle.linalg.lu_unpack(Tensor([3, 5, 5, 677377],"float32"), Tensor([3, 5, 5],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([3, 5, 5, 677377],"float32"), Tensor([3, 5, 5],"int32"), ) 	 50803350 	 1000 	 1.2709743976593018 	 0.4390377998352051 	 6.318092346191406e-05 	 0.0565032958984375 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 21:49:34.891423 test begin: paddle.linalg.lu_unpack(Tensor([4064, 5, 5, 5],"float32"), Tensor([406, 5, 5],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([4064, 5, 5, 5],"float32"), Tensor([406, 5, 5],"int32"), ) 	 518150 	 1000 	 17.420711994171143 	 0.07329845428466797 	 0.00011396408081054688 	 9.393692016601562e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([406, 5, 5, 5]) and output[0] has a shape of torch.Size([4064, 5, 5, 5]).
2025-07-27 21:49:52.534501 test begin: paddle.linalg.lu_unpack(Tensor([6773, 5, 5, 3],"float32"), Tensor([277, 5, 3],"int32"), )
[Prof] paddle.linalg.lu_unpack 	 paddle.linalg.lu_unpack(Tensor([6773, 5, 5, 3],"float32"), Tensor([277, 5, 3],"int32"), ) 	 512130 	 1000 	 12.400586605072021 	 0.0708932876586914 	 0.00010633468627929688 	 7.605552673339844e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([277, 5, 5, 5]) and output[0] has a shape of torch.Size([6773, 5, 5, 5]).
2025-07-27 21:50:05.146583 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 3, 4233601],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 3, 4233601],"float64"), p="fro", axis=list[0,1,], keepdim=False, ) 	 25401606 	 1000 	 0.23387384414672852 	 0.18118977546691895 	 0.11935615539550781 	 0.15787839889526367 	 1.2986295223236084 	 1.2588272094726562 	 0.4442315101623535 	 0.32078003883361816 	 
2025-07-27 21:50:09.247098 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, ) 	 25401630 	 1000 	 17.55194067955017 	 17.491668701171875 	 0.00010037422180175781 	 0.00025963783264160156 	 1.3038713932037354 	 1.699352502822876 	 0.07037615776062012 	 0.2480449676513672 	 
2025-07-27 21:50:48.165472 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, ) 	 25401630 	 1000 	 17.614168405532837 	 17.61867904663086 	 9.012222290039062e-05 	 0.0002484321594238281 	 1.3076460361480713 	 1.6992924213409424 	 0.06720590591430664 	 0.24805331230163574 	 
2025-07-27 21:51:27.090319 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 3175201, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 3175201, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, ) 	 25401608 	 1000 	 5.253653049468994 	 0.1582038402557373 	 1.79280424118042 	 0.08080339431762695 	 1.081305980682373 	 0.9087798595428467 	 0.3683955669403076 	 0.2332286834716797 	 
2025-07-27 21:51:35.318568 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, ) 	 25401640 	 1000 	 17.806151866912842 	 16.221673250198364 	 0.00024271011352539062 	 0.0002484321594238281 	 2.5660693645477295 	 1.7625463008880615 	 0.13842296600341797 	 0.25824689865112305 	 
2025-07-27 21:52:15.781379 test begin: paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, ) 	 25401640 	 1000 	 17.694034099578857 	 16.29194450378418 	 0.00023484230041503906 	 0.0002815723419189453 	 2.5674080848693848 	 1.7638037204742432 	 0.13148713111877441 	 0.2568955421447754 	 
2025-07-27 21:52:54.718473 test begin: paddle.linalg.matrix_norm(x=Tensor([2116801, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
[Prof] paddle.linalg.matrix_norm 	 paddle.linalg.matrix_norm(x=Tensor([2116801, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, ) 	 25401612 	 1000 	 5.2550270557403564 	 0.15826749801635742 	 1.7895417213439941 	 0.08085465431213379 	 1.0843794345855713 	 0.911750316619873 	 0.3691070079803467 	 0.23198556900024414 	 
2025-07-27 21:53:02.683336 test begin: paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-10, ) 	 25411584 	 1000 	 7.212137222290039 	 6.249099254608154 	 0.0032236576080322266 	 0.001531839370727539 	 20.57240104675293 	 6.763617753982544 	 0.01638484001159668 	 0.4602229595184326 	 
2025-07-27 21:53:45.693313 test begin: paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-2, ) 	 25411584 	 1000 	 4.681208372116089 	 5.031491041183472 	 0.0003142356872558594 	 0.0003726482391357422 	 6.179865598678589 	 2.617152214050293 	 0.0022187232971191406 	 0.446561336517334 	 
2025-07-27 21:54:07.068136 test begin: paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-10, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-10, ) 	 25417728 	 1000 	 7.207475662231445 	 6.294795751571655 	 0.003201723098754883 	 0.0015304088592529297 	 20.597254037857056 	 6.765251159667969 	 0.0162353515625 	 0.4603254795074463 	 
2025-07-27 21:54:50.707820 test begin: paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-2, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-2, ) 	 25417728 	 1000 	 4.656830310821533 	 5.035696029663086 	 0.0003294944763183594 	 0.0003752708435058594 	 6.180707693099976 	 2.6213293075561523 	 0.0022115707397460938 	 0.445080041885376 	 
2025-07-27 21:55:10.269996 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 2005, 6, 1, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 2005, 6, 1, 11, 4, 4],"float64"), n=3, ) 	 25407360 	 1000 	 17.486667156219482 	 17.14122486114502 	 0.34531283378601074 	 0.35084009170532227 	 46.51067805290222 	 42.75754642486572 	 0.36419081687927246 	 0.4270906448364258 	 
2025-07-27 21:57:15.366064 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 1719, 1, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 1719, 1, 11, 4, 4],"float64"), n=3, ) 	 25413696 	 1000 	 17.497155904769897 	 17.13348364830017 	 0.34536099433898926 	 0.35101318359375 	 46.537577867507935 	 42.909064531326294 	 0.36459779739379883 	 0.4265270233154297 	 
2025-07-27 21:59:21.689473 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 3151, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 3151, 4, 4],"float64"), n=3, ) 	 25409664 	 1000 	 17.474791049957275 	 17.116960763931274 	 0.34381747245788574 	 0.35022568702697754 	 46.489460468292236 	 42.801499366760254 	 0.36332249641418457 	 0.42664265632629395 	 
2025-07-27 22:01:26.934912 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 287, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 287, 11, 4, 4],"float64"), n=3, ) 	 25458048 	 1000 	 17.49331784248352 	 17.140186309814453 	 0.34424924850463867 	 0.3509368896484375 	 46.745765209198 	 42.852707624435425 	 0.36421799659729004 	 0.42714524269104004 	 
2025-07-27 22:03:34.055005 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-10, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-10, ) 	 25411584 	 1000 	 7.201611757278442 	 6.280099630355835 	 0.0032176971435546875 	 0.0015213489532470703 	 20.571013927459717 	 6.766874313354492 	 0.016387224197387695 	 0.4600992202758789 	 
2025-07-27 22:04:16.063960 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-2, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-2, ) 	 25411584 	 1000 	 4.670022010803223 	 5.033409595489502 	 0.0003170967102050781 	 0.0003688335418701172 	 6.1816558837890625 	 2.614480972290039 	 0.0022232532501220703 	 0.4451718330383301 	 
2025-07-27 22:04:37.144707 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-10, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-10, ) 	 25417728 	 1000 	 7.2106451988220215 	 6.2530834674835205 	 0.0031697750091552734 	 0.0015282630920410156 	 20.586812019348145 	 6.770859718322754 	 0.01638031005859375 	 0.4616987705230713 	 
2025-07-27 22:05:21.597447 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-2, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-2, ) 	 25417728 	 1000 	 4.6610107421875 	 5.0217061042785645 	 0.0003287792205810547 	 0.00036263465881347656 	 6.203662633895874 	 2.621648073196411 	 0.0021965503692626953 	 0.4452517032623291 	 
2025-07-27 22:05:42.000230 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-10, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-10, ) 	 25436160 	 1000 	 7.195763826370239 	 6.261104345321655 	 0.003238201141357422 	 0.0015091896057128906 	 20.614901781082153 	 6.773283004760742 	 0.016381025314331055 	 0.46067357063293457 	 
2025-07-27 22:06:23.978730 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-2, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-2, ) 	 25436160 	 1000 	 4.736433029174805 	 5.072380781173706 	 0.0003294944763183594 	 0.00035953521728515625 	 6.191328287124634 	 2.6199049949645996 	 0.002228260040283203 	 0.44828343391418457 	 
2025-07-27 22:06:44.854740 test begin: paddle.linalg.matrix_power(x=Tensor([3, 2, 573, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 2, 573, 7, 6, 1, 11, 4, 4],"float64"), n=3, ) 	 25413696 	 1000 	 17.472662210464478 	 17.11460566520691 	 0.3434717655181885 	 0.35029172897338867 	 46.500144720077515 	 42.691529512405396 	 0.3632996082305908 	 0.4277825355529785 	 
2025-07-27 22:08:49.960243 test begin: paddle.linalg.matrix_power(x=Tensor([3, 573, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([3, 573, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, ) 	 25413696 	 1000 	 17.475806713104248 	 17.110578060150146 	 0.343705415725708 	 0.3502686023712158 	 46.564167499542236 	 42.69713377952576 	 0.36707377433776855 	 0.4276549816131592 	 
2025-07-27 22:10:55.179547 test begin: paddle.linalg.matrix_power(x=Tensor([860, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
[Prof] paddle.linalg.matrix_power 	 paddle.linalg.matrix_power(x=Tensor([860, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, ) 	 25428480 	 1000 	 17.514087677001953 	 17.12426495552063 	 0.3515641689300537 	 0.3504815101623535 	 46.55351781845093 	 42.70966291427612 	 0.3693265914916992 	 0.42756009101867676 	 
2025-07-27 22:13:03.031934 test begin: paddle.linalg.matrix_transpose(Tensor([2, 3, 8467201],"float32"), )
[Prof] paddle.linalg.matrix_transpose 	 paddle.linalg.matrix_transpose(Tensor([2, 3, 8467201],"float32"), ) 	 50803206 	 1000 	 0.004643917083740234 	 0.003640890121459961 	 8.58306884765625e-06 	 2.0265579223632812e-05 	 0.04064440727233887 	 0.05302238464355469 	 3.933906555175781e-05 	 4.649162292480469e-05 	 combined
2025-07-27 22:13:04.740538 test begin: paddle.linalg.matrix_transpose(Tensor([2, 6350401, 4],"float32"), )
[Prof] paddle.linalg.matrix_transpose 	 paddle.linalg.matrix_transpose(Tensor([2, 6350401, 4],"float32"), ) 	 50803208 	 1000 	 0.011230707168579102 	 0.004857301712036133 	 4.482269287109375e-05 	 5.745887756347656e-05 	 0.04883456230163574 	 0.07053303718566895 	 9.202957153320312e-05 	 8.320808410644531e-05 	 combined
2025-07-27 22:13:06.687210 test begin: paddle.linalg.matrix_transpose(Tensor([4233601, 3, 4],"float32"), )
[Prof] paddle.linalg.matrix_transpose 	 paddle.linalg.matrix_transpose(Tensor([4233601, 3, 4],"float32"), ) 	 50803212 	 1000 	 0.008993148803710938 	 0.007050752639770508 	 1.049041748046875e-05 	 1.9311904907226562e-05 	 0.048128604888916016 	 0.05973052978515625 	 3.0279159545898438e-05 	 4.553794860839844e-05 	 combined
2025-07-27 22:13:08.566538 test begin: paddle.linalg.multi_dot(list[Tensor([25401601],"float64"),Tensor([25401601, 31],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([25401601],"float64"),Tensor([25401601, 31],"float64"),], ) 	 812851232 	 1000 	 6.219680070877075 	 6.222497224807739 	 3.175931930541992 	 3.1812305450439453 	 12.579402923583984 	 12.58705186843872 	 0.4990816116333008 	 0.4989016056060791 	 
2025-07-27 22:14:05.501611 test begin: paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 6350401],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 6350401],"float64"),], ) 	 25401620 	 1000 	 0.7779645919799805 	 0.7727441787719727 	 0.11313843727111816 	 0.11278796195983887 	 2.0308938026428223 	 2.04502272605896 	 0.23000621795654297 	 0.2319793701171875 	 
2025-07-27 22:14:12.272598 test begin: paddle.linalg.multi_dot(list[Tensor([4233601, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([4233601, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], ) 	 25401656 	 1000 	 1.0279085636138916 	 1.0540032386779785 	 0.1511688232421875 	 0.15459084510803223 	 2.9675674438476562 	 2.0210883617401123 	 0.14901089668273926 	 0.18739080429077148 	 
2025-07-27 22:14:20.420421 test begin: paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 6350401],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 6350401],"float64"),], ) 	 25401608 	 1000 	 0.19577956199645996 	 0.19393062591552734 	 0.17417383193969727 	 0.16903924942016602 	 0.5734522342681885 	 0.5657105445861816 	 0.06515884399414062 	 0.06408882141113281 	 
2025-07-27 22:14:22.690148 test begin: paddle.linalg.multi_dot(list[Tensor([6350401, 4],"float64"),Tensor([4, 31],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([6350401, 4],"float64"),Tensor([4, 31],"float64"),], ) 	 25401728 	 1000 	 1.7343077659606934 	 1.778757095336914 	 0.253216028213501 	 0.2589290142059326 	 3.4264719486236572 	 3.750924825668335 	 0.389390230178833 	 0.42531824111938477 	 
2025-07-27 22:14:39.792972 test begin: paddle.linalg.multi_dot(list[Tensor([8, 3175201],"float64"),Tensor([3175201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 3175201],"float64"),Tensor([3175201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], ) 	 34927243 	 1000 	 0.4022529125213623 	 0.4060475826263428 	 0.1024012565612793 	 0.10354137420654297 	 1.9582159519195557 	 1.6143364906311035 	 0.11095333099365234 	 0.1369926929473877 	 
2025-07-27 22:14:45.023808 test begin: paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 6350401],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 6350401],"float64"),], ) 	 25401682 	 1000 	 1.3647830486297607 	 1.4054505825042725 	 0.15461945533752441 	 0.1597130298614502 	 3.465027093887329 	 2.1315300464630127 	 0.1471271514892578 	 0.1682140827178955 	 
2025-07-27 22:14:55.177693 test begin: paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 5080321],"float64"),Tensor([5080321, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 5080321],"float64"),Tensor([5080321, 5],"float64"),], ) 	 40642634 	 1000 	 0.6492197513580322 	 0.6336874961853027 	 0.1654832363128662 	 0.16125774383544922 	 3.055237054824829 	 2.5001487731933594 	 0.1573042869567871 	 0.18230366706848145 	 
2025-07-27 22:15:02.845520 test begin: paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 8467201],"float64"),Tensor([8467201, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 8467201],"float64"),Tensor([8467201, 5],"float64"),], ) 	 67737674 	 1000 	 1.04933500289917 	 1.0264036655426025 	 0.2668137550354004 	 0.2612018585205078 	 5.041640520095825 	 4.157322406768799 	 0.18414902687072754 	 0.19287967681884766 	 
2025-07-27 22:15:15.734126 test begin: paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 4233601],"float64"),Tensor([4233601, 4],"float64"),Tensor([4, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 4233601],"float64"),Tensor([4233601, 4],"float64"),Tensor([4, 5],"float64"),], ) 	 42336078 	 1000 	 0.526940107345581 	 0.5300955772399902 	 0.1341087818145752 	 0.13610434532165527 	 2.580576181411743 	 2.13796329498291 	 0.1316688060760498 	 0.15586495399475098 	 
2025-07-27 22:15:22.504361 test begin: paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 6350401],"float64"),Tensor([6350401, 4],"float64"),Tensor([4, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 6350401],"float64"),Tensor([6350401, 4],"float64"),Tensor([4, 5],"float64"),], ) 	 63504078 	 1000 	 0.7742881774902344 	 0.7765717506408691 	 0.19807791709899902 	 0.19770216941833496 	 3.835785388946533 	 3.191063165664673 	 0.1638944149017334 	 0.18177008628845215 	 
2025-07-27 22:15:32.518622 test begin: paddle.linalg.multi_dot(list[Tensor([8, 8467201],"float64"),Tensor([8467201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([8, 8467201],"float64"),Tensor([8467201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], ) 	 93139243 	 1000 	 1.0204365253448486 	 1.029282808303833 	 0.26099562644958496 	 0.2629117965698242 	 5.10698938369751 	 4.251122951507568 	 0.18580913543701172 	 0.19701266288757324 	 
2025-07-27 22:15:50.207129 test begin: paddle.linalg.multi_dot(list[Tensor([819407],"float64"),Tensor([819407, 31],"float64"),], )
[Prof] paddle.linalg.multi_dot 	 paddle.linalg.multi_dot(list[Tensor([819407],"float64"),Tensor([819407, 31],"float64"),], ) 	 26221024 	 1000 	 0.16360735893249512 	 0.1636819839477539 	 0.08356308937072754 	 0.08355855941772461 	 0.4458601474761963 	 0.336716890335083 	 0.22771430015563965 	 0.17197370529174805 	 
2025-07-27 22:15:51.882699 test begin: paddle.linalg.norm(Tensor([12700801, 1, 4],"float32"), p=1.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([12700801, 1, 4],"float32"), p=1.0, axis=-1, ) 	 50803204 	 1000 	 0.40628862380981445 	 0.48815488815307617 	 0.3772702217102051 	 0.4681217670440674 	 1.9842760562896729 	 0.6393349170684814 	 1.9205353260040283 	 0.3266336917877197 	 
2025-07-27 22:15:56.651649 test begin: paddle.linalg.norm(Tensor([25402, 50, 20],"float64"), p=2.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([25402, 50, 20],"float64"), p=2.0, axis=-1, ) 	 25402000 	 1000 	 0.32002949714660645 	 0.2666482925415039 	 0.16317367553710938 	 0.2470099925994873 	 1.4630355834960938 	 0.9379968643188477 	 1.4085979461669922 	 0.2390761375427246 	 
2025-07-27 22:16:00.165468 test begin: paddle.linalg.norm(Tensor([50, 25402, 20],"float64"), p=2.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([50, 25402, 20],"float64"), p=2.0, axis=-1, ) 	 25402000 	 1000 	 0.31987476348876953 	 0.26772260665893555 	 0.1631605625152588 	 0.2470400333404541 	 1.4656713008880615 	 0.9351813793182373 	 1.41102933883667 	 0.23905563354492188 	 
2025-07-27 22:16:03.776771 test begin: paddle.linalg.norm(Tensor([50, 50, 10161],"float64"), p=2.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([50, 50, 10161],"float64"), p=2.0, axis=-1, ) 	 25402500 	 1000 	 0.15483880043029785 	 0.15269947052001953 	 0.07889676094055176 	 0.13166308403015137 	 1.4727697372436523 	 0.9117493629455566 	 1.417877435684204 	 0.23273897171020508 	 
2025-07-27 22:16:06.984039 test begin: paddle.linalg.norm(Tensor([50803201],"float32"), p=2, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([50803201],"float32"), p=2, ) 	 50803201 	 1000 	 0.15308022499084473 	 0.15237951278686523 	 0.052027225494384766 	 0.07786107063293457 	 0.9997472763061523 	 0.9103538990020752 	 0.9446156024932861 	 0.23270320892333984 	 
2025-07-27 22:16:10.126295 test begin: paddle.linalg.norm(Tensor([8550, 1, 5942],"float32"), p=1.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([8550, 1, 5942],"float32"), p=1.0, axis=-1, ) 	 50804100 	 1000 	 0.1503903865814209 	 0.15723323822021484 	 0.1312885284423828 	 0.13803935050964355 	 1.9150185585021973 	 0.6070661544799805 	 1.8600413799285889 	 0.3093984127044678 	 
2025-07-27 22:16:13.753974 test begin: paddle.linalg.norm(Tensor([8550, 1486, 4],"float32"), p=1.0, axis=-1, )
[Prof] paddle.linalg.norm 	 paddle.linalg.norm(Tensor([8550, 1486, 4],"float32"), p=1.0, axis=-1, ) 	 50821200 	 1000 	 0.4065532684326172 	 0.48963117599487305 	 0.38645339012145996 	 0.4669511318206787 	 1.9834887981414795 	 0.641582727432251 	 1.9287607669830322 	 0.32718396186828613 	 
2025-07-27 22:16:18.274836 test begin: paddle.linalg.pinv(Tensor([21, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
[Prof] paddle.linalg.pinv 	 paddle.linalg.pinv(Tensor([21, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, ) 	 2520 	 1000 	 57.75374960899353 	 0.415271520614624 	 7.295608520507812e-05 	 8.177757263183594e-05 	 0.48597145080566406 	 0.2769167423248291 	 3.552436828613281e-05 	 7.271766662597656e-05 	 
2025-07-27 22:17:17.341573 test begin: paddle.linalg.pinv(Tensor([22, 20, 3],"float64"), rcond=1e-15, hermitian=False, )
[Prof] paddle.linalg.pinv 	 paddle.linalg.pinv(Tensor([22, 20, 3],"float64"), rcond=1e-15, hermitian=False, ) 	 1320 	 1000 	 9.756235361099243 	 0.3811314105987549 	 4.982948303222656e-05 	 8.392333984375e-05 	 0.4930903911590576 	 0.28379034996032715 	 4.38690185546875e-05 	 8.249282836914062e-05 	 
2025-07-27 22:17:28.418011 test begin: paddle.linalg.pinv(Tensor([3, 22, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
[Prof] paddle.linalg.pinv 	 paddle.linalg.pinv(Tensor([3, 22, 5, 4],"float64"), rcond=1e-15, hermitian=False, ) 	 1320 	 1000 	 30.22825813293457 	 0.41379380226135254 	 5.125999450683594e-05 	 7.534027099609375e-05 	 0.5202925205230713 	 0.31697916984558105 	 4.696846008300781e-05 	 8.916854858398438e-05 	 
2025-07-27 22:17:59.938529 test begin: paddle.linalg.pinv(x=Tensor([58, 4, 4],"float64"), )
[Prof] paddle.linalg.pinv 	 paddle.linalg.pinv(x=Tensor([58, 4, 4],"float64"), ) 	 928 	 1000 	 26.391418933868408 	 0.3762660026550293 	 4.458427429199219e-05 	 8.034706115722656e-05 	 0.4298131465911865 	 0.27683568000793457 	 3.457069396972656e-05 	 7.82012939453125e-05 	 
2025-07-27 22:18:27.451735 test begin: paddle.linalg.qr(Tensor([105, 3, 50, 8],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([105, 3, 50, 8],"float64"), ) 	 126000 	 1000 	 31.287689685821533 	 10.94588303565979 	 0.00012230873107910156 	 0.0038607120513916016 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:19:09.762222 test begin: paddle.linalg.qr(Tensor([112, 3, 20, 6],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([112, 3, 20, 6],"float64"), ) 	 40320 	 1000 	 29.472721576690674 	 11.198215961456299 	 0.00012040138244628906 	 0.0002715587615966797 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:19:50.491003 test begin: paddle.linalg.qr(Tensor([2, 105, 100, 12],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 105, 100, 12],"float64"), ) 	 252000 	 1000 	 31.770132780075073 	 8.08983588218689 	 0.00011801719665527344 	 0.0003154277801513672 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:20:30.405143 test begin: paddle.linalg.qr(Tensor([2, 158, 100, 8],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 158, 100, 8],"float64"), ) 	 252800 	 1000 	 32.2945442199707 	 11.438283443450928 	 0.00011706352233886719 	 0.0040395259857177734 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:21:14.440651 test begin: paddle.linalg.qr(Tensor([2, 211, 100, 6],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 211, 100, 6],"float64"), ) 	 253200 	 1000 	 41.85942220687866 	 14.882714033126831 	 0.00012445449829101562 	 0.0039234161376953125 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:22:11.249801 test begin: paddle.linalg.qr(Tensor([2, 3, 100, 423],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 3, 100, 423],"float64"), ) 	 253800 	 1000 	 4.561465740203857 	 47.483827114105225 	 0.0001289844512939453 	 0.5722408294677734 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:23:03.358570 test begin: paddle.linalg.qr(Tensor([2, 3, 3528, 12],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 3, 3528, 12],"float64"), ) 	 254016 	 1000 	 1.8587374687194824 	 1.5207209587097168 	 4.5299530029296875e-05 	 0.02010345458984375 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:23:06.750393 test begin: paddle.linalg.qr(Tensor([2, 3, 529201, 8],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 3, 529201, 8],"float64"), ) 	 25401648 	 1000 	 12.666398048400879 	 11.316836833953857 	 0.0008928775787353516 	 0.1397237777709961 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:23:31.502750 test begin: paddle.linalg.qr(Tensor([2, 3, 705601, 6],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([2, 3, 705601, 6],"float64"), ) 	 25401636 	 1000 	 13.676189422607422 	 12.147950649261475 	 0.0009043216705322266 	 0.1509249210357666 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:23:57.922274 test begin: paddle.linalg.qr(Tensor([70, 3, 50, 12],"float64"), )
[Prof] paddle.linalg.qr 	 paddle.linalg.qr(Tensor([70, 3, 50, 12],"float64"), ) 	 126000 	 1000 	 24.300124645233154 	 7.832808494567871 	 0.00011920928955078125 	 0.004114866256713867 	 None 	 None 	 None 	 None 	 combined
2025-07-27 22:24:30.095555 test begin: paddle.linalg.slogdet(Tensor([3, 6773, 5, 5],"float32"), )
[Prof] paddle.linalg.slogdet 	 paddle.linalg.slogdet(Tensor([3, 6773, 5, 5],"float32"), ) 	 507975 	 1000 	 6.43578577041626 	 0.606332540512085 	 0.00011324882507324219 	 9.846687316894531e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 3, 6773]) and output[0] has a shape of torch.Size([3, 6773]).
2025-07-27 22:24:39.156315 test begin: paddle.linalg.slogdet(Tensor([6773, 3, 5, 5],"float32"), )
[Prof] paddle.linalg.slogdet 	 paddle.linalg.slogdet(Tensor([6773, 3, 5, 5],"float32"), ) 	 507975 	 1000 	 6.605971813201904 	 0.16582655906677246 	 0.0001087188720703125 	 9.1552734375e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 6773, 3]) and output[0] has a shape of torch.Size([6773, 3]).
2025-07-27 22:24:47.091495 test begin: paddle.linalg.solve(x=Tensor([129601, 14, 14],"float64"), y=Tensor([129601, 14, 2],"float64"), )
[Prof] paddle.linalg.solve 	 paddle.linalg.solve(x=Tensor([129601, 14, 14],"float64"), y=Tensor([129601, 14, 2],"float64"), ) 	 29030624 	 1000 	 3.6980817317962646 	 2.3638577461242676 	 0.0012314319610595703 	 0.00020503997802734375 	 5.9850547313690186 	 2.7680859565734863 	 0.0026378631591796875 	 0.25727319717407227 	 
2025-07-27 22:25:02.678549 test begin: paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 1814401],"float64"), )
[Prof] paddle.linalg.solve 	 paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 1814401],"float64"), ) 	 25401810 	 1000 	 5.027912855148315 	 3.69758677482605 	 0.003900289535522461 	 0.0001850128173828125 	 6.019864082336426 	 3.7280781269073486 	 0.004503488540649414 	 0.4238567352294922 	 
2025-07-27 22:25:23.943160 test begin: paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 453601],"float64"), )
[Prof] paddle.linalg.solve 	 paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 453601],"float64"), ) 	 25402440 	 1000 	 4.276527166366577 	 2.8880157470703125 	 0.00313568115234375 	 0.00011396408081054688 	 11.072500228881836 	 10.280113458633423 	 0.009539127349853516 	 0.586090087890625 	 
2025-07-27 22:25:54.014915 test begin: paddle.linalg.solve(x=Tensor([907201, 14, 14],"float64"), y=Tensor([907201, 14, 2],"float64"), )
[Prof] paddle.linalg.solve 	 paddle.linalg.solve(x=Tensor([907201, 14, 14],"float64"), y=Tensor([907201, 14, 2],"float64"), ) 	 203213024 	 1000 	 25.99381995201111 	 15.501705646514893 	 0.008567333221435547 	 0.0008785724639892578 	 41.414794921875 	 18.944472789764404 	 0.018809080123901367 	 0.41348886489868164 	 
2025-07-27 22:27:40.924321 test begin: paddle.linalg.svdvals(Tensor([10, 3, 8467],"float64"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([10, 3, 8467],"float64"), ) 	 254010 	 1000 	 6.9125142097473145 	 6.7920215129852295 	 0.0002357959747314453 	 0.0003058910369873047 	 14.971398115158081 	 0.10909414291381836 	 9.489059448242188e-05 	 0.0001456737518310547 	 
2025-07-27 22:28:09.831061 test begin: paddle.linalg.svdvals(Tensor([10, 4233, 6],"float64"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([10, 4233, 6],"float64"), ) 	 253980 	 1000 	 7.992345333099365 	 7.818463563919067 	 0.00019407272338867188 	 0.00017952919006347656 	 19.21964693069458 	 0.1345202922821045 	 0.00011372566223144531 	 9.72747802734375e-05 	 
2025-07-27 22:28:45.440373 test begin: paddle.linalg.svdvals(Tensor([10, 5080],"float32"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([10, 5080],"float32"), ) 	 50800 	 1000 	 2.413691759109497 	 0.9019842147827148 	 5.745887756347656e-05 	 0.0002257823944091797 	 6.436896085739136 	 0.10835647583007812 	 0.00010156631469726562 	 0.00010085105895996094 	 
2025-07-27 22:28:55.380073 test begin: paddle.linalg.svdvals(Tensor([40, 6350],"float64"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([40, 6350],"float64"), ) 	 254000 	 1000 	 36.73847579956055 	 3.0159645080566406 	 0.00012373924255371094 	 0.000125885009765625 	 104.66148066520691 	 0.12167525291442871 	 9.369850158691406e-05 	 8.606910705566406e-05 	 
2025-07-27 22:31:20.127600 test begin: paddle.linalg.svdvals(Tensor([611, 3, 6],"float64"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([611, 3, 6],"float64"), ) 	 10998 	 1000 	 4.505857467651367 	 0.5177819728851318 	 7.319450378417969e-05 	 0.00010228157043457031 	 5.679710865020752 	 0.13602757453918457 	 7.700920104980469e-05 	 6.318092346191406e-05 	 
2025-07-27 22:31:30.986445 test begin: paddle.linalg.svdvals(Tensor([623, 12],"float32"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([623, 12],"float32"), ) 	 7476 	 1000 	 0.4339265823364258 	 0.8524055480957031 	 5.1975250244140625e-05 	 0.0001361370086669922 	 1.4377772808074951 	 0.10087084770202637 	 4.2438507080078125e-05 	 0.00011396408081054688 	 
2025-07-27 22:31:33.821546 test begin: paddle.linalg.svdvals(Tensor([635, 40],"float64"), )
[Prof] paddle.linalg.svdvals 	 paddle.linalg.svdvals(Tensor([635, 40],"float64"), ) 	 25400 	 1000 	 3.736490249633789 	 2.931976556777954 	 0.00010800361633300781 	 0.00011348724365234375 	 11.842782497406006 	 0.12737560272216797 	 0.0001010894775390625 	 9.441375732421875e-05 	 
2025-07-27 22:31:52.487890 test begin: paddle.log(Tensor([192, 40, 6625],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([192, 40, 6625],"float32"), ) 	 50880000 	 1000 	 0.2975006103515625 	 0.3026621341705322 	 0.28751492500305176 	 0.28650379180908203 	 0.45126986503601074 	 0.4516894817352295 	 0.3969886302947998 	 0.367293119430542 	 
2025-07-27 22:31:59.254530 test begin: paddle.log(Tensor([307, 25, 6626],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([307, 25, 6626],"float32"), ) 	 50854550 	 1000 	 0.2967865467071533 	 0.2981452941894531 	 0.2872810363769531 	 0.28023600578308105 	 0.4523780345916748 	 0.4501056671142578 	 0.3892512321472168 	 0.38698434829711914 	 
2025-07-27 22:32:02.402728 test begin: paddle.log(Tensor([64, 120, 6625],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([64, 120, 6625],"float32"), ) 	 50880000 	 1000 	 0.2966160774230957 	 0.29806065559387207 	 0.2878584861755371 	 0.2868928909301758 	 0.45377349853515625 	 0.45154786109924316 	 0.3964560031890869 	 0.35859012603759766 	 
2025-07-27 22:32:05.699378 test begin: paddle.log(Tensor([64, 120, 6626],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([64, 120, 6626],"float32"), ) 	 50887680 	 1000 	 0.2970421314239502 	 0.30109071731567383 	 0.287703275680542 	 0.2877335548400879 	 0.45133256912231445 	 0.4504563808441162 	 0.3886423110961914 	 0.3676481246948242 	 
2025-07-27 22:32:09.045459 test begin: paddle.log(Tensor([64, 25, 31753],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([64, 25, 31753],"float32"), ) 	 50804800 	 1000 	 0.29601502418518066 	 0.29760098457336426 	 0.28720641136169434 	 0.2863473892211914 	 0.450547456741333 	 0.44950151443481445 	 0.39597392082214355 	 0.3872690200805664 	 
2025-07-27 22:32:12.063699 test begin: paddle.log(Tensor([64, 40, 19846],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([64, 40, 19846],"float32"), ) 	 50805760 	 1000 	 0.2963128089904785 	 0.30011487007141113 	 0.2874617576599121 	 0.2862846851348877 	 0.4516940116882324 	 0.4507122039794922 	 0.3974883556365967 	 0.38898396492004395 	 
2025-07-27 22:32:15.175907 test begin: paddle.log(Tensor([64, 80, 9923],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([64, 80, 9923],"float32"), ) 	 50805760 	 1000 	 0.2972273826599121 	 0.29761409759521484 	 0.2875227928161621 	 0.28641581535339355 	 0.45054173469543457 	 0.45095086097717285 	 0.39614272117614746 	 0.38834095001220703 	 
2025-07-27 22:32:18.278723 test begin: paddle.log(Tensor([96, 80, 6625],"float32"), )
[Prof] paddle.log 	 paddle.log(Tensor([96, 80, 6625],"float32"), ) 	 50880000 	 1000 	 0.29733896255493164 	 0.29803013801574707 	 0.28761959075927734 	 0.2864062786102295 	 0.45246052742004395 	 0.4516885280609131 	 0.39827966690063477 	 0.38639330863952637 	 
2025-07-27 22:32:21.375356 test begin: paddle.log10(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.log10 	 paddle.log10(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.29622316360473633 	 0.29754161834716797 	 0.287447452545166 	 0.2864234447479248 	 0.4504363536834717 	 0.7469992637634277 	 0.3962252140045166 	 0.38094258308410645 	 
2025-07-27 22:32:24.900643 test begin: paddle.log10(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.log10 	 paddle.log10(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2974581718444824 	 0.2989790439605713 	 0.2888011932373047 	 0.28786802291870117 	 0.45043492317199707 	 0.7470173835754395 	 0.3961904048919678 	 0.3809397220611572 	 
2025-07-27 22:32:28.316178 test begin: paddle.log10(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.log10 	 paddle.log10(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.29772138595581055 	 0.29756832122802734 	 0.28856778144836426 	 0.2864193916320801 	 0.4515857696533203 	 0.7455964088439941 	 0.397566556930542 	 0.3809356689453125 	 
2025-07-27 22:32:31.692367 test begin: paddle.log10(x=Tensor([12700801, 2],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([12700801, 2],"float64"), ) 	 25401602 	 1000 	 0.307389497756958 	 0.3066751956939697 	 0.2969787120819092 	 0.289151668548584 	 0.4490244388580322 	 0.7458662986755371 	 0.38619327545166016 	 0.3804197311401367 	 
2025-07-27 22:32:34.538134 test begin: paddle.log10(x=Tensor([2, 12700801],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.3059401512145996 	 0.981820821762085 	 0.29703211784362793 	 0.2953624725341797 	 0.4477107524871826 	 0.7460343837738037 	 0.39459753036499023 	 0.38181638717651367 	 
2025-07-27 22:32:40.411602 test begin: paddle.log10(x=Tensor([2, 3, 2, 2116801],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([2, 3, 2, 2116801],"float64"), ) 	 25401612 	 1000 	 0.30797362327575684 	 0.30665111541748047 	 0.29140233993530273 	 0.2890510559082031 	 0.4476602077484131 	 0.7446048259735107 	 0.38556504249572754 	 0.38042330741882324 	 
2025-07-27 22:32:43.184430 test begin: paddle.log10(x=Tensor([2, 3, 2116801, 2],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([2, 3, 2116801, 2],"float64"), ) 	 25401612 	 1000 	 0.30592870712280273 	 0.31435704231262207 	 0.28994274139404297 	 0.28931522369384766 	 0.44890546798706055 	 0.7471652030944824 	 0.3845081329345703 	 0.3804299831390381 	 
2025-07-27 22:32:46.080332 test begin: paddle.log10(x=Tensor([2, 3175201, 2, 2],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([2, 3175201, 2, 2],"float64"), ) 	 25401608 	 1000 	 0.3059263229370117 	 0.3066575527191162 	 0.2900259494781494 	 0.28925323486328125 	 0.4475235939025879 	 0.7458574771881104 	 0.38453125953674316 	 0.38170719146728516 	 
2025-07-27 22:32:48.876533 test begin: paddle.log10(x=Tensor([2116801, 3, 2, 2],"float64"), )
[Prof] paddle.log10 	 paddle.log10(x=Tensor([2116801, 3, 2, 2],"float64"), ) 	 25401612 	 1000 	 0.3095245361328125 	 0.30663275718688965 	 0.29828429222106934 	 0.295457124710083 	 0.450406551361084 	 0.7446556091308594 	 0.39177989959716797 	 0.3804802894592285 	 
2025-07-27 22:32:51.670610 test begin: paddle.log1p(Tensor([10, 16935, 300],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([10, 16935, 300],"float32"), ) 	 50805000 	 1000 	 0.2960991859436035 	 0.30655980110168457 	 0.2870051860809326 	 0.28917527198791504 	 0.45176219940185547 	 0.7469878196716309 	 0.39751124382019043 	 0.3823721408843994 	 
2025-07-27 22:32:55.259717 test begin: paddle.log1p(Tensor([10, 200, 25402],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([10, 200, 25402],"float32"), ) 	 50804000 	 1000 	 0.2961452007293701 	 0.300295352935791 	 0.28722286224365234 	 0.2853548526763916 	 0.4504728317260742 	 0.7469229698181152 	 0.388369083404541 	 0.3822495937347412 	 
2025-07-27 22:32:58.916023 test begin: paddle.log1p(Tensor([1016065, 5, 5],"float64"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([1016065, 5, 5],"float64"), ) 	 25401625 	 1000 	 0.7955682277679443 	 1.0133893489837646 	 0.2964456081390381 	 0.32546114921569824 	 0.4502091407775879 	 0.7446441650390625 	 0.39670443534851074 	 0.38042521476745605 	 
2025-07-27 22:33:04.613743 test begin: paddle.log1p(Tensor([108, 157920, 3],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([108, 157920, 3],"float32"), ) 	 51166080 	 1000 	 0.29864001274108887 	 0.30220794677734375 	 0.2891421318054199 	 0.2898545265197754 	 0.4548940658569336 	 0.7508161067962646 	 0.3983786106109619 	 0.38359570503234863 	 
2025-07-27 22:33:07.993729 test begin: paddle.log1p(Tensor([4, 157920, 81],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([4, 157920, 81],"float32"), ) 	 51166080 	 1000 	 0.2982659339904785 	 0.30097365379333496 	 0.2892642021179199 	 0.28999805450439453 	 0.4534947872161865 	 0.7535977363586426 	 0.39950108528137207 	 0.38367772102355957 	 
2025-07-27 22:33:11.457406 test begin: paddle.log1p(Tensor([4, 4233601, 3],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([4, 4233601, 3],"float32"), ) 	 50803212 	 1000 	 0.295806884765625 	 0.3001091480255127 	 0.2797963619232178 	 0.28789567947387695 	 0.45027971267700195 	 0.7484581470489502 	 0.39635443687438965 	 0.3824498653411865 	 
2025-07-27 22:33:14.961582 test begin: paddle.log1p(Tensor([50000, 102, 5],"float64"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([50000, 102, 5],"float64"), ) 	 25500000 	 1000 	 0.30660223960876465 	 0.3378725051879883 	 0.2976396083831787 	 0.3265726566314697 	 0.4496638774871826 	 0.7486927509307861 	 0.39630794525146484 	 0.38187456130981445 	 
2025-07-27 22:33:17.779690 test begin: paddle.log1p(Tensor([50000, 5, 102],"float64"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([50000, 5, 102],"float64"), ) 	 25500000 	 1000 	 0.30661511421203613 	 0.34153008460998535 	 0.2905924320220947 	 0.3272266387939453 	 0.45241403579711914 	 0.748690128326416 	 0.3985412120819092 	 0.38184213638305664 	 
2025-07-27 22:33:20.779399 test begin: paddle.log1p(Tensor([847, 200, 300],"float32"), )
[Prof] paddle.log1p 	 paddle.log1p(Tensor([847, 200, 300],"float32"), ) 	 50820000 	 1000 	 0.29596543312072754 	 0.3000359535217285 	 0.2868540287017822 	 0.2879970073699951 	 0.4504201412200928 	 0.7472763061523438 	 0.3966522216796875 	 0.3825240135192871 	 
2025-07-27 22:33:24.283104 test begin: paddle.log2(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.29662466049194336 	 0.2980334758758545 	 0.28678035736083984 	 0.28676939010620117 	 0.4513859748840332 	 0.7454986572265625 	 0.3971080780029297 	 0.3808882236480713 	 
2025-07-27 22:33:27.639551 test begin: paddle.log2(Tensor([10, 2540161],"float64"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([10, 2540161],"float64"), ) 	 25401610 	 1000 	 0.30807065963745117 	 0.3196728229522705 	 0.2984592914581299 	 0.2956404685974121 	 0.4476127624511719 	 0.7445247173309326 	 0.39382266998291016 	 0.3803560733795166 	 
2025-07-27 22:33:30.589479 test begin: paddle.log2(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.2958810329437256 	 0.3020899295806885 	 0.28493785858154297 	 0.2877957820892334 	 0.4515340328216553 	 0.7470049858093262 	 0.3974955081939697 	 0.3809700012207031 	 
2025-07-27 22:33:34.079271 test begin: paddle.log2(Tensor([10, 5080321],"float32"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.2959709167480469 	 0.3193175792694092 	 0.280001163482666 	 0.2787442207336426 	 0.4505116939544678 	 0.7457993030548096 	 0.3824477195739746 	 0.38093090057373047 	 
2025-07-27 22:33:39.850203 test begin: paddle.log2(Tensor([2116801, 12],"float64"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([2116801, 12],"float64"), ) 	 25401612 	 1000 	 0.31353068351745605 	 0.32308220863342285 	 0.2971208095550537 	 0.29575014114379883 	 0.44892191886901855 	 0.7445838451385498 	 0.39544200897216797 	 0.3803744316101074 	 
2025-07-27 22:33:42.711772 test begin: paddle.log2(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.29584741592407227 	 0.32108116149902344 	 0.2871432304382324 	 0.2878434658050537 	 0.4504985809326172 	 0.7494356632232666 	 0.3961331844329834 	 0.38356781005859375 	 
2025-07-27 22:33:46.144856 test begin: paddle.log2(Tensor([4233601, 12],"float32"), )
[Prof] paddle.log2 	 paddle.log2(Tensor([4233601, 12],"float32"), ) 	 50803212 	 1000 	 0.29624128341674805 	 0.2976112365722656 	 0.287121057510376 	 0.2865452766418457 	 0.45034193992614746 	 0.7455503940582275 	 0.39618968963623047 	 0.38089895248413086 	 
2025-07-27 22:33:49.524525 test begin: paddle.logaddexp(Tensor([10, 16935, 300],"float32"), Tensor([10, 16935, 300],"float32"), )
[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 16935, 300],"float32"), Tensor([10, 16935, 300],"float32"), ) 	 101610000 	 1000 	 2.534031629562378 	 0.4519169330596924 	 0.37000417709350586 	 0.44068479537963867 	 4.614661455154419 	 2.9805476665496826 	 0.5241239070892334 	 0.38042593002319336 	 
2025-07-27 22:34:02.763015 test begin: paddle.logaddexp(Tensor([10, 16935, 300],"int32"), Tensor([10, 16935, 300],"int32"), )
W0727 22:34:09.269909 130086 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int32) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():7.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 16935, 300],"int32"), Tensor([10, 16935, 300],"int32"), ) 	 101610000 	 1000 	 3.051198959350586 	 0.4535796642303467 	 0.36153078079223633 	 0.439009428024292 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:34:09.969983 test begin: paddle.logaddexp(Tensor([10, 200, 12701],"int64"), Tensor([10, 200, 12701],"int64"), )
W0727 22:34:13.398528 130465 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int64) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():9.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 200, 12701],"int64"), Tensor([10, 200, 12701],"int64"), ) 	 50804000 	 1000 	 2.3236753940582275 	 0.229630708694458 	 0.2962512969970703 	 0.21817970275878906 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:34:14.006563 test begin: paddle.logaddexp(Tensor([10, 200, 25402],"float32"), Tensor([10, 200, 25402],"float32"), )
[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 200, 25402],"float32"), Tensor([10, 200, 25402],"float32"), ) 	 101608000 	 1000 	 2.5369467735290527 	 0.4505133628845215 	 0.3700082302093506 	 0.4394059181213379 	 4.613770484924316 	 2.9832329750061035 	 0.5228590965270996 	 0.3804309368133545 	 
2025-07-27 22:34:27.026808 test begin: paddle.logaddexp(Tensor([10, 200, 25402],"int32"), Tensor([10, 200, 25402],"int32"), )
W0727 22:34:31.704010 131745 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int32) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():7.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 200, 25402],"int32"), Tensor([10, 200, 25402],"int32"), ) 	 101608000 	 1000 	 2.8343958854675293 	 0.4505176544189453 	 0.36142849922180176 	 0.4393754005432129 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:34:32.357413 test begin: paddle.logaddexp(Tensor([10, 8468, 300],"int64"), Tensor([10, 8468, 300],"int64"), )
W0727 22:34:36.589629 132188 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int64) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():9.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([10, 8468, 300],"int64"), Tensor([10, 8468, 300],"int64"), ) 	 50808000 	 1000 	 2.3257856369018555 	 0.2449326515197754 	 0.2962973117828369 	 0.21207857131958008 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:34:39.360234 test begin: paddle.logaddexp(Tensor([424, 200, 300],"int64"), Tensor([424, 200, 300],"int64"), )
W0727 22:34:42.795733 132765 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int64) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():9.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([424, 200, 300],"int64"), Tensor([424, 200, 300],"int64"), ) 	 50880000 	 1000 	 2.3299074172973633 	 0.23010587692260742 	 0.29670071601867676 	 0.21268248558044434 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:34:43.251748 test begin: paddle.logaddexp(Tensor([847, 200, 300],"float32"), Tensor([847, 200, 300],"float32"), )
[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([847, 200, 300],"float32"), Tensor([847, 200, 300],"float32"), ) 	 101640000 	 1000 	 2.539008378982544 	 0.4507761001586914 	 0.37014222145080566 	 0.4395103454589844 	 4.615454196929932 	 2.9838650226593018 	 0.5229587554931641 	 0.3805887699127197 	 
2025-07-27 22:34:56.371482 test begin: paddle.logaddexp(Tensor([847, 200, 300],"int32"), Tensor([847, 200, 300],"int32"), )
W0727 22:35:01.019361 133909 backward.cc:462] While running Node (AbsGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (int32) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():7.] (at ../paddle/phi/core/dense_tensor.cc:153)

[Prof] paddle.logaddexp 	 paddle.logaddexp(Tensor([847, 200, 300],"int32"), Tensor([847, 200, 300],"int32"), ) 	 101640000 	 1000 	 2.836700916290283 	 0.45078086853027344 	 0.362962007522583 	 0.4334425926208496 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 22:35:01.597696 test begin: paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=-1, )
[Prof] paddle.logcumsumexp 	 paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=-1, ) 	 50803300 	 1000 	 3.383411169052124 	 2.4759411811828613 	 3.3736190795898438 	 2.463855266571045 	 10.917036771774292 	 10.828925132751465 	 1.0121800899505615 	 0.5523738861083984 	 
2025-07-27 22:35:30.968408 test begin: paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=0, )
[Prof] paddle.logcumsumexp 	 paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=0, ) 	 50803300 	 1000 	 23.77926778793335 	 0.3551442623138428 	 8.109879732131958 	 0.34332823753356934 	 192.04972743988037 	 6.565228223800659 	 13.061352729797363 	 0.3352499008178711 	 
2025-07-27 22:39:15.615341 test begin: paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=-1, )
[Prof] paddle.logcumsumexp 	 paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=-1, ) 	 50803300 	 1000 	 22.83760380744934 	 103.68466329574585 	 22.826173067092896 	 103.66226863861084 	 190.1749403476715 	 213.22016286849976 	 17.68221116065979 	 10.874747037887573 	 
2025-07-27 22:48:10.654916 test begin: paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=0, )
[Prof] paddle.logcumsumexp 	 paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=0, ) 	 50803300 	 1000 	 23.77395224571228 	 0.3608076572418213 	 8.106595993041992 	 0.3424985408782959 	 192.1482651233673 	 6.561683654785156 	 13.064159154891968 	 0.33519887924194336 	 
2025-07-27 22:51:56.515785 test begin: paddle.logcumsumexp(Tensor([508033, 10, 10],"float32"), axis=-1, )
[Prof] paddle.logcumsumexp 	 paddle.logcumsumexp(Tensor([508033, 10, 10],"float32"), axis=-1, ) 	 50803300 	 1000 	 22.82369565963745 	 103.5952377319336 	 22.813680410385132 	 103.58022594451904 	 190.26420760154724 	 213.03971028327942 	 17.710654973983765 	 10.865583896636963 	 
2025-07-27 23:00:48.597488 test begin: paddle.logical_and(Tensor([138, 369303],"bool"), Tensor([138, 369303],"bool"), )
[Prof] paddle.logical_and 	 paddle.logical_and(Tensor([138, 369303],"bool"), Tensor([138, 369303],"bool"), ) 	 101927628 	 1000 	 0.11881375312805176 	 0.1277925968170166 	 0.10904765129089355 	 0.10259461402893066 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:50.542703 test begin: paddle.logical_and(Tensor([146, 349866],"bool"), Tensor([146, 349866],"bool"), )
[Prof] paddle.logical_and 	 paddle.logical_and(Tensor([146, 349866],"bool"), Tensor([146, 349866],"bool"), ) 	 102160872 	 1000 	 0.11984491348266602 	 0.11591672897338867 	 0.10951662063598633 	 0.10263538360595703 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:52.170125 test begin: paddle.logical_and(Tensor([49, 1036801],"bool"), Tensor([49, 1036801],"bool"), )
[Prof] paddle.logical_and 	 paddle.logical_and(Tensor([49, 1036801],"bool"), Tensor([49, 1036801],"bool"), ) 	 101606498 	 1000 	 0.11806201934814453 	 0.1161961555480957 	 0.10161519050598145 	 0.09639167785644531 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:53.897127 test begin: paddle.logical_and(Tensor([53, 958551],"bool"), Tensor([53, 958551],"bool"), )
[Prof] paddle.logical_and 	 paddle.logical_and(Tensor([53, 958551],"bool"), Tensor([53, 958551],"bool"), ) 	 101606406 	 1000 	 0.1180565357208252 	 0.11622428894042969 	 0.1014409065246582 	 0.09610462188720703 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:55.518361 test begin: paddle.logical_and(Tensor([55, 923695],"bool"), Tensor([55, 923695],"bool"), )
[Prof] paddle.logical_and 	 paddle.logical_and(Tensor([55, 923695],"bool"), Tensor([55, 923695],"bool"), ) 	 101606450 	 1000 	 0.11808347702026367 	 0.11621665954589844 	 0.10864472389221191 	 0.10297393798828125 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:57.195246 test begin: paddle.logical_not(Tensor([215040, 237],"bool"), )
[Prof] paddle.logical_not 	 paddle.logical_not(Tensor([215040, 237],"bool"), ) 	 50964480 	 1000 	 0.08264565467834473 	 0.08156037330627441 	 0.07343244552612305 	 0.06660103797912598 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:58.057433 test begin: paddle.logical_not(Tensor([220416, 231],"bool"), )
[Prof] paddle.logical_not 	 paddle.logical_not(Tensor([220416, 231],"bool"), ) 	 50916096 	 1000 	 0.08175206184387207 	 0.08025860786437988 	 0.07256221771240234 	 0.06756258010864258 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:58.917036 test begin: paddle.logical_not(Tensor([225792, 226],"bool"), )
[Prof] paddle.logical_not 	 paddle.logical_not(Tensor([225792, 226],"bool"), ) 	 51028992 	 1000 	 0.0839834213256836 	 0.09453582763671875 	 0.07483839988708496 	 0.06687283515930176 	 None 	 None 	 None 	 None 	 
2025-07-27 23:00:59.806290 test begin: paddle.logical_not(Tensor([635041, 80],"bool"), )
[Prof] paddle.logical_not 	 paddle.logical_not(Tensor([635041, 80],"bool"), ) 	 50803280 	 1000 	 0.08164858818054199 	 0.07991170883178711 	 0.06583857536315918 	 0.060410261154174805 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:00.770901 test begin: paddle.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
[Prof] paddle.logical_or 	 paddle.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), ) 	 101606402 	 1000 	 0.11761927604675293 	 0.11601948738098145 	 0.10796809196472168 	 0.10269451141357422 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:02.416229 test begin: paddle.logical_or(Tensor([640, 79381],"bool"), Tensor([640, 79381],"bool"), )
[Prof] paddle.logical_or 	 paddle.logical_or(Tensor([640, 79381],"bool"), Tensor([640, 79381],"bool"), ) 	 101607680 	 1000 	 0.11909890174865723 	 0.1159505844116211 	 0.10946512222290039 	 0.10177087783813477 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:04.066585 test begin: paddle.logical_or(Tensor([79381, 640],"bool"), Tensor([79381, 640],"bool"), )
[Prof] paddle.logical_or 	 paddle.logical_or(Tensor([79381, 640],"bool"), Tensor([79381, 640],"bool"), ) 	 101607680 	 1000 	 0.11789917945861816 	 0.35271167755126953 	 0.10821962356567383 	 0.0949547290802002 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:07.746394 test begin: paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.logical_xor 	 paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 50803600 	 1000 	 0.7066752910614014 	 0.2453770637512207 	 0.17357563972473145 	 0.22448253631591797 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:10.333827 test begin: paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
[Prof] paddle.logical_xor 	 paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), ) 	 50803600 	 1000 	 0.18877315521240234 	 0.2388169765472412 	 0.17847919464111328 	 0.22495198249816895 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:11.538001 test begin: paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.logical_xor 	 paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), ) 	 101606800 	 1000 	 0.3272404670715332 	 0.32790350914001465 	 0.3176436424255371 	 0.3145790100097656 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:13.730576 test begin: paddle.logical_xor(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.logical_xor 	 paddle.logical_xor(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), ) 	 101606420 	 1000 	 0.32875847816467285 	 0.3476269245147705 	 0.3175365924835205 	 0.31450462341308594 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:18.039357 test begin: paddle.logical_xor(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.logical_xor 	 paddle.logical_xor(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), ) 	 101606440 	 1000 	 0.3299698829650879 	 0.3277463912963867 	 0.31084585189819336 	 0.304668664932251 	 None 	 None 	 None 	 None 	 
2025-07-27 23:01:20.697998 test begin: paddle.logit(Tensor([10, 20, 254017],"float32"), 0.001, )
[Prof] paddle.logit 	 paddle.logit(Tensor([10, 20, 254017],"float32"), 0.001, ) 	 50803400 	 1000 	 0.29830098152160645 	 0.3025829792022705 	 0.2886669635772705 	 0.2852137088775635 	 0.45317864418029785 	 0.4499800205230713 	 0.39904117584228516 	 0.3876492977142334 	 
2025-07-27 23:01:23.835556 test begin: paddle.logit(Tensor([10, 5080321, 1],"float32"), 0.001, )
[Prof] paddle.logit 	 paddle.logit(Tensor([10, 5080321, 1],"float32"), 0.001, ) 	 50803210 	 1000 	 0.2984166145324707 	 0.2998464107513428 	 0.282146692276001 	 0.28731727600097656 	 0.45035791397094727 	 0.44994544982910156 	 0.39636945724487305 	 0.36653971672058105 	 
2025-07-27 23:01:27.011481 test begin: paddle.logit(Tensor([2540161, 20, 1],"float32"), 0.001, )
[Prof] paddle.logit 	 paddle.logit(Tensor([2540161, 20, 1],"float32"), 0.001, ) 	 50803220 	 1000 	 0.29837489128112793 	 0.30037474632263184 	 0.2891407012939453 	 0.287229061126709 	 0.4502854347229004 	 0.449953556060791 	 0.39631223678588867 	 0.3870882987976074 	 
2025-07-27 23:01:30.080904 test begin: paddle.logit(Tensor([50803201],"float32"), 1e-08, )
[Prof] paddle.logit 	 paddle.logit(Tensor([50803201],"float32"), 1e-08, ) 	 50803201 	 1000 	 0.29952383041381836 	 0.3157689571380615 	 0.28191542625427246 	 0.28025078773498535 	 0.45303845405578613 	 0.4498889446258545 	 0.39015984535217285 	 0.36113953590393066 	 
2025-07-27 23:01:33.275503 test begin: paddle.logit(x=Tensor([4, 3, 2, 1058401],"float64"), eps=0.2, )
[Prof] paddle.logit 	 paddle.logit(x=Tensor([4, 3, 2, 1058401],"float64"), eps=0.2, ) 	 25401624 	 1000 	 0.32558298110961914 	 0.30274415016174316 	 0.316131591796875 	 0.28299689292907715 	 0.44421839714050293 	 0.44877147674560547 	 0.3783411979675293 	 0.37822794914245605 	 
2025-07-27 19:17:48.364310 test begin: paddle.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, )
W0727 19:17:49.069387 160135 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.logit 	 paddle.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, ) 	 25401660 	 1000 	 0.3280792236328125 	 0.3042924404144287 	 0.3151528835296631 	 0.2901008129119873 	 0.44373178482055664 	 0.44882869720458984 	 0.38994622230529785 	 0.37072253227233887 	 
2025-07-27 19:17:51.852977 test begin: paddle.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, )
[Prof] paddle.logit 	 paddle.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, ) 	 25401640 	 1000 	 0.32446789741516113 	 0.30282020568847656 	 0.31532931327819824 	 0.2889370918273926 	 0.4433867931365967 	 0.44893527030944824 	 0.3874032497406006 	 0.3822441101074219 	 
2025-07-27 19:17:54.356593 test begin: paddle.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, )
[Prof] paddle.logit 	 paddle.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, ) 	 25401630 	 1000 	 0.3314073085784912 	 0.3027992248535156 	 0.31693124771118164 	 0.29026079177856445 	 0.4440021514892578 	 0.44886326789855957 	 0.3893768787384033 	 0.3853631019592285 	 
2025-07-27 19:17:56.898554 test begin: paddle.logsumexp(Tensor([1024, 49613],"float32"), axis=1, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([1024, 49613],"float32"), axis=1, ) 	 50803712 	 1000 	 0.7117111682891846 	 0.9340136051177979 	 0.1038961410522461 	 0.1063077449798584 	 0.8089330196380615 	 0.9056634902954102 	 0.7532744407653809 	 0.30846691131591797 	 
2025-07-27 19:18:01.686774 test begin: paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=-1, keepdim=False, ) 	 50808000 	 1000 	 0.6346940994262695 	 0.9381227493286133 	 0.12944769859313965 	 0.10684728622436523 	 1.206979751586914 	 0.9096252918243408 	 1.1525239944458008 	 0.30982255935668945 	 
2025-07-27 19:18:06.177197 test begin: paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=list[0,2,], keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=list[0,2,], keepdim=False, ) 	 50808000 	 1000 	 0.7314817905426025 	 0.9847207069396973 	 0.10677313804626465 	 0.09168076515197754 	 1.201770544052124 	 0.9124064445495605 	 1.1453619003295898 	 0.31077146530151367 	 
2025-07-27 19:18:10.847969 test begin: paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=-1, keepdim=False, ) 	 50804400 	 1000 	 0.6639876365661621 	 1.6270825862884521 	 0.3392605781555176 	 0.18491005897521973 	 1.230539083480835 	 0.9190278053283691 	 1.1741063594818115 	 0.3130452632904053 	 
2025-07-27 19:18:16.132111 test begin: paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=list[0,2,], keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=list[0,2,], keepdim=False, ) 	 50804400 	 1000 	 0.7203760147094727 	 0.9498376846313477 	 0.14695000648498535 	 0.1081082820892334 	 1.2098140716552734 	 0.9129440784454346 	 1.1546626091003418 	 0.3109629154205322 	 
2025-07-27 19:18:20.729640 test begin: paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=-1, keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=-1, keepdim=False, ) 	 50808000 	 1000 	 0.6626076698303223 	 1.6273047924041748 	 0.338519811630249 	 0.18495845794677734 	 1.2304527759552002 	 0.9191598892211914 	 1.1745574474334717 	 0.31302738189697266 	 
2025-07-27 19:18:29.947042 test begin: paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
[Prof] paddle.logsumexp 	 paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=list[0,2,], keepdim=False, ) 	 50808000 	 1000 	 0.7367467880249023 	 0.9881453514099121 	 0.10759997367858887 	 0.09185051918029785 	 1.2023563385009766 	 0.9123613834381104 	 1.1461994647979736 	 0.3107779026031494 	 
2025-07-27 19:18:34.560347 test begin: paddle.masked_fill(Tensor([20, 127009, 20],"int32"), Tensor([20, 127009, 20],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([20, 127009, 20],"int32"), Tensor([20, 127009, 20],"bool"), 0, ) 	 101607200 	 1000 	 0.38446521759033203 	 0.8775262832641602 	 0.09630703926086426 	 0.2217857837677002 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:39.942365 test begin: paddle.masked_fill(Tensor([20, 60, 42337],"int32"), Tensor([20, 60, 42337],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([20, 60, 42337],"int32"), Tensor([20, 60, 42337],"bool"), 0, ) 	 101608800 	 1000 	 0.379986047744751 	 0.6539168357849121 	 0.0962677001953125 	 0.22166848182678223 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:43.051751 test begin: paddle.masked_fill(Tensor([28225, 60, 30],"int32"), Tensor([28225, 60, 30],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([28225, 60, 30],"int32"), Tensor([28225, 60, 30],"bool"), 0, ) 	 101610000 	 1000 	 0.3768455982208252 	 0.6506204605102539 	 0.09629368782043457 	 0.22147727012634277 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:46.118247 test begin: paddle.masked_fill(Tensor([30, 56449, 30],"int32"), Tensor([30, 56449, 30],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([30, 56449, 30],"int32"), Tensor([30, 56449, 30],"bool"), 0, ) 	 101608200 	 1000 	 0.37671923637390137 	 0.650719165802002 	 0.09627842903137207 	 0.2215728759765625 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:49.247286 test begin: paddle.masked_fill(Tensor([30, 60, 28225],"int32"), Tensor([30, 60, 28225],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([30, 60, 28225],"int32"), Tensor([30, 60, 28225],"bool"), 0, ) 	 101610000 	 1000 	 0.38301777839660645 	 0.6506028175354004 	 0.09628582000732422 	 0.22150516510009766 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:52.337862 test begin: paddle.masked_fill(Tensor([42337, 60, 20],"int32"), Tensor([42337, 60, 20],"bool"), 0, )
[Prof] paddle.masked_fill 	 paddle.masked_fill(Tensor([42337, 60, 20],"int32"), Tensor([42337, 60, 20],"bool"), 0, ) 	 101608800 	 1000 	 0.37668633460998535 	 0.6510858535766602 	 0.09627795219421387 	 0.22167730331420898 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:18:55.427754 test begin: paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([169345, 300],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([169345, 300],"float32"), ) 	 50839620 	 1000 	 0.4635000228881836 	 0.03557395935058594 	 3.147125244140625e-05 	 4.792213439941406e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:18:57.039588 test begin: paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 169345],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 169345],"float32"), ) 	 50839620 	 1000 	 0.46304750442504883 	 0.03570961952209473 	 1.6927719116210938e-05 	 3.9577484130859375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:18:58.529171 test begin: paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([169345, 300],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([169345, 300],"float32"), ) 	 50815540 	 1000 	 0.4342625141143799 	 0.044753074645996094 	 3.218650817871094e-05 	 6.008148193359375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:18:59.961679 test begin: paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 169345],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 169345],"float32"), ) 	 50815540 	 1000 	 0.44555044174194336 	 0.044618844985961914 	 1.7881393432617188e-05 	 4.482269287109375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:01.385417 test begin: paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([169345, 300],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([169345, 300],"float32"), ) 	 50819052 	 1000 	 0.43889355659484863 	 0.035175323486328125 	 1.7881393432617188e-05 	 4.1961669921875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:02.802778 test begin: paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 169345],"float32"), )
[Prof] paddle.masked_scatter 	 paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 169345],"float32"), ) 	 50819052 	 1000 	 0.4376680850982666 	 0.03554034233093262 	 1.6450881958007812e-05 	 5.841255187988281e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:04.318341 test begin: paddle.masked_select(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"bool"), ) 	 101802624 	 1000 	 1.3701159954071045 	 3.124096632003784 	 0.0008466243743896484 	 0.0030040740966796875 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:12.536804 test begin: paddle.masked_select(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"bool"), ) 	 101669568 	 1000 	 1.3778233528137207 	 3.1175951957702637 	 0.0008575916290283203 	 0.0030155181884765625 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:20.658704 test begin: paddle.masked_select(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"bool"), ) 	 101799936 	 1000 	 1.3789522647857666 	 3.1216652393341064 	 0.0008585453033447266 	 0.0030205249786376953 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:28.796698 test begin: paddle.masked_select(Tensor([16, 46695, 68],"float32"), Tensor([16, 46695, 68],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([16, 46695, 68],"float32"), Tensor([16, 46695, 68],"bool"), ) 	 101608320 	 1000 	 1.3684940338134766 	 3.1239020824432373 	 0.0008518695831298828 	 0.003003835678100586 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:41.094731 test begin: paddle.masked_select(Tensor([62, 12096, 68],"float32"), Tensor([62, 12096, 68],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([62, 12096, 68],"float32"), Tensor([62, 12096, 68],"bool"), ) 	 101993472 	 1000 	 1.370903491973877 	 3.1316230297088623 	 0.0008604526519775391 	 0.0030198097229003906 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:49.234629 test begin: paddle.masked_select(Tensor([68, 11109, 68],"float32"), Tensor([68, 11109, 68],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([68, 11109, 68],"float32"), Tensor([68, 11109, 68],"bool"), ) 	 102736032 	 1000 	 1.3814074993133545 	 3.1751322746276855 	 0.0008606910705566406 	 0.0030744075775146484 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:19:57.487023 test begin: paddle.masked_select(Tensor([74, 10164, 68],"float32"), Tensor([74, 10164, 68],"bool"), )
[Prof] paddle.masked_select 	 paddle.masked_select(Tensor([74, 10164, 68],"float32"), Tensor([74, 10164, 68],"bool"), ) 	 102290496 	 1000 	 1.3839020729064941 	 3.1353647708892822 	 0.0008642673492431641 	 0.0030150413513183594 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:20:05.805820 test begin: paddle.matmul(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), ) 	 67633152 	 1000 	 1.6395056247711182 	 1.6409428119659424 	 1.626922845840454 	 1.616584062576294 	 1.828000783920288 	 1.8279731273651123 	 0.9340338706970215 	 0.9340004920959473 	 
2025-07-27 19:20:13.926993 test begin: paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), ) 	 553648128 	 1000 	 8.164111614227295 	 8.162471294403076 	 8.15077805519104 	 8.13959264755249 	 16.326382875442505 	 16.322199821472168 	 8.342177152633667 	 8.339929342269897 	 
2025-07-27 19:21:12.209983 test begin: paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 388],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 388],"float32"), ) 	 587726848 	 1000 	 30.982452392578125 	 30.98512887954712 	 30.96984624862671 	 30.9517502784729 	 54.97549033164978 	 54.97481822967529 	 28.091944932937622 	 28.09277081489563 	 
2025-07-27 19:24:15.945514 test begin: paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), ) 	 603979776 	 1000 	 31.1141300201416 	 43.33789372444153 	 0.00019598007202148438 	 8.874802827835083 	 71.46006083488464 	 80.78135347366333 	 0.0077440738677978516 	 13.742069482803345 	 
2025-07-27 19:28:19.078574 test begin: paddle.matmul(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 128],"float32"), ) 	 69206016 	 1000 	 1.6399509906768799 	 1.6400220394134521 	 1.6272132396697998 	 1.6068973541259766 	 2.6653988361358643 	 2.6653554439544678 	 1.361931562423706 	 1.3618884086608887 	 
2025-07-27 19:28:28.884529 test begin: paddle.matmul(Tensor([1, 97, 4096, 4096],"float32"), Tensor([1, 97, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1, 97, 4096, 4096],"float32"), Tensor([1, 97, 4096, 128],"float32"), ) 	 1678245888 	 1000 	 23.6493136882782 	 23.65003800392151 	 23.636732816696167 	 23.626761436462402 	 48.33576846122742 	 48.366124868392944 	 24.69908332824707 	 24.730748891830444 	 
2025-07-27 19:31:32.220487 test begin: paddle.matmul(Tensor([10, 23, 499, 3600],"float32"), Tensor([10, 23, 3600, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 23, 499, 3600],"float32"), Tensor([10, 23, 3600, 64],"float32"), ) 	 466164000 	 1000 	 6.456920146942139 	 6.457141160964966 	 6.4442548751831055 	 6.433762788772583 	 9.862394094467163 	 9.861287355422974 	 5.039619445800781 	 5.038813829421997 	 
2025-07-27 19:32:13.242665 test begin: paddle.matmul(Tensor([10, 3, 499, 3600],"float32"), Tensor([10, 3, 3600, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 3, 499, 3600],"float32"), Tensor([10, 3, 3600, 64],"float32"), ) 	 60804000 	 1000 	 1.441805362701416 	 1.4419865608215332 	 1.4292926788330078 	 1.4191689491271973 	 1.3911352157592773 	 1.3912608623504639 	 0.7107799053192139 	 0.7108910083770752 	 
2025-07-27 19:32:19.846349 test begin: paddle.matmul(Tensor([10, 8, 177, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 8, 177, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), ) 	 69408000 	 1000 	 1.4415066242218018 	 1.44163179397583 	 1.4290995597839355 	 1.4186749458312988 	 1.471858024597168 	 1.4716567993164062 	 0.7520580291748047 	 0.7518801689147949 	 
2025-07-27 19:32:26.805788 test begin: paddle.matmul(Tensor([10, 8, 499, 1273],"float32"), Tensor([10, 8, 1273, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 8, 499, 1273],"float32"), Tensor([10, 8, 1273, 64],"float32"), ) 	 57335920 	 1000 	 0.7771806716918945 	 0.7780919075012207 	 0.7642116546630859 	 0.7538347244262695 	 1.2587764263153076 	 1.2587437629699707 	 0.6431469917297363 	 0.6431088447570801 	 
2025-07-27 19:32:31.806628 test begin: paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 177],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 177],"float32"), ) 	 194688000 	 1000 	 4.308263063430786 	 4.308727979660034 	 4.295939683914185 	 4.28538179397583 	 7.622285842895508 	 7.62827467918396 	 3.894880533218384 	 3.897916078567505 	 
2025-07-27 19:32:58.961174 test begin: paddle.matmul(Tensor([10, 8, 499, 9923],"float32"), Tensor([10, 8, 9923, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([10, 8, 499, 9923],"float32"), Tensor([10, 8, 9923, 64],"float32"), ) 	 446931920 	 1000 	 5.934399366378784 	 5.9345598220825195 	 5.921883821487427 	 5.9115891456604 	 9.24772596359253 	 9.248063087463379 	 4.725491285324097 	 4.725620985031128 	 
2025-07-27 19:33:37.326461 test begin: paddle.matmul(Tensor([1379, 4, 256, 256],"float32"), Tensor([1379, 4, 256, 36],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([1379, 4, 256, 256],"float32"), Tensor([1379, 4, 256, 36],"float32"), ) 	 412332032 	 1000 	 5.31792950630188 	 5.30180811882019 	 5.3051676750183105 	 5.278742790222168 	 7.245663642883301 	 7.235603094100952 	 3.702573776245117 	 3.6974425315856934 	 
2025-07-27 19:34:09.962207 test begin: paddle.matmul(Tensor([194, 4, 256, 256],"float32"), Tensor([194, 4, 256, 36],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([194, 4, 256, 256],"float32"), Tensor([194, 4, 256, 36],"float32"), ) 	 58007552 	 1000 	 0.7879617214202881 	 0.7880246639251709 	 0.775562047958374 	 0.7650430202484131 	 1.0711302757263184 	 1.0696420669555664 	 0.547266960144043 	 0.5464706420898438 	 
2025-07-27 19:34:14.712722 test begin: paddle.matmul(Tensor([28, 8, 499, 3600],"float32"), Tensor([28, 8, 3600, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([28, 8, 499, 3600],"float32"), Tensor([28, 8, 3600, 64],"float32"), ) 	 454003200 	 1000 	 6.456912279129028 	 6.464417219161987 	 6.444430112838745 	 6.430521249771118 	 9.61684513092041 	 9.614274501800537 	 4.9140849113464355 	 4.9129791259765625 	 
2025-07-27 19:34:56.950562 test begin: paddle.matmul(Tensor([4, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([4, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), ) 	 2214592512 	 1000 	 30.994518518447876 	 30.987531900405884 	 30.98176646232605 	 30.96425747871399 	 63.55958914756775 	 63.5596706867218 	 32.47698974609375 	 32.47876739501953 	 
2025-07-27 19:38:44.726633 test begin: paddle.matmul(Tensor([4, 8, 499, 3600],"float32"), Tensor([4, 8, 3600, 64],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([4, 8, 499, 3600],"float32"), Tensor([4, 8, 3600, 64],"float32"), ) 	 64857600 	 1000 	 1.442033290863037 	 1.4422357082366943 	 1.4297468662261963 	 1.4180943965911865 	 1.4309470653533936 	 1.431194543838501 	 0.7311363220214844 	 0.7312028408050537 	 
2025-07-27 19:38:51.563830 test begin: paddle.matmul(Tensor([512, 11, 256, 256],"float32"), Tensor([512, 11, 256, 36],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([512, 11, 256, 256],"float32"), Tensor([512, 11, 256, 36],"float32"), ) 	 421003264 	 1000 	 5.4503493309021 	 5.450590372085571 	 5.437768459320068 	 5.427504777908325 	 7.426689863204956 	 7.426387071609497 	 3.7949514389038086 	 3.7947137355804443 	 
2025-07-27 19:39:25.053178 test begin: paddle.matmul(Tensor([512, 2, 256, 256],"float32"), Tensor([512, 2, 256, 36],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([512, 2, 256, 256],"float32"), Tensor([512, 2, 256, 36],"float32"), ) 	 76546048 	 1000 	 0.997612714767456 	 0.9977798461914062 	 0.9842343330383301 	 0.9751734733581543 	 1.3633942604064941 	 1.3631632328033447 	 0.6966228485107422 	 0.6964671611785889 	 
2025-07-27 19:39:31.072749 test begin: paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 97],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 97],"float32"), ) 	 185073664 	 1000 	 1.996788501739502 	 1.998115062713623 	 1.9844377040863037 	 1.972316026687622 	 3.6864867210388184 	 3.6863763332366943 	 1.8836331367492676 	 1.8836236000061035 	 
2025-07-27 19:39:47.281688 test begin: paddle.matmul(Tensor([512, 4, 97, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), )
[Prof] paddle.matmul 	 paddle.matmul(Tensor([512, 4, 97, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), ) 	 69730304 	 1000 	 0.9944102764129639 	 0.9944937229156494 	 0.9805481433868408 	 0.9718317985534668 	 1.2193713188171387 	 1.2192420959472656 	 0.6229798793792725 	 0.6228997707366943 	 
2025-07-27 19:39:52.890904 test begin: paddle.matrix_transpose(Tensor([2, 12700801, 4],"float16"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 12700801, 4],"float16"), ) 	 101606408 	 1000 	 0.004353761672973633 	 0.003870725631713867 	 8.106231689453125e-06 	 1.8596649169921875e-05 	 0.039943695068359375 	 0.06235766410827637 	 2.574920654296875e-05 	 4.9591064453125e-05 	 combined
2025-07-27 19:39:56.638413 test begin: paddle.matrix_transpose(Tensor([2, 3, 16934401],"float16"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 3, 16934401],"float16"), ) 	 101606406 	 1000 	 0.004302501678466797 	 0.0038137435913085938 	 7.62939453125e-06 	 1.8358230590820312e-05 	 0.041412353515625 	 0.06987667083740234 	 2.8133392333984375e-05 	 6.699562072753906e-05 	 combined
2025-07-27 19:40:00.435908 test begin: paddle.matrix_transpose(Tensor([2, 3, 4233601],"float64"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 3, 4233601],"float64"), ) 	 25401606 	 1000 	 0.004293203353881836 	 0.0038678646087646484 	 6.9141387939453125e-06 	 2.1696090698242188e-05 	 0.04007840156555176 	 0.0582730770111084 	 2.4080276489257812e-05 	 8.821487426757812e-05 	 combined
2025-07-27 19:40:01.485970 test begin: paddle.matrix_transpose(Tensor([2, 3, 8467201],"float32"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 3, 8467201],"float32"), ) 	 50803206 	 1000 	 0.004301786422729492 	 0.004567146301269531 	 1.049041748046875e-05 	 4.220008850097656e-05 	 0.0402066707611084 	 0.05941319465637207 	 2.2172927856445312e-05 	 6.699562072753906e-05 	 combined
2025-07-27 19:40:03.135271 test begin: paddle.matrix_transpose(Tensor([2, 3175201, 4],"float64"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 3175201, 4],"float64"), ) 	 25401608 	 1000 	 0.004286527633666992 	 0.003856658935546875 	 1.1205673217773438e-05 	 1.7404556274414062e-05 	 0.04011845588684082 	 0.05872631072998047 	 1.8358230590820312e-05 	 5.6743621826171875e-05 	 combined
2025-07-27 19:40:04.196934 test begin: paddle.matrix_transpose(Tensor([2, 6350401, 4],"float32"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2, 6350401, 4],"float32"), ) 	 50803208 	 1000 	 0.004386186599731445 	 0.003964662551879883 	 1.6450881958007812e-05 	 2.1457672119140625e-05 	 0.04033994674682617 	 0.05779290199279785 	 2.5272369384765625e-05 	 5.7220458984375e-05 	 combined
2025-07-27 19:40:05.875311 test begin: paddle.matrix_transpose(Tensor([2116801, 3, 4],"float64"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([2116801, 3, 4],"float64"), ) 	 25401612 	 1000 	 0.0044515132904052734 	 0.003876924514770508 	 2.288818359375e-05 	 3.6716461181640625e-05 	 0.040628671646118164 	 0.060863494873046875 	 1.6689300537109375e-05 	 4.38690185546875e-05 	 combined
2025-07-27 19:40:06.932095 test begin: paddle.matrix_transpose(Tensor([4233601, 3, 4],"float32"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([4233601, 3, 4],"float32"), ) 	 50803212 	 1000 	 0.004274129867553711 	 0.003844738006591797 	 9.298324584960938e-06 	 1.71661376953125e-05 	 0.04082679748535156 	 0.05730152130126953 	 2.6464462280273438e-05 	 3.62396240234375e-05 	 combined
2025-07-27 19:40:08.564473 test begin: paddle.matrix_transpose(Tensor([8467201, 3, 4],"float16"), )
[Prof] paddle.matrix_transpose 	 paddle.matrix_transpose(Tensor([8467201, 3, 4],"float16"), ) 	 101606412 	 1000 	 0.004365444183349609 	 0.0040056705474853516 	 1.0728836059570312e-05 	 3.361701965332031e-05 	 0.04029488563537598 	 0.05784130096435547 	 3.0279159545898438e-05 	 5.8650970458984375e-05 	 combined
2025-07-27 19:40:12.416542 test begin: paddle.max(Tensor([416, 50, 10, 256],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([416, 50, 10, 256],"float32"), axis=1, ) 	 53248000 	 1000 	 0.19555020332336426 	 0.16030311584472656 	 0.1840066909790039 	 0.14544034004211426 	 1.1359381675720215 	 1.3916962146759033 	 0.2902982234954834 	 0.28423428535461426 	 
2025-07-27 19:40:16.163135 test begin: paddle.max(Tensor([416, 50, 7, 349],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([416, 50, 7, 349],"float32"), axis=1, ) 	 50814400 	 1000 	 0.19624781608581543 	 0.16246628761291504 	 0.18483924865722656 	 0.14766812324523926 	 1.1087086200714111 	 1.3333091735839844 	 0.2833442687988281 	 0.27237606048583984 	 
2025-07-27 19:40:19.742110 test begin: paddle.max(Tensor([416, 69, 7, 256],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([416, 69, 7, 256],"float32"), axis=1, ) 	 51437568 	 1000 	 0.19337916374206543 	 0.15474390983581543 	 0.18190288543701172 	 0.14008712768554688 	 1.0936620235443115 	 1.33723783493042 	 0.2794640064239502 	 0.2730581760406494 	 
2025-07-27 19:40:25.230460 test begin: paddle.max(Tensor([49, 1024, 1024],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.max 	 paddle.max(Tensor([49, 1024, 1024],"float32"), axis=-1, keepdim=True, ) 	 51380224 	 1000 	 0.15534210205078125 	 0.14930009841918945 	 0.14174985885620117 	 0.1356043815612793 	 1.05726957321167 	 1.2877466678619385 	 0.27016758918762207 	 0.2629976272583008 	 
2025-07-27 19:40:28.718973 test begin: paddle.max(Tensor([512, 50, 7, 284],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([512, 50, 7, 284],"float32"), axis=1, ) 	 50892800 	 1000 	 0.20346474647521973 	 0.1554584503173828 	 0.1918172836303711 	 0.14055633544921875 	 1.11545991897583 	 1.3345894813537598 	 0.28501129150390625 	 0.27262234687805176 	 
2025-07-27 19:40:32.313874 test begin: paddle.max(Tensor([512, 50, 8, 256],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([512, 50, 8, 256],"float32"), axis=1, ) 	 52428800 	 1000 	 0.19327282905578613 	 0.15706634521484375 	 0.18175458908081055 	 0.14221811294555664 	 1.1215887069702148 	 1.3712282180786133 	 0.28661012649536133 	 0.2800867557525635 	 
2025-07-27 19:40:37.557566 test begin: paddle.max(Tensor([512, 56, 7, 256],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([512, 56, 7, 256],"float32"), axis=1, ) 	 51380224 	 1000 	 0.19470524787902832 	 0.15401601791381836 	 0.17469573020935059 	 0.13202190399169922 	 1.0948734283447266 	 1.3389952182769775 	 0.27977585792541504 	 0.27347660064697266 	 
2025-07-27 19:40:42.135212 test begin: paddle.max(Tensor([568, 50, 7, 256],"float32"), axis=1, )
[Prof] paddle.max 	 paddle.max(Tensor([568, 50, 7, 256],"float32"), axis=1, ) 	 50892800 	 1000 	 0.18960905075073242 	 0.15338683128356934 	 0.1779625415802002 	 0.1385033130645752 	 1.0925683975219727 	 1.330061674118042 	 0.2791869640350342 	 0.2716941833496094 	 
2025-07-27 19:40:45.748414 test begin: paddle.max(Tensor([8, 1024, 6202],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.max 	 paddle.max(Tensor([8, 1024, 6202],"float32"), axis=-1, keepdim=True, ) 	 50806784 	 1000 	 0.15178298950195312 	 0.16349005699157715 	 0.1395876407623291 	 0.14983773231506348 	 1.0484585762023926 	 1.2920167446136475 	 0.26792216300964355 	 0.26392149925231934 	 
2025-07-27 19:40:49.189485 test begin: paddle.max(Tensor([8, 6202, 1024],"float32"), axis=-1, keepdim=True, )
[Prof] paddle.max 	 paddle.max(Tensor([8, 6202, 1024],"float32"), axis=-1, keepdim=True, ) 	 50806784 	 1000 	 0.1537766456604004 	 0.14777755737304688 	 0.1414170265197754 	 0.13396906852722168 	 1.0457170009613037 	 1.2738492488861084 	 0.26721954345703125 	 0.26017117500305176 	 
2025-07-27 19:40:52.600622 test begin: paddle.maximum(Tensor([11585, 4386],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([11585, 4386],"float32"), Tensor([1],"float32"), ) 	 50811811 	 1000 	 0.29653358459472656 	 0.30452942848205566 	 0.2863748073577881 	 0.29236268997192383 	 0.7401633262634277 	 3.303865909576416 	 0.2517130374908447 	 0.2809774875640869 	 
2025-07-27 19:40:58.984751 test begin: paddle.maximum(Tensor([120961, 420],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([120961, 420],"float32"), Tensor([1],"float32"), ) 	 50803621 	 1000 	 0.2964932918548584 	 0.30443382263183594 	 0.28618669509887695 	 0.2926299571990967 	 0.7399308681488037 	 3.3031415939331055 	 0.25173330307006836 	 0.2809183597564697 	 
2025-07-27 19:41:05.226860 test begin: paddle.maximum(Tensor([121539, 418],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([121539, 418],"float32"), Tensor([1],"float32"), ) 	 50803303 	 1000 	 0.2964749336242676 	 0.3100311756134033 	 0.28607869148254395 	 0.29239416122436523 	 0.7401449680328369 	 3.298996925354004 	 0.2517576217651367 	 0.28058314323425293 	 
2025-07-27 19:41:12.316662 test begin: paddle.maximum(Tensor([14877, 3415],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([14877, 3415],"float32"), Tensor([1],"float32"), ) 	 50804956 	 1000 	 0.29669809341430664 	 0.306743860244751 	 0.286419153213501 	 0.2909252643585205 	 0.7402617931365967 	 3.296536922454834 	 0.2517988681793213 	 0.2803318500518799 	 
2025-07-27 19:41:18.552869 test begin: paddle.maximum(Tensor([16121, 3152],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([16121, 3152],"float32"), Tensor([1],"float32"), ) 	 50813393 	 1000 	 0.2967226505279541 	 0.3044867515563965 	 0.286027193069458 	 0.2926051616668701 	 0.7404029369354248 	 3.2985520362854004 	 0.2518610954284668 	 0.2805359363555908 	 
2025-07-27 19:41:24.792193 test begin: paddle.maximum(Tensor([62643, 811],"float32"), Tensor([1],"float32"), )
[Prof] paddle.maximum 	 paddle.maximum(Tensor([62643, 811],"float32"), Tensor([1],"float32"), ) 	 50803474 	 1000 	 0.29648327827453613 	 0.3179910182952881 	 0.28615784645080566 	 0.29224061965942383 	 0.7403464317321777 	 3.3019626140594482 	 0.2518477439880371 	 0.2808678150177002 	 
2025-07-27 19:41:31.997429 test begin: paddle.mean(Tensor([7573, 11, 1280],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([7573, 11, 1280],"bfloat16"), axis=1, ) 	 106627840 	 1000 	 0.20994162559509277 	 0.19638586044311523 	 0.19826507568359375 	 0.1811845302581787 	 0.34751296043395996 	 0.44952821731567383 	 0.2836949825286865 	 0.22964000701904297 	 
2025-07-27 19:41:34.996949 test begin: paddle.mean(Tensor([7573, 8, 1678],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([7573, 8, 1678],"bfloat16"), axis=1, ) 	 101659952 	 1000 	 0.1851205825805664 	 0.1868116855621338 	 0.1735374927520752 	 0.16726350784301758 	 0.349562406539917 	 0.4427821636199951 	 0.2882258892059326 	 0.22618484497070312 	 
2025-07-27 19:41:40.428369 test begin: paddle.mean(Tensor([7710, 11, 1280],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([7710, 11, 1280],"bfloat16"), axis=1, ) 	 108556800 	 1000 	 0.21396660804748535 	 0.19931483268737793 	 0.20234036445617676 	 0.18400120735168457 	 0.3528716564178467 	 0.4578993320465088 	 0.2915151119232178 	 0.23389601707458496 	 
2025-07-27 19:41:43.485668 test begin: paddle.mean(Tensor([7710, 8, 1648],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([7710, 8, 1648],"bfloat16"), axis=1, ) 	 101648640 	 1000 	 0.18547987937927246 	 0.17854070663452148 	 0.17394399642944336 	 0.16332387924194336 	 0.34972167015075684 	 0.44513368606567383 	 0.28810882568359375 	 0.2273695468902588 	 
2025-07-27 19:41:46.356578 test begin: paddle.mean(Tensor([8162, 10, 1280],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([8162, 10, 1280],"bfloat16"), axis=1, ) 	 104473600 	 1000 	 0.2042689323425293 	 0.19170618057250977 	 0.19254040718078613 	 0.17698311805725098 	 0.3450350761413574 	 0.44729185104370117 	 0.28380680084228516 	 0.22850441932678223 	 
2025-07-27 19:41:49.261862 test begin: paddle.mean(Tensor([8162, 8, 1557],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([8162, 8, 1557],"bfloat16"), axis=1, ) 	 101665872 	 1000 	 0.18528079986572266 	 0.2154703140258789 	 0.1737043857574463 	 0.20056867599487305 	 0.3497314453125 	 0.46002674102783203 	 0.283505916595459 	 0.23501801490783691 	 
2025-07-27 19:41:52.226426 test begin: paddle.mean(Tensor([9923, 8, 1280],"bfloat16"), axis=1, )
[Prof] paddle.mean 	 paddle.mean(Tensor([9923, 8, 1280],"bfloat16"), axis=1, ) 	 101611520 	 1000 	 0.18229389190673828 	 0.1763134002685547 	 0.1705920696258545 	 0.1612555980682373 	 0.35077357292175293 	 0.45224785804748535 	 0.2895939350128174 	 0.23104119300842285 	 
2025-07-27 19:41:55.106432 test begin: paddle.median(Tensor([2, 254016],"float32"), axis=1, mode="min", )
[Prof] paddle.median 	 paddle.median(Tensor([2, 254016],"float32"), axis=1, mode="min", ) 	 508032 	 1000 	 9.596986293792725 	 1.1831369400024414 	 0.19406938552856445 	 1.1646971702575684 	 None 	 None 	 None 	 None 	 combined
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:06.269748 test begin: paddle.median(Tensor([254016],"int64"), )
W0727 19:42:11.986732   786 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.median 	 paddle.median(Tensor([254016],"int64"), ) 	 254016 	 1000 	 5.706514120101929 	 0.17456459999084473 	 0.24065160751342773 	 0.00709843635559082 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:12.198350 test begin: paddle.median(Tensor([5080, 100],"float32"), axis=1, mode="min", )
[Prof] paddle.median 	 paddle.median(Tensor([5080, 100],"float32"), axis=1, mode="min", ) 	 508000 	 1000 	 2.6919000148773193 	 0.04315328598022461 	 0.0699622631072998 	 0.02453899383544922 	 None 	 None 	 None 	 None 	 combined
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:42:15.156952 test begin: paddle.median(Tensor([508032],"float32"), )
[Prof] paddle.median 	 paddle.median(Tensor([508032],"float32"), ) 	 508032 	 1000 	 6.821068048477173 	 0.15977835655212402 	 0.38519859313964844 	 0.009570837020874023 	 0.5090992450714111 	 0.16098785400390625 	 0.04361748695373535 	 4.863739013671875e-05 	 combined
2025-07-27 19:42:22.840038 test begin: paddle.min(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.min 	 paddle.min(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402502 	 1000 	 0.32303524017333984 	 0.17537927627563477 	 0.0002300739288330078 	 0.08958220481872559 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:24.981843 test begin: paddle.min(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.min 	 paddle.min(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402502 	 1000 	 0.330780029296875 	 0.15425968170166016 	 0.00024056434631347656 	 0.07883214950561523 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:27.097757 test begin: paddle.min(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.min 	 paddle.min(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), ) 	 25402412 	 1000 	 1.181072473526001 	 0.1609945297241211 	 0.001149892807006836 	 0.08231353759765625 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:30.600612 test begin: paddle.min(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.min 	 paddle.min(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402412 	 1000 	 0.33324193954467773 	 0.18169498443603516 	 0.0002434253692626953 	 0.09281158447265625 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:34.445223 test begin: paddle.min(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.min 	 paddle.min(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), ) 	 25402052 	 1000 	 0.2039482593536377 	 0.15413832664489746 	 0.00017642974853515625 	 0.13870000839233398 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:37.628344 test begin: paddle.min(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), )
[Prof] paddle.min 	 paddle.min(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), ) 	 25402052 	 1000 	 0.2025759220123291 	 0.1701641082763672 	 0.00017070770263671875 	 0.08691525459289551 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:40.703119 test begin: paddle.min(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.min 	 paddle.min(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402412 	 1000 	 0.3236255645751953 	 0.17616629600524902 	 0.0002346038818359375 	 0.08995866775512695 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:42.845797 test begin: paddle.min(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.min 	 paddle.min(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), ) 	 25402007 	 1000 	 0.3729727268218994 	 0.16899442672729492 	 0.00033974647521972656 	 0.15053248405456543 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:45.041477 test begin: paddle.min(Tensor([64, 1, 28, 28351],"float32"), )
[Prof] paddle.min 	 paddle.min(Tensor([64, 1, 28, 28351],"float32"), ) 	 50804992 	 1000 	 0.1519758701324463 	 0.15273499488830566 	 0.07763218879699707 	 0.0780019760131836 	 1.0440380573272705 	 1.2476060390472412 	 0.21358442306518555 	 0.21239066123962402 	 
2025-07-27 19:42:48.427633 test begin: paddle.min(Tensor([64, 1, 28351, 28],"float32"), )
[Prof] paddle.min 	 paddle.min(Tensor([64, 1, 28351, 28],"float32"), ) 	 50804992 	 1000 	 0.1519792079925537 	 0.15274667739868164 	 0.07764101028442383 	 0.07801938056945801 	 1.0440342426300049 	 1.2475249767303467 	 0.21354079246520996 	 0.21237397193908691 	 
2025-07-27 19:42:51.803551 test begin: paddle.min(Tensor([64, 1013, 28, 28],"float32"), )
[Prof] paddle.min 	 paddle.min(Tensor([64, 1013, 28, 28],"float32"), ) 	 50828288 	 1000 	 0.1520524024963379 	 0.15275096893310547 	 0.0776679515838623 	 0.07807040214538574 	 1.044302225112915 	 1.248072862625122 	 0.21360111236572266 	 0.2124347686767578 	 
2025-07-27 19:42:55.175488 test begin: paddle.min(Tensor([64801, 1, 28, 28],"float32"), )
[Prof] paddle.min 	 paddle.min(Tensor([64801, 1, 28, 28],"float32"), ) 	 50803984 	 1000 	 0.15195083618164062 	 0.15267705917358398 	 0.07760810852050781 	 0.07800650596618652 	 1.0445761680603027 	 1.2475974559783936 	 0.21365642547607422 	 0.21241426467895508 	 
2025-07-27 19:42:58.556901 test begin: paddle.minimum(Tensor([13, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([13, 1, 113],"float32"), Tensor([451143, 113],"float32"), ) 	 50980628 	 1000 	 3.787780523300171 	 4.555812358856201 	 3.7764930725097656 	 2.5528461933135986 	 18.991039037704468 	 47.080650091171265 	 4.845709800720215 	 2.181156873703003 	 
2025-07-27 19:44:26.712623 test begin: paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([25401601, 2],"float32"), ) 	 50803228 	 1000 	 3.7730071544647217 	 4.075568437576294 	 3.7620649337768555 	 2.0823419094085693 	 32.4377064704895 	 46.675293922424316 	 8.278213262557983 	 2.1622474193573 	 
2025-07-27 19:46:05.318430 test begin: paddle.minimum(Tensor([16, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([16, 1, 113],"float32"), Tensor([451143, 113],"float32"), ) 	 50980967 	 1000 	 4.659560680389404 	 5.032751083374023 	 4.648756742477417 	 2.571406602859497 	 23.059032440185547 	 57.30738687515259 	 5.883121967315674 	 2.6551589965820312 	 
2025-07-27 19:47:49.458846 test begin: paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([25401601, 2],"float32"), ) 	 50803234 	 1000 	 4.647650957107544 	 5.01216721534729 	 4.631882190704346 	 2.560976266860962 	 38.710097789764404 	 58.64659094810486 	 9.878253936767578 	 2.718242645263672 	 
2025-07-27 19:49:51.638865 test begin: paddle.minimum(Tensor([9, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([9, 1, 113],"float32"), Tensor([451143, 113],"float32"), ) 	 50980176 	 1000 	 2.625087022781372 	 2.8366570472717285 	 2.6134161949157715 	 2.8151705265045166 	 13.388057947158813 	 32.050474405288696 	 3.4161930084228516 	 2.517524003982544 	 
2025-07-27 19:50:52.426529 test begin: paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
[Prof] paddle.minimum 	 paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([25401601, 2],"float32"), ) 	 50803220 	 1000 	 2.6137311458587646 	 2.8176937103271484 	 2.6031200885772705 	 2.80462908744812 	 23.63211226463318 	 31.97365665435791 	 6.031919956207275 	 2.5115325450897217 	 
2025-07-27 19:52:02.005508 test begin: paddle.mm(Tensor([1838, 6, 144, 144],"float32"), Tensor([1838, 6, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([1838, 6, 144, 144],"float32"), Tensor([1838, 6, 144, 32],"float32"), ) 	 279493632 	 1000 	 6.0370728969573975 	 6.032062530517578 	 6.019307613372803 	 6.009009599685669 	 9.453048706054688 	 9.453894853591919 	 4.830434799194336 	 4.830754280090332 	 
2025-07-27 19:52:39.944717 test begin: paddle.mm(Tensor([2048, 2, 144, 144],"float32"), Tensor([2048, 2, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([2048, 2, 144, 144],"float32"), Tensor([2048, 2, 144, 32],"float32"), ) 	 103809024 	 1000 	 2.252882719039917 	 2.253068447113037 	 2.2405216693878174 	 2.2299749851226807 	 3.5299925804138184 	 3.5296733379364014 	 1.8037543296813965 	 1.8034863471984863 	 
2025-07-27 19:52:53.533632 test begin: paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 29],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 29],"float32"), ) 	 306118656 	 1000 	 6.735170602798462 	 6.734843015670776 	 6.722316265106201 	 6.711869716644287 	 10.286763191223145 	 10.360184669494629 	 5.256487607955933 	 5.329907178878784 	 
2025-07-27 19:53:33.889491 test begin: paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), ) 	 311427072 	 1000 	 6.746233701705933 	 6.73615288734436 	 6.722285985946655 	 6.711784601211548 	 10.547459125518799 	 10.548582315444946 	 5.38963508605957 	 5.390145301818848 	 
2025-07-27 19:54:14.470754 test begin: paddle.mm(Tensor([2048, 6, 29, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([2048, 6, 29, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), ) 	 107937792 	 1000 	 3.368640661239624 	 3.368936538696289 	 3.356236696243286 	 3.3461201190948486 	 3.727123737335205 	 3.727334499359131 	 1.9045076370239258 	 1.904484510421753 	 
2025-07-27 19:54:30.636266 test begin: paddle.mm(Tensor([2757, 4, 144, 144],"float32"), Tensor([2757, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([2757, 4, 144, 144],"float32"), Tensor([2757, 4, 144, 32],"float32"), ) 	 279493632 	 1000 	 6.033380746841431 	 6.0382139682769775 	 6.020517587661743 	 6.007471799850464 	 9.455744743347168 	 9.45597505569458 	 4.8320300579071045 	 4.831759214401245 	 
2025-07-27 19:55:08.209523 test begin: paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 1, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 1, 144, 32],"float32"), ) 	 97320960 	 1000 	 2.1148290634155273 	 2.1148550510406494 	 2.102473497390747 	 2.091742753982544 	 3.3132386207580566 	 3.31292986869812 	 1.6928634643554688 	 1.692816972732544 	 
2025-07-27 19:55:20.942518 test begin: paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), ) 	 150405120 	 1000 	 9.486667394638062 	 9.881303787231445 	 9.560585021972656e-05 	 5.044515609741211 	 14.54323410987854 	 14.31259298324585 	 0.0011887550354003906 	 4.871680736541748 	 
2025-07-27 19:56:13.505501 test begin: paddle.mm(Tensor([3840, 3, 144, 144],"float32"), Tensor([3840, 3, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([3840, 3, 144, 144],"float32"), Tensor([3840, 3, 144, 32],"float32"), ) 	 291962880 	 1000 	 6.322016954421997 	 7.29559588432312 	 6.308305025100708 	 6.2911376953125 	 9.89756464958191 	 9.898761749267578 	 5.057585716247559 	 5.057384490966797 	 
2025-07-27 19:56:54.196837 test begin: paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 23],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 23],"float32"), ) 	 369377280 	 1000 	 8.40609335899353 	 8.40714406967163 	 8.393631935119629 	 8.383620500564575 	 11.907991886138916 	 11.906066179275513 	 6.085265159606934 	 6.083338499069214 	 
2025-07-27 19:57:41.697976 test begin: paddle.mm(Tensor([3840, 4, 23, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([3840, 4, 23, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), ) 	 121651200 	 1000 	 4.212969064712524 	 4.212234020233154 	 4.200331211090088 	 4.188940763473511 	 4.209010601043701 	 4.208743095397949 	 2.1507253646850586 	 2.150595188140869 	 
2025-07-27 19:58:02.275793 test begin: paddle.mm(Tensor([409, 6, 144, 144],"float32"), Tensor([409, 6, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([409, 6, 144, 144],"float32"), Tensor([409, 6, 144, 32],"float32"), ) 	 62194176 	 1000 	 1.366575002670288 	 1.3665595054626465 	 1.3542335033416748 	 1.3430626392364502 	 2.1358959674835205 	 2.135878562927246 	 1.0913622379302979 	 1.0913190841674805 	 
2025-07-27 19:58:10.498579 test begin: paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 1, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 1, 144, 32],"float32"), ) 	 103809024 	 1000 	 2.254577398300171 	 2.253314256668091 	 2.240657091140747 	 2.2304317951202393 	 3.5304603576660156 	 3.5303397178649902 	 1.8039946556091309 	 1.8038690090179443 	 
2025-07-27 19:58:24.063946 test begin: paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), ) 	 160432128 	 1000 	 10.098029375076294 	 10.521761894226074 	 4.982948303222656e-05 	 5.376769304275513 	 15.50003433227539 	 15.259994268417358 	 0.0012593269348144531 	 5.194718837738037 	 
2025-07-27 19:59:20.735815 test begin: paddle.mm(Tensor([4096, 3, 144, 144],"float32"), Tensor([4096, 3, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([4096, 3, 144, 144],"float32"), Tensor([4096, 3, 144, 32],"float32"), ) 	 311427072 	 1000 	 6.735669374465942 	 6.737003803253174 	 6.723030090332031 	 6.709667682647705 	 10.549627304077148 	 10.548577308654785 	 5.390747308731079 	 5.390202045440674 	 
2025-07-27 20:00:01.317038 test begin: paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 22],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 22],"float32"), ) 	 391643136 	 1000 	 8.959291219711304 	 8.9606294631958 	 8.94684886932373 	 8.935593366622925 	 12.693331003189087 	 12.69121527671814 	 6.48583722114563 	 6.4847612380981445 	 
2025-07-27 20:00:53.417719 test begin: paddle.mm(Tensor([4096, 4, 22, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([4096, 4, 22, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), ) 	 127401984 	 1000 	 4.488519906997681 	 4.614250183105469 	 4.475811243057251 	 4.591337203979492 	 4.482571363449097 	 4.482682943344116 	 2.290525436401367 	 2.290525197982788 	 
2025-07-27 20:01:14.846757 test begin: paddle.mm(Tensor([613, 4, 144, 144],"float32"), Tensor([613, 4, 144, 32],"float32"), )
[Prof] paddle.mm 	 paddle.mm(Tensor([613, 4, 144, 144],"float32"), Tensor([613, 4, 144, 32],"float32"), ) 	 62143488 	 1000 	 1.3664681911468506 	 1.3689284324645996 	 1.353886365890503 	 1.3421688079833984 	 2.135082960128784 	 2.1354682445526123 	 1.0909137725830078 	 1.091144323348999 	 
2025-07-27 20:01:25.005895 test begin: paddle.mod(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), ) 	 50803220 	 1000 	 0.4480476379394531 	 0.4470961093902588 	 0.43877363204956055 	 0.43572044372558594 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:27.767503 test begin: paddle.mod(Tensor([10, 5080321],"int32"), Tensor([10, 5080321],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([10, 5080321],"int32"), Tensor([10, 5080321],"int32"), ) 	 101606420 	 1000 	 0.45114707946777344 	 0.4496147632598877 	 0.441713809967041 	 0.43802857398986816 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:31.490172 test begin: paddle.mod(Tensor([1270081, 2, 4, 5],"int32"), Tensor([1270081, 2, 4, 5],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([1270081, 2, 4, 5],"int32"), Tensor([1270081, 2, 4, 5],"int32"), ) 	 101606480 	 1000 	 0.45104336738586426 	 0.4495527744293213 	 0.4415779113769531 	 0.43812108039855957 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:37.427010 test begin: paddle.mod(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), ) 	 50804736 	 1000 	 0.45496153831481934 	 0.4664123058319092 	 0.43931078910827637 	 0.4354844093322754 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:41.706126 test begin: paddle.mod(Tensor([2540161, 20],"int32"), Tensor([2540161, 20],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([2540161, 20],"int32"), Tensor([2540161, 20],"int32"), ) 	 101606440 	 1000 	 0.45096826553344727 	 0.4518253803253174 	 0.44147515296936035 	 0.4373962879180908 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:45.395692 test begin: paddle.mod(Tensor([6, 2, 4, 1058401],"int32"), Tensor([6, 2, 4, 1058401],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([6, 2, 4, 1058401],"int32"), Tensor([6, 2, 4, 1058401],"int32"), ) 	 101606496 	 1000 	 0.4511837959289551 	 0.45479345321655273 	 0.43711304664611816 	 0.4380345344543457 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:49.123515 test begin: paddle.mod(Tensor([6, 2, 846721, 5],"int32"), Tensor([6, 2, 846721, 5],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([6, 2, 846721, 5],"int32"), Tensor([6, 2, 846721, 5],"int32"), ) 	 101606520 	 1000 	 0.4513094425201416 	 0.4495663642883301 	 0.4412698745727539 	 0.4382750988006592 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:52.915972 test begin: paddle.mod(Tensor([6, 423361, 4, 5],"int32"), Tensor([6, 423361, 4, 5],"int32"), )
[Prof] paddle.mod 	 paddle.mod(Tensor([6, 423361, 4, 5],"int32"), Tensor([6, 423361, 4, 5],"int32"), ) 	 101606640 	 1000 	 0.45316100120544434 	 0.449751615524292 	 0.4415891170501709 	 0.4340529441833496 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:56.790801 test begin: paddle.mode(Tensor([2, 10, 12],"float64"), -1, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 10, 12],"float64"), -1, ) 	 240 	 1000 	 8.194095373153687 	 0.0190427303314209 	 3.0279159545898438e-05 	 3.170967102050781e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:05.106073 test begin: paddle.mode(Tensor([2, 10, 12],"float64"), -1, keepdim=True, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 10, 12],"float64"), -1, keepdim=True, ) 	 240 	 1000 	 8.140300035476685 	 0.016556739807128906 	 9.250640869140625e-05 	 3.123283386230469e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:13.329761 test begin: paddle.mode(Tensor([2, 10, 12],"float64"), 1, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 10, 12],"float64"), 1, ) 	 240 	 1000 	 9.841936111450195 	 0.03120899200439453 	 7.081031799316406e-05 	 4.553794860839844e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:23.959546 test begin: paddle.mode(Tensor([2, 12, 10],"float64"), -1, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 12, 10],"float64"), -1, ) 	 240 	 1000 	 9.725166320800781 	 0.01876664161682129 	 5.745887756347656e-05 	 2.8371810913085938e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:33.772128 test begin: paddle.mode(Tensor([2, 12, 10],"float64"), -1, keepdim=True, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 12, 10],"float64"), -1, keepdim=True, ) 	 240 	 1000 	 9.761512994766235 	 0.017389535903930664 	 9.34600830078125e-05 	 4.124641418457031e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:43.618992 test begin: paddle.mode(Tensor([2, 12, 10],"float64"), 1, )
[Prof] paddle.mode 	 paddle.mode(Tensor([2, 12, 10],"float64"), 1, ) 	 240 	 1000 	 8.328304052352905 	 0.031041860580444336 	 4.458427429199219e-05 	 3.457069396972656e-05 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:52.055938 test begin: paddle.moveaxis(Tensor([2, 3, 120961, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
[Prof] paddle.moveaxis 	 paddle.moveaxis(Tensor([2, 3, 120961, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], ) 	 25401810 	 1000 	 0.008991241455078125 	 0.005777120590209961 	 8.821487426757812e-06 	 1.7404556274414062e-05 	 0.03981924057006836 	 0.061193227767944336 	 1.9550323486328125e-05 	 5.5789947509765625e-05 	 
2025-07-27 20:02:53.165083 test begin: paddle.moveaxis(Tensor([2, 3, 4, 151201, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
[Prof] paddle.moveaxis 	 paddle.moveaxis(Tensor([2, 3, 4, 151201, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], ) 	 25401768 	 1000 	 0.007973670959472656 	 0.005866289138793945 	 1.2159347534179688e-05 	 1.8596649169921875e-05 	 0.045354604721069336 	 0.058864593505859375 	 2.1696090698242188e-05 	 6.127357482910156e-05 	 
2025-07-27 20:02:54.270933 test begin: paddle.moveaxis(Tensor([2, 3, 4, 5, 211681],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
[Prof] paddle.moveaxis 	 paddle.moveaxis(Tensor([2, 3, 4, 5, 211681],"float64"), list[0,4,3,2,], list[1,3,2,0,], ) 	 25401720 	 1000 	 0.007978439331054688 	 0.005890846252441406 	 7.152557373046875e-06 	 1.6927719116210938e-05 	 0.040236473083496094 	 0.06262612342834473 	 2.956390380859375e-05 	 5.888938903808594e-05 	 
2025-07-27 20:02:55.356780 test begin: paddle.moveaxis(Tensor([2, 90721, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
[Prof] paddle.moveaxis 	 paddle.moveaxis(Tensor([2, 90721, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], ) 	 25401880 	 1000 	 0.008038520812988281 	 0.005952119827270508 	 7.3909759521484375e-06 	 2.5272369384765625e-05 	 0.040291547775268555 	 0.060153961181640625 	 2.5272369384765625e-05 	 4.982948303222656e-05 	 
2025-07-27 20:02:56.441622 test begin: paddle.moveaxis(Tensor([60481, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
[Prof] paddle.moveaxis 	 paddle.moveaxis(Tensor([60481, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], ) 	 25402020 	 1000 	 0.007957220077514648 	 0.005822181701660156 	 7.867813110351562e-06 	 1.7404556274414062e-05 	 0.0397496223449707 	 0.05886673927307129 	 2.8371810913085938e-05 	 4.0531158447265625e-05 	 
2025-07-27 20:02:57.530011 test begin: paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, ) 	 25401810 	 1000 	 0.006891489028930664 	 0.004476070404052734 	 6.4373016357421875e-06 	 1.7642974853515625e-05 	 0.04167914390563965 	 0.05885744094848633 	 2.3126602172851562e-05 	 3.6716461181640625e-05 	 
2025-07-27 20:02:58.600616 test begin: paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401810 	 1000 	 0.007436990737915039 	 0.00574493408203125 	 1.71661376953125e-05 	 1.7404556274414062e-05 	 0.039797067642211914 	 0.0617671012878418 	 1.621246337890625e-05 	 6.461143493652344e-05 	 
2025-07-27 20:02:59.686024 test begin: paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, ) 	 25401768 	 1000 	 0.0068356990814208984 	 0.004532814025878906 	 8.106231689453125e-06 	 2.4080276489257812e-05 	 0.039977073669433594 	 0.060719966888427734 	 2.7179718017578125e-05 	 6.318092346191406e-05 	 
2025-07-27 20:03:00.790453 test begin: paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401768 	 1000 	 0.0075528621673583984 	 0.005929231643676758 	 2.5510787963867188e-05 	 2.0503997802734375e-05 	 0.03981328010559082 	 0.07195019721984863 	 1.7881393432617188e-05 	 5.2928924560546875e-05 	 
2025-07-27 20:03:01.889639 test begin: paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, ) 	 25401720 	 1000 	 0.0069887638092041016 	 0.004396200180053711 	 6.9141387939453125e-06 	 1.7642974853515625e-05 	 0.04001784324645996 	 0.0638730525970459 	 1.7404556274414062e-05 	 6.651878356933594e-05 	 
2025-07-27 20:03:02.972431 test begin: paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401720 	 1000 	 0.0074138641357421875 	 0.005965232849121094 	 1.5974044799804688e-05 	 4.100799560546875e-05 	 0.04063296318054199 	 0.0591130256652832 	 3.2901763916015625e-05 	 4.100799560546875e-05 	 
2025-07-27 20:03:04.071109 test begin: paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, ) 	 25401880 	 1000 	 0.0068662166595458984 	 0.004495859146118164 	 1.0251998901367188e-05 	 1.6689300537109375e-05 	 0.03995227813720703 	 0.06059861183166504 	 2.0265579223632812e-05 	 6.4849853515625e-05 	 
2025-07-27 20:03:05.159985 test begin: paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25401880 	 1000 	 0.007472515106201172 	 0.0057525634765625 	 6.9141387939453125e-06 	 1.71661376953125e-05 	 0.03993082046508789 	 0.06014204025268555 	 3.2901763916015625e-05 	 6.318092346191406e-05 	 
2025-07-27 20:03:06.243151 test begin: paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, ) 	 25402020 	 1000 	 0.006933689117431641 	 0.004445075988769531 	 7.3909759521484375e-06 	 1.8358230590820312e-05 	 0.03978562355041504 	 0.06118440628051758 	 1.8835067749023438e-05 	 0.00013566017150878906 	 
2025-07-27 20:03:07.328071 test begin: paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
[Prof] paddle.moveaxis 	 paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), ) 	 25402020 	 1000 	 0.007384538650512695 	 0.005870819091796875 	 1.3589859008789062e-05 	 1.811981201171875e-05 	 0.0414581298828125 	 0.06081867218017578 	 2.1457672119140625e-05 	 8.988380432128906e-05 	 
2025-07-27 20:03:08.412288 test begin: paddle.multigammaln(Tensor([10, 2540161],"float64"), 2, )
[Prof] paddle.multigammaln 	 paddle.multigammaln(Tensor([10, 2540161],"float64"), 2, ) 	 25401610 	 1000 	 2.951266050338745 	 2.799961805343628 	 0.5015501976013184 	 0.5720615386962891 	 4.014642953872681 	 3.667320489883423 	 1.026973009109497 	 0.749075174331665 	 
2025-07-27 20:03:22.915936 test begin: paddle.multigammaln(Tensor([10, 5080321],"float32"), 2, )
[Prof] paddle.multigammaln 	 paddle.multigammaln(Tensor([10, 5080321],"float32"), 2, ) 	 50803210 	 1000 	 2.3981597423553467 	 2.5934863090515137 	 0.40865230560302734 	 0.5280570983886719 	 3.4529972076416016 	 3.982177257537842 	 0.8832423686981201 	 0.8137569427490234 	 
2025-07-27 20:03:40.240955 test begin: paddle.multigammaln(Tensor([1270081, 20],"float64"), 2, )
[Prof] paddle.multigammaln 	 paddle.multigammaln(Tensor([1270081, 20],"float64"), 2, ) 	 25401620 	 1000 	 2.9530413150787354 	 2.799819231033325 	 0.5014634132385254 	 0.5720164775848389 	 4.016964435577393 	 3.667149066925049 	 1.0274803638458252 	 0.74900221824646 	 
2025-07-27 20:03:54.808856 test begin: paddle.multigammaln(Tensor([2540161, 20],"float32"), 2, )
[Prof] paddle.multigammaln 	 paddle.multigammaln(Tensor([2540161, 20],"float32"), 2, ) 	 50803220 	 1000 	 2.3981125354766846 	 2.5821855068206787 	 0.4086799621582031 	 0.5280301570892334 	 3.4528677463531494 	 3.9840571880340576 	 0.8831784725189209 	 0.8141450881958008 	 
2025-07-27 20:04:08.946308 test begin: paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([127, 1],"int32"), )
[Prof] paddle.multiplex 	 paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([127, 1],"int32"), ) 	 101606535 	 1000 	 0.4923248291015625 	 3.4958057403564453 	 3.838539123535156e-05 	 8.511543273925781e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:15.106215 test begin: paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([6, 1],"int32"), )
[Prof] paddle.multiplex 	 paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([6, 1],"int32"), ) 	 101606414 	 1000 	 0.054231882095336914 	 0.18303775787353516 	 3.457069396972656e-05 	 6.723403930664062e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:17.031221 test begin: paddle.multiplex(inputs=list[Tensor([7, 7257601],"float32"),Tensor([7, 7257601],"float32"),], index=Tensor([6, 1],"int32"), )
[Prof] paddle.multiplex 	 paddle.multiplex(inputs=list[Tensor([7, 7257601],"float32"),Tensor([7, 7257601],"float32"),], index=Tensor([6, 1],"int32"), ) 	 101606420 	 1000 	 0.3325977325439453 	 0.45794081687927246 	 0.0002856254577636719 	 0.0002872943878173828 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:20.688889 test begin: paddle.multiply(Tensor([298, 872, 14, 14],"float32"), Tensor([298, 872, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([298, 872, 14, 14],"float32"), Tensor([298, 872, 1, 1],"float32"), ) 	 51191632 	 1000 	 0.2984180450439453 	 0.30708980560302734 	 0.2827575206756592 	 0.29311609268188477 	 0.8785583972930908 	 0.9119994640350342 	 0.4488804340362549 	 0.31051111221313477 	 
2025-07-27 20:04:24.623760 test begin: paddle.multiply(Tensor([512, 507, 14, 14],"float32"), Tensor([512, 507, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([512, 507, 14, 14],"float32"), Tensor([512, 507, 1, 1],"float32"), ) 	 51138048 	 1000 	 0.2971792221069336 	 0.30680203437805176 	 0.28705883026123047 	 0.2945282459259033 	 0.8766932487487793 	 0.9111752510070801 	 0.4479050636291504 	 0.31017470359802246 	 
2025-07-27 20:04:28.633505 test begin: paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 1],"float32"), ) 	 56700928 	 1000 	 0.328916072845459 	 0.33933281898498535 	 0.3181900978088379 	 0.32706260681152344 	 0.8955078125 	 1.028494119644165 	 0.4575185775756836 	 0.3501758575439453 	 
2025-07-27 20:04:34.473849 test begin: paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 9],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 9],"float32"), ) 	 60272640 	 1000 	 0.5663883686065674 	 0.384319543838501 	 0.32819080352783203 	 0.34200119972229004 	 0.8709557056427002 	 1.0405359268188477 	 0.44495701789855957 	 0.35428857803344727 	 
2025-07-27 20:04:43.876325 test begin: paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 1, 1],"float32"), ) 	 56700928 	 1000 	 0.32832789421081543 	 0.33933377265930176 	 0.3180527687072754 	 0.32709479331970215 	 0.8950796127319336 	 1.0284302234649658 	 0.45729732513427734 	 0.35018110275268555 	 
2025-07-27 20:04:48.155981 test begin: paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 9, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 9, 1],"float32"), ) 	 60272640 	 1000 	 0.341174840927124 	 0.35088467597961426 	 0.3283658027648926 	 0.3383176326751709 	 0.9315218925476074 	 1.1860761642456055 	 0.4759480953216553 	 0.4039304256439209 	 
2025-07-27 20:04:52.739669 test begin: paddle.multiply(x=Tensor([128, 127, 56, 56],"float32"), y=Tensor([128, 127, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 127, 56, 56],"float32"), y=Tensor([128, 127, 1, 1],"float32"), ) 	 50995072 	 1000 	 0.30012035369873047 	 0.30889320373535156 	 0.2862694263458252 	 0.2966299057006836 	 0.7419238090515137 	 0.904644250869751 	 0.37903809547424316 	 0.30797314643859863 	 
2025-07-27 20:04:56.587387 test begin: paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 1, 1],"float32"), ) 	 51408896 	 1000 	 0.29924464225769043 	 0.3130972385406494 	 0.2887279987335205 	 0.30097270011901855 	 0.7455716133117676 	 0.9130599498748779 	 0.380901575088501 	 0.3108639717102051 	 
2025-07-27 20:05:00.455903 test begin: paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 32, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 32, 1],"float32"), ) 	 52297728 	 1000 	 0.3018150329589844 	 0.3122272491455078 	 0.29132652282714844 	 0.29526472091674805 	 0.8598101139068604 	 1.0879623889923096 	 0.4392812252044678 	 0.3705286979675293 	 
2025-07-27 20:05:04.608545 test begin: paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 1],"float32"), ) 	 51408896 	 1000 	 0.29932641983032227 	 0.3130927085876465 	 0.2876017093658447 	 0.30100536346435547 	 0.7455458641052246 	 0.9130980968475342 	 0.38091397285461426 	 0.3108785152435303 	 
2025-07-27 20:05:08.505179 test begin: paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 32],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 32],"float32"), ) 	 52297728 	 1000 	 0.30161523818969727 	 0.31531763076782227 	 0.2910001277923584 	 0.30289268493652344 	 0.7847964763641357 	 0.9186697006225586 	 0.4009432792663574 	 0.31279921531677246 	 
2025-07-27 20:05:12.368202 test begin: paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 1, 1],"float32"), ) 	 51412992 	 1000 	 0.2992873191833496 	 0.31415414810180664 	 0.28815388679504395 	 0.2998509407043457 	 0.7483184337615967 	 0.9137799739837646 	 0.38229942321777344 	 0.3111090660095215 	 
2025-07-27 20:05:16.194388 test begin: paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 28, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 28, 1],"float32"), ) 	 52297728 	 1000 	 0.3028604984283447 	 0.3128244876861572 	 0.2913334369659424 	 0.30009937286376953 	 0.8598053455352783 	 1.088012933731079 	 0.43927001953125 	 0.3705134391784668 	 
2025-07-27 20:05:20.379009 test begin: paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 1],"float32"), ) 	 51412992 	 1000 	 0.29931187629699707 	 0.31343889236450195 	 0.2865157127380371 	 0.2987210750579834 	 0.7484493255615234 	 0.9138600826263428 	 0.38239336013793945 	 0.31123805046081543 	 
2025-07-27 20:05:24.195033 test begin: paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 28],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 28],"float32"), ) 	 52297728 	 1000 	 0.3016684055328369 	 0.32042908668518066 	 0.29106783866882324 	 0.30383825302124023 	 1.0074350833892822 	 0.9233036041259766 	 0.5147058963775635 	 0.31438302993774414 	 
2025-07-27 20:05:28.402556 test begin: paddle.multiply(x=Tensor([64, 256, 56, 56],"float32"), y=Tensor([64, 256, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([64, 256, 56, 56],"float32"), y=Tensor([64, 256, 1, 1],"float32"), ) 	 51396608 	 1000 	 0.29924583435058594 	 0.3112790584564209 	 0.288616418838501 	 0.29897332191467285 	 0.7467129230499268 	 0.9114882946014404 	 0.38152122497558594 	 0.31033897399902344 	 
2025-07-27 20:05:32.267982 test begin: paddle.multiply(x=Tensor([73, 224, 56, 56],"float32"), y=Tensor([73, 224, 1, 1],"float32"), )
[Prof] paddle.multiply 	 paddle.multiply(x=Tensor([73, 224, 56, 56],"float32"), y=Tensor([73, 224, 1, 1],"float32"), ) 	 51296224 	 1000 	 0.2987973690032959 	 0.3106346130371094 	 0.28401732444763184 	 0.2984957695007324 	 0.7453162670135498 	 0.9100470542907715 	 0.38074731826782227 	 0.3098163604736328 	 
2025-07-27 20:05:37.621521 test begin: paddle.mv(Tensor([1411201, 36],"float32"), Tensor([36],"float32"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([1411201, 36],"float32"), Tensor([36],"float32"), ) 	 50803272 	 1000 	 0.1969449520111084 	 0.1934957504272461 	 0.18565940856933594 	 0.1745765209197998 	 0.4956226348876953 	 0.4175262451171875 	 0.16866850852966309 	 0.14217758178710938 	 
2025-07-27 20:05:42.415103 test begin: paddle.mv(Tensor([254017, 100],"float64"), Tensor([100],"float64"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([254017, 100],"float64"), Tensor([100],"float64"), ) 	 25401800 	 1000 	 0.15787148475646973 	 0.15830421447753906 	 0.14693808555603027 	 0.14243316650390625 	 0.33690714836120605 	 0.3298985958099365 	 0.11465716361999512 	 0.1123037338256836 	 
2025-07-27 20:05:45.487689 test begin: paddle.mv(Tensor([3, 16934401],"float32"), Tensor([16934401],"float32"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([3, 16934401],"float32"), Tensor([16934401],"float32"), ) 	 67737604 	 1000 	 0.23547101020812988 	 0.2334451675415039 	 0.1203010082244873 	 0.11923980712890625 	 0.6263084411621094 	 0.6053276062011719 	 0.31996798515319824 	 0.3092074394226074 	 
2025-07-27 20:05:48.311662 test begin: paddle.mv(Tensor([3, 50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([3, 50803201],"float32"), Tensor([50803201],"float32"), ) 	 203212804 	 1000 	 0.6806008815765381 	 0.6761047840118408 	 0.34781360626220703 	 0.34545063972473145 	 1.8521912097930908 	 1.7988946437835693 	 0.9464066028594971 	 0.919165849685669 	 
2025-07-27 20:05:56.514111 test begin: paddle.mv(Tensor([5, 25401601],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([5, 25401601],"float64"), Tensor([25401601],"float64"), ) 	 152409606 	 1000 	 0.953092098236084 	 0.941256046295166 	 0.48703742027282715 	 0.48096728324890137 	 2.401059865951538 	 2.4090707302093506 	 1.2268478870391846 	 1.2309558391571045 	 
2025-07-27 20:06:06.270167 test begin: paddle.mv(Tensor([5, 5080321],"float64"), Tensor([5080321],"float64"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([5, 5080321],"float64"), Tensor([5080321],"float64"), ) 	 30481926 	 1000 	 0.23074674606323242 	 0.22513294219970703 	 0.11776185035705566 	 0.11509990692138672 	 0.4907393455505371 	 0.49280858039855957 	 0.2506999969482422 	 0.25173282623291016 	 
2025-07-27 20:06:08.320671 test begin: paddle.mv(Tensor([64, 396901],"float64"), Tensor([396901],"float64"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([64, 396901],"float64"), Tensor([396901],"float64"), ) 	 25798565 	 1000 	 0.15629029273986816 	 0.15471863746643066 	 0.07966876029968262 	 0.07907223701477051 	 0.3262920379638672 	 0.32976436614990234 	 0.16669583320617676 	 0.16843819618225098 	 
2025-07-27 20:06:09.792819 test begin: paddle.mv(Tensor([793801, 32],"float64"), Tensor([32],"float64"), )
[Prof] paddle.mv 	 paddle.mv(Tensor([793801, 32],"float64"), Tensor([32],"float64"), ) 	 25401664 	 1000 	 0.1725153923034668 	 0.1625077724456787 	 0.15954136848449707 	 0.14349579811096191 	 0.3346271514892578 	 0.3350846767425537 	 0.11393117904663086 	 0.1140446662902832 	 
2025-07-27 20:06:11.302009 test begin: paddle.nan_to_num(Tensor([148, 114422, 3],"float32"), neginf=-1.1920928955078125e-07, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([148, 114422, 3],"float32"), neginf=-1.1920928955078125e-07, ) 	 50803368 	 1000 	 3.0069119930267334 	 0.2979426383972168 	 0.2794651985168457 	 0.28510355949401855 	 1.2533047199249268 	 1.1593914031982422 	 0.4269242286682129 	 0.23694992065429688 	 
2025-07-27 20:06:18.643350 test begin: paddle.nan_to_num(Tensor([148, 5, 68653],"float32"), neginf=-1.1920928955078125e-07, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([148, 5, 68653],"float32"), neginf=-1.1920928955078125e-07, ) 	 50803220 	 1000 	 3.0075249671936035 	 0.29793715476989746 	 0.2795724868774414 	 0.2847743034362793 	 1.253636360168457 	 1.1588850021362305 	 0.42705297470092773 	 0.2368464469909668 	 
2025-07-27 20:06:25.983291 test begin: paddle.nan_to_num(Tensor([1948, 26080],"float32"), neginf=-1.1920928955078125e-07, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([1948, 26080],"float32"), neginf=-1.1920928955078125e-07, ) 	 50803840 	 1000 	 3.006669759750366 	 0.29786109924316406 	 0.2794632911682129 	 0.28487133979797363 	 1.2567260265350342 	 1.158263921737671 	 0.42810821533203125 	 0.23674917221069336 	 
2025-07-27 20:06:33.324854 test begin: paddle.nan_to_num(Tensor([25401601, 1],"float64"), neginf=-2.220446049250313e-16, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([25401601, 1],"float64"), neginf=-2.220446049250313e-16, ) 	 25401601 	 1000 	 2.8823025226593018 	 1.0211806297302246 	 0.2682950496673584 	 0.2863190174102783 	 0.9846832752227783 	 1.0296881198883057 	 0.3354620933532715 	 0.21039938926696777 	 
2025-07-27 20:06:42.190968 test begin: paddle.nan_to_num(Tensor([25401601, 2],"float32"), neginf=-1.1920928955078125e-07, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([25401601, 2],"float32"), neginf=-1.1920928955078125e-07, ) 	 50803202 	 1000 	 3.0081748962402344 	 0.30957913398742676 	 0.2795684337615967 	 0.2848989963531494 	 1.2532637119293213 	 1.1591203212738037 	 0.42693519592285156 	 0.23694467544555664 	 
2025-07-27 20:06:50.514915 test begin: paddle.nan_to_num(Tensor([3386881, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([3386881, 5, 3],"float32"), neginf=-1.1920928955078125e-07, ) 	 50803215 	 1000 	 3.0082738399505615 	 0.2979609966278076 	 0.279787540435791 	 0.28492283821105957 	 1.2532758712768555 	 1.1589980125427246 	 0.42693114280700684 	 0.23686718940734863 	 
2025-07-27 20:06:57.888245 test begin: paddle.nan_to_num(Tensor([400, 63505],"float64"), neginf=-2.220446049250313e-16, )
[Prof] paddle.nan_to_num 	 paddle.nan_to_num(Tensor([400, 63505],"float64"), neginf=-2.220446049250313e-16, ) 	 25402000 	 1000 	 2.8841187953948975 	 0.2991969585418701 	 0.2680368423461914 	 0.2863130569458008 	 0.9840774536132812 	 1.0309834480285645 	 0.33518052101135254 	 0.21070122718811035 	 
2025-07-27 20:07:04.168308 test begin: paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), -1, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), -1, False, ) 	 50803240 	 1000 	 2.483607292175293 	 1.6893515586853027 	 0.25343823432922363 	 0.287794828414917 	 0.7104349136352539 	 0.7391579151153564 	 0.24210500717163086 	 0.1888880729675293 	 
2025-07-27 20:07:10.818148 test begin: paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), 2, True, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), 2, True, ) 	 50803240 	 1000 	 2.8197569847106934 	 1.3773462772369385 	 0.28792500495910645 	 0.23452496528625488 	 0.7384989261627197 	 0.7855210304260254 	 0.25166940689086914 	 0.2007160186767578 	 
2025-07-27 20:07:17.547515 test begin: paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), None, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), None, False, ) 	 50803240 	 1000 	 1.979292631149292 	 1.0996687412261963 	 0.16822218894958496 	 0.14047551155090332 	 0.5607948303222656 	 0.5934169292449951 	 0.19121742248535156 	 0.15169501304626465 	 
2025-07-27 20:07:22.625476 test begin: paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), -1, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), -1, False, ) 	 50803230 	 1000 	 2.483205556869507 	 1.6892521381378174 	 0.2534518241882324 	 0.2877235412597656 	 0.7054386138916016 	 0.7390899658203125 	 0.24043607711791992 	 0.18886113166809082 	 
2025-07-27 20:07:29.190408 test begin: paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), 2, True, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), 2, True, ) 	 50803230 	 1000 	 14.422827243804932 	 1.1320624351501465 	 1.22597336769104 	 0.1446523666381836 	 0.5593745708465576 	 0.6295080184936523 	 0.19073247909545898 	 0.1609172821044922 	 
2025-07-27 20:07:46.818350 test begin: paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), None, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), None, False, ) 	 50803230 	 1000 	 1.9797110557556152 	 1.099679946899414 	 0.1682279109954834 	 0.14051508903503418 	 0.555396556854248 	 0.5934627056121826 	 0.1893301010131836 	 0.15169620513916016 	 
2025-07-27 20:07:53.034854 test begin: paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), -1, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), -1, False, ) 	 50803224 	 1000 	 2.039461374282837 	 1.1000025272369385 	 0.17333507537841797 	 0.14053606986999512 	 0.5564284324645996 	 0.6107902526855469 	 0.1896834373474121 	 0.15613603591918945 	 
2025-07-27 20:08:00.225665 test begin: paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), 2, True, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), 2, True, ) 	 50803224 	 1000 	 2.3289568424224854 	 1.3753268718719482 	 0.23778200149536133 	 0.2342221736907959 	 0.7528595924377441 	 0.7903120517730713 	 0.2565798759460449 	 0.20194387435913086 	 
2025-07-27 20:08:06.459043 test begin: paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), None, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), None, False, ) 	 50803224 	 1000 	 1.9797348976135254 	 1.0998895168304443 	 0.16829562187194824 	 0.14059233665466309 	 0.5552868843078613 	 0.5935156345367432 	 0.18929338455200195 	 0.15170550346374512 	 
2025-07-27 20:08:11.465447 test begin: paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), -1, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), -1, False, ) 	 50803260 	 1000 	 2.482577323913574 	 1.6891083717346191 	 0.25339698791503906 	 0.2876882553100586 	 0.710336446762085 	 0.739189863204956 	 0.2420797348022461 	 0.1888735294342041 	 
2025-07-27 20:08:18.024971 test begin: paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), 2, True, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), 2, True, ) 	 50803260 	 1000 	 2.8195884227752686 	 1.3773694038391113 	 0.2878296375274658 	 0.23450160026550293 	 0.7384696006774902 	 0.7854347229003906 	 0.2516970634460449 	 0.20067620277404785 	 
2025-07-27 20:08:24.953448 test begin: paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), None, False, )
[Prof] paddle.nanmean 	 paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), None, False, ) 	 50803260 	 1000 	 1.9792497158050537 	 1.0997583866119385 	 0.16820621490478516 	 0.1405174732208252 	 0.5607872009277344 	 0.5933687686920166 	 0.1911637783050537 	 0.151688814163208 	 
2025-07-27 20:08:29.963496 test begin: paddle.nanmedian(Tensor([2, 254016],"float32"), axis=1, mode="min", )
[Prof] paddle.nanmedian 	 paddle.nanmedian(Tensor([2, 254016],"float32"), axis=1, mode="min", ) 	 508032 	 1000 	 3.503999948501587 	 1.11336350440979 	 0.0033996105194091797 	 1.0948233604431152 	 None 	 None 	 None 	 None 	 combined
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:08:34.668981 test begin: paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, )
[Prof] paddle.nanmedian 	 paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, ) 	 508032 	 1000 	 6.874805688858032 	 0.24585318565368652 	 0.006768941879272461 	 0.00010156631469726562 	 0.05830693244934082 	 0.5467922687530518 	 2.193450927734375e-05 	 0.00034999847412109375 	 combined
2025-07-27 20:08:42.430583 test begin: paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, mode="min", )
[Prof] paddle.nanmedian 	 paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, mode="min", ) 	 508032 	 1000 	 6.876727104187012 	 0.27641820907592773 	 0.0067632198333740234 	 7.724761962890625e-05 	 0.0574495792388916 	 0.14237737655639648 	 2.3126602172851562e-05 	 6.67572021484375e-05 	 combined
2025-07-27 20:08:49.843208 test begin: paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0, axis=1, )
W0727 20:08:49.848001  2317 multiply_fwd_func.cc:76] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0, axis=1, ) 	 254016 	 1000 	 0.4835538864135742 	 0.326322078704834 	 0.012496471405029297 	 0.006587505340576172 	 0.2235093116760254 	 0.22609233856201172 	 3.910064697265625e-05 	 6.890296936035156e-05 	 
2025-07-27 20:08:51.174166 test begin: paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0.35, axis=2, keepdim=True, )
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0.35, axis=2, keepdim=True, ) 	 254016 	 1000 	 18.963907957077026 	 0.2159256935119629 	 0.5877556800842285 	 7.677078247070312e-05 	 0.16935348510742188 	 0.20484256744384766 	 3.528594970703125e-05 	 7.700920104980469e-05 	 
2025-07-27 20:09:10.787665 test begin: paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0, axis=1, )
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0, axis=1, ) 	 254016 	 1000 	 16.309786081314087 	 0.2354133129119873 	 0.45667386054992676 	 7.700920104980469e-05 	 0.20497584342956543 	 0.23110628128051758 	 3.075599670410156e-05 	 6.985664367675781e-05 	 
2025-07-27 20:09:27.798262 test begin: paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0.35, axis=2, keepdim=True, )
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0.35, axis=2, keepdim=True, ) 	 254016 	 1000 	 0.43024349212646484 	 0.2999434471130371 	 0.00014519691467285156 	 0.0065762996673583984 	 0.170274019241333 	 0.20410823822021484 	 3.0040740966796875e-05 	 7.271766662597656e-05 	 
2025-07-27 20:09:28.912932 test begin: paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0, axis=1, )
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0, axis=1, ) 	 254016 	 1000 	 16.316717863082886 	 0.2317342758178711 	 0.45688486099243164 	 7.605552673339844e-05 	 0.2202928066253662 	 0.22797942161560059 	 4.792213439941406e-05 	 6.0558319091796875e-05 	 
2025-07-27 20:09:45.975102 test begin: paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
[Prof] paddle.nanquantile 	 paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, ) 	 254016 	 1000 	 18.963475227355957 	 0.22165417671203613 	 0.587723970413208 	 8.225440979003906e-05 	 0.1673734188079834 	 0.20705652236938477 	 3.4332275390625e-05 	 7.605552673339844e-05 	 
2025-07-27 20:10:05.933010 test begin: paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=False, name=None, ) 	 50803240 	 1000 	 2.2292678356170654 	 0.1524488925933838 	 0.2058119773864746 	 0.0779118537902832 	 0.5521993637084961 	 0.5890870094299316 	 0.2821235656738281 	 0.20066142082214355 	 
2025-07-27 20:10:11.492545 test begin: paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=True, name=None, ) 	 50803240 	 1000 	 1.008056879043579 	 0.15243792533874512 	 0.20580768585205078 	 0.07788586616516113 	 0.5520021915435791 	 0.5890438556671143 	 0.28202056884765625 	 0.20061993598937988 	 
2025-07-27 20:10:14.592645 test begin: paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=False, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=False, name=None, ) 	 50803230 	 1000 	 1.0080335140228271 	 0.15245342254638672 	 0.20579838752746582 	 0.07787775993347168 	 0.5519928932189941 	 0.5890283584594727 	 0.28202104568481445 	 0.2006082534790039 	 
2025-07-27 20:10:17.686841 test begin: paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=True, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=True, name=None, ) 	 50803230 	 1000 	 1.0081772804260254 	 0.1524665355682373 	 0.2057962417602539 	 0.07788372039794922 	 0.5519919395446777 	 0.5890812873840332 	 0.28203439712524414 	 0.20064091682434082 	 
2025-07-27 20:10:20.768748 test begin: paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=False, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=False, name=None, ) 	 50803224 	 1000 	 1.008145809173584 	 0.15242338180541992 	 0.2057814598083496 	 0.07789397239685059 	 0.5520319938659668 	 0.5890274047851562 	 0.2820401191711426 	 0.20061063766479492 	 
2025-07-27 20:10:23.845264 test begin: paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=True, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=True, name=None, ) 	 50803224 	 1000 	 1.0080695152282715 	 0.15243005752563477 	 0.20578789710998535 	 0.07786774635314941 	 0.5520195960998535 	 0.589040994644165 	 0.2820456027984619 	 0.2006533145904541 	 
2025-07-27 20:10:26.977685 test begin: paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, ) 	 50803260 	 1000 	 1.0081861019134521 	 0.15239167213439941 	 0.20581436157226562 	 0.07789087295532227 	 0.5520288944244385 	 0.5890448093414307 	 0.28204989433288574 	 0.20064210891723633 	 
2025-07-27 20:10:30.042742 test begin: paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
[Prof] paddle.nansum 	 paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, ) 	 50803260 	 1000 	 1.0080592632293701 	 0.15244531631469727 	 0.20580720901489258 	 0.07788491249084473 	 0.5520169734954834 	 0.5890278816223145 	 0.2820320129394531 	 0.20063066482543945 	 
2025-07-27 20:10:33.136303 test begin: paddle.nansum(x=Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401840 	 1000 	 1.0635035037994385 	 0.20160603523254395 	 0.271923303604126 	 0.17404866218566895 	 0.5297515392303467 	 0.44126367568969727 	 0.2706410884857178 	 0.15017962455749512 	 
2025-07-27 20:10:40.293655 test begin: paddle.nansum(x=Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401840 	 1000 	 1.0773732662200928 	 0.18946504592895508 	 0.2719607353210449 	 0.17406105995178223 	 0.5297720432281494 	 0.44115686416625977 	 0.2706794738769531 	 0.15021729469299316 	 
2025-07-27 20:10:43.186980 test begin: paddle.nansum(x=Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401780 	 1000 	 5.648435831069946 	 0.17238259315490723 	 1.1571927070617676 	 0.08803725242614746 	 0.46538376808166504 	 0.4173555374145508 	 0.23774075508117676 	 0.14211821556091309 	 
2025-07-27 20:10:50.452248 test begin: paddle.nansum(x=Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401744 	 1000 	 0.9779365062713623 	 0.1901261806488037 	 0.24901103973388672 	 0.17461919784545898 	 0.5114431381225586 	 0.4431474208831787 	 0.2612907886505127 	 0.15088486671447754 	 
2025-07-27 20:10:53.207419 test begin: paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, ) 	 25401960 	 1000 	 0.9752743244171143 	 0.19035673141479492 	 0.24921178817749023 	 0.17482256889343262 	 0.511399507522583 	 0.4436964988708496 	 0.26128673553466797 	 0.15106797218322754 	 
2025-07-27 20:10:55.979734 test begin: paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, ) 	 25402320 	 1000 	 0.9750511646270752 	 0.1909348964691162 	 0.2491598129272461 	 0.17461442947387695 	 0.5114560127258301 	 0.44475412368774414 	 0.26129746437072754 	 0.15146303176879883 	 
2025-07-27 20:10:58.769719 test begin: paddle.nansum(x=Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
[Prof] paddle.nansum 	 paddle.nansum(x=Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, ) 	 25401960 	 1000 	 1.0632367134094238 	 0.18947958946228027 	 0.2718472480773926 	 0.17396831512451172 	 0.5291590690612793 	 0.4414327144622803 	 0.27041006088256836 	 0.15032601356506348 	 
2025-07-27 20:11:01.616599 test begin: paddle.neg(Tensor([3175201, 8],"float64"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([3175201, 8],"float64"), ) 	 25401608 	 1000 	 0.30141186714172363 	 0.2982614040374756 	 0.28879475593566895 	 0.2878861427307129 	 0.29807257652282715 	 0.2982945442199707 	 0.24722027778625488 	 0.2328038215637207 	 
2025-07-27 20:11:03.765541 test begin: paddle.neg(Tensor([32, 1587601],"float32"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([32, 1587601],"float32"), ) 	 50803232 	 1000 	 0.29590702056884766 	 0.7482681274414062 	 0.286348819732666 	 0.28699588775634766 	 0.29613208770751953 	 0.2978377342224121 	 0.24476361274719238 	 0.23098325729370117 	 
2025-07-27 20:11:10.480149 test begin: paddle.neg(Tensor([32, 793801],"float64"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([32, 793801],"float64"), ) 	 25401632 	 1000 	 0.9298615455627441 	 0.31504058837890625 	 0.2886228561401367 	 0.28765439987182617 	 0.2981898784637451 	 0.29844212532043457 	 0.24692535400390625 	 0.23186349868774414 	 
2025-07-27 20:11:16.845373 test begin: paddle.neg(Tensor([6350401, 8],"float32"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([6350401, 8],"float32"), ) 	 50803208 	 1000 	 0.29584193229675293 	 0.3075399398803711 	 0.28637075424194336 	 0.2871580123901367 	 0.29608654975891113 	 0.2977406978607178 	 0.2448136806488037 	 0.23176240921020508 	 
2025-07-27 20:11:19.697103 test begin: paddle.neg(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.2960374355316162 	 0.29786133766174316 	 0.2864534854888916 	 0.28740692138671875 	 0.2960801124572754 	 0.29784631729125977 	 0.24472832679748535 	 0.22168564796447754 	 
2025-07-27 20:11:22.462833 test begin: paddle.neg(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.2959432601928711 	 0.30591249465942383 	 0.28645753860473633 	 0.28719496726989746 	 0.29607701301574707 	 0.29780030250549316 	 0.2434556484222412 	 0.22882962226867676 	 
2025-07-27 20:11:25.212702 test begin: paddle.neg(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.neg 	 paddle.neg(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.2960376739501953 	 0.2978231906890869 	 0.2852785587310791 	 0.287304162979126 	 0.2960333824157715 	 0.2977578639984131 	 0.24455952644348145 	 0.229203462600708 	 
2025-07-27 20:11:27.966151 test begin: paddle.negative(Tensor([1693441, 3, 4, 5],"float16"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([1693441, 3, 4, 5],"float16"), ) 	 101606460 	 1000 	 0.29850244522094727 	 0.29635071754455566 	 0.28652262687683105 	 0.2832822799682617 	 0.2985825538635254 	 0.2961564064025879 	 0.24702215194702148 	 0.22836589813232422 	 
2025-07-27 20:11:32.888926 test begin: paddle.negative(Tensor([2, 1270081, 4, 5],"float32"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 1270081, 4, 5],"float32"), ) 	 50803240 	 1000 	 0.29584670066833496 	 0.30174708366394043 	 0.28339242935180664 	 0.2869100570678711 	 0.2960696220397949 	 0.29779505729675293 	 0.24388432502746582 	 0.19575977325439453 	 
2025-07-27 20:11:37.522793 test begin: paddle.negative(Tensor([2, 2540161, 4, 5],"float16"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 2540161, 4, 5],"float16"), ) 	 101606440 	 1000 	 0.3100581169128418 	 0.29622864723205566 	 0.28644418716430664 	 0.28527307510375977 	 0.29860448837280273 	 0.29625558853149414 	 0.2456037998199463 	 0.22964739799499512 	 
2025-07-27 20:11:43.264305 test begin: paddle.negative(Tensor([2, 3, 1693441, 5],"float32"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 1693441, 5],"float32"), ) 	 50803230 	 1000 	 0.29590582847595215 	 0.2978062629699707 	 0.28397178649902344 	 0.2851443290710449 	 0.29607367515563965 	 0.29780101776123047 	 0.24484586715698242 	 0.22959661483764648 	 
2025-07-27 20:11:46.062930 test begin: paddle.negative(Tensor([2, 3, 3386881, 5],"float16"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 3386881, 5],"float16"), ) 	 101606430 	 1000 	 0.3010580539703369 	 0.30083322525024414 	 0.28648805618286133 	 0.2851982116699219 	 0.29854607582092285 	 0.2961738109588623 	 0.24712419509887695 	 0.22915959358215332 	 
2025-07-27 20:11:50.992831 test begin: paddle.negative(Tensor([2, 3, 4, 1058401],"float64"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 4, 1058401],"float64"), ) 	 25401624 	 1000 	 0.29905223846435547 	 0.2983548641204834 	 0.28634142875671387 	 0.2875504493713379 	 0.29810500144958496 	 0.2983431816101074 	 0.24660253524780273 	 0.22894930839538574 	 
2025-07-27 20:11:53.173921 test begin: paddle.negative(Tensor([2, 3, 4, 2116801],"float32"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 4, 2116801],"float32"), ) 	 50803224 	 1000 	 0.2973184585571289 	 0.29787707328796387 	 0.28360962867736816 	 0.28694915771484375 	 0.2960069179534912 	 0.29778242111206055 	 0.24451398849487305 	 0.2305278778076172 	 
2025-07-27 20:11:55.950307 test begin: paddle.negative(Tensor([2, 3, 4, 4233601],"float16"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 4, 4233601],"float16"), ) 	 101606424 	 1000 	 0.2985200881958008 	 0.29620838165283203 	 0.28629326820373535 	 0.2853415012359619 	 0.29857587814331055 	 0.29613757133483887 	 0.24663496017456055 	 0.22883200645446777 	 
2025-07-27 20:12:00.987266 test begin: paddle.negative(Tensor([2, 3, 846721, 5],"float64"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 3, 846721, 5],"float64"), ) 	 25401630 	 1000 	 0.29804301261901855 	 0.2982354164123535 	 0.2861475944519043 	 0.2874453067779541 	 0.29810357093811035 	 0.2983381748199463 	 0.24663400650024414 	 0.2290816307067871 	 
2025-07-27 20:12:03.149857 test begin: paddle.negative(Tensor([2, 635041, 4, 5],"float64"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([2, 635041, 4, 5],"float64"), ) 	 25401640 	 1000 	 0.29805779457092285 	 0.2983264923095703 	 0.28617167472839355 	 0.28743982315063477 	 0.298140287399292 	 0.29837489128112793 	 0.24579191207885742 	 0.23162364959716797 	 
2025-07-27 20:12:05.313748 test begin: paddle.negative(Tensor([423361, 3, 4, 5],"float64"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([423361, 3, 4, 5],"float64"), ) 	 25401660 	 1000 	 0.2980613708496094 	 0.29828405380249023 	 0.28633832931518555 	 0.2874917984008789 	 0.29810619354248047 	 0.2983384132385254 	 0.24690628051757812 	 0.22995805740356445 	 
2025-07-27 20:12:07.477249 test begin: paddle.negative(Tensor([846721, 3, 4, 5],"float32"), )
[Prof] paddle.negative 	 paddle.negative(Tensor([846721, 3, 4, 5],"float32"), ) 	 50803260 	 1000 	 0.29584383964538574 	 0.29778122901916504 	 0.2837646007537842 	 0.2868502140045166 	 0.2960944175720215 	 0.2977449893951416 	 0.24180817604064941 	 0.22773146629333496 	 
2025-07-27 20:12:10.202982 test begin: paddle.nextafter(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), ) 	 101606480 	 1000 	 0.45076465606689453 	 0.44905757904052734 	 0.4418051242828369 	 0.4377129077911377 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:12.680213 test begin: paddle.nextafter(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), ) 	 101606460 	 1000 	 0.450916051864624 	 0.44898486137390137 	 0.4418332576751709 	 0.4358401298522949 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:15.152078 test begin: paddle.nextafter(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), ) 	 101606448 	 1000 	 0.4509925842285156 	 0.450206995010376 	 0.44208335876464844 	 0.4371800422668457 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:19.421452 test begin: paddle.nextafter(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), )
W0727 20:12:21.731815  2529 dygraph_functions.cc:57914] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), ) 	 50803224 	 1000 	 0.6883370876312256 	 0.38765501976013184 	 0.34972524642944336 	 0.37633395195007324 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:23.622368 test begin: paddle.nextafter(Tensor([4, 3, 2116801],"float64"), Tensor([4, 3, 2116801],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3, 2116801],"float64"), Tensor([4, 3, 2116801],"float32"), ) 	 50803224 	 1000 	 0.6842656135559082 	 0.3838222026824951 	 0.349668025970459 	 0.37231993675231934 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:25.631099 test begin: paddle.nextafter(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), ) 	 101606424 	 1000 	 1.3623456954956055 	 0.766547679901123 	 0.6961748600006104 	 0.7551054954528809 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:29.526284 test begin: paddle.nextafter(Tensor([4, 3, 4233601],"float64"), Tensor([4, 3, 4233601],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3, 4233601],"float64"), Tensor([4, 3, 4233601],"float32"), ) 	 101606424 	 1000 	 1.3630967140197754 	 0.7587957382202148 	 0.6966147422790527 	 0.7472774982452393 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:33.394487 test begin: paddle.nextafter(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), ) 	 50803216 	 1000 	 0.6919910907745361 	 0.3878364562988281 	 0.34964442253112793 	 0.37622547149658203 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:36.949316 test begin: paddle.nextafter(Tensor([4, 3175201, 2],"float64"), Tensor([4, 3175201, 2],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 3175201, 2],"float64"), Tensor([4, 3175201, 2],"float32"), ) 	 50803216 	 1000 	 0.6907143592834473 	 0.391995906829834 	 0.34953975677490234 	 0.37210869789123535 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:41.496550 test begin: paddle.nextafter(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), ) 	 101606416 	 1000 	 1.3628973960876465 	 0.767970085144043 	 0.6964547634124756 	 0.7544076442718506 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:45.405744 test begin: paddle.nextafter(Tensor([4, 6350401, 2],"float64"), Tensor([4, 6350401, 2],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4, 6350401, 2],"float64"), Tensor([4, 6350401, 2],"float32"), ) 	 101606416 	 1000 	 1.3628771305084229 	 0.7587275505065918 	 0.6962165832519531 	 0.7473001480102539 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:49.387414 test begin: paddle.nextafter(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), ) 	 50803212 	 1000 	 0.6843142509460449 	 0.39806342124938965 	 0.3496518135070801 	 0.3761258125305176 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:51.361791 test begin: paddle.nextafter(Tensor([4233601, 3, 2],"float64"), Tensor([4233601, 3, 2],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([4233601, 3, 2],"float64"), Tensor([4233601, 3, 2],"float32"), ) 	 50803212 	 1000 	 0.6841521263122559 	 0.385955810546875 	 0.34960246086120605 	 0.37228965759277344 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:53.321064 test begin: paddle.nextafter(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), ) 	 101606412 	 1000 	 1.3624353408813477 	 0.766533374786377 	 0.6961019039154053 	 0.7550473213195801 	 None 	 None 	 None 	 None 	 
2025-07-27 20:12:57.209740 test begin: paddle.nextafter(Tensor([8467201, 3, 2],"float64"), Tensor([8467201, 3, 2],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([8467201, 3, 2],"float64"), Tensor([8467201, 3, 2],"float32"), ) 	 101606412 	 1000 	 1.3634085655212402 	 0.7588520050048828 	 0.6966123580932617 	 0.7470035552978516 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:01.117737 test begin: paddle.nextafter(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
[Prof] paddle.nextafter 	 paddle.nextafter(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), ) 	 101606520 	 1000 	 0.4509878158569336 	 0.4490208625793457 	 0.4421119689941406 	 0.4375784397125244 	 None 	 None 	 None 	 None 	 
2025-07-27 20:13:03.573631 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 1536, 267],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 1536, 267],"float32"), 1, None, ) 	 50853888 	 1000 	 0.30138325691223145 	 0.17512774467468262 	 0.2514963150024414 	 0.15659236907958984 	 0.8367714881896973 	 0.16963648796081543 	 0.42752552032470703 	 0.0781562328338623 	 
2025-07-27 20:13:05.862586 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 8362, 49],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 8362, 49],"float32"), 1, None, ) 	 50807512 	 1000 	 0.35467052459716797 	 0.3767404556274414 	 0.30964207649230957 	 0.35816359519958496 	 0.8616123199462891 	 0.17403268814086914 	 0.44020724296569824 	 0.08194923400878906 	 
2025-07-27 20:13:08.500346 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 1536, 259],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 1536, 259],"float32"), 1, None, ) 	 50921472 	 1000 	 0.2846794128417969 	 0.15368390083312988 	 0.23946070671081543 	 0.1343841552734375 	 0.836402416229248 	 0.17007184028625488 	 0.4273059368133545 	 0.07658147811889648 	 
2025-07-27 20:13:10.728801 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 8101, 49],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 8101, 49],"float32"), 1, None, ) 	 50809472 	 1000 	 0.3546590805053711 	 0.3767979145050049 	 0.3056173324584961 	 0.3580970764160156 	 0.8622753620147705 	 0.1739954948425293 	 0.4405245780944824 	 0.08031964302062988 	 
2025-07-27 20:13:13.295630 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([345, 1024, 144],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([345, 1024, 144],"float32"), 1, None, ) 	 50872320 	 1000 	 0.4747140407562256 	 0.21921706199645996 	 0.4129800796508789 	 0.19456148147583008 	 0.8442325592041016 	 0.17037606239318848 	 0.4313526153564453 	 0.07633519172668457 	 
2025-07-27 20:13:15.777904 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 1024, 776],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 1024, 776],"float32"), 1, None, ) 	 50855936 	 1000 	 0.18936944007873535 	 0.15416526794433594 	 0.1448812484741211 	 0.13553166389465332 	 0.8197846412658691 	 0.17151737213134766 	 0.41882824897766113 	 0.057170867919921875 	 
2025-07-27 20:13:17.901086 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 5513, 144],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 5513, 144],"float32"), 1, None, ) 	 50807808 	 1000 	 0.4576077461242676 	 0.2189345359802246 	 0.410264253616333 	 0.20072293281555176 	 0.8431706428527832 	 0.17038989067077637 	 0.4308459758758545 	 0.07753753662109375 	 
2025-07-27 20:13:20.377672 test begin: paddle.nn.functional.adaptive_avg_pool1d(Tensor([676, 1536, 49],"float32"), 1, None, )
[Prof] paddle.nn.functional.adaptive_avg_pool1d 	 paddle.nn.functional.adaptive_avg_pool1d(Tensor([676, 1536, 49],"float32"), 1, None, ) 	 50878464 	 1000 	 0.35491323471069336 	 0.37726426124572754 	 0.3096179962158203 	 0.35886406898498535 	 0.8633072376251221 	 0.17435598373413086 	 0.441056489944458 	 0.08070778846740723 	 
2025-07-27 20:13:25.247304 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 2, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 2, 7],"float32"), output_size=1, ) 	 58404864 	 1000 	 0.5292704105377197 	 0.36409544944763184 	 0.2671976089477539 	 0.3442387580871582 	 1.0228357315063477 	 0.2236952781677246 	 0.5226199626922607 	 0.14722561836242676 	 
2025-07-27 20:13:30.552702 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 7, 2],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 7, 2],"float32"), output_size=1, ) 	 58404864 	 1000 	 0.2997152805328369 	 0.36411285400390625 	 0.26793670654296875 	 0.34458041191101074 	 1.0230848789215088 	 0.22356867790222168 	 0.5227644443511963 	 0.14919304847717285 	 
2025-07-27 20:13:33.472070 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 509, 7, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 509, 7, 7],"float32"), output_size=1, ) 	 50804817 	 1000 	 0.35445570945739746 	 0.3767201900482178 	 0.32255029678344727 	 0.3572499752044678 	 0.8626866340637207 	 0.17407917976379395 	 0.44080257415771484 	 0.0989980697631836 	 
2025-07-27 20:13:38.395780 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 2, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 2, 7],"float32"), output_size=1, ) 	 58634240 	 1000 	 0.30544519424438477 	 0.36549854278564453 	 0.26923227310180664 	 0.3461015224456787 	 1.0285820960998535 	 0.22443199157714844 	 0.5255415439605713 	 0.14976739883422852 	 
2025-07-27 20:13:41.358972 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 7, 2],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 7, 2],"float32"), output_size=1, ) 	 58634240 	 1000 	 0.3008570671081543 	 0.3793792724609375 	 0.2692534923553467 	 0.34614062309265137 	 1.028367280960083 	 0.22442221641540527 	 0.5254578590393066 	 0.15097308158874512 	 
2025-07-27 20:13:44.243572 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 507, 7, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 507, 7, 7],"float32"), output_size=1, ) 	 50803935 	 1000 	 0.35442042350769043 	 0.3766961097717285 	 0.32283949851989746 	 0.35529470443725586 	 0.862847089767456 	 0.17397212982177734 	 0.440868616104126 	 0.09892010688781738 	 
2025-07-27 20:13:46.804315 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 2, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 2, 7],"float32"), output_size=1, ) 	 58720256 	 1000 	 0.3017756938934326 	 0.36593198776245117 	 0.2693932056427002 	 0.34573984146118164 	 1.0310003757476807 	 0.2247333526611328 	 0.5267734527587891 	 0.14948797225952148 	 
2025-07-27 20:13:49.766421 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 2],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 2],"float32"), output_size=1, ) 	 58720256 	 1000 	 0.3046145439147949 	 0.366011381149292 	 0.26894617080688477 	 0.3447606563568115 	 1.0312402248382568 	 0.22472429275512695 	 0.5268831253051758 	 0.15131926536560059 	 
2025-07-27 20:13:52.677132 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 507, 7, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 507, 7, 7],"float32"), output_size=1, ) 	 50878464 	 1000 	 0.35491323471069336 	 0.3772428035736084 	 0.32303762435913086 	 0.35782432556152344 	 0.8646061420440674 	 0.1742534637451172 	 0.4417295455932617 	 0.0972437858581543 	 
2025-07-27 20:13:55.253111 test begin: paddle.nn.functional.adaptive_avg_pool2d(Tensor([507, 2048, 7, 7],"float32"), output_size=1, )
[Prof] paddle.nn.functional.adaptive_avg_pool2d 	 paddle.nn.functional.adaptive_avg_pool2d(Tensor([507, 2048, 7, 7],"float32"), output_size=1, ) 	 50878464 	 1000 	 0.3549332618713379 	 0.3772857189178467 	 0.32307958602905273 	 0.35744547843933105 	 0.8646602630615234 	 0.17423439025878906 	 0.44177794456481934 	 0.09604763984680176 	 
2025-07-27 20:13:57.838257 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 45361, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 45361, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50804320 	 1000 	 0.8955116271972656 	 0.14898943901062012 	 0.8699851036071777 	 0.12338113784790039 	 2.2289063930511475 	 0.17271637916564941 	 1.1389169692993164 	 0.07325220108032227 	 
2025-07-27 20:14:02.235772 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50804208 	 1000 	 0.5054643154144287 	 0.1516876220703125 	 0.4791746139526367 	 0.12945938110351562 	 2.262493848800659 	 0.17246198654174805 	 1.1560745239257812 	 0.08406925201416016 	 
2025-07-27 20:14:06.128607 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50804208 	 1000 	 0.5449309349060059 	 0.1517014503479004 	 0.5197687149047852 	 0.12932848930358887 	 2.262053966522217 	 0.17240262031555176 	 1.1559550762176514 	 0.09548735618591309 	 
2025-07-27 20:14:10.032575 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50851584 	 1000 	 15.982127904891968 	 0.1507568359375 	 15.956664323806763 	 0.1269397735595703 	 2.2609503269195557 	 0.16524338722229004 	 1.1552708148956299 	 0.08713269233703613 	 
2025-07-27 20:14:31.191583 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50851584 	 1000 	 19.32607364654541 	 0.150740385055542 	 19.301002264022827 	 0.12475466728210449 	 2.2614409923553467 	 0.16512489318847656 	 1.1555421352386475 	 0.08935785293579102 	 
2025-07-27 20:14:53.987270 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 414, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 414, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50872320 	 1000 	 39.323458194732666 	 0.14962506294250488 	 39.297844886779785 	 0.1277179718017578 	 2.2208383083343506 	 0.16531682014465332 	 1.134725570678711 	 0.0458531379699707 	 
2025-07-27 20:15:39.198578 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 460, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 460, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50872320 	 1000 	 39.1844437122345 	 0.14966773986816406 	 39.15919280052185 	 0.12760376930236816 	 2.2208683490753174 	 0.165266752243042 	 1.1347763538360596 	 0.08911848068237305 	 
2025-07-27 20:16:21.787194 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 591, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 591, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50835456 	 1000 	 24.420652151107788 	 0.14992427825927734 	 24.39543914794922 	 0.12756133079528809 	 2.219644069671631 	 0.1651463508605957 	 1.1341524124145508 	 0.07743239402770996 	 
2025-07-27 20:16:50.678093 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 591],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 591],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50835456 	 1000 	 23.183584690093994 	 0.14992332458496094 	 23.15844440460205 	 0.1279141902923584 	 2.1603331565856934 	 0.16509580612182617 	 1.103865385055542 	 0.08953475952148438 	 
2025-07-27 20:17:17.195210 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 460],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 460],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50872320 	 1000 	 39.06962323188782 	 0.14968609809875488 	 39.044291734695435 	 0.1270005702972412 	 2.161504030227661 	 0.16530394554138184 	 1.104576587677002 	 0.08935141563415527 	 
2025-07-27 20:17:59.616981 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 946, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 946, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 50856960 	 1000 	 17.364691495895386 	 0.1499319076538086 	 17.339223861694336 	 0.12794017791748047 	 2.221747398376465 	 0.1652836799621582 	 1.1352460384368896 	 0.08787298202514648 	 
2025-07-27 20:18:20.425848 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([60, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([60, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 51609600 	 1000 	 0.8955707550048828 	 0.15122747421264648 	 0.8694920539855957 	 0.1286168098449707 	 2.2645771503448486 	 0.17555451393127441 	 1.1571400165557861 	 0.100860595703125 	 
2025-07-27 20:18:24.710714 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 51093504 	 1000 	 0.5072321891784668 	 0.15214085578918457 	 0.4820241928100586 	 0.1295180320739746 	 2.27603816986084 	 0.17360615730285645 	 1.1630616188049316 	 0.0986015796661377 	 
2025-07-27 20:18:28.599950 test begin: paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
[Prof] paddle.nn.functional.adaptive_avg_pool3d 	 paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, ) 	 51093504 	 1000 	 0.5480656623840332 	 0.15222430229187012 	 0.5223283767700195 	 0.12925410270690918 	 2.2755935192108154 	 0.1736154556274414 	 1.162755012512207 	 0.09847211837768555 	 
2025-07-27 20:18:32.609064 test begin: paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([128],"int64"), Tensor([16, 3175201],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
W0727 20:18:33.366300 24162 gpu_resources.cc:243] WARNING: device: 0. The installed Paddle is compiled with CUDNN 8.9, but CUDNN version in your machine is 8.9, which may cause serious incompatible bug. Please recompile or reinstall Paddle with compatible CUDNN version.
[Prof] paddle.nn.functional.adaptive_log_softmax_with_loss 	 paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([128],"int64"), Tensor([16, 3175201],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, ) 	 50805392 	 1000 	 12.191300868988037 	 8.206857919692993 	 0.009450435638427734 	 0.006617307662963867 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:19:12.584169 test begin: paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([25401601, 16],"float32"), Tensor([25401601],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
[Prof] paddle.nn.functional.adaptive_log_softmax_with_loss 	 paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([25401601, 16],"float32"), Tensor([25401601],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, ) 	 431827345 	 1000 	 49.844332695007324 	 20.98350739479065 	 0.007291316986083984 	 0.006196498870849609 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:09.712311 test begin: paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([3175201, 16],"float32"), Tensor([3175201],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
[Prof] paddle.nn.functional.adaptive_log_softmax_with_loss 	 paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([3175201, 16],"float32"), Tensor([3175201],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, ) 	 53978545 	 1000 	 6.74362850189209 	 3.184408187866211 	 0.0007963180541992188 	 0.0006115436553955078 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:27.388775 test begin: paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([8],"int64"), Tensor([8, 6350401],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
[Prof] paddle.nn.functional.adaptive_log_softmax_with_loss 	 paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([8],"int64"), Tensor([8, 6350401],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, ) 	 50803280 	 1000 	 7.981963634490967 	 4.693898439407349 	 0.006689786911010742 	 0.00397944450378418 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:22:00.227810 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 4233601],"float64"), 8, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 4233601],"float64"), 8, False, None, ) 	 25401606 	 1000 	 62.2655827999115 	 62.65750241279602 	 62.241605043411255 	 62.63409948348999 	 0.447831392288208 	 0.13779878616333008 	 0.2286999225616455 	 0.04477381706237793 	 
2025-07-27 20:24:06.406173 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), 16, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), 16, False, None, ) 	 50803206 	 1000 	 48.632187604904175 	 42.12006068229675 	 48.60854387283325 	 42.09707736968994 	 0.7593269348144531 	 0.13738346099853516 	 0.38791704177856445 	 0.045746803283691406 	 
2025-07-27 20:25:39.464822 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), output_size=16, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), output_size=16, ) 	 50803206 	 1000 	 48.63156175613403 	 42.1245436668396 	 48.60751223564148 	 42.101555585861206 	 0.7593779563903809 	 0.13736844062805176 	 0.38794732093811035 	 0.04603743553161621 	 
2025-07-27 20:27:12.059837 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 396901, 32],"float64"), 8, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 396901, 32],"float64"), 8, False, None, ) 	 25401664 	 1000 	 0.21028542518615723 	 0.8575439453125 	 0.18459033966064453 	 0.8338103294372559 	 0.5195908546447754 	 0.777014970779419 	 0.2653472423553467 	 0.3969864845275879 	 
2025-07-27 20:27:15.033857 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), 16, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), 16, False, None, ) 	 50803264 	 1000 	 0.40893030166625977 	 1.6975572109222412 	 0.38348841667175293 	 1.6740474700927734 	 0.882483720779419 	 1.409886360168457 	 0.4508628845214844 	 0.7203781604766846 	 
2025-07-27 20:27:20.617347 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), output_size=16, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), output_size=16, ) 	 50803264 	 1000 	 0.408355712890625 	 1.697704792022705 	 0.3831000328063965 	 1.6702277660369873 	 0.8825538158416748 	 1.409963607788086 	 0.45091676712036133 	 0.720433235168457 	 
2025-07-27 20:27:26.198948 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([264601, 3, 32],"float64"), 8, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([264601, 3, 32],"float64"), 8, False, None, ) 	 25401696 	 1000 	 0.21033811569213867 	 3.4071006774902344 	 0.1840534210205078 	 3.383173704147339 	 0.5180869102478027 	 3.3269433975219727 	 0.264646053314209 	 1.7000150680541992 	 
2025-07-27 20:27:34.307648 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), 16, False, None, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), 16, False, None, ) 	 50803296 	 1000 	 0.41259002685546875 	 7.607313871383667 	 0.38452863693237305 	 6.76715350151062 	 0.8824841976165771 	 6.510212421417236 	 0.45079731941223145 	 3.3266513347625732 	 
2025-07-27 20:27:53.187862 test begin: paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), output_size=16, )
[Prof] paddle.nn.functional.adaptive_max_pool1d 	 paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), output_size=16, ) 	 50803296 	 1000 	 1.6633496284484863 	 6.7976953983306885 	 0.38315820693969727 	 6.773688554763794 	 0.8827950954437256 	 6.510192155838013 	 0.45106935501098633 	 3.326615571975708 	 
2025-07-27 20:28:10.769605 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 1209601, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 1209601, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803242 	 1000 	 327.51795387268066 	 137.22318840026855 	 327.5045688152313 	 137.20473670959473 	 0.7782118320465088 	 0.13747382164001465 	 0.3974916934967041 	 0.06126856803894043 	 
2025-07-27 20:35:58.215417 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803242 	 1000 	 114.34705901145935 	 56.092068910598755 	 114.33443331718445 	 56.06464338302612 	 0.801297664642334 	 0.13743042945861816 	 0.4096086025238037 	 0.06435012817382812 	 
2025-07-27 20:38:50.620049 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[2,5,], return_mask=False, name=None, ) 	 50803242 	 1000 	 177.27396488189697 	 79.03080105781555 	 177.26148200035095 	 79.01025867462158 	 0.7700557708740234 	 0.13736724853515625 	 0.3933842182159424 	 0.06584763526916504 	 
2025-07-27 20:43:08.931227 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[3,3,], return_mask=False, name=None, ) 	 50803242 	 1000 	 222.4375936985016 	 96.0591413974762 	 222.42509484291077 	 96.03745651245117 	 0.7808914184570312 	 0.13728618621826172 	 0.3988838195800781 	 0.0639340877532959 	 
2025-07-27 20:48:29.497828 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803298 	 1000 	 0.5910120010375977 	 4.804675817489624 	 0.568810224533081 	 4.786145210266113 	 1.0928223133087158 	 1.1769204139709473 	 0.55845046043396 	 0.6014204025268555 	 
2025-07-27 20:48:40.560958 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, ) 	 50803298 	 1000 	 0.45625877380371094 	 2.630828857421875 	 0.42587876319885254 	 2.6043853759765625 	 1.009803056716919 	 0.9697120189666748 	 0.5159521102905273 	 0.4961104393005371 	 
2025-07-27 20:48:46.604934 test begin: paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool2d 	 paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, ) 	 50803298 	 1000 	 0.38775086402893066 	 3.2830636501312256 	 0.37503480911254883 	 3.2558913230895996 	 1.0346684455871582 	 0.9975862503051758 	 0.5286576747894287 	 0.5097165107727051 	 
2025-07-27 20:48:53.248570 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803690 	 1000 	 1.973982572555542 	 10.279064178466797 	 1.950941562652588 	 0.6565146446228027 	 1.2592997550964355 	 1.4882431030273438 	 0.6434509754180908 	 0.08933091163635254 	 
2025-07-27 20:49:09.561311 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, ) 	 50803690 	 1000 	 1.561828374862671 	 5.53613805770874 	 1.5489764213562012 	 0.8092339038848877 	 0.47616147994995117 	 0.593991756439209 	 0.24324488639831543 	 0.07579207420349121 	 
2025-07-27 20:49:18.658120 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, ) 	 50803690 	 1000 	 1.9147281646728516 	 6.875867605209351 	 1.9017479419708252 	 0.7004702091217041 	 0.5788543224334717 	 0.8101186752319336 	 0.29578471183776855 	 0.07519197463989258 	 
2025-07-27 20:49:29.796935 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803494 	 1000 	 30.427860021591187 	 39.88305425643921 	 30.414884328842163 	 39.86530160903931 	 0.15122270584106445 	 0.1377851963043213 	 0.07714128494262695 	 0.06496238708496094 	 
2025-07-27 20:50:41.339112 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, ) 	 50803494 	 1000 	 102.95679712295532 	 135.84326314926147 	 102.94402599334717 	 135.822571516037 	 0.15169477462768555 	 0.13762331008911133 	 0.07741713523864746 	 0.039763450622558594 	 
2025-07-27 20:54:42.658749 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, ) 	 50803494 	 1000 	 72.1300094127655 	 91.0983624458313 	 72.11718964576721 	 91.07738471031189 	 0.1512610912322998 	 0.13758444786071777 	 0.07716655731201172 	 0.06517505645751953 	 
2025-07-27 20:57:27.230622 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803410 	 1000 	 23.908975839614868 	 29.9794659614563 	 23.88923692703247 	 29.96148133277893 	 0.15120315551757812 	 0.1376199722290039 	 0.07720780372619629 	 0.06326007843017578 	 
2025-07-27 20:58:22.319515 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, ) 	 50803410 	 1000 	 106.3315999507904 	 136.8818347454071 	 106.31837582588196 	 136.86141920089722 	 0.1515483856201172 	 0.13756704330444336 	 0.07730746269226074 	 0.06501364707946777 	 
2025-07-27 21:02:27.972931 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, ) 	 50803410 	 1000 	 109.04989409446716 	 134.22546815872192 	 109.03700804710388 	 134.20440101623535 	 0.15111494064331055 	 0.13890910148620605 	 0.07718253135681152 	 0.06730294227600098 	 
2025-07-27 21:06:32.624362 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803410 	 1000 	 10.180166244506836 	 11.888097286224365 	 10.166897058486938 	 11.869433403015137 	 0.15130114555358887 	 0.13772177696228027 	 0.07720589637756348 	 0.05600380897521973 	 
2025-07-27 21:06:57.091724 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, ) 	 50803410 	 1000 	 31.41067361831665 	 36.12179899215698 	 31.396097660064697 	 36.10109233856201 	 0.15147972106933594 	 0.1376042366027832 	 0.07738804817199707 	 0.06499719619750977 	 
2025-07-27 21:08:05.813414 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, ) 	 50803410 	 1000 	 48.527613162994385 	 58.82603859901428 	 48.514628171920776 	 58.804545640945435 	 0.15132951736450195 	 0.13916397094726562 	 0.07726407051086426 	 0.04674816131591797 	 
2025-07-27 21:09:54.627801 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, ) 	 50803935 	 1000 	 2.6390154361724854 	 10.291958808898926 	 1.9499647617340088 	 0.6580398082733154 	 1.266646385192871 	 1.488041639328003 	 0.649219274520874 	 0.08942437171936035 	 
2025-07-27 21:10:12.940093 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, ) 	 50803935 	 1000 	 1.568852424621582 	 5.543548107147217 	 1.555455207824707 	 0.807957649230957 	 0.47801923751831055 	 0.5940461158752441 	 0.24352765083312988 	 0.07581043243408203 	 
2025-07-27 21:10:22.061787 test begin: paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
[Prof] paddle.nn.functional.adaptive_max_pool3d 	 paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, ) 	 50803935 	 1000 	 1.9217970371246338 	 6.863956451416016 	 1.9058992862701416 	 0.7002875804901123 	 0.5785336494445801 	 0.8139467239379883 	 0.29555416107177734 	 0.07516145706176758 	 
2025-07-27 21:10:33.249743 test begin: paddle.nn.functional.avg_pool1d(Tensor([13, 1, 3907939],"float32"), 25, 1, 0, True, False, None, )
[Prof] paddle.nn.functional.avg_pool1d 	 paddle.nn.functional.avg_pool1d(Tensor([13, 1, 3907939],"float32"), 25, 1, 0, True, False, None, ) 	 50803207 	 1000 	 36.720914125442505 	 1.5848095417022705 	 36.68312621116638 	 1.5668396949768066 	 45.7840793132782 	 3.726433515548706 	 45.70346283912659 	 3.6399073600769043 	 
2025-07-27 21:12:02.868646 test begin: paddle.nn.functional.avg_pool1d(Tensor([13, 32567, 120],"float32"), 25, 1, 0, True, False, None, )
[Prof] paddle.nn.functional.avg_pool1d 	 paddle.nn.functional.avg_pool1d(Tensor([13, 32567, 120],"float32"), 25, 1, 0, True, False, None, ) 	 50804520 	 1000 	 7.492479562759399 	 1.3851945400238037 	 7.454060316085815 	 1.3695461750030518 	 11.402413368225098 	 3.846813917160034 	 11.321875810623169 	 3.7557876110076904 	 
2025-07-27 21:12:28.732801 test begin: paddle.nn.functional.avg_pool1d(Tensor([16, 1, 3175201],"float32"), 25, 1, 0, True, False, None, )
[Prof] paddle.nn.functional.avg_pool1d 	 paddle.nn.functional.avg_pool1d(Tensor([16, 1, 3175201],"float32"), 25, 1, 0, True, False, None, ) 	 50803216 	 1000 	 36.72995972633362 	 1.5803556442260742 	 36.69610333442688 	 1.5631229877471924 	 45.79659557342529 	 3.732215642929077 	 45.71661615371704 	 3.646009683609009 	 
2025-07-27 21:13:58.385330 test begin: paddle.nn.functional.avg_pool1d(Tensor([16, 2, 1587601],"float32"), 25, 1, 0, True, False, None, )
[Prof] paddle.nn.functional.avg_pool1d 	 paddle.nn.functional.avg_pool1d(Tensor([16, 2, 1587601],"float32"), 25, 1, 0, True, False, None, ) 	 50803232 	 1000 	 18.456947088241577 	 1.577085256576538 	 18.422762155532837 	 1.5612759590148926 	 22.932559728622437 	 3.733092784881592 	 22.851627826690674 	 3.6484358310699463 	 
2025-07-27 21:14:47.270798 test begin: paddle.nn.functional.avg_pool1d(Tensor([16, 26461, 120],"float32"), 25, 1, 0, True, False, None, )
[Prof] paddle.nn.functional.avg_pool1d 	 paddle.nn.functional.avg_pool1d(Tensor([16, 26461, 120],"float32"), 25, 1, 0, True, False, None, ) 	 50805120 	 1000 	 7.503655910491943 	 1.3831937313079834 	 7.466240882873535 	 1.3645296096801758 	 11.410152435302734 	 3.851402521133423 	 11.329758405685425 	 3.762939691543579 	 
2025-07-27 21:15:13.062901 test begin: paddle.nn.functional.avg_pool2d(Tensor([128, 127, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([128, 127, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 50978816 	 1000 	 0.19500350952148438 	 0.4212837219238281 	 0.17009544372558594 	 0.4033195972442627 	 0.354480504989624 	 1.5692360401153564 	 0.2885317802429199 	 1.5014970302581787 	 
2025-07-27 21:15:16.608102 test begin: paddle.nn.functional.avg_pool2d(Tensor([128, 256, 28, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([128, 256, 28, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51380224 	 1000 	 0.19963645935058594 	 0.4252443313598633 	 0.17985177040100098 	 0.40145349502563477 	 0.33309149742126465 	 1.5764789581298828 	 0.2724940776824951 	 1.5079238414764404 	 
2025-07-27 21:15:21.685105 test begin: paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51380224 	 1000 	 0.8626444339752197 	 0.420696496963501 	 0.18038439750671387 	 0.40834546089172363 	 0.3371596336364746 	 1.579655408859253 	 0.27324366569519043 	 1.5125370025634766 	 
2025-07-27 21:15:26.986060 test begin: paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 97],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 97],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 50855936 	 1000 	 0.1924448013305664 	 0.40900397300720215 	 0.17068052291870117 	 0.3975541591644287 	 0.3302340507507324 	 1.5633137226104736 	 0.26938676834106445 	 1.4953961372375488 	 
2025-07-27 21:15:30.470781 test begin: paddle.nn.functional.avg_pool2d(Tensor([16, 128, 97, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([16, 128, 97, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 50855936 	 1000 	 0.19057345390319824 	 0.40491580963134766 	 0.1685647964477539 	 0.39357781410217285 	 0.3287177085876465 	 1.5493872165679932 	 0.2668948173522949 	 1.4818620681762695 	 
2025-07-27 21:15:33.993216 test begin: paddle.nn.functional.avg_pool2d(Tensor([16, 49, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([16, 49, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51380224 	 1000 	 0.19684672355651855 	 0.41485595703125 	 0.1747288703918457 	 0.40147876739501953 	 0.3531835079193115 	 1.5648531913757324 	 0.2926971912384033 	 1.4965643882751465 	 
2025-07-27 21:15:39.529346 test begin: paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 58982400 	 1000 	 0.22663283348083496 	 0.478466272354126 	 0.20173120498657227 	 0.4663124084472656 	 0.3820068836212158 	 1.805220603942871 	 0.32085633277893066 	 1.7372519969940186 	 
2025-07-27 21:15:43.907934 test begin: paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51380224 	 1000 	 0.1975109577178955 	 0.4201836585998535 	 0.1778562068939209 	 0.4080641269683838 	 0.35595178604125977 	 1.5789299011230469 	 0.2957284450531006 	 1.5102767944335938 	 
2025-07-27 21:15:47.527457 test begin: paddle.nn.functional.avg_pool2d(Tensor([7, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([7, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 58720256 	 1000 	 0.22287654876708984 	 0.47144055366516113 	 0.19938874244689941 	 0.45993876457214355 	 0.3819735050201416 	 1.7925825119018555 	 0.29003262519836426 	 1.7256691455841064 	 
2025-07-27 21:15:51.539900 test begin: paddle.nn.functional.avg_pool2d(Tensor([8, 111, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([8, 111, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51148800 	 1000 	 0.1947791576385498 	 0.4173448085784912 	 0.17525339126586914 	 0.4001350402832031 	 0.33479762077331543 	 1.5703058242797852 	 0.27356433868408203 	 1.5036931037902832 	 
2025-07-27 21:15:55.059696 test begin: paddle.nn.functional.avg_pool2d(Tensor([8, 256, 104, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([8, 256, 104, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51118080 	 1000 	 0.19455456733703613 	 0.4156932830810547 	 0.17519569396972656 	 0.3986966609954834 	 0.33316683769226074 	 1.5656886100769043 	 0.2715301513671875 	 1.497926950454712 	 
2025-07-27 21:15:58.650982 test begin: paddle.nn.functional.avg_pool2d(Tensor([8, 256, 240, 104],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.avg_pool2d 	 paddle.nn.functional.avg_pool2d(Tensor([8, 256, 240, 104],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, ) 	 51118080 	 1000 	 0.19523835182189941 	 0.4148716926574707 	 0.17405104637145996 	 0.40212130546569824 	 0.33353352546691895 	 1.5696766376495361 	 0.27258968353271484 	 1.5028676986694336 	 
2025-07-27 21:16:02.171014 test begin: paddle.nn.functional.avg_pool3d(Tensor([2, 776, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(Tensor([2, 776, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", ) 	 50855936 	 1000 	 0.17791485786437988 	 0.4424924850463867 	 0.15712928771972656 	 0.4109635353088379 	 0.42514872550964355 	 0.4993469715118408 	 0.364208459854126 	 0.25438570976257324 	 
2025-07-27 21:16:04.630314 test begin: paddle.nn.functional.avg_pool3d(Tensor([517, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(Tensor([517, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", ) 	 50823168 	 1000 	 0.1782217025756836 	 0.4229147434234619 	 0.15900731086730957 	 0.4080531597137451 	 0.5571384429931641 	 0.498828649520874 	 0.49671459197998047 	 0.25408267974853516 	 
2025-07-27 21:16:07.148796 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([127, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([127, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", ) 	 50978816 	 1000 	 0.24040603637695312 	 2.2490856647491455 	 0.2180793285369873 	 0.576012134552002 	 3.145353317260742 	 2.891493797302246 	 3.077935218811035 	 0.17373251914978027 	 
2025-07-27 21:16:16.621198 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([127, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([127, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", ) 	 50978816 	 1000 	 0.2674551010131836 	 1.9957756996154785 	 0.24283719062805176 	 1.9824039936065674 	 2.88960337638855 	 2.8750665187835693 	 2.8261682987213135 	 0.17260146141052246 	 
2025-07-27 21:16:25.445580 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 111, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 111, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", ) 	 50921472 	 1000 	 0.341062068939209 	 10.941493511199951 	 0.31868553161621094 	 10.928102493286133 	 4.438239812850952 	 4.758418798446655 	 4.3776257038116455 	 1.6199040412902832 	 
2025-07-27 21:16:47.684385 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 111],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 111],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", ) 	 50921472 	 1000 	 0.38603806495666504 	 0.7689039707183838 	 0.3637733459472656 	 0.7555601596832275 	 3.078246593475342 	 0.982384204864502 	 3.017874002456665 	 0.3343546390533447 	 
2025-07-27 21:16:53.757197 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 64, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 64, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", ) 	 51380224 	 1000 	 0.3197910785675049 	 7.912027597427368 	 0.29730677604675293 	 0.5058755874633789 	 4.293064832687378 	 4.36137056350708 	 4.232238054275513 	 0.24861621856689453 	 
2025-07-27 21:17:11.484458 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 111, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 111, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", ) 	 50921472 	 1000 	 0.3596353530883789 	 10.586929321289062 	 0.3372220993041992 	 10.56704044342041 	 4.427169322967529 	 4.7480385303497314 	 4.3666698932647705 	 1.6175048351287842 	 
2025-07-27 21:17:32.826730 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 111],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 111],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", ) 	 50921472 	 1000 	 0.41448092460632324 	 1.2091596126556396 	 0.39195847511291504 	 0.9695641994476318 	 3.063979148864746 	 0.9628820419311523 	 3.003211736679077 	 0.3286571502685547 	 
2025-07-27 21:17:41.294478 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 507, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 507, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", ) 	 50878464 	 1000 	 2.216486930847168 	 50.54412865638733 	 2.1941308975219727 	 3.4456753730773926 	 15.122467756271362 	 17.608562231063843 	 15.059828042984009 	 1.0597426891326904 	 
2025-07-27 21:19:07.749084 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 32401, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 32401, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", ) 	 50804768 	 1000 	 0.23947477340698242 	 2.239307403564453 	 0.2075357437133789 	 0.572850227355957 	 3.131354570388794 	 2.8861401081085205 	 3.0704126358032227 	 0.17313694953918457 	 
2025-07-27 21:19:17.096721 test begin: paddle.nn.functional.avg_pool3d(x=Tensor([8, 4051, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.avg_pool3d 	 paddle.nn.functional.avg_pool3d(x=Tensor([8, 4051, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", ) 	 50815744 	 1000 	 0.2654902935028076 	 1.987203598022461 	 0.24325776100158691 	 1.9739627838134766 	 2.882427215576172 	 2.8693504333496094 	 2.8207473754882812 	 0.17214059829711914 	 
2025-07-27 21:19:26.045001 test begin: paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), use_global_stats=True, data_format="NHWC", )
[Prof] paddle.nn.functional.batch_norm 	 paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), use_global_stats=True, data_format="NHWC", ) 	 50823388 	 1000 	 0.37423229217529297 	 0.3774721622467041 	 0.35138869285583496 	 0.34835267066955566 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([30, 40, 50, 847]) and output[0] has a shape of torch.Size([30, 847, 40, 50]).
2025-07-27 21:19:32.990483 test begin: paddle.nn.functional.batch_norm(Tensor([30, 40, 706, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
[Prof] paddle.nn.functional.batch_norm 	 paddle.nn.functional.batch_norm(Tensor([30, 40, 706, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", ) 	 50832240 	 1000 	 0.3711841106414795 	 0.3836383819580078 	 0.35107994079589844 	 0.3443260192871094 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([30, 40, 706, 60]) and output[0] has a shape of torch.Size([30, 60, 40, 706]).
2025-07-27 21:19:40.604343 test begin: paddle.nn.functional.batch_norm(Tensor([30, 565, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
[Prof] paddle.nn.functional.batch_norm 	 paddle.nn.functional.batch_norm(Tensor([30, 565, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", ) 	 50850240 	 1000 	 0.38066720962524414 	 0.37732720375061035 	 0.3586874008178711 	 0.3486471176147461 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([30, 565, 50, 60]) and output[0] has a shape of torch.Size([30, 60, 565, 50]).
2025-07-27 21:19:46.738956 test begin: paddle.nn.functional.batch_norm(Tensor([424, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
[Prof] paddle.nn.functional.batch_norm 	 paddle.nn.functional.batch_norm(Tensor([424, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", ) 	 50880240 	 1000 	 0.34339046478271484 	 0.35280370712280273 	 0.3234694004058838 	 0.3155794143676758 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([424, 40, 50, 60]) and output[0] has a shape of torch.Size([424, 60, 40, 50]).
2025-07-27 21:19:53.897235 test begin: paddle.nn.functional.bilinear(Tensor([25401601, 1],"float32"), Tensor([25401601, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
[Prof] paddle.nn.functional.bilinear 	 paddle.nn.functional.bilinear(Tensor([25401601, 1],"float32"), Tensor([25401601, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, ) 	 76204815 	 1000 	 15.054097652435303 	 118.47862648963928 	 0.14658832550048828 	 0.07284379005432129 	 30.275168895721436 	 125.16659235954285 	 0.25069451332092285 	 0.0789337158203125 	 
2025-07-27 21:24:46.128661 test begin: paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 12700801],"float32"), Tensor([4, 1, 12700801],"float32"), Tensor([1, 4],"float32"), None, )
[Prof] paddle.nn.functional.bilinear 	 paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 12700801],"float32"), Tensor([4, 1, 12700801],"float32"), Tensor([1, 4],"float32"), None, ) 	 88905614 	 1000 	 3.379866361618042 	 45.047125577926636 	 0.05309486389160156 	 0.7423393726348877 	 6.661809682846069 	 50.40967106819153 	 0.09050226211547852 	 0.5605778694152832 	 
2025-07-27 21:26:33.644768 test begin: paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 16934401],"float32"), Tensor([4, 1, 16934401],"float32"), Tensor([1, 4],"float32"), None, )
[Prof] paddle.nn.functional.bilinear 	 paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 16934401],"float32"), Tensor([4, 1, 16934401],"float32"), Tensor([1, 4],"float32"), None, ) 	 118540814 	 1000 	 4.571342468261719 	 60.177515506744385 	 0.05768227577209473 	 0.7970340251922607 	 8.784414529800415 	 65.97652244567871 	 0.09790349006652832 	 0.600743293762207 	 
2025-07-27 21:28:56.831914 test begin: paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 10161],"float32"), Tensor([1000, 5, 10161],"float32"), Tensor([1, 1000],"float32"), None, )
[Prof] paddle.nn.functional.bilinear 	 paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 10161],"float32"), Tensor([1000, 5, 10161],"float32"), Tensor([1, 1000],"float32"), None, ) 	 50856830 	 1000 	 30.572500228881836 	 42.93960475921631 	 0.007779598236083984 	 0.00027871131896972656 	 38.82497239112854 	 112.1706178188324 	 0.0065250396728515625 	 0.0002474784851074219 	 
2025-07-27 21:32:42.697080 test begin: paddle.nn.functional.bilinear(Tensor([50803201, 1],"float32"), Tensor([50803201, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
[Prof] paddle.nn.functional.bilinear 	 paddle.nn.functional.bilinear(Tensor([50803201, 1],"float32"), Tensor([50803201, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, ) 	 152409615 	 1000 	 30.010120391845703 	 237.14679741859436 	 0.15498018264770508 	 0.07424473762512207 	 60.28960657119751 	 250.13241696357727 	 0.2787792682647705 	 0.09027886390686035 	 
2025-07-27 21:42:26.672290 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"float32"), weight=Tensor([16, 10164, 313],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"float32"), weight=Tensor([16, 10164, 313],"float32"), reduction="sum", ) 	 152703936 	 1000 	 1.0513076782226562 	 1.0562052726745605 	 0.26885247230529785 	 0.21543002128601074 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:42:33.092438 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"float32"), weight=Tensor([16, 11109, 286],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"float32"), weight=Tensor([16, 11109, 286],"float32"), reduction="sum", ) 	 152504352 	 1000 	 1.0469675064086914 	 1.0800995826721191 	 0.2671544551849365 	 0.21639156341552734 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:42:41.791922 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"float32"), weight=Tensor([16, 12096, 263],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"float32"), weight=Tensor([16, 12096, 263],"float32"), reduction="sum", ) 	 152699904 	 1000 	 1.0535075664520264 	 1.0550520420074463 	 0.2674853801727295 	 0.21529603004455566 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:42:49.968304 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="sum", ) 	 152413440 	 1000 	 1.0594720840454102 	 1.0532546043395996 	 0.2683372497558594 	 0.2149968147277832 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:42:56.547674 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([53, 12096, 80],"float32"), Tensor([53, 12096, 80],"float32"), weight=Tensor([53, 12096, 80],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([53, 12096, 80],"float32"), Tensor([53, 12096, 80],"float32"), weight=Tensor([53, 12096, 80],"float32"), reduction="sum", ) 	 153861120 	 1000 	 1.0571439266204834 	 1.067065954208374 	 0.2695486545562744 	 0.21837162971496582 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:03.051418 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([58, 11109, 80],"float32"), Tensor([58, 11109, 80],"float32"), weight=Tensor([58, 11109, 80],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([58, 11109, 80],"float32"), Tensor([58, 11109, 80],"float32"), weight=Tensor([58, 11109, 80],"float32"), reduction="sum", ) 	 154637280 	 1000 	 1.0613679885864258 	 1.0702862739562988 	 0.27081871032714844 	 0.21806597709655762 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:09.395177 test begin: paddle.nn.functional.binary_cross_entropy(Tensor([63, 10164, 80],"float32"), Tensor([63, 10164, 80],"float32"), weight=Tensor([63, 10164, 80],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.binary_cross_entropy 	 paddle.nn.functional.binary_cross_entropy(Tensor([63, 10164, 80],"float32"), Tensor([63, 10164, 80],"float32"), weight=Tensor([63, 10164, 80],"float32"), reduction="sum", ) 	 153679680 	 1000 	 1.057403564453125 	 1.0627551078796387 	 0.27039313316345215 	 0.2179553508758545 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:15.747044 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 300, 10585],"float32"), Tensor([16, 300, 10585],"float32"), weight=Tensor([16, 300, 10585],"float32"), reduction="none", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 300, 10585],"float32"), Tensor([16, 300, 10585],"float32"), weight=Tensor([16, 300, 10585],"float32"), reduction="none", ) 	 152424000 	 1000 	 1.0393149852752686 	 2.227043867111206 	 0.35399365425109863 	 0.3772549629211426 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:24.098698 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="none", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="none", ) 	 152413440 	 1000 	 1.0388410091400146 	 2.216383695602417 	 0.3541598320007324 	 0.3772895336151123 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:32.514238 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2117, 300, 80],"float32"), Tensor([2117, 300, 80],"float32"), weight=Tensor([2117, 300, 80],"float32"), reduction="none", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2117, 300, 80],"float32"), Tensor([2117, 300, 80],"float32"), weight=Tensor([2117, 300, 80],"float32"), reduction="none", ) 	 152424000 	 1000 	 1.0449647903442383 	 2.2250514030456543 	 0.3545949459075928 	 0.3801310062408447 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:42.224642 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), weight=Tensor([300, 169345],"float32"), reduction="none", pos_weight=None, )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), weight=Tensor([300, 169345],"float32"), reduction="none", pos_weight=None, ) 	 152410500 	 1000 	 1.0442404747009277 	 2.216682195663452 	 0.3556797504425049 	 0.37874269485473633 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:43:50.677578 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([50804, 1000],"float32"), Tensor([50804, 1000],"float32"), weight=Tensor([50804, 1000],"float32"), reduction="none", pos_weight=None, )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([50804, 1000],"float32"), Tensor([50804, 1000],"float32"), weight=Tensor([50804, 1000],"float32"), reduction="none", pos_weight=None, ) 	 152412000 	 1000 	 1.0411109924316406 	 2.2273688316345215 	 0.35447263717651367 	 0.37725114822387695 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:44:01.665850 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 28, 3544],"float32"), Tensor([512, 28, 3544],"float32"), weight=Tensor([512, 1, 3544],"float32"), reduction="mean", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 28, 3544],"float32"), Tensor([512, 28, 3544],"float32"), weight=Tensor([512, 1, 3544],"float32"), reduction="mean", ) 	 103428096 	 1000 	 1.0458076000213623 	 2.2447075843811035 	 0.21394968032836914 	 0.28771162033081055 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:44:08.421431 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 3544, 28],"float32"), Tensor([512, 3544, 28],"float32"), weight=Tensor([512, 3544, 1],"float32"), reduction="mean", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 3544, 28],"float32"), Tensor([512, 3544, 28],"float32"), weight=Tensor([512, 3544, 1],"float32"), reduction="mean", ) 	 103428096 	 1000 	 1.0422890186309814 	 2.2401416301727295 	 0.212721586227417 	 0.28579163551330566 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:44:15.030201 test begin: paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), weight=Tensor([64801, 1, 1],"float32"), reduction="mean", )
[Prof] paddle.nn.functional.binary_cross_entropy_with_logits 	 paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), weight=Tensor([64801, 1, 1],"float32"), reduction="mean", ) 	 101672769 	 1000 	 1.0425286293029785 	 2.2312161922454834 	 0.21317052841186523 	 0.28632354736328125 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 21:44:21.513337 test begin: paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 0.2, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 0.2, None, ) 	 25401616 	 1000 	 0.3083512783050537 	 0.30394506454467773 	 0.29841160774230957 	 0.28751587867736816 	 0.448439359664917 	 0.4494643211364746 	 0.3957047462463379 	 0.3819260597229004 	 
2025-07-27 21:44:23.989284 test begin: paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 1.0, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 1.0, None, ) 	 25401616 	 1000 	 0.3082618713378906 	 0.31809139251708984 	 0.2950172424316406 	 0.28845930099487305 	 0.4472188949584961 	 0.45198559761047363 	 0.38973450660705566 	 0.3824901580810547 	 
2025-07-27 21:44:26.582597 test begin: paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 0.2, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 0.2, None, ) 	 25401608 	 1000 	 0.307525634765625 	 0.3040330410003662 	 0.29850220680236816 	 0.28759193420410156 	 0.44720935821533203 	 0.4494004249572754 	 0.39464449882507324 	 0.3808250427246094 	 
2025-07-27 21:44:29.064637 test begin: paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 1.0, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 1.0, None, ) 	 25401608 	 1000 	 0.3071751594543457 	 0.30862951278686523 	 0.2984158992767334 	 0.28917908668518066 	 0.44845032691955566 	 0.450852632522583 	 0.3958704471588135 	 0.37792062759399414 	 
2025-07-27 21:44:31.578974 test begin: paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 0.2, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 0.2, None, ) 	 25401608 	 1000 	 0.3096954822540283 	 0.3040151596069336 	 0.2999889850616455 	 0.2875692844390869 	 0.44719719886779785 	 0.4494328498840332 	 0.3917412757873535 	 0.38114452362060547 	 
2025-07-27 21:44:34.087608 test begin: paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 1.0, None, )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 1.0, None, ) 	 25401608 	 1000 	 0.3071622848510742 	 0.5580763816833496 	 0.298572301864624 	 0.2874917984008789 	 0.44720959663391113 	 0.4494743347167969 	 0.39436817169189453 	 0.3781888484954834 	 
2025-07-27 21:44:40.055583 test begin: paddle.nn.functional.celu(x=Tensor([1587601, 4, 4],"float64"), )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(x=Tensor([1587601, 4, 4],"float64"), ) 	 25401616 	 1000 	 0.3121967315673828 	 0.3061957359313965 	 0.2980680465698242 	 0.28770947456359863 	 0.4487166404724121 	 0.4508168697357178 	 0.39350271224975586 	 0.3822965621948242 	 
2025-07-27 21:44:42.570014 test begin: paddle.nn.functional.celu(x=Tensor([2, 3175201, 4],"float64"), )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(x=Tensor([2, 3175201, 4],"float64"), ) 	 25401608 	 1000 	 0.30713963508605957 	 0.30402088165283203 	 0.2982668876647949 	 0.2874922752380371 	 0.4472057819366455 	 0.44942498207092285 	 0.39451122283935547 	 0.37368011474609375 	 
2025-07-27 21:44:45.168510 test begin: paddle.nn.functional.celu(x=Tensor([2, 4, 3175201],"float64"), )
[Prof] paddle.nn.functional.celu 	 paddle.nn.functional.celu(x=Tensor([2, 4, 3175201],"float64"), ) 	 25401608 	 1000 	 0.3138723373413086 	 0.3094196319580078 	 0.299633264541626 	 0.28783416748046875 	 0.44719552993774414 	 0.4507763385772705 	 0.39440393447875977 	 0.381145715713501 	 
2025-07-27 21:44:47.672422 test begin: paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", ) 	 25401744 	 1000 	 0.31538963317871094 	 0.29752564430236816 	 0.3050963878631592 	 0.2785341739654541 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([176401, 4, 4, 9]) and output[0] has a shape of torch.Size([176401, 9, 4, 4]).
2025-07-27 21:44:49.631808 test begin: paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", None, )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", None, ) 	 25401744 	 1000 	 0.31546759605407715 	 0.2975742816925049 	 0.30520081520080566 	 0.2755894660949707 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([176401, 4, 4, 9]) and output[0] has a shape of torch.Size([176401, 9, 4, 4]).
2025-07-27 21:44:51.603678 test begin: paddle.nn.functional.channel_shuffle(Tensor([176401, 9, 4, 4],"float64"), 3, "NCHW", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([176401, 9, 4, 4],"float64"), 3, "NCHW", ) 	 25401744 	 1000 	 0.3138582706451416 	 0.30391573905944824 	 0.30349111557006836 	 0.28408098220825195 	 0.3138599395751953 	 0.3026714324951172 	 0.2620518207550049 	 0.22047138214111328 	 
2025-07-27 21:44:53.913133 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", ) 	 25401672 	 1000 	 0.3154871463775635 	 1.3111534118652344 	 0.3045315742492676 	 1.2886450290679932 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 352801, 4, 9]) and output[0] has a shape of torch.Size([2, 9, 352801, 4]).
2025-07-27 21:44:56.843525 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", None, )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", None, ) 	 25401672 	 1000 	 0.31519651412963867 	 1.52708101272583 	 0.30449628829956055 	 1.2857582569122314 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 352801, 4, 9]) and output[0] has a shape of torch.Size([2, 9, 352801, 4]).
2025-07-27 21:45:01.237792 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", ) 	 25401672 	 1000 	 1.0902462005615234 	 1.3212382793426514 	 0.3045964241027832 	 1.287729024887085 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 4, 352801, 9]) and output[0] has a shape of torch.Size([2, 9, 4, 352801]).
2025-07-27 21:45:05.235630 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", None, )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", None, ) 	 25401672 	 1000 	 0.31615400314331055 	 1.3038580417633057 	 0.30573129653930664 	 1.2851612567901611 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([2, 4, 352801, 9]) and output[0] has a shape of torch.Size([2, 9, 4, 352801]).
2025-07-27 21:45:08.126118 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 9, 352801, 4],"float64"), 3, "NCHW", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 9, 352801, 4],"float64"), 3, "NCHW", ) 	 25401672 	 1000 	 0.31635093688964844 	 0.30265188217163086 	 0.3051917552947998 	 0.28371167182922363 	 0.3146536350250244 	 0.3024466037750244 	 0.26271629333496094 	 0.2273406982421875 	 
2025-07-27 21:45:10.316699 test begin: paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 352801],"float64"), 3, "NCHW", )
[Prof] paddle.nn.functional.channel_shuffle 	 paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 352801],"float64"), 3, "NCHW", ) 	 25401672 	 1000 	 0.32716870307922363 	 0.30953335762023926 	 0.3039247989654541 	 0.28397226333618164 	 0.31467318534851074 	 0.3024253845214844 	 0.26276445388793945 	 0.22689557075500488 	 
2025-07-27 21:45:12.528297 test begin: paddle.nn.functional.conv1d(Tensor([16, 125, 25500],"float32"), Tensor([1, 125, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([16, 125, 25500],"float32"), Tensor([1, 125, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51000126 	 1000 	 0.3313174247741699 	 0.1625525951385498 	 0.09918427467346191 	 0.08301520347595215 	 0.8276863098144531 	 0.3346059322357178 	 0.14111042022705078 	 0.06795144081115723 	 
2025-07-27 21:45:15.462571 test begin: paddle.nn.functional.conv1d(Tensor([16, 64, 49613],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([16, 64, 49613],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50803777 	 1000 	 0.3363687992095947 	 0.16817116737365723 	 0.11197662353515625 	 0.08589863777160645 	 0.7337679862976074 	 0.3607511520385742 	 0.1249847412109375 	 0.07354331016540527 	 
2025-07-27 21:45:17.925705 test begin: paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 52040609 	 1000 	 0.3953287601470947 	 0.1839606761932373 	 0.13400530815124512 	 0.0939779281616211 	 0.7708351612091064 	 0.3979480266571045 	 0.1311025619506836 	 0.08087563514709473 	 
2025-07-27 21:45:20.499356 test begin: paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 52041632 	 1000 	 0.6790454387664795 	 0.99609375 	 0.1735210418701172 	 0.5088539123535156 	 1.2610952854156494 	 12.793553829193115 	 0.1608591079711914 	 2.607389450073242 	 
2025-07-27 21:45:39.835300 test begin: paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50803745 	 1000 	 0.3881211280822754 	 0.18317675590515137 	 0.1306750774383545 	 0.09113717079162598 	 0.7412064075469971 	 0.37134742736816406 	 0.1257920265197754 	 0.07547187805175781 	 
2025-07-27 21:45:42.367832 test begin: paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50804768 	 1000 	 0.6580662727355957 	 0.9489438533782959 	 0.1682896614074707 	 0.48476600646972656 	 1.3246040344238281 	 11.07578730583191 	 0.1689920425415039 	 2.2595577239990234 	 
2025-07-27 21:45:57.965561 test begin: paddle.nn.functional.conv1d(Tensor([32, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d 	 paddle.nn.functional.conv1d(Tensor([32, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", ) 	 52224065 	 1000 	 0.34717488288879395 	 0.17245030403137207 	 0.10129308700561523 	 0.08743834495544434 	 0.6407458782196045 	 0.34641051292419434 	 0.08155369758605957 	 0.07067298889160156 	 
2025-07-27 21:46:00.349632 test begin: paddle.nn.functional.conv1d_transpose(Tensor([1, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([1, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50978641 	 1000 	 2.2543513774871826 	 2.3684940338134766 	 0.7695186138153076 	 0.8068244457244873 	 1.3122446537017822 	 1.0721564292907715 	 0.26490116119384766 	 0.27584218978881836 	 
2025-07-27 21:46:09.853792 test begin: paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50822772 	 1000 	 0.2660377025604248 	 0.26822972297668457 	 0.09061861038208008 	 0.09144186973571777 	 21.37907648086548 	 9.582067489624023 	 4.362482309341431 	 2.447359800338745 	 
2025-07-27 21:46:42.261837 test begin: paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50859776 	 1000 	 0.262939453125 	 0.2659437656402588 	 0.08957672119140625 	 0.09066057205200195 	 21.451707363128662 	 20.14997172355652 	 4.3806445598602295 	 4.112419843673706 	 
2025-07-27 21:47:25.335983 test begin: paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 99226],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 99226],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51852544 	 1000 	 14.527280569076538 	 14.644553661346436 	 4.951376914978027 	 4.9924399852752686 	 40.05182361602783 	 26.7651948928833 	 6.821460008621216 	 4.550379037857056 	 
2025-07-27 21:49:03.998845 test begin: paddle.nn.functional.conv1d_transpose(Tensor([14176, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([14176, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51855616 	 1000 	 62.83341312408447 	 63.28732967376709 	 21.428447008132935 	 21.58521795272827 	 128.7172336578369 	 128.08558702468872 	 22.0020010471344 	 21.7779803276062 	 
2025-07-27 21:55:29.828044 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51152290 	 1000 	 2.239194869995117 	 2.3382256031036377 	 0.7629427909851074 	 0.7969169616699219 	 1.3152036666870117 	 1.5977387428283691 	 0.2671988010406494 	 0.40848875045776367 	 
2025-07-27 21:55:40.115280 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 128, 1551],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 128, 1551],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50837632 	 1000 	 0.4890902042388916 	 0.4947962760925293 	 0.16667628288269043 	 0.16825103759765625 	 17.721163272857666 	 39.74893927574158 	 3.614180326461792 	 8.10012173652649 	 
2025-07-27 21:56:39.738272 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 24807, 8],"float32"), bias=Tensor([24807],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 24807, 8],"float32"), bias=Tensor([24807],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50843879 	 1000 	 0.5465602874755859 	 1.0422091484069824 	 0.18425536155700684 	 0.35532259941101074 	 43.28152942657471 	 20.357342958450317 	 7.361046075820923 	 5.194716691970825 	 
2025-07-27 21:57:45.989970 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 99226],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 99226],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51065984 	 1000 	 7.892320394515991 	 7.979675769805908 	 2.6911802291870117 	 2.7200229167938232 	 17.128042697906494 	 13.62865138053894 	 2.9180455207824707 	 2.316378116607666 	 
2025-07-27 21:58:37.162540 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 49613, 28],"float32"), Tensor([49613, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 49613, 28],"float32"), Tensor([49613, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 53582168 	 1000 	 4.436385154724121 	 4.674933910369873 	 1.5106167793273926 	 1.5971081256866455 	 1.8375396728515625 	 1.8885688781738281 	 0.3134732246398926 	 0.4822402000427246 	 
2025-07-27 21:58:52.000817 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 49613],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 49613],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51852544 	 1000 	 14.54392385482788 	 14.67763066291809 	 4.959372043609619 	 5.002082586288452 	 29.54589033126831 	 26.764116287231445 	 5.031330823898315 	 4.550137281417847 	 
2025-07-27 22:00:20.864818 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50826356 	 1000 	 0.4747457504272461 	 0.8862612247467041 	 0.16174030303955078 	 0.3040614128112793 	 21.25149965286255 	 9.602850914001465 	 4.33638596534729 	 2.4484691619873047 	 
2025-07-27 22:00:54.353765 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 50863360 	 1000 	 0.47077226638793945 	 0.47544360160827637 	 0.15995311737060547 	 0.16292881965637207 	 20.767792463302612 	 20.13508367538452 	 3.5315701961517334 	 4.1067726612091064 	 
2025-07-27 22:01:39.320713 test begin: paddle.nn.functional.conv1d_transpose(Tensor([2, 907201, 28],"float32"), Tensor([907201, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([2, 907201, 28],"float32"), Tensor([907201, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 979777208 	 1000 	 80.98245978355408 	 84.581782579422 	 27.61630153656006 	 28.84550189971924 	 35.74204158782959 	 36.0900776386261 	 6.099800109863281 	 7.381489276885986 	 
2025-07-27 22:05:53.382723 test begin: paddle.nn.functional.conv1d_transpose(Tensor([7088, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
[Prof] paddle.nn.functional.conv1d_transpose 	 paddle.nn.functional.conv1d_transpose(Tensor([7088, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", ) 	 51069056 	 1000 	 8.877770900726318 	 8.973355531692505 	 3.0266201496124268 	 3.060800790786743 	 23.860719680786133 	 22.073863983154297 	 4.073490381240845 	 3.7537009716033936 	 
2025-07-27 22:07:00.010021 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 191, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 191, 4],"float32"), ) 	 50852604 	 1000 	 0.37659406661987305 	 0.37630629539489746 	 0.33474254608154297 	 0.3560972213745117 	 69.96727180480957 	 4.0221381187438965 	 23.79020380973816 	 1.0263235569000244 	 
2025-07-27 22:08:15.718319 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50851856 	 1000 	 1.0946698188781738 	 1.10459566116333 	 1.041111946105957 	 1.0832602977752686 	 11.810015201568604 	 13.11101245880127 	 4.025866508483887 	 4.471145391464233 	 
2025-07-27 22:08:44.685913 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 192, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 192, 4],"float32"), ) 	 50922240 	 1000 	 0.9601013660430908 	 1.1841552257537842 	 0.4905226230621338 	 1.1640384197235107 	 70.32484769821167 	 70.98205852508545 	 23.913589239120483 	 24.277273654937744 	 
2025-07-27 22:11:09.663495 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50921488 	 1000 	 1.6234426498413086 	 1.1061360836029053 	 1.052734375 	 1.076061725616455 	 11.948593854904175 	 13.120497226715088 	 4.078394174575806 	 4.467534303665161 	 
2025-07-27 22:11:40.213294 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 193, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 193, 4],"float32"), ) 	 50989828 	 1000 	 0.9812707901000977 	 0.3774604797363281 	 0.5013375282287598 	 0.35664796829223633 	 70.86303043365479 	 71.3195629119873 	 24.09362554550171 	 24.252138376235962 	 
2025-07-27 22:14:05.085642 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50989072 	 1000 	 1.0979585647583008 	 1.1080825328826904 	 1.0513999462127686 	 1.0874805450439453 	 11.953907251358032 	 13.141109943389893 	 4.074767827987671 	 4.480924129486084 	 
2025-07-27 22:14:34.247763 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 193],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 193],"float32"), ) 	 50989828 	 1000 	 1.3629906177520752 	 3.2879836559295654 	 0.6963520050048828 	 3.0388166904449463 	 58.797306299209595 	 58.82044720649719 	 19.988975048065186 	 19.993186950683594 	 
2025-07-27 22:16:41.288157 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50989072 	 1000 	 1.1100208759307861 	 1.1137006282806396 	 1.0644598007202148 	 1.093080997467041 	 12.051796436309814 	 13.164689064025879 	 4.09757399559021 	 4.487205743789673 	 
2025-07-27 22:17:10.573717 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 68161552 	 1000 	 1.4756157398223877 	 1.483863115310669 	 1.4286627769470215 	 1.462817907333374 	 15.853240251541138 	 17.62640070915222 	 5.399029970169067 	 6.007765054702759 	 
2025-07-27 22:17:49.819474 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 192],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 192],"float32"), ) 	 50922240 	 1000 	 2.3161706924438477 	 2.4313430786132812 	 1.1849284172058105 	 2.410041093826294 	 58.49877452850342 	 58.51861095428467 	 19.886804580688477 	 19.88719344139099 	 
2025-07-27 22:19:53.043366 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50921488 	 1000 	 1.1109256744384766 	 1.1150894165039062 	 1.0661373138427734 	 1.0945944786071777 	 11.914358377456665 	 13.138235569000244 	 4.071639060974121 	 4.478089332580566 	 
2025-07-27 22:20:22.357725 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 68690960 	 1000 	 1.4854702949523926 	 1.4929800033569336 	 1.4420700073242188 	 1.4724013805389404 	 16.069042682647705 	 17.789519786834717 	 5.470022678375244 	 6.060801982879639 	 
2025-07-27 22:21:01.581630 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 191],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 191],"float32"), ) 	 50852604 	 1000 	 2.851271152496338 	 2.9238955974578857 	 2.8075923919677734 	 2.903599500656128 	 57.73569130897522 	 3.2655372619628906 	 19.633573293685913 	 0.8347163200378418 	 
2025-07-27 22:22:10.531702 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50851856 	 1000 	 1.1007721424102783 	 1.1085710525512695 	 1.0584287643432617 	 1.0874476432800293 	 12.003233671188354 	 13.12168574333191 	 4.091140031814575 	 4.468007326126099 	 
2025-07-27 22:22:39.863636 test begin: paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 69222416 	 1000 	 1.4936928749084473 	 1.5042130947113037 	 1.4504048824310303 	 1.4830141067504883 	 16.106885194778442 	 17.915630102157593 	 5.502738952636719 	 6.106613397598267 	 
2025-07-27 22:23:19.452122 test begin: paddle.nn.functional.conv2d(Tensor([752, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([752, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50835216 	 1000 	 1.1061477661132812 	 1.1094388961791992 	 1.060962438583374 	 1.0862913131713867 	 12.643444061279297 	 12.731193542480469 	 4.3089599609375 	 4.341454267501831 	 
2025-07-27 22:23:49.401076 test begin: paddle.nn.functional.conv2d(Tensor([758, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([758, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50847414 	 1000 	 1.10127592086792 	 1.1097047328948975 	 1.0564756393432617 	 1.0869851112365723 	 12.594629526138306 	 12.702684164047241 	 4.292461633682251 	 4.3259477615356445 	 
2025-07-27 22:24:19.125258 test begin: paddle.nn.functional.conv2d(Tensor([764, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
[Prof] paddle.nn.functional.conv2d 	 paddle.nn.functional.conv2d(Tensor([764, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), ) 	 50854912 	 1000 	 1.1003270149230957 	 1.1821231842041016 	 1.0552372932434082 	 1.1492419242858887 	 12.51237177848816 	 12.645700216293335 	 4.2642128467559814 	 4.3111841678619385 	 
2025-07-27 22:24:48.973272 test begin: paddle.nn.functional.conv2d_transpose(Tensor([16, 32, 320, 320],"float32"), Tensor([32, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([16, 32, 320, 320],"float32"), Tensor([32, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 52428929 	 1000 	 0.6357033252716064 	 0.6295802593231201 	 0.21338987350463867 	 0.2145986557006836 	 0.6658549308776855 	 0.6184723377227783 	 0.09717154502868652 	 0.10512757301330566 	 
2025-07-27 22:24:52.421054 test begin: paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 156, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 156, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 51118337 	 1000 	 0.5171859264373779 	 0.5452361106872559 	 0.1762838363647461 	 0.17896366119384766 	 0.5616064071655273 	 0.5374698638916016 	 0.08166337013244629 	 0.0910959243774414 	 
2025-07-27 22:24:55.572348 test begin: paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 156],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 156],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 51118337 	 1000 	 0.5171864032745361 	 0.5208175182342529 	 0.17627453804016113 	 0.17751598358154297 	 0.5482923984527588 	 0.5362439155578613 	 0.07973074913024902 	 0.09109282493591309 	 
2025-07-27 22:24:58.514208 test begin: paddle.nn.functional.conv2d_transpose(Tensor([4, 56, 480, 480],"float32"), Tensor([56, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([4, 56, 480, 480],"float32"), Tensor([56, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 51609825 	 1000 	 0.5375387668609619 	 0.537186861038208 	 0.1835801601409912 	 0.18310046195983887 	 0.6126880645751953 	 0.6056513786315918 	 0.0893869400024414 	 0.1029353141784668 	 
2025-07-27 22:25:01.632179 test begin: paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 414, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 414, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 50872577 	 1000 	 0.5136044025421143 	 0.5221056938171387 	 0.17505431175231934 	 0.1764984130859375 	 0.5824117660522461 	 0.5733006000518799 	 0.08471155166625977 	 0.0970001220703125 	 
2025-07-27 22:25:04.746626 test begin: paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 414],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 414],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 50872577 	 1000 	 0.5135655403137207 	 0.5179619789123535 	 0.17504620552062988 	 0.17656397819519043 	 0.5829520225524902 	 0.5734145641326904 	 0.08486008644104004 	 0.09724640846252441 	 
2025-07-27 22:25:07.762482 test begin: paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 58982657 	 1000 	 0.5987846851348877 	 0.5966248512268066 	 0.20251846313476562 	 0.20335912704467773 	 0.6643712520599365 	 0.6568849086761475 	 0.0968787670135498 	 0.11144781112670898 	 
2025-07-27 22:25:11.237453 test begin: paddle.nn.functional.conv2d_transpose(Tensor([8, 28, 480, 480],"float32"), Tensor([28, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([8, 28, 480, 480],"float32"), Tensor([28, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 51609713 	 1000 	 0.7005259990692139 	 0.7043704986572266 	 0.23878026008605957 	 0.2400834560394287 	 0.6994976997375488 	 0.6527972221374512 	 0.10167312622070312 	 0.1109466552734375 	 
2025-07-27 22:25:14.994073 test begin: paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 207, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 207, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 50872577 	 1000 	 0.51495361328125 	 0.5177571773529053 	 0.17644929885864258 	 0.17646503448486328 	 0.5618185997009277 	 0.5539278984069824 	 0.0819404125213623 	 0.09513187408447266 	 
2025-07-27 22:25:18.051724 test begin: paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 52429057 	 1000 	 0.5299346446990967 	 0.5383691787719727 	 0.180619478225708 	 0.18320488929748535 	 0.5693590641021729 	 0.5615434646606445 	 0.08305001258850098 	 0.0954885482788086 	 
2025-07-27 22:25:23.909156 test begin: paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 480, 207],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
[Prof] paddle.nn.functional.conv2d_transpose 	 paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 480, 207],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", ) 	 50872577 	 1000 	 0.5176408290863037 	 0.5177798271179199 	 0.17505741119384766 	 0.17648768424987793 	 0.5541019439697266 	 0.5533478260040283 	 0.08082938194274902 	 0.09380817413330078 	 
2025-07-27 22:25:26.883418 test begin: paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", ) 	 50805060 	 1000 	 6.360702991485596 	 1.4784941673278809 	 6.263056039810181 	 1.4607794284820557 	 43.287917375564575 	 18.419737577438354 	 22.12428045272827 	 9.46372675895691 	 
2025-07-27 22:26:39.700960 test begin: paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50805392 	 1000 	 12.04413628578186 	 12.093478918075562 	 11.928760528564453 	 12.050375938415527 	 81.17463397979736 	 22.96955680847168 	 20.782541275024414 	 5.872998237609863 	 
2025-07-27 22:28:50.173032 test begin: paddle.nn.functional.conv3d(Tensor([33076, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([33076, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", ) 	 50805146 	 1000 	 19.009399890899658 	 26.3674213886261 	 9.714256048202515 	 13.4705810546875 	 241.08712720870972 	 47.28571105003357 	 35.19277596473694 	 6.902751445770264 	 
2025-07-27 22:34:27.326164 test begin: paddle.nn.functional.conv3d(Tensor([4, 3, 66151, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 3, 66151, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", ) 	 50804378 	 1000 	 19.24759554862976 	 19.199311017990112 	 9.834879636764526 	 9.813841104507446 	 277.76067090034485 	 277.6511399745941 	 47.50256109237671 	 47.19932460784912 	 
2025-07-27 22:44:24.849884 test begin: paddle.nn.functional.conv3d(Tensor([4, 3, 8, 66151, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 3, 8, 66151, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", ) 	 50804378 	 1000 	 15.281564474105835 	 15.467772245407104 	 7.80810546875 	 7.899463653564453 	 212.79464483261108 	 224.59239554405212 	 36.43687844276428 	 38.176048278808594 	 
2025-07-27 22:52:20.190363 test begin: paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 66151],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 66151],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", ) 	 50804378 	 1000 	 15.022855758666992 	 15.425986528396606 	 7.711053133010864 	 7.880191326141357 	 196.70108890533447 	 221.8804910182953 	 33.6612708568573 	 37.717127084732056 	 
2025-07-27 22:59:52.526221 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", ) 	 50805060 	 1000 	 8.46189022064209 	 1.9529235363006592 	 8.365158081054688 	 1.9340312480926514 	 57.3465473651886 	 22.222643613815308 	 29.303375959396362 	 11.351877212524414 	 
2025-07-27 23:01:24.439310 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50805392 	 1000 	 12.197855710983276 	 12.254148244857788 	 12.100421667098999 	 12.211346864700317 	 88.91404438018799 	 87.0016758441925 	 18.229000568389893 	 22.18363380432129 	 
2025-07-27 23:04:47.669732 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", ) 	 50805060 	 1000 	 8.542940616607666 	 1.963573694229126 	 8.445366859436035 	 1.942211627960205 	 57.451770544052124 	 12.201234579086304 	 29.354757070541382 	 6.233983516693115 	 
2025-07-27 23:06:09.873440 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50805392 	 1000 	 12.02803921699524 	 12.05981183052063 	 11.930303573608398 	 12.014116287231445 	 88.98725914955139 	 95.39071226119995 	 18.239910125732422 	 32.451093673706055 	 
2025-07-27 23:09:40.929694 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", ) 	 50805060 	 1000 	 8.514427185058594 	 2.009333610534668 	 8.395207166671753 	 1.9902660846710205 	 59.67782926559448 	 13.656215190887451 	 30.495002031326294 	 6.977634429931641 	 
2025-07-27 23:11:07.475715 test begin: paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d 	 paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50805392 	 1000 	 12.377464294433594 	 11.982672452926636 	 11.823254823684692 	 11.93933367729187 	 93.31595659255981 	 100.99400401115417 	 19.11848521232605 	 34.34617829322815 	 
2025-07-27 23:14:48.933594 test begin: paddle.nn.functional.conv3d_transpose(Tensor([2, 2451, 2, 2, 2],"float32"), Tensor([2451, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([2, 2451, 2, 2, 2],"float32"), Tensor([2451, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", ) 	 50863164 	 1000 	 3.120422601699829 	 0.6340420246124268 	 1.0631961822509766 	 0.21618151664733887 	 4.5171425342559814 	 4.5122411251068115 	 0.7683866024017334 	 1.1506667137145996 	 
2025-07-27 23:15:02.694538 test begin: paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 9801, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
Traceback (most recent call last):
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 189, in <module>
    main()
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 163, in main
    case.test()
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.paddle_torch_gpu_performance.APITestPaddleTorchGPUPerformance object at 0x7f9d4f156cb0>,)) (kwargs={}) timed out after 600.000000 seconds.

FATAL: exception not rethrown


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
No stack trace in paddle, may be caused by external reasons.

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1753630101 (unix time) try "date -d @1753630101" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x27110) received by PID 160016 (TID 0x7f9d2abff640) from PID 160016 ***]

2025-07-27 23:28:32.315230 test begin: paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
W0727 23:28:33.605034 110768 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
W0727 23:28:33.614989 110768 gpu_resources.cc:243] WARNING: device: 0. The installed Paddle is compiled with CUDNN 8.9, but CUDNN version in your machine is 8.9, which may cause serious incompatible bug. Please recompile or reinstall Paddle with compatible CUDNN version.
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50805066 	 1000 	 15.656485557556152 	 26.97729730606079 	 8.003809928894043 	 13.784756898880005 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([24807, 6, 8, 6, 8]) and output[0] has a shape of torch.Size([24807, 6, 10, 10, 10]).
2025-07-27 23:31:19.911079 test begin: paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", ) 	 50805172 	 1000 	 20.938445329666138 	 20.083824396133423 	 7.1383302211761475 	 6.845237970352173 	 133.93113684654236 	 25.60741639137268 	 22.89954161643982 	 5.225570917129517 	 
2025-07-27 23:34:44.538150 test begin: paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 49613, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 49613, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50804042 	 1000 	 5.693096160888672 	 31.452165365219116 	 2.908496379852295 	 16.067784547805786 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([4, 6, 49613, 6, 8]) and output[0] has a shape of torch.Size([4, 6, 49615, 10, 10]).
2025-07-27 23:37:41.546629 test begin: paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 49613, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 49613, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50804042 	 1000 	 7.403711318969727 	 28.575368404388428 	 3.7848141193389893 	 14.597015619277954 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([4, 6, 8, 49611, 8]) and output[0] has a shape of torch.Size([4, 6, 10, 49615, 10]).
2025-07-27 23:40:43.322709 test begin: paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 49613],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
[Prof] paddle.nn.functional.conv3d_transpose 	 paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 49613],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", ) 	 50804042 	 1000 	 5.626354217529297 	 30.624582052230835 	 2.8705718517303467 	 15.646379709243774 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([4, 6, 8, 6, 49613]) and output[0] has a shape of torch.Size([4, 6, 10, 10, 49615]).
2025-07-27 23:43:22.994854 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, ) 	 101606430 	 1000 	 1.738518238067627 	 1.6268739700317383 	 0.06759524345397949 	 0.06593871116638184 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:43:31.920487 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([16934401, 3],"float32"), Tensor([16934401, 3],"float32"), Tensor([16934401],"int64"), margin=0.5, reduction="mean", name=None, )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([16934401, 3],"float32"), Tensor([16934401, 3],"float32"), Tensor([16934401],"int64"), margin=0.5, reduction="mean", name=None, ) 	 118540807 	 1000 	 3.9634854793548584 	 3.910677433013916 	 0.16765642166137695 	 0.17309904098510742 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:43:47.691173 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([25401601, 3],"float32"), Tensor([25401601, 3],"float32"), Tensor([25401601],"int64"), margin=0.5, reduction="mean", name=None, )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([25401601, 3],"float32"), Tensor([25401601, 3],"float32"), Tensor([25401601],"int64"), margin=0.5, reduction="mean", name=None, ) 	 177811207 	 1000 	 5.883184432983398 	 5.821843385696411 	 0.24922776222229004 	 0.25914621353149414 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:44:12.455394 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", ) 	 50803215 	 1000 	 1.815011739730835 	 1.5763328075408936 	 0.07077980041503906 	 0.06396913528442383 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:44:20.009118 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", ) 	 50803215 	 1000 	 1.8317768573760986 	 1.5731158256530762 	 0.07435417175292969 	 0.06599974632263184 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:44:27.537154 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="mean", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="mean", ) 	 355622407 	 1000 	 19.413487195968628 	 19.41968584060669 	 0.8214483261108398 	 0.860788106918335 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:45:42.561039 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="none", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="none", ) 	 355622407 	 1000 	 19.125711917877197 	 19.132451057434082 	 0.8846328258514404 	 0.9262387752532959 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:46:59.711563 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="mean", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="mean", ) 	 59270407 	 1000 	 3.3325860500335693 	 3.339332103729248 	 0.14103031158447266 	 0.1478567123413086 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:47:13.165941 test begin: paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="none", )
[Prof] paddle.nn.functional.cosine_embedding_loss 	 paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="none", ) 	 59270407 	 1000 	 3.3224258422851562 	 3.2784268856048584 	 0.1514885425567627 	 0.15880346298217773 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 23:47:27.182246 test begin: paddle.nn.functional.cosine_similarity(Tensor([10, 12, 423361],"float32"), Tensor([10, 1, 423361],"float32"), axis=2, eps=1e-06, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([10, 12, 423361],"float32"), Tensor([10, 1, 423361],"float32"), axis=2, eps=1e-06, ) 	 55036930 	 1000 	 1.0551223754882812 	 1.4022727012634277 	 0.08235907554626465 	 0.11054801940917969 	 3.1889243125915527 	 7.057253122329712 	 0.20367717742919922 	 0.26816511154174805 	 
2025-07-27 23:47:41.574016 test begin: paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, ) 	 50803400 	 1000 	 1.3967318534851074 	 2.0964195728302 	 0.14250874519348145 	 0.17908048629760742 	 7.756078243255615 	 7.845489740371704 	 0.4407062530517578 	 0.3077085018157959 	 
2025-07-27 23:48:01.627904 test begin: paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 508033, 10],"float32"), axis=2, eps=1e-06, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 508033, 10],"float32"), axis=2, eps=1e-06, ) 	 101606600 	 1000 	 2.208116292953491 	 2.5572593212127686 	 0.22484827041625977 	 0.21802592277526855 	 5.899832010269165 	 7.795861721038818 	 0.43033838272094727 	 0.33154869079589844 	 
2025-07-27 23:48:22.017624 test begin: paddle.nn.functional.cosine_similarity(Tensor([210, 241921],"float32"), Tensor([210, 241921],"float32"), axis=-1, eps=1e-08, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([210, 241921],"float32"), Tensor([210, 241921],"float32"), axis=-1, eps=1e-08, ) 	 101606820 	 1000 	 1.5871922969818115 	 1.552863597869873 	 0.12426137924194336 	 0.12238574028015137 	 5.438347816467285 	 7.006416082382202 	 0.39778900146484375 	 0.2755122184753418 	 
2025-07-27 23:48:40.355588 test begin: paddle.nn.functional.cosine_similarity(Tensor([32, 1587601],"float32"), Tensor([32, 1587601],"float32"), )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([32, 1587601],"float32"), Tensor([32, 1587601],"float32"), ) 	 101606464 	 1000 	 1.5267393589019775 	 1.6143271923065186 	 0.11958646774291992 	 0.12711834907531738 	 5.434682130813599 	 7.050444602966309 	 0.39638638496398926 	 0.27712392807006836 	 
2025-07-27 23:48:57.805756 test begin: paddle.nn.functional.cosine_similarity(Tensor([396901, 128],"float32"), Tensor([396901, 128],"float32"), )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([396901, 128],"float32"), Tensor([396901, 128],"float32"), ) 	 101606656 	 1000 	 2.3374264240264893 	 1.5884075164794922 	 0.23792648315429688 	 0.13552021980285645 	 5.481281042098999 	 7.050155401229858 	 0.399827241897583 	 0.29977917671203613 	 
2025-07-27 23:49:16.078877 test begin: paddle.nn.functional.cosine_similarity(Tensor([423361, 12, 10],"float32"), Tensor([423361, 1, 10],"float32"), axis=2, eps=1e-06, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([423361, 12, 10],"float32"), Tensor([423361, 1, 10],"float32"), axis=2, eps=1e-06, ) 	 55036930 	 1000 	 1.4626743793487549 	 2.126945734024048 	 0.1489701271057129 	 0.18088912963867188 	 3.5879323482513428 	 7.846440076828003 	 0.22913146018981934 	 0.32042384147644043 	 
2025-07-27 23:49:34.070163 test begin: paddle.nn.functional.cosine_similarity(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), axis=-1, eps=1e-08, )
[Prof] paddle.nn.functional.cosine_similarity 	 paddle.nn.functional.cosine_similarity(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), axis=-1, eps=1e-08, ) 	 101607424 	 1000 	 1.4984469413757324 	 1.5407946109771729 	 0.15265774726867676 	 0.15647268295288086 	 5.442314624786377 	 7.019957780838013 	 0.3969461917877197 	 0.2986185550689697 	 
2025-07-27 23:49:53.593576 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 1024, 50304],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 1024, 50304],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 51512320 	 1000 	 0.6498010158538818 	 86.11352276802063 	 0.13312387466430664 	 29.36474299430847 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 1024, 1]) and output[0] has a shape of torch.Size([1, 1024]).
2025-07-27 23:51:21.883853 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 2048, 151936],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 2048, 151936],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 311166976 	 1000 	 3.7743239402770996 	 270.43980073928833 	 0.7745797634124756 	 92.20270919799805 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 2048, 1]) and output[0] has a shape of torch.Size([1, 2048]).
2025-07-27 23:56:04.646657 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 2048, 24807],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 2048, 24807],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 50806784 	 1000 	 0.4749009609222412 	 42.961915731430054 	 0.09703254699707031 	 14.644834518432617 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 2048, 1]) and output[0] has a shape of torch.Size([1, 2048]).
2025-07-27 23:56:49.452787 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 335, 151936],"float32"), Tensor([1, 335, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 335, 151936],"float32"), Tensor([1, 335, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 50898895 	 1000 	 0.6762559413909912 	 238.93031239509583 	 0.13938283920288086 	 81.47157311439514 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 335, 1]) and output[0] has a shape of torch.Size([1, 335]).
2025-07-28 00:00:50.589066 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 4096, 100352],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 4096, 100352],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 411045888 	 1000 	 4.946770668029785 	 190.12242674827576 	 1.0142602920532227 	 64.81447172164917 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 4096, 1]) and output[0] has a shape of torch.Size([1, 4096]).
2025-07-28 00:04:17.779968 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 4096, 12404],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 4096, 12404],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 50810880 	 1000 	 0.39187169075012207 	 22.287404537200928 	 0.08029055595397949 	 7.645559549331665 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 4096, 1]) and output[0] has a shape of torch.Size([1, 4096]).
2025-07-28 00:04:43.093889 test begin: paddle.nn.functional.cross_entropy(Tensor([1, 507, 100352],"float32"), Tensor([1, 507, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([1, 507, 100352],"float32"), Tensor([1, 507, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 50878971 	 1000 	 0.6479282379150391 	 161.30088639259338 	 0.13277626037597656 	 54.99676203727722 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([1, 507, 1]) and output[0] has a shape of torch.Size([1, 507]).
2025-07-28 00:07:27.340955 test begin: paddle.nn.functional.cross_entropy(Tensor([8, 1024, 6202],"float32"), Tensor([8, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([8, 1024, 6202],"float32"), Tensor([8, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 50814976 	 1000 	 0.4344797134399414 	 11.636290788650513 	 0.08903264999389648 	 3.966099500656128 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([8, 1024, 1]) and output[0] has a shape of torch.Size([8, 1024]).
2025-07-28 00:07:41.017043 test begin: paddle.nn.functional.cross_entropy(Tensor([8, 127, 50304],"float32"), Tensor([8, 127, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
[Prof] paddle.nn.functional.cross_entropy 	 paddle.nn.functional.cross_entropy(Tensor([8, 127, 50304],"float32"), Tensor([8, 127, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, ) 	 51109880 	 1000 	 0.6441733837127686 	 72.60988783836365 	 0.13202953338623047 	 24.756176233291626 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([8, 127, 1]) and output[0] has a shape of torch.Size([8, 127]).
2025-07-28 00:08:55.663098 test begin: paddle.nn.functional.dropout(Tensor([7576, 13412],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
[Prof] paddle.nn.functional.dropout 	 paddle.nn.functional.dropout(Tensor([7576, 13412],"bfloat16"), 0.0, training=True, mode="upscale_in_train", ) 	 101609312 	 1000 	 0.0010724067687988281 	 0.007042884826660156 	 1.0013580322265625e-05 	 2.4318695068359375e-05 	 0.041555166244506836 	 0.4551258087158203 	 2.956390380859375e-05 	 0.38199758529663086 	 combined
2025-07-28 00:08:59.573488 test begin: paddle.nn.functional.dropout(Tensor([7712, 13176],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
[Prof] paddle.nn.functional.dropout 	 paddle.nn.functional.dropout(Tensor([7712, 13176],"bfloat16"), 0.0, training=True, mode="upscale_in_train", ) 	 101613312 	 1000 	 0.0010175704956054688 	 0.006840944290161133 	 1.4781951904296875e-05 	 2.0742416381835938e-05 	 0.033646345138549805 	 0.4536471366882324 	 2.5510787963867188e-05 	 0.3764762878417969 	 combined
2025-07-28 00:09:05.011621 test begin: paddle.nn.functional.dropout(Tensor([79381, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
[Prof] paddle.nn.functional.dropout 	 paddle.nn.functional.dropout(Tensor([79381, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", ) 	 101607680 	 1000 	 0.0009860992431640625 	 0.006966829299926758 	 5.9604644775390625e-06 	 2.956390380859375e-05 	 0.033739566802978516 	 0.4535963535308838 	 3.457069396972656e-05 	 0.38509488105773926 	 combined
2025-07-28 00:09:08.896041 test begin: paddle.nn.functional.dropout(Tensor([8168, 12440],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
[Prof] paddle.nn.functional.dropout 	 paddle.nn.functional.dropout(Tensor([8168, 12440],"bfloat16"), 0.0, training=True, mode="upscale_in_train", ) 	 101609920 	 1000 	 0.0010099411010742188 	 0.006983518600463867 	 1.2636184692382812e-05 	 2.8133392333984375e-05 	 0.03349709510803223 	 0.45360517501831055 	 4.9114227294921875e-05 	 0.3843104839324951 	 combined
2025-07-28 00:09:12.802408 test begin: paddle.nn.functional.elu(Tensor([1, 21504, 2363],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([1, 21504, 2363],"float32"), ) 	 50813952 	 1000 	 0.2955036163330078 	 0.30149006843566895 	 0.2860898971557617 	 0.2836921215057373 	 0.45029306411743164 	 0.4499328136444092 	 0.39335203170776367 	 0.38520002365112305 	 
2025-07-28 00:09:16.025523 test begin: paddle.nn.functional.elu(Tensor([1, 25401601, 2],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([1, 25401601, 2],"float32"), ) 	 50803202 	 1000 	 0.2954380512237549 	 0.29926061630249023 	 0.28610777854919434 	 0.28270792961120605 	 0.4500889778137207 	 0.4484376907348633 	 0.3857407569885254 	 0.37984514236450195 	 
2025-07-28 00:09:19.173929 test begin: paddle.nn.functional.elu(Tensor([10, 20, 254017],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([10, 20, 254017],"float32"), ) 	 50803400 	 1000 	 0.295499324798584 	 0.2992422580718994 	 0.28624534606933594 	 0.2826268672943115 	 0.4502403736114502 	 0.4483935832977295 	 0.393632173538208 	 0.38295865058898926 	 
2025-07-28 00:09:22.386526 test begin: paddle.nn.functional.elu(Tensor([10, 5080321, 1],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([10, 5080321, 1],"float32"), ) 	 50803210 	 1000 	 0.29546189308166504 	 0.2992830276489258 	 0.28401827812194824 	 0.2827301025390625 	 0.4513990879058838 	 0.44982361793518066 	 0.38651084899902344 	 0.38633131980895996 	 
2025-07-28 00:09:25.579741 test begin: paddle.nn.functional.elu(Tensor([1182, 21504, 2],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([1182, 21504, 2],"float32"), ) 	 50835456 	 1000 	 0.29597973823547363 	 0.30005478858947754 	 0.28664398193359375 	 0.2833390235900879 	 0.450406551361084 	 0.44877052307128906 	 0.3938558101654053 	 0.38489556312561035 	 
2025-07-28 00:09:28.764641 test begin: paddle.nn.functional.elu(Tensor([15, 3386881],"float32"), 1.0, )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([15, 3386881],"float32"), 1.0, ) 	 50803215 	 1000 	 0.29549670219421387 	 0.29921793937683105 	 0.2861208915710449 	 0.28284788131713867 	 0.44995808601379395 	 0.4484107494354248 	 0.3932027816772461 	 0.3872530460357666 	 
2025-07-28 00:09:31.921833 test begin: paddle.nn.functional.elu(Tensor([2540161, 20, 1],"float32"), )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([2540161, 20, 1],"float32"), ) 	 50803220 	 1000 	 0.2954897880554199 	 0.3048441410064697 	 0.2790100574493408 	 0.2754993438720703 	 0.4500758647918701 	 0.4498424530029297 	 0.37888026237487793 	 0.3742492198944092 	 
2025-07-28 00:09:35.139493 test begin: paddle.nn.functional.elu(Tensor([2540161, 20],"float32"), 1.0, )
[Prof] paddle.nn.functional.elu 	 paddle.nn.functional.elu(Tensor([2540161, 20],"float32"), 1.0, ) 	 50803220 	 1000 	 0.2955312728881836 	 0.7538893222808838 	 0.2790188789367676 	 0.27556872367858887 	 0.45009541511535645 	 0.4496486186981201 	 0.38439178466796875 	 0.3433253765106201 	 
2025-07-28 00:09:39.540863 test begin: paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([151936, 669],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
W0728 00:09:41.012367 40664 backward.cc:462] While running Node (EmbeddingGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([151936, 669],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, ) 	 101646208 	 1000 	 0.019332408905029297 	 0.02952289581298828 	 2.4318695068359375e-05 	 6.628036499023438e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:41.269533 test begin: paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([24807, 4096],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
W0728 00:09:42.822840 40727 backward.cc:462] While running Node (EmbeddingGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([24807, 4096],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, ) 	 101610496 	 1000 	 0.014087677001953125 	 0.047014713287353516 	 0.001470327377319336 	 0.02572011947631836 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:43.019043 test begin: paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([100352, 1013],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
W0728 00:09:44.588775 40753 backward.cc:462] While running Node (EmbeddingGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([100352, 1013],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, ) 	 101660673 	 1000 	 0.019448041915893555 	 0.04702329635620117 	 2.1219253540039062e-05 	 0.017111539840698242 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:44.778506 test begin: paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([12404, 8192],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
W0728 00:09:47.094705 41196 backward.cc:462] While running Node (EmbeddingGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([12404, 8192],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, ) 	 101617665 	 1000 	 0.1513683795928955 	 0.39720797538757324 	 0.13989543914794922 	 0.37545251846313477 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:47.644053 test begin: paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([24807, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([24807, 4096],"float16"), padding_idx=None, sparse=False, name=None, ) 	 101617664 	 1000 	 0.1500687599182129 	 0.4576401710510254 	 0.13911867141723633 	 0.4202277660369873 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:51.271356 test begin: paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([50304, 2020],"float16"), padding_idx=None, sparse=False, name=None, )
[Prof] paddle.nn.functional.embedding 	 paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([50304, 2020],"float16"), padding_idx=None, sparse=False, name=None, ) 	 101622272 	 1000 	 0.07940053939819336 	 0.23237061500549316 	 0.060558319091796875 	 0.20233488082885742 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-28 00:09:54.426996 test begin: paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
[Prof] paddle.nn.functional.fold 	 paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, ) 	 254016 	 1000 	 9.893625974655151 	 0.023697853088378906 	 0.005682468414306641 	 5.936622619628906e-05 	 9.037400007247925 	 7.846570253372192 	 0.005209207534790039 	 0.0001575946807861328 	 
2025-07-28 00:10:21.298189 test begin: paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
[Prof] paddle.nn.functional.fold 	 paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, ) 	 254016 	 1000 	 9.85654354095459 	 0.027864456176757812 	 0.005692720413208008 	 5.412101745605469e-05 	 9.036466121673584 	 8.870908975601196 	 0.005211353302001953 	 0.00011348724365234375 	 
2025-07-28 00:10:49.158567 test begin: paddle.nn.functional.fold(Tensor([3528, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
[Prof] paddle.nn.functional.fold 	 paddle.nn.functional.fold(Tensor([3528, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, ) 	 508032 	 1000 	 19.693501472473145 	 0.0210416316986084 	 0.005674123764038086 	 4.839897155761719e-05 	 18.1738064289093 	 16.905715703964233 	 0.005216360092163086 	 0.0002989768981933594 	 
2025-07-28 00:11:44.214566 test begin: paddle.nn.functional.gather_tree(Tensor([11, 28, 8],"int64"), Tensor([11, 28, 8],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([11, 28, 8],"int64"), Tensor([11, 28, 8],"int64"), ) 	 4928 	 1000 	 0.016014814376831055 	 149.17974519729614 	 4.1484832763671875e-05 	 0.0002925395965576172 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:14:13.651855 test begin: paddle.nn.functional.gather_tree(Tensor([11, 4, 57],"int64"), Tensor([11, 4, 57],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([11, 4, 57],"int64"), Tensor([11, 4, 57],"int64"), ) 	 5016 	 1000 	 0.012559890747070312 	 160.62761187553406 	 2.6702880859375e-05 	 0.00028252601623535156 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:16:54.474138 test begin: paddle.nn.functional.gather_tree(Tensor([11, 57, 4],"int64"), Tensor([11, 57, 4],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([11, 57, 4],"int64"), Tensor([11, 57, 4],"int64"), ) 	 5016 	 1000 	 0.011021852493286133 	 154.68246984481812 	 1.8596649169921875e-05 	 0.0002799034118652344 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:19:29.326512 test begin: paddle.nn.functional.gather_tree(Tensor([158, 4, 4],"int64"), Tensor([158, 4, 4],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([158, 4, 4],"int64"), Tensor([158, 4, 4],"int64"), ) 	 5056 	 1000 	 0.010944366455078125 	 157.6165533065796 	 2.4318695068359375e-05 	 0.0002980232238769531 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:22:07.186083 test begin: paddle.nn.functional.gather_tree(Tensor([21, 30, 4],"int64"), Tensor([21, 30, 4],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([21, 30, 4],"int64"), Tensor([21, 30, 4],"int64"), ) 	 5040 	 1000 	 0.011468887329101562 	 153.92243313789368 	 2.288818359375e-05 	 0.00028634071350097656 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:24:41.291800 test begin: paddle.nn.functional.gather_tree(Tensor([21, 8, 15],"int64"), Tensor([21, 8, 15],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([21, 8, 15],"int64"), Tensor([21, 8, 15],"int64"), ) 	 5040 	 1000 	 0.010967016220092773 	 157.24759936332703 	 1.2636184692382812e-05 	 0.00027823448181152344 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:27:18.713303 test begin: paddle.nn.functional.gather_tree(Tensor([79, 4, 8],"int64"), Tensor([79, 4, 8],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([79, 4, 8],"int64"), Tensor([79, 4, 8],"int64"), ) 	 5056 	 1000 	 0.010927915573120117 	 161.8257176876068 	 1.0251998901367188e-05 	 0.0002865791320800781 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:30:00.762985 test begin: paddle.nn.functional.gather_tree(Tensor([79, 8, 4],"int64"), Tensor([79, 8, 4],"int64"), )
[Prof] paddle.nn.functional.gather_tree 	 paddle.nn.functional.gather_tree(Tensor([79, 8, 4],"int64"), Tensor([79, 8, 4],"int64"), ) 	 5056 	 1000 	 0.011005878448486328 	 163.29102110862732 	 2.4080276489257812e-05 	 0.00030922889709472656 	 None 	 None 	 None 	 None 	 combined
2025-07-28 00:32:44.274830 test begin: paddle.nn.functional.gelu(Tensor([11, 96, 96, 512],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([11, 96, 96, 512],"float32"), False, None, ) 	 51904512 	 1000 	 0.34756970405578613 	 0.30442285537719727 	 0.3386204242706299 	 0.29358935356140137 	 0.4574124813079834 	 0.4592728614807129 	 0.4021308422088623 	 0.39748072624206543 	 
2025-07-28 00:32:47.507312 test begin: paddle.nn.functional.gelu(Tensor([124, 9, 96, 512],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([124, 9, 96, 512],"float32"), False, None, ) 	 54853632 	 1000 	 0.3671717643737793 	 0.33066701889038086 	 0.358168363571167 	 0.3118255138397217 	 0.48520517349243164 	 0.4849710464477539 	 0.42967867851257324 	 0.42365527153015137 	 
2025-07-28 00:32:51.101769 test begin: paddle.nn.functional.gelu(Tensor([124, 96, 9, 512],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([124, 96, 9, 512],"float32"), False, None, ) 	 54853632 	 1000 	 0.3658595085144043 	 0.3234398365020752 	 0.35393190383911133 	 0.3102238178253174 	 0.4849536418914795 	 0.48503875732421875 	 0.42945170402526855 	 0.4217872619628906 	 
2025-07-28 00:32:54.676703 test begin: paddle.nn.functional.gelu(Tensor([124, 96, 96, 45],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([124, 96, 96, 45],"float32"), False, None, ) 	 51425280 	 1000 	 0.34339427947998047 	 0.30164575576782227 	 0.3343334197998047 	 0.29054689407348633 	 0.4542994499206543 	 0.4550633430480957 	 0.3985726833343506 	 0.39129137992858887 	 
2025-07-28 00:32:59.497983 test begin: paddle.nn.functional.gelu(Tensor([128, 6, 96, 768],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([128, 6, 96, 768],"float32"), False, None, ) 	 56623104 	 1000 	 0.37750935554504395 	 0.33588242530822754 	 0.36840176582336426 	 0.3141477108001709 	 0.49939799308776855 	 0.5033166408538818 	 0.4439411163330078 	 0.4392733573913574 	 
2025-07-28 00:33:03.967825 test begin: paddle.nn.functional.gelu(Tensor([128, 9, 96, 512],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([128, 9, 96, 512],"float32"), False, None, ) 	 56623104 	 1000 	 0.377551794052124 	 0.33149051666259766 	 0.361419677734375 	 0.3142828941345215 	 0.499009370803833 	 0.5004642009735107 	 0.43410825729370117 	 0.42928099632263184 	 
2025-07-28 00:33:07.563454 test begin: paddle.nn.functional.gelu(Tensor([128, 96, 6, 768],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([128, 96, 6, 768],"float32"), False, None, ) 	 56623104 	 1000 	 0.3787703514099121 	 0.33138608932495117 	 0.36971449851989746 	 0.32073521614074707 	 0.5008244514465332 	 0.5004572868347168 	 0.4454965591430664 	 0.4385209083557129 	 
2025-07-28 00:33:11.144381 test begin: paddle.nn.functional.gelu(Tensor([128, 96, 9, 512],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([128, 96, 9, 512],"float32"), False, None, ) 	 56623104 	 1000 	 0.37746405601501465 	 0.33145999908447266 	 0.3684508800506592 	 0.3206644058227539 	 0.49904441833496094 	 0.5004136562347412 	 0.4436643123626709 	 0.4313483238220215 	 
2025-07-28 00:33:14.770116 test begin: paddle.nn.functional.gelu(Tensor([128, 96, 96, 44],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([128, 96, 96, 44],"float32"), False, None, ) 	 51904512 	 1000 	 0.34639644622802734 	 0.30791592597961426 	 0.3369014263153076 	 0.29479169845581055 	 0.4576072692871094 	 0.4608125686645508 	 0.3719608783721924 	 0.3874778747558594 	 
2025-07-28 00:33:18.073604 test begin: paddle.nn.functional.gelu(Tensor([8, 96, 96, 768],"float32"), False, None, )
[Prof] paddle.nn.functional.gelu 	 paddle.nn.functional.gelu(Tensor([8, 96, 96, 768],"float32"), False, None, ) 	 56623104 	 1000 	 0.37750911712646484 	 0.331496000289917 	 0.36705899238586426 	 0.31695103645324707 	 0.49927425384521484 	 0.5003662109375 	 0.4438927173614502 	 0.43725109100341797 	 
2025-07-28 00:33:21.665359 test begin: paddle.nn.functional.glu(Tensor([200, 498, 512],"float32"), -1, None, )
[Prof] paddle.nn.functional.glu 	 paddle.nn.functional.glu(Tensor([200, 498, 512],"float32"), -1, None, ) 	 50995200 	 1000 	 0.7197833061218262 	 0.24565744400024414 	 0.2450881004333496 	 0.22544336318969727 	 1.1201138496398926 	 0.3800785541534424 	 0.38092732429504395 	 0.31568193435668945 	 
2025-07-28 00:33:25.430495 test begin: paddle.nn.functional.glu(Tensor([209, 477, 512],"float32"), -1, None, )
[Prof] paddle.nn.functional.glu 	 paddle.nn.functional.glu(Tensor([209, 477, 512],"float32"), -1, None, ) 	 51042816 	 1000 	 0.722271203994751 	 0.26463770866394043 	 0.24686956405639648 	 0.22720956802368164 	 1.120765209197998 	 0.38042378425598145 	 0.38156962394714355 	 0.2962956428527832 	 
2025-07-28 00:33:29.359548 test begin: paddle.nn.functional.glu(Tensor([218, 457, 512],"float32"), -1, None, )
[Prof] paddle.nn.functional.glu 	 paddle.nn.functional.glu(Tensor([218, 457, 512],"float32"), -1, None, ) 	 51008512 	 1000 	 0.7198081016540527 	 0.2456526756286621 	 0.24512529373168945 	 0.22526335716247559 	 1.120868444442749 	 0.3801891803741455 	 0.38201022148132324 	 0.29439496994018555 	 
2025-07-28 00:33:33.070640 test begin: paddle.nn.functional.glu(Tensor([30, 3308, 512],"float32"), -1, None, )
[Prof] paddle.nn.functional.glu 	 paddle.nn.functional.glu(Tensor([30, 3308, 512],"float32"), -1, None, ) 	 50810880 	 1000 	 0.7173886299133301 	 0.26051998138427734 	 0.24427533149719238 	 0.22406935691833496 	 1.114593505859375 	 0.37882161140441895 	 0.3794739246368408 	 0.3134293556213379 	 
2025-07-28 00:33:39.503445 test begin: paddle.nn.functional.glu(Tensor([30, 457, 3706],"float32"), -1, None, )
[Prof] paddle.nn.functional.glu 	 paddle.nn.functional.glu(Tensor([30, 457, 3706],"float32"), -1, None, ) 	 50809260 	 1000 	 0.746258020401001 	 0.24918532371520996 	 0.2544703483581543 	 0.2288212776184082 	 1.1812598705291748 	 0.3826143741607666 	 0.40222764015197754 	 0.31935715675354004 	 
2025-07-28 00:33:43.376445 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, ) 	 53350400 	 1000 	 0.061606645584106445 	 0.0787956714630127 	 0.04958009719848633 	 0.04091048240661621 	 0.33367180824279785 	 0.3245062828063965 	 0.17045068740844727 	 0.1664419174194336 	 
2025-07-28 00:33:45.108401 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 662, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 662, 2],"float32"), align_corners=False, ) 	 50974000 	 1000 	 0.012000322341918945 	 0.020574569702148438 	 2.47955322265625e-05 	 8.344650268554688e-05 	 0.17685484886169434 	 0.16921615600585938 	 0.09030747413635254 	 0.08282732963562012 	 
2025-07-28 00:33:46.353348 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 662],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 662],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, ) 	 53350400 	 1000 	 0.06360554695129395 	 0.06324458122253418 	 0.05144381523132324 	 0.04490017890930176 	 0.3411715030670166 	 0.3296356201171875 	 0.1742861270904541 	 0.16841435432434082 	 
2025-07-28 00:33:48.044884 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, ) 	 61491200 	 1000 	 0.06574892997741699 	 0.07610917091369629 	 0.053846120834350586 	 0.04628300666809082 	 0.3619832992553711 	 0.35089564323425293 	 0.1848597526550293 	 0.1792140007019043 	 
2025-07-28 00:33:50.141610 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 254017, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 254017, 2],"float32"), align_corners=False, ) 	 109785800 	 1000 	 0.7019331455230713 	 0.7244644165039062 	 0.6901156902313232 	 0.7056591510772705 	 2.709627628326416 	 2.7655413150787354 	 1.3866212368011475 	 1.4137768745422363 	 
2025-07-28 00:33:59.503959 test begin: paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, ) 	 111667200 	 1000 	 0.7272815704345703 	 0.7545111179351807 	 0.7154362201690674 	 0.7321093082427979 	 2.775867223739624 	 2.8455545902252197 	 1.4184696674346924 	 1.453963279724121 	 
2025-07-28 00:34:09.163203 test begin: paddle.nn.functional.grid_sample(Tensor([100, 21, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([100, 21, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, ) 	 1291315200 	 1000 	 17.189055681228638 	 15.017536640167236 	 17.176848649978638 	 14.998047113418579 	 58.36710548400879 	 58.129265785217285 	 29.826950073242188 	 11.914829015731812 	 
2025-07-28 00:37:09.779263 test begin: paddle.nn.functional.grid_sample(Tensor([172, 1, 544, 544],"float32"), Tensor([172, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([172, 1, 544, 544],"float32"), Tensor([172, 1, 12544, 2],"float32"), align_corners=False, ) 	 55216128 	 1000 	 0.07975912094116211 	 0.08044767379760742 	 0.06302928924560547 	 0.06156563758850098 	 0.40212202072143555 	 0.3989112377166748 	 0.20531725883483887 	 0.20378565788269043 	 
2025-07-28 00:37:11.698501 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, ) 	 55827200 	 1000 	 0.08493185043334961 	 0.08773112297058105 	 0.07300925254821777 	 0.06861567497253418 	 0.4291996955871582 	 0.426525354385376 	 0.21926140785217285 	 0.21854782104492188 	 
2025-07-28 00:37:13.640906 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 467, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 467, 2],"float32"), align_corners=False, ) 	 50996400 	 1000 	 0.011816024780273438 	 0.017906665802001953 	 1.5020370483398438e-05 	 3.2901763916015625e-05 	 0.18605327606201172 	 0.18178915977478027 	 0.09502124786376953 	 0.09347748756408691 	 
2025-07-28 00:37:14.873066 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 467],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 467],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, ) 	 55827200 	 1000 	 0.08512639999389648 	 0.0877525806427002 	 0.07153153419494629 	 0.0697011947631836 	 0.43494534492492676 	 0.43210887908935547 	 0.22220563888549805 	 0.22072362899780273 	 
2025-07-28 00:37:16.841447 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, ) 	 64204800 	 1000 	 0.08980035781860352 	 0.09234166145324707 	 0.07803201675415039 	 0.0744175910949707 	 0.46750450134277344 	 0.46341633796691895 	 0.23944473266601562 	 0.23605608940124512 	 
2025-07-28 00:37:19.049510 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 127009, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 127009, 2],"float32"), align_corners=False, ) 	 109990800 	 1000 	 0.667046308517456 	 0.693122148513794 	 0.6507730484008789 	 0.6714601516723633 	 2.6410186290740967 	 2.6849470138549805 	 1.3500840663909912 	 1.3726632595062256 	 
2025-07-28 00:37:29.369245 test begin: paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, ) 	 114380800 	 1000 	 0.7170360088348389 	 0.7638413906097412 	 0.705167293548584 	 0.7257988452911377 	 2.8536319732666016 	 2.901803731918335 	 1.4581542015075684 	 1.482851505279541 	 
2025-07-28 00:37:40.084991 test begin: paddle.nn.functional.grid_sample(Tensor([200, 11, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([200, 11, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, ) 	 706252800 	 1000 	 8.727293968200684 	 8.05196213722229 	 8.715188026428223 	 8.013437032699585 	 28.841946125030518 	 28.61076068878174 	 14.73591661453247 	 9.75578784942627 	 
2025-07-28 00:39:17.730513 test begin: paddle.nn.functional.grid_sample(Tensor([2026, 1, 544, 544],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([2026, 1, 544, 544],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, ) 	 650394624 	 1000 	 0.8470616340637207 	 0.8755342960357666 	 0.8324449062347412 	 0.849510669708252 	 4.722140312194824 	 4.515409469604492 	 2.4139108657836914 	 1.5391795635223389 	 
2025-07-28 00:39:42.414156 test begin: paddle.nn.functional.grid_sample(Tensor([2026, 1, 768, 768],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([2026, 1, 768, 768],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, ) 	 1245811712 	 1000 	 1.2077391147613525 	 1.188422679901123 	 1.1948621273040771 	 1.1618962287902832 	 7.397216796875 	 6.77204155921936 	 3.77972412109375 	 1.3859655857086182 	 
2025-07-28 00:40:20.284176 test begin: paddle.nn.functional.grid_sample(Tensor([87, 1, 768, 768],"float32"), Tensor([87, 1, 12544, 2],"float32"), align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(Tensor([87, 1, 768, 768],"float32"), Tensor([87, 1, 12544, 2],"float32"), align_corners=False, ) 	 53497344 	 1000 	 0.057910919189453125 	 0.06700897216796875 	 0.044626474380493164 	 0.03876686096191406 	 0.32508277893066406 	 0.3076951503753662 	 0.16607451438903809 	 0.156524658203125 	 
2025-07-28 00:40:21.985539 test begin: paddle.nn.functional.grid_sample(x=Tensor([1, 64, 80, 94, 311],"float32"), grid=Tensor([1, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([1, 64, 80, 94, 311],"float32"), grid=Tensor([1, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 157574080 	 1000 	 14.448515176773071 	 11.531094074249268 	 14.43463659286499 	 11.511753559112549 	 94.06413245201111 	 99.24779105186462 	 48.12607192993164 	 50.65916061401367 	 
2025-07-28 00:44:07.050996 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 87713280 	 1000 	 5.358310222625732 	 3.6706275939941406 	 5.346081733703613 	 3.651036024093628 	 11.170889139175415 	 11.996573448181152 	 5.709331274032593 	 6.128710985183716 	 
2025-07-28 00:44:41.952469 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 6, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 6, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 56806080 	 1000 	 0.1386866569519043 	 0.09844708442687988 	 0.11793637275695801 	 0.07231307029724121 	 0.45620107650756836 	 0.4543461799621582 	 0.2330629825592041 	 0.2321183681488037 	 
2025-07-28 00:44:44.051318 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 83971328 	 1000 	 37.879833459854126 	 34.15203356742859 	 37.866952657699585 	 34.13174748420715 	 109.93281054496765 	 119.65277028083801 	 56.17552089691162 	 61.140798807144165 	 
2025-07-28 00:49:58.692289 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 7, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 7, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 52975328 	 1000 	 0.8251721858978271 	 0.7214651107788086 	 0.8128879070281982 	 0.6960337162017822 	 2.447929620742798 	 2.6996495723724365 	 1.2503128051757812 	 1.3778212070465088 	 
2025-07-28 00:50:06.528485 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 82538240 	 1000 	 39.381266832351685 	 34.04369783401489 	 39.36816477775574 	 34.02360773086548 	 109.23704981803894 	 119.53248429298401 	 55.82090377807617 	 61.082982778549194 	 
2025-07-28 00:55:21.653259 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 8, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 8, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 61061120 	 1000 	 12.225577116012573 	 10.895866870880127 	 12.213162660598755 	 10.867533922195435 	 35.346189737319946 	 37.896108865737915 	 18.061296939849854 	 19.36648416519165 	 
2025-07-28 00:57:04.430504 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 27],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
[Prof] paddle.nn.functional.grid_sample 	 paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 27],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, ) 	 83562240 	 1000 	 41.15308427810669 	 35.411317348480225 	 41.138118743896484 	 35.39114022254944 	 113.95291662216187 	 126.95187640190125 	 58.229732275009155 	 64.87143158912659 	 
2025-07-28 01:02:37.137361 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 605, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
Traceback (most recent call last):
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 189, in <module>
    main()
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 163, in main
    case.test()
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.paddle_torch_gpu_performance.APITestPaddleTorchGPUPerformance object at 0x7f5fdb92b670>,)) (kwargs={}) timed out after 600.000000 seconds.

terminate called without an active exception


--------------------------------------
C++ Traceback (most recent call last):
--------------------------------------
0   torch::handle_torch_function_no_python_arg_parser(c10::ArrayRef<_object*>, _object*, _object*, char const*, _object*, char const*, torch::TorchFunctionName)

----------------------
Error Message Summary:
----------------------
FatalError: `Process abort signal` is detected by the operating system.
  [TimeInfo: *** Aborted at 1753636665 (unix time) try "date -d @1753636665" if you are using GNU date ***]
  [SignalInfo: *** SIGABRT (@0x1ae73) received by PID 110195 (TID 0x7f5fb78fe640) from PID 110195 ***]

2025-07-28 01:18:07.969819 test begin: paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 451, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
W0728 01:18:18.093906 136258 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
Traceback (most recent call last):
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 189, in <module>
    main()
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 163, in main
    case.test()
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.paddle_torch_gpu_performance.APITestPaddleTorchGPUPerformance object at 0x7f24202073a0>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-07-28 01:33:33.729203 test begin: paddle.nn.functional.grid_sample(x=Tensor([7, 64, 80, 94, 311],"float32"), grid=Tensor([7, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
W0728 01:33:52.744474 65915 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
Traceback (most recent call last):
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 189, in <module>
    main()
  File "/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/engine.py", line 163, in main
    case.test()
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 185, in <lambda>
    return wraps(func)(lambda *args, **kwargs : func_timeout(defaultTimeout, func, args=args, kwargs=kwargs))
  File "/usr/local/lib/python3.10/dist-packages/func_timeout/dafunc.py", line 101, in func_timeout
    raise FunctionTimedOut('', timeout, func, args, kwargs)
func_timeout.exceptions.FunctionTimedOut: Function test (args=(<tester.paddle_torch_gpu_performance.APITestPaddleTorchGPUPerformance object at 0x7f0b7f14f340>,)) (kwargs={}) timed out after 600.000000 seconds.

2025-07-28 01:50:20.055670 test begin: paddle.nn.functional.group_norm(Tensor([30, 256, 16, 414],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
W0728 01:50:21.119792  2641 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 256, 16, 414],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 50872832 	 1000 	 0.4974069595336914 	 0.5661380290985107 	 0.25383496284484863 	 0.19238901138305664 	 0.80088210105896 	 0.7675900459289551 	 0.20463228225708008 	 0.1569976806640625 	 
2025-07-28 01:50:25.029351 test begin: paddle.nn.functional.group_norm(Tensor([30, 256, 24, 276],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 256, 24, 276],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 50872832 	 1000 	 0.4954221248626709 	 0.5652692317962646 	 0.25374794006347656 	 0.19242000579833984 	 0.8005378246307373 	 0.7677416801452637 	 0.20453977584838867 	 0.15700864791870117 	 
2025-07-28 01:50:29.309215 test begin: paddle.nn.functional.group_norm(Tensor([30, 256, 40, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 256, 40, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 51610112 	 1000 	 0.5003392696380615 	 0.5719263553619385 	 0.2553985118865967 	 0.1946558952331543 	 0.8160543441772461 	 0.7802796363830566 	 0.2081594467163086 	 0.15958428382873535 	 
2025-07-28 01:50:33.729050 test begin: paddle.nn.functional.group_norm(Tensor([30, 256, 60, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 256, 60, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 51610112 	 1000 	 0.5006773471832275 	 0.5823893547058105 	 0.2549300193786621 	 0.1946580410003662 	 0.8136024475097656 	 0.780179500579834 	 0.2078397274017334 	 0.15955209732055664 	 
2025-07-28 01:50:39.412225 test begin: paddle.nn.functional.group_norm(Tensor([30, 64, 32, 827],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 64, 32, 827],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), ) 	 50811008 	 1000 	 0.4972398281097412 	 0.5597200393676758 	 0.25167155265808105 	 0.19047141075134277 	 0.7965576648712158 	 0.7780542373657227 	 0.2035524845123291 	 0.15912508964538574 	 
2025-07-28 01:50:44.200403 test begin: paddle.nn.functional.group_norm(Tensor([30, 64, 79, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([30, 64, 79, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), ) 	 50964608 	 1000 	 0.5019986629486084 	 0.5616369247436523 	 0.2540004253387451 	 0.1911618709564209 	 0.8086159229278564 	 0.7826790809631348 	 0.20662212371826172 	 0.16003036499023438 	 
2025-07-28 01:50:48.561966 test begin: paddle.nn.functional.group_norm(Tensor([74, 256, 16, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([74, 256, 16, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 50921984 	 1000 	 0.5322685241699219 	 0.5591418743133545 	 0.2648313045501709 	 0.19034337997436523 	 0.88055419921875 	 0.7877492904663086 	 0.2249586582183838 	 0.1610567569732666 	 
2025-07-28 01:50:53.038694 test begin: paddle.nn.functional.group_norm(Tensor([74, 256, 24, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([74, 256, 24, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), ) 	 50921984 	 1000 	 0.5200104713439941 	 0.5591275691986084 	 0.26358819007873535 	 0.19032740592956543 	 0.8819897174835205 	 0.7876965999603271 	 0.2249612808227539 	 0.16110992431640625 	 
2025-07-28 01:50:57.539288 test begin: paddle.nn.functional.group_norm(Tensor([74, 64, 32, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
[Prof] paddle.nn.functional.group_norm 	 paddle.nn.functional.group_norm(Tensor([74, 64, 32, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), ) 	 50921600 	 1000 	 0.49299001693725586 	 0.5534927845001221 	 0.2524120807647705 	 0.18841147422790527 	 0.8191332817077637 	 0.7833082675933838 	 0.21004629135131836 	 0.1602306365966797 	 
2025-07-28 01:51:01.922265 test begin: paddle.nn.functional.hardshrink(Tensor([25401601],"float64"), -1, None, )
[Prof] paddle.nn.functional.hardshrink 	 paddle.nn.functional.hardshrink(Tensor([25401601],"float64"), -1, None, ) 	 25401601 	 1000 	 0.29824376106262207 	 0.3009512424468994 	 0.2865736484527588 	 0.2863609790802002 	 0.44888830184936523 	 0.4471168518066406 	 0.3980376720428467 	 0.38844871520996094 	 
2025-07-28 01:51:04.582454 test begin: paddle.nn.functional.hardshrink(Tensor([50803201],"float32"), -1, None, )
[Prof] paddle.nn.functional.hardshrink 	 paddle.nn.functional.hardshrink(Tensor([50803201],"float32"), -1, None, ) 	 50803201 	 1000 	 0.29599475860595703 	 0.3011612892150879 	 0.2872755527496338 	 0.27942633628845215 	 0.45037007331848145 	 0.4467175006866455 	 0.38989853858947754 	 0.37982749938964844 	 
2025-07-28 01:51:09.590217 test begin: paddle.nn.functional.hardsigmoid(Tensor([1024, 49613, 1, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([1024, 49613, 1, 1],"float32"), slope=0.2, offset=0.5, ) 	 50803712 	 1000 	 0.29854416847229004 	 0.2999444007873535 	 0.28795766830444336 	 0.2821695804595947 	 0.4503440856933594 	 1.0403766632080078 	 0.3992421627044678 	 0.354292631149292 	 
2025-07-28 01:51:16.172700 test begin: paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 1, 87],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 1, 87],"float32"), slope=0.2, offset=0.5, ) 	 51314688 	 1000 	 0.3060300350189209 	 0.3008570671081543 	 0.2899355888366699 	 0.2850341796875 	 0.45473623275756836 	 1.0508904457092285 	 0.40377306938171387 	 0.35785841941833496 	 
2025-07-28 01:51:20.131796 test begin: paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 87, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 87, 1],"float32"), slope=0.2, offset=0.5, ) 	 51314688 	 1000 	 0.2990424633026123 	 0.3044753074645996 	 0.2898390293121338 	 0.2861602306365967 	 0.4576387405395508 	 1.050837755203247 	 0.4064047336578369 	 0.3578972816467285 	 
2025-07-28 01:51:24.032888 test begin: paddle.nn.functional.hardsigmoid(Tensor([12404, 4096],"float32"), )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([12404, 4096],"float32"), ) 	 50806784 	 1000 	 0.29622864723205566 	 0.2979249954223633 	 0.28755664825439453 	 0.2820396423339844 	 0.45035409927368164 	 1.044496774673462 	 0.3992757797241211 	 0.35573244094848633 	 
2025-07-28 01:51:27.754626 test begin: paddle.nn.functional.hardsigmoid(Tensor([300, 169345],"float32"), )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([300, 169345],"float32"), ) 	 50803500 	 1000 	 0.29587674140930176 	 0.2991156578063965 	 0.28722620010375977 	 0.2821950912475586 	 0.45038628578186035 	 1.0403611660003662 	 0.3991532325744629 	 0.35430121421813965 	 
2025-07-28 01:51:31.706295 test begin: paddle.nn.functional.hardsigmoid(Tensor([52921, 960, 1, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([52921, 960, 1, 1],"float32"), slope=0.2, offset=0.5, ) 	 50804160 	 1000 	 0.29601025581359863 	 0.2979307174682617 	 0.2868940830230713 	 0.2821540832519531 	 0.45032835006713867 	 1.0404114723205566 	 0.39877843856811523 	 0.35432934761047363 	 
2025-07-28 01:51:37.065534 test begin: paddle.nn.functional.hardsigmoid(Tensor([640, 79381, 1, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([640, 79381, 1, 1],"float32"), slope=0.2, offset=0.5, ) 	 50803840 	 1000 	 0.7407629489898682 	 0.30794501304626465 	 0.28636980056762695 	 0.28205156326293945 	 0.4517848491668701 	 1.040390968322754 	 0.400623083114624 	 0.35428762435913086 	 
2025-07-28 01:51:41.999825 test begin: paddle.nn.functional.hardsigmoid(Tensor([640, 960, 1, 83],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([640, 960, 1, 83],"float32"), slope=0.2, offset=0.5, ) 	 50995200 	 1000 	 0.2972855567932129 	 0.31771278381347656 	 0.28815174102783203 	 0.28405022621154785 	 0.4520132541656494 	 1.045715093612671 	 0.40094804763793945 	 0.35563111305236816 	 
2025-07-28 01:51:46.033100 test begin: paddle.nn.functional.hardsigmoid(Tensor([640, 960, 83, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([640, 960, 83, 1],"float32"), slope=0.2, offset=0.5, ) 	 50995200 	 1000 	 0.2972581386566162 	 0.2989809513092041 	 0.28812313079833984 	 0.28295397758483887 	 0.4519383907318115 	 1.0470893383026123 	 0.4005749225616455 	 0.3571615219116211 	 
2025-07-28 01:51:49.826057 test begin: paddle.nn.functional.hardsigmoid(Tensor([88201, 576, 1, 1],"float32"), slope=0.2, offset=0.5, )
[Prof] paddle.nn.functional.hardsigmoid 	 paddle.nn.functional.hardsigmoid(Tensor([88201, 576, 1, 1],"float32"), slope=0.2, offset=0.5, ) 	 50803776 	 1000 	 0.29993557929992676 	 0.29795360565185547 	 0.28803300857543945 	 0.2821948528289795 	 0.4502737522125244 	 1.0403306484222412 	 0.3984644412994385 	 0.35427212715148926 	 
2025-07-28 01:51:53.624864 test begin: paddle.nn.functional.hardswish(Tensor([256, 16, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([256, 16, 112, 112],"float32"), None, ) 	 51380224 	 1000 	 0.30294036865234375 	 0.3012690544128418 	 0.2919125556945801 	 0.2844092845916748 	 0.45687389373779297 	 0.4549853801727295 	 0.40551066398620605 	 0.3917825222015381 	 
2025-07-28 01:51:56.851247 test begin: paddle.nn.functional.hardswish(Tensor([256, 80, 112, 23],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([256, 80, 112, 23],"float32"), None, ) 	 52756480 	 1000 	 0.30745601654052734 	 0.3100295066833496 	 0.29868435859680176 	 0.29241275787353516 	 0.4670894145965576 	 0.4671158790588379 	 0.41601133346557617 	 0.4051024913787842 	 
2025-07-28 01:52:00.195590 test begin: paddle.nn.functional.hardswish(Tensor([256, 80, 23, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([256, 80, 23, 112],"float32"), None, ) 	 52756480 	 1000 	 0.3068838119506836 	 0.3091013431549072 	 0.2913632392883301 	 0.2856745719909668 	 0.467118501663208 	 0.4670076370239258 	 0.40510082244873047 	 0.40479063987731934 	 
2025-07-28 01:52:03.514434 test begin: paddle.nn.functional.hardswish(Tensor([51, 80, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([51, 80, 112, 112],"float32"), None, ) 	 51179520 	 1000 	 0.29793405532836914 	 0.3023207187652588 	 0.28944945335388184 	 0.2833065986633301 	 0.45343875885009766 	 0.4532134532928467 	 0.4024319648742676 	 0.3914053440093994 	 
2025-07-28 01:52:06.730742 test begin: paddle.nn.functional.hardswish(Tensor([512, 48, 112, 19],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([512, 48, 112, 19],"float32"), None, ) 	 52297728 	 1000 	 0.3060948848724365 	 0.3273148536682129 	 0.29578208923339844 	 0.29138946533203125 	 0.4633166790008545 	 0.46301746368408203 	 0.4120357036590576 	 0.4018380641937256 	 
2025-07-28 01:52:10.107849 test begin: paddle.nn.functional.hardswish(Tensor([512, 48, 19, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([512, 48, 19, 112],"float32"), None, ) 	 52297728 	 1000 	 0.30449938774108887 	 0.3064272403717041 	 0.29567646980285645 	 0.2900059223175049 	 0.4644737243652344 	 0.4630448818206787 	 0.41281604766845703 	 0.3958284854888916 	 
2025-07-28 01:52:13.370845 test begin: paddle.nn.functional.hardswish(Tensor([512, 64, 112, 14],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([512, 64, 112, 14],"float32"), None, ) 	 51380224 	 1000 	 0.3006711006164551 	 0.30124950408935547 	 0.290020227432251 	 0.27860283851623535 	 0.4552922248840332 	 0.4550011157989502 	 0.40433359146118164 	 0.3923625946044922 	 
2025-07-28 01:52:18.393243 test begin: paddle.nn.functional.hardswish(Tensor([512, 64, 14, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([512, 64, 14, 112],"float32"), None, ) 	 51380224 	 1000 	 0.9638447761535645 	 0.30350232124328613 	 0.29073023796081543 	 0.27939915657043457 	 0.458268404006958 	 0.4549980163574219 	 0.3964056968688965 	 0.3835148811340332 	 
2025-07-28 01:52:22.607580 test begin: paddle.nn.functional.hardswish(Tensor([512, 8, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([512, 8, 112, 112],"float32"), None, ) 	 51380224 	 1000 	 0.3010368347167969 	 0.3011438846588135 	 0.2918109893798828 	 0.28478312492370605 	 0.4552295207977295 	 0.45494532585144043 	 0.4039037227630615 	 0.3938581943511963 	 
2025-07-28 01:52:25.775648 test begin: paddle.nn.functional.hardswish(Tensor([64, 64, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([64, 64, 112, 112],"float32"), None, ) 	 51380224 	 1000 	 0.2990260124206543 	 0.30600833892822266 	 0.2906980514526367 	 0.2861645221710205 	 0.45523524284362793 	 0.45503735542297363 	 0.40434980392456055 	 0.38085174560546875 	 
2025-07-28 01:52:29.069152 test begin: paddle.nn.functional.hardswish(Tensor([85, 48, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.hardswish 	 paddle.nn.functional.hardswish(Tensor([85, 48, 112, 112],"float32"), None, ) 	 51179520 	 1000 	 0.2979161739349365 	 0.30002331733703613 	 0.28937864303588867 	 0.283449649810791 	 0.45350170135498047 	 0.45322704315185547 	 0.4018287658691406 	 0.36494874954223633 	 
2025-07-28 01:52:32.316486 test begin: paddle.nn.functional.hardtanh(Tensor([10, 20, 254017],"float32"), -1.0, 1.0, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([10, 20, 254017],"float32"), -1.0, 1.0, ) 	 50803400 	 1000 	 0.29912662506103516 	 0.29804134368896484 	 0.2887723445892334 	 0.2783029079437256 	 0.45024704933166504 	 0.44797205924987793 	 0.39937758445739746 	 0.3877136707305908 	 
2025-07-28 01:52:37.779498 test begin: paddle.nn.functional.hardtanh(Tensor([10, 5080321, 1],"float32"), -1.0, 1.0, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([10, 5080321, 1],"float32"), -1.0, 1.0, ) 	 50803210 	 1000 	 0.5294516086578369 	 0.30744266510009766 	 0.28734350204467773 	 0.2789616584777832 	 0.45160889625549316 	 0.44810032844543457 	 0.3999814987182617 	 0.385606050491333 	 
2025-07-28 01:52:41.705599 test begin: paddle.nn.functional.hardtanh(Tensor([2540161, 20, 1],"float32"), -1.0, 1.0, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([2540161, 20, 1],"float32"), -1.0, 1.0, ) 	 50803220 	 1000 	 0.2960033416748047 	 0.30113792419433594 	 0.2874283790588379 	 0.27756595611572266 	 0.4502243995666504 	 0.4466574192047119 	 0.39916276931762695 	 0.3793609142303467 	 
2025-07-28 01:52:44.863022 test begin: paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.2, -3.2, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.2, -3.2, None, ) 	 25401609 	 1000 	 0.3043069839477539 	 0.29840612411499023 	 0.2925994396209717 	 0.27909374237060547 	 0.4494178295135498 	 0.445772647857666 	 0.39855337142944336 	 0.3853583335876465 	 
2025-07-28 01:52:47.475289 test begin: paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.4, 0, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.4, 0, None, ) 	 25401609 	 1000 	 0.29878854751586914 	 0.2984182834625244 	 0.28980445861816406 	 0.2790226936340332 	 0.4477400779724121 	 0.4458754062652588 	 0.39731264114379883 	 0.3852379322052002 	 
2025-07-28 01:52:50.060422 test begin: paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.2, -3.2, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.2, -3.2, None, ) 	 25401609 	 1000 	 0.30038881301879883 	 0.2984752655029297 	 0.2897779941558838 	 0.27916908264160156 	 0.44789624214172363 	 0.4457995891571045 	 0.3970603942871094 	 0.3850116729736328 	 
2025-07-28 01:52:52.654521 test begin: paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.4, 0, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.4, 0, None, ) 	 25401609 	 1000 	 0.2983429431915283 	 0.31648683547973633 	 0.2897026538848877 	 0.2788236141204834 	 0.4478433132171631 	 0.44710302352905273 	 0.39759302139282227 	 0.3843975067138672 	 
2025-07-28 01:52:55.328227 test begin: paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.2, -3.2, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.2, -3.2, None, ) 	 25401609 	 1000 	 0.3011512756347656 	 0.2986166477203369 	 0.2907443046569824 	 0.27856898307800293 	 0.44858717918395996 	 0.4459559917449951 	 0.38526439666748047 	 0.35612010955810547 	 
2025-07-28 01:52:58.131920 test begin: paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.4, 0, None, )
[Prof] paddle.nn.functional.hardtanh 	 paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.4, 0, None, ) 	 25401609 	 1000 	 0.29835009574890137 	 0.2999880313873291 	 0.28961896896362305 	 0.27886295318603516 	 0.45037078857421875 	 0.4471902847290039 	 0.39927220344543457 	 0.38664913177490234 	 
2025-07-28 01:53:00.720779 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), ) 	 50803400 	 1000 	 3.3263192176818848 	 2.886561155319214 	 0.24376773834228516 	 0.267925500869751 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:53:10.621186 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="mean", margin=1.0, name=None, )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="mean", margin=1.0, name=None, ) 	 50803400 	 1000 	 3.3258490562438965 	 2.8865580558776855 	 0.24376225471496582 	 0.26795125007629395 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:53:20.332476 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="none", )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="none", ) 	 50803400 	 1000 	 3.1795730590820312 	 2.7212576866149902 	 0.2699620723724365 	 0.3092813491821289 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:53:32.242722 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), ) 	 50803300 	 1000 	 3.3214151859283447 	 2.8868091106414795 	 0.24266624450683594 	 0.2678952217102051 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:53:42.674962 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="mean", margin=1.0, name=None, )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="mean", margin=1.0, name=None, ) 	 50803300 	 1000 	 3.3250770568847656 	 2.8865315914154053 	 0.24257445335388184 	 0.26795101165771484 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:53:52.461488 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="none", )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="none", ) 	 50803300 	 1000 	 3.1689209938049316 	 2.723524332046509 	 0.2713348865509033 	 0.3090982437133789 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:54:02.404475 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), ) 	 50803300 	 1000 	 3.3257856369018555 	 2.885232448577881 	 0.24251031875610352 	 0.2679579257965088 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:54:12.104467 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, ) 	 50803300 	 1000 	 3.3255276679992676 	 2.8852603435516357 	 0.24245047569274902 	 0.26796483993530273 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:54:21.844446 test begin: paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="none", )
[Prof] paddle.nn.functional.hinge_embedding_loss 	 paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="none", ) 	 50803300 	 1000 	 3.166686773300171 	 2.7330431938171387 	 0.26980161666870117 	 0.3092927932739258 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-28 01:54:32.556215 test begin: paddle.nn.functional.instance_norm(Tensor([12404, 32, 128],"float32"), )
W0728 01:54:33.397750 28947 gpu_resources.cc:243] WARNING: device: 0. The installed Paddle is compiled with CUDNN 8.9, but CUDNN version in your machine is 8.9, which may cause serious incompatible bug. Please recompile or reinstall Paddle with compatible CUDNN version.
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([12404, 32, 128],"float32"), ) 	 50806784 	 1000 	 3.9295108318328857 	 4.223916292190552 	 0.8051187992095947 	 1.4359424114227295 	 2.4017577171325684 	 1.8903412818908691 	 1.2286863327026367 	 1.8046166896820068 	 
2025-07-28 01:54:47.054765 test begin: paddle.nn.functional.instance_norm(Tensor([2, 198451, 128],"float32"), )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([2, 198451, 128],"float32"), ) 	 50803456 	 1000 	 3.925729990005493 	 4.231323003768921 	 0.8050661087036133 	 1.4388422966003418 	 2.7825815677642822 	 1.8873910903930664 	 1.4231829643249512 	 1.800901174545288 	 
2025-07-28 01:55:01.623670 test begin: paddle.nn.functional.instance_norm(Tensor([2, 32, 793801],"float32"), )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([2, 32, 793801],"float32"), ) 	 50803264 	 1000 	 0.7645969390869141 	 1.9892442226409912 	 0.15668964385986328 	 0.6773085594177246 	 1.566694736480713 	 2.1798863410949707 	 0.800553560256958 	 2.088766098022461 	 
2025-07-28 01:55:09.848560 test begin: paddle.nn.functional.instance_norm(Tensor([388, 32, 32, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([388, 32, 32, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, ) 	 25428032 	 1000 	 0.4307432174682617 	 0.4215412139892578 	 0.08806157112121582 	 0.1437668800354004 	 0.525303840637207 	 0.4739985466003418 	 0.13394546508789062 	 0.16107702255249023 	 
2025-07-28 01:55:12.882858 test begin: paddle.nn.functional.instance_norm(Tensor([776, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([776, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, ) 	 50856000 	 1000 	 0.43761467933654785 	 0.43178486824035645 	 0.08965349197387695 	 0.14716076850891113 	 0.6742846965789795 	 0.620736837387085 	 0.1719510555267334 	 0.2110154628753662 	 
2025-07-28 01:55:16.656599 test begin: paddle.nn.functional.instance_norm(Tensor([8, 32, 1551, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([8, 32, 1551, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, ) 	 25411648 	 1000 	 0.5869224071502686 	 0.5753698348999023 	 0.12102222442626953 	 0.19608521461486816 	 0.8084244728088379 	 0.8679165840148926 	 0.20618724822998047 	 0.2951202392578125 	 
2025-07-28 01:55:20.631925 test begin: paddle.nn.functional.instance_norm(Tensor([8, 32, 3101, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([8, 32, 3101, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, ) 	 50806848 	 1000 	 0.4943091869354248 	 0.5129678249359131 	 0.10081958770751953 	 0.17434978485107422 	 0.8892686367034912 	 0.8695497512817383 	 0.2267591953277588 	 0.29561758041381836 	 
2025-07-28 01:55:25.253776 test begin: paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 3101],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 3101],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, ) 	 25403456 	 1000 	 0.5856554508209229 	 0.5749332904815674 	 0.1200251579284668 	 0.19593048095703125 	 0.8087663650512695 	 0.8708271980285645 	 0.20589327812194824 	 0.2955944538116455 	 
2025-07-28 01:55:29.186203 test begin: paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 6202],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
[Prof] paddle.nn.functional.instance_norm 	 paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 6202],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, ) 	 50806848 	 1000 	 0.4921584129333496 	 0.5114169120788574 	 0.10088515281677246 	 0.17426729202270508 	 0.8905289173126221 	 0.8696644306182861 	 0.22668766975402832 	 0.2957158088684082 	 
2025-07-28 01:55:34.655212 test begin: paddle.nn.functional.interpolate(Tensor([2, 256, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([2, 256, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 57802752 	 1000 	 0.6714577674865723 	 1.5474977493286133 	 0.19777750968933105 	 0.4014608860015869 	 0.6262121200561523 	 0.616779088973999 	 0.3199126720428467 	 0.3151130676269531 	 
2025-07-28 01:55:42.028680 test begin: paddle.nn.functional.interpolate(Tensor([4, 113, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 113, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 51028992 	 1000 	 0.19977617263793945 	 0.3724935054779053 	 0.16279935836791992 	 0.3516569137573242 	 0.5530908107757568 	 0.5452980995178223 	 0.2825140953063965 	 0.2785787582397461 	 
2025-07-28 01:55:44.765653 test begin: paddle.nn.functional.interpolate(Tensor([4, 226, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 226, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 102057984 	 1000 	 0.27449774742126465 	 0.6665933132171631 	 0.24581646919250488 	 0.6465373039245605 	 1.0322930812835693 	 0.8052191734313965 	 0.5267179012298584 	 0.41143274307250977 	 
2025-07-28 01:55:50.021353 test begin: paddle.nn.functional.interpolate(Tensor([4, 237, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 237, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 101928960 	 1000 	 0.26108813285827637 	 0.6941089630126953 	 0.21856427192687988 	 0.6667921543121338 	 0.8613369464874268 	 0.7969791889190674 	 0.4401226043701172 	 0.4071798324584961 	 
2025-07-28 01:55:55.163573 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 148, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 148, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 50921472 	 1000 	 0.2006664276123047 	 0.7368021011352539 	 0.1715390682220459 	 0.7164888381958008 	 0.5547301769256592 	 0.544367790222168 	 0.2833592891693115 	 0.2780799865722656 	 
2025-07-28 01:55:58.341114 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 296, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 296, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 101842944 	 1000 	 0.2731807231903076 	 0.7442855834960938 	 0.2452700138092041 	 0.7243940830230713 	 1.0317604541778564 	 0.8036127090454102 	 0.5256013870239258 	 0.4105689525604248 	 
2025-07-28 01:56:03.871257 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 311, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 311, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 101908480 	 1000 	 0.25763368606567383 	 0.742945671081543 	 0.2274491786956787 	 0.7228553295135498 	 0.8659162521362305 	 0.8013222217559814 	 0.44242382049560547 	 0.40940046310424805 	 
2025-07-28 01:56:08.910833 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 336, 148],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 336, 148],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 50921472 	 1000 	 0.20140957832336426 	 0.7291848659515381 	 0.1738731861114502 	 0.708484411239624 	 0.5667028427124023 	 0.5583105087280273 	 0.2900726795196533 	 0.2852497100830078 	 
2025-07-28 01:56:12.045830 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 336, 296],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 336, 296],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 101842944 	 1000 	 0.2706947326660156 	 0.7434618473052979 	 0.2320270538330078 	 0.7161884307861328 	 1.060070514678955 	 0.8070864677429199 	 0.5408358573913574 	 0.4123530387878418 	 
2025-07-28 01:56:17.330342 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 110100480 	 1000 	 0.27321887016296387 	 0.7503643035888672 	 0.2449324131011963 	 0.7304971218109131 	 0.9300441741943359 	 0.8597948551177979 	 0.4744303226470947 	 0.439298152923584 	 
2025-07-28 01:56:22.760565 test begin: paddle.nn.functional.interpolate(Tensor([4, 256, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
[Prof] paddle.nn.functional.interpolate 	 paddle.nn.functional.interpolate(Tensor([4, 256, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", ) 	 115605504 	 1000 	 0.31150054931640625 	 0.7599575519561768 	 0.28426408767700195 	 0.7354798316955566 	 1.1659066677093506 	 0.9108419418334961 	 0.5957558155059814 	 0.4653754234313965 	 
2025-07-28 01:56:28.688929 test begin: paddle.nn.functional.l1_loss(Tensor([1034, 3, 128, 128],"float32"), Tensor([1034, 3, 128, 128],"float32"), "mean", name=None, )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([1034, 3, 128, 128],"float32"), Tensor([1034, 3, 128, 128],"float32"), "mean", name=None, ) 	 101646336 	 1000 	 0.8938028812408447 	 0.8955385684967041 	 0.22804880142211914 	 0.22848725318908691 	 1.0583422183990479 	 1.2073287963867188 	 0.3606853485107422 	 0.3088810443878174 	 
2025-07-28 01:56:34.417709 test begin: paddle.nn.functional.l1_loss(Tensor([16, 12355, 257],"float32"), Tensor([16, 12355, 257],"float32"), )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([16, 12355, 257],"float32"), Tensor([16, 12355, 257],"float32"), ) 	 101607520 	 1000 	 0.8949587345123291 	 0.89691162109375 	 0.22811412811279297 	 0.2284538745880127 	 1.0586333274841309 	 1.2056818008422852 	 0.36089062690734863 	 0.3074500560760498 	 
2025-07-28 01:56:43.486817 test begin: paddle.nn.functional.l1_loss(Tensor([16, 511, 6214],"float32"), Tensor([16, 511, 6214],"float32"), )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([16, 511, 6214],"float32"), Tensor([16, 511, 6214],"float32"), ) 	 101611328 	 1000 	 0.9041075706481934 	 0.8953194618225098 	 0.2275068759918213 	 0.228499174118042 	 1.0609469413757324 	 1.2030458450317383 	 0.36063075065612793 	 0.3074831962585449 	 
2025-07-28 01:56:50.363047 test begin: paddle.nn.functional.l1_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "none", )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "none", ) 	 101608320 	 1000 	 0.751004695892334 	 0.7473123073577881 	 0.38228583335876465 	 0.3795652389526367 	 0.9241287708282471 	 1.0400855541229248 	 0.47217869758605957 	 0.35432982444763184 	 
2025-07-28 01:56:56.351286 test begin: paddle.nn.functional.l1_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "none", )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "none", ) 	 101671488 	 1000 	 0.7489964962005615 	 0.7523899078369141 	 0.381274938583374 	 0.3798072338104248 	 0.9246201515197754 	 1.0421292781829834 	 0.47246670722961426 	 0.3545973300933838 	 
2025-07-28 01:57:02.781812 test begin: paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", )
/usr/local/lib/python3.10/dist-packages/torch/utils/_device.py:104: UserWarning: Using a target size (torch.Size([3548, 12, 170, 8])) that is different to the input size (torch.Size([3548, 12, 170, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return func(*args, **kwargs)
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", ) 	 65141280 	 1000 	 0.6949367523193359 	 0.7118942737579346 	 0.35503101348876953 	 0.36357903480529785 	 1.393540859222412 	 1.7429704666137695 	 0.47562170028686523 	 0.44532036781311035 	 
2025-07-28 01:57:09.409738 test begin: paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "none", )
/usr/local/lib/python3.10/dist-packages/torch/utils/_device.py:104: UserWarning: Using a target size (torch.Size([3548, 12, 170, 1])) that is different to the input size (torch.Size([3548, 12, 170, 8])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return func(*args, **kwargs)
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "none", ) 	 65141280 	 1000 	 0.6942737102508545 	 0.7089273929595947 	 0.35465216636657715 	 0.3621053695678711 	 0.9775404930114746 	 1.7428021430969238 	 0.49795961380004883 	 0.4452810287475586 	 
2025-07-28 01:57:15.742882 test begin: paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", ) 	 115806720 	 1000 	 0.8512277603149414 	 0.8468813896179199 	 0.433574914932251 	 0.43326568603515625 	 1.0534849166870117 	 1.1851563453674316 	 0.5382306575775146 	 0.40333080291748047 	 
2025-07-28 01:57:22.597976 test begin: paddle.nn.functional.l1_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "none", )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "none", ) 	 102537200 	 1000 	 0.7524292469024658 	 0.7535362243652344 	 0.38440465927124023 	 0.38295483589172363 	 0.9354755878448486 	 1.0495998859405518 	 0.4778439998626709 	 0.35759949684143066 	 
2025-07-28 01:57:28.643285 test begin: paddle.nn.functional.l1_loss(Tensor([387, 511, 257],"float32"), Tensor([387, 511, 257],"float32"), )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([387, 511, 257],"float32"), Tensor([387, 511, 257],"float32"), ) 	 101647098 	 1000 	 0.8961195945739746 	 0.8954286575317383 	 0.2281196117401123 	 0.22842884063720703 	 1.0603358745574951 	 1.20499587059021 	 0.36093926429748535 	 0.30907678604125977 	 
2025-07-28 01:57:34.527091 test begin: paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 2068],"float32"), Tensor([64, 3, 128, 2068],"float32"), "mean", name=None, )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 2068],"float32"), Tensor([64, 3, 128, 2068],"float32"), "mean", name=None, ) 	 101646336 	 1000 	 0.8973050117492676 	 0.899235725402832 	 0.22815346717834473 	 0.22983670234680176 	 1.0589311122894287 	 1.2049269676208496 	 0.36080050468444824 	 0.3076457977294922 	 
2025-07-28 01:57:41.730696 test begin: paddle.nn.functional.l1_loss(Tensor([64, 3, 2068, 128],"float32"), Tensor([64, 3, 2068, 128],"float32"), "mean", name=None, )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([64, 3, 2068, 128],"float32"), Tensor([64, 3, 2068, 128],"float32"), "mean", name=None, ) 	 101646336 	 1000 	 0.894054651260376 	 0.8982796669006348 	 0.22814273834228516 	 0.22998046875 	 1.059943437576294 	 1.2036218643188477 	 0.3623018264770508 	 0.3076338768005371 	 
2025-07-28 01:57:49.128673 test begin: paddle.nn.functional.l1_loss(Tensor([64, 49, 128, 128],"float32"), Tensor([64, 49, 128, 128],"float32"), "mean", name=None, )
[Prof] paddle.nn.functional.l1_loss 	 paddle.nn.functional.l1_loss(Tensor([64, 49, 128, 128],"float32"), Tensor([64, 49, 128, 128],"float32"), "mean", name=None, ) 	 102760448 	 1000 	 0.9121289253234863 	 0.9083805084228516 	 0.23056983947753906 	 0.23094511032104492 	 1.0746617317199707 	 1.2167091369628906 	 0.3648560047149658 	 0.310955286026001 	 
2025-07-28 01:57:56.167637 test begin: paddle.nn.functional.label_smooth(label=Tensor([128, 12, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([128, 12, 33712],"float32"), epsilon=0.1, ) 	 51781632 	 1000 	 0.30216407775878906 	 0.6160368919372559 	 0.29273271560668945 	 0.2097642421722412 	 0.30298805236816406 	 0.3032994270324707 	 0.2534294128417969 	 0.23783659934997559 	 combined
2025-07-28 01:57:59.395350 test begin: paddle.nn.functional.label_smooth(label=Tensor([128, 40, 9923],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([128, 40, 9923],"float32"), epsilon=0.1, ) 	 50805760 	 1000 	 0.29609155654907227 	 0.6057589054107666 	 0.2794485092163086 	 0.20580410957336426 	 0.29617929458618164 	 0.297863245010376 	 0.23772025108337402 	 0.2178058624267578 	 combined
2025-07-28 01:58:02.817976 test begin: paddle.nn.functional.label_smooth(label=Tensor([160, 10, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([160, 10, 33712],"float32"), epsilon=0.1, ) 	 53939200 	 1000 	 0.31476354598999023 	 0.641141414642334 	 0.3051590919494629 	 0.21829485893249512 	 0.3140256404876709 	 0.3157937526702881 	 0.2641735076904297 	 0.24108195304870605 	 combined
2025-07-28 01:58:06.188985 test begin: paddle.nn.functional.label_smooth(label=Tensor([160, 32, 9923],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([160, 32, 9923],"float32"), epsilon=0.1, ) 	 50805760 	 1000 	 0.3013472557067871 	 0.6043317317962646 	 0.28845715522766113 	 0.20574426651000977 	 0.29606175422668457 	 0.2978062629699707 	 0.2466886043548584 	 0.23025870323181152 	 combined
2025-07-28 01:58:09.403007 test begin: paddle.nn.functional.label_smooth(label=Tensor([256, 20, 9923],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([256, 20, 9923],"float32"), epsilon=0.1, ) 	 50805760 	 1000 	 0.2962772846221924 	 0.6079554557800293 	 0.2870492935180664 	 0.20577621459960938 	 0.2961726188659668 	 0.2978246212005615 	 0.24622702598571777 	 0.23236799240112305 	 combined
2025-07-28 01:58:12.779328 test begin: paddle.nn.functional.label_smooth(label=Tensor([256, 6, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([256, 6, 33712],"float32"), epsilon=0.1, ) 	 51781632 	 1000 	 0.3015940189361572 	 0.617530345916748 	 0.2922825813293457 	 0.209700345993042 	 0.3017699718475342 	 0.30490803718566895 	 0.2521650791168213 	 0.2390460968017578 	 combined
2025-07-28 01:58:16.015059 test begin: paddle.nn.functional.label_smooth(label=Tensor([38, 40, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([38, 40, 33712],"float32"), epsilon=0.1, ) 	 51242240 	 1000 	 0.30373525619506836 	 0.6096353530883789 	 0.28940248489379883 	 0.20755887031555176 	 0.29863643646240234 	 0.30025553703308105 	 0.24532032012939453 	 0.23488807678222656 	 combined
2025-07-28 01:58:19.250766 test begin: paddle.nn.functional.label_smooth(label=Tensor([48, 32, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([48, 32, 33712],"float32"), epsilon=0.1, ) 	 51781632 	 1000 	 0.30283141136169434 	 0.6171581745147705 	 0.2922978401184082 	 0.20968842506408691 	 0.3017923831939697 	 0.3033421039581299 	 0.25226402282714844 	 0.2371981143951416 	 combined
2025-07-28 01:58:22.478983 test begin: paddle.nn.functional.label_smooth(label=Tensor([76, 20, 33712],"float32"), epsilon=0.1, )
[Prof] paddle.nn.functional.label_smooth 	 paddle.nn.functional.label_smooth(label=Tensor([76, 20, 33712],"float32"), epsilon=0.1, ) 	 51242240 	 1000 	 0.29862332344055176 	 0.6235556602478027 	 0.2894258499145508 	 0.20755553245544434 	 0.29863929748535156 	 0.3002457618713379 	 0.24071836471557617 	 0.23475885391235352 	 combined
2025-07-27 19:17:53.132573 test begin: paddle.nn.functional.layer_norm(Tensor([115, 435, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
W0727 19:17:54.335268 160289 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.nn.functional.layer_norm 	 paddle.nn.functional.layer_norm(Tensor([115, 435, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, ) 	 51227648 	 1000 	 0.3022763729095459 	 0.3222973346710205 	 0.28635287284851074 	 0.2917134761810303 	 0.4711284637451172 	 1.0154335498809814 	 0.24058794975280762 	 0.5188524723052979 	 
2025-07-27 19:17:57.836198 test begin: paddle.nn.functional.layer_norm(Tensor([174, 286, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
[Prof] paddle.nn.functional.layer_norm 	 paddle.nn.functional.layer_norm(Tensor([174, 286, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, ) 	 50960384 	 1000 	 0.3008151054382324 	 0.3149433135986328 	 0.2856757640838623 	 0.2918221950531006 	 0.4698028564453125 	 1.0103306770324707 	 0.23993515968322754 	 0.5162200927734375 	 
2025-07-27 19:18:01.643181 test begin: paddle.nn.functional.layer_norm(Tensor([226, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
[Prof] paddle.nn.functional.layer_norm 	 paddle.nn.functional.layer_norm(Tensor([226, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, ) 	 50915328 	 1000 	 0.30048608779907227 	 0.31476473808288574 	 0.28514552116394043 	 0.29163050651550293 	 0.4691135883331299 	 1.0097105503082275 	 0.23966217041015625 	 0.5158874988555908 	 
2025-07-27 19:18:05.387781 test begin: paddle.nn.functional.layer_norm(Tensor([7, 7088, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
[Prof] paddle.nn.functional.layer_norm 	 paddle.nn.functional.layer_norm(Tensor([7, 7088, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, ) 	 50808832 	 1000 	 0.2998325824737549 	 0.31397271156311035 	 0.28462910652160645 	 0.29136157035827637 	 0.4678499698638916 	 1.0065274238586426 	 0.23893237113952637 	 0.5142848491668701 	 
2025-07-27 19:18:09.161655 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 26, 304, 544],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 26, 304, 544],"float32"), 0.1, ) 	 51597312 	 1000 	 0.3026010990142822 	 0.3025784492492676 	 0.29208827018737793 	 0.28600263595581055 	 0.45731115341186523 	 0.4534645080566406 	 0.39971256256103516 	 0.3906440734863281 	 
2025-07-27 19:18:12.362282 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 32, 122, 1088],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 32, 122, 1088],"float32"), 0.1, ) 	 50970624 	 1000 	 0.297044038772583 	 0.2988927364349365 	 0.288632869720459 	 0.2769584655761719 	 0.45194506645202637 	 0.44803953170776367 	 0.3994452953338623 	 0.38551998138427734 	 
2025-07-27 19:18:15.490461 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 32, 608, 218],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 32, 608, 218],"float32"), 0.1, ) 	 50896896 	 1000 	 0.2966630458831787 	 0.29838991165161133 	 0.28806185722351074 	 0.281658411026001 	 0.45116758346557617 	 0.4473726749420166 	 0.3996388912200928 	 0.38451600074768066 	 
2025-07-27 19:18:18.615511 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 64, 122, 544],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 64, 122, 544],"float32"), 0.1, ) 	 50970624 	 1000 	 0.29702281951904297 	 0.29893016815185547 	 0.28846120834350586 	 0.28230977058410645 	 0.45189833641052246 	 0.44811272621154785 	 0.40005946159362793 	 0.38421034812927246 	 
2025-07-27 19:18:21.778206 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 64, 304, 218],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 64, 304, 218],"float32"), 0.1, ) 	 50896896 	 1000 	 0.29665088653564453 	 0.29837846755981445 	 0.28809189796447754 	 0.28174829483032227 	 0.4512014389038086 	 0.4474945068359375 	 0.3983607292175293 	 0.38532090187072754 	 
2025-07-27 19:18:26.819674 test begin: paddle.nn.functional.leaky_relu(Tensor([12, 7, 608, 1088],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([12, 7, 608, 1088],"float32"), 0.1, ) 	 55566336 	 1000 	 0.3287322521209717 	 0.325366735458374 	 0.31483983993530273 	 0.3090226650238037 	 0.492034912109375 	 0.48808836936950684 	 0.4405403137207031 	 0.4263598918914795 	 
2025-07-27 19:18:32.515974 test begin: paddle.nn.functional.leaky_relu(Tensor([13, 64, 256, 256],"float32"), 0.1, None, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([13, 64, 256, 256],"float32"), 0.1, None, ) 	 54525952 	 1000 	 0.31754469871520996 	 0.3194136619567871 	 0.3090183734893799 	 0.3022785186767578 	 0.48297715187072754 	 0.47908711433410645 	 0.4314138889312744 	 0.4022939205169678 	 
2025-07-27 19:18:37.029481 test begin: paddle.nn.functional.leaky_relu(Tensor([3, 32, 608, 1088],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([3, 32, 608, 1088],"float32"), 0.1, ) 	 63504384 	 1000 	 0.5933732986450195 	 0.3710970878601074 	 0.36052823066711426 	 0.35445261001586914 	 0.56158447265625 	 0.5572607517242432 	 0.509671688079834 	 0.49216151237487793 	 
2025-07-27 19:18:41.750769 test begin: paddle.nn.functional.leaky_relu(Tensor([5, 64, 304, 544],"float32"), 0.1, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([5, 64, 304, 544],"float32"), 0.1, ) 	 52920320 	 1000 	 0.3083219528198242 	 0.3101027011871338 	 0.29976677894592285 	 0.2941443920135498 	 0.46887850761413574 	 0.46494364738464355 	 0.41700005531311035 	 0.40165233612060547 	 
2025-07-27 19:18:45.013768 test begin: paddle.nn.functional.leaky_relu(Tensor([64, 13, 256, 256],"float32"), 0.1, None, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([64, 13, 256, 256],"float32"), 0.1, None, ) 	 54525952 	 1000 	 0.3174166679382324 	 0.3193514347076416 	 0.30889248847961426 	 0.3030202388763428 	 0.48294687271118164 	 0.47893643379211426 	 0.4311068058013916 	 0.4166591167449951 	 
2025-07-27 19:18:48.365998 test begin: paddle.nn.functional.leaky_relu(Tensor([64, 64, 256, 49],"float32"), 0.1, None, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([64, 64, 256, 49],"float32"), 0.1, None, ) 	 51380224 	 1000 	 0.29944515228271484 	 0.30118250846862793 	 0.29083991050720215 	 0.28502488136291504 	 0.4552631378173828 	 0.4515717029571533 	 0.4009513854980469 	 0.38771748542785645 	 
2025-07-27 19:18:51.523037 test begin: paddle.nn.functional.leaky_relu(Tensor([64, 64, 49, 256],"float32"), 0.1, None, )
[Prof] paddle.nn.functional.leaky_relu 	 paddle.nn.functional.leaky_relu(Tensor([64, 64, 49, 256],"float32"), 0.1, None, ) 	 51380224 	 1000 	 0.29941868782043457 	 0.30206918716430664 	 0.29086780548095703 	 0.28509020805358887 	 0.4552178382873535 	 0.4517066478729248 	 0.4035148620605469 	 0.3893575668334961 	 
2025-07-27 19:18:54.765354 test begin: paddle.nn.functional.linear(x=Tensor([1, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
Warning: The core code of paddle.nn.functional.linear is too complex.
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([1, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, ) 	 50823284 	 1000 	 0.15984010696411133 	 0.15371990203857422 	 0.054316043853759766 	 0.13236331939697266 	 0.3148324489593506 	 0.31536364555358887 	 0.0805196762084961 	 0.10727882385253906 	 
2025-07-27 19:18:56.685830 test begin: paddle.nn.functional.linear(x=Tensor([1, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([1, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, ) 	 50855402 	 1000 	 0.1678478717803955 	 0.15610766410827637 	 0.05704021453857422 	 0.13090133666992188 	 0.3221714496612549 	 0.3219778537750244 	 0.08232855796813965 	 0.10958194732666016 	 
2025-07-27 19:18:58.472488 test begin: paddle.nn.functional.linear(x=Tensor([2, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([2, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, ) 	 50835688 	 1000 	 0.2152099609375 	 0.26073336601257324 	 0.07312488555908203 	 0.06670331954956055 	 0.43001699447631836 	 0.4223957061767578 	 0.0734560489654541 	 0.08621644973754883 	 
2025-07-27 19:19:00.632552 test begin: paddle.nn.functional.linear(x=Tensor([2, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([2, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, ) 	 50880490 	 1000 	 0.22926735877990723 	 0.312821626663208 	 0.07793903350830078 	 0.0800790786743164 	 0.3371155261993408 	 0.3349649906158447 	 0.08620643615722656 	 0.11393332481384277 	 
2025-07-27 19:19:02.676715 test begin: paddle.nn.functional.linear(x=Tensor([2026, 25088],"float32"), weight=Tensor([25088, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([2026, 25088],"float32"), weight=Tensor([25088, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, ) 	 153592832 	 1000 	 23.875564336776733 	 24.863643169403076 	 12.20018982887268 	 24.837629795074463 	 48.12972664833069 	 48.06417894363403 	 9.865409851074219 	 12.255982875823975 	 
2025-07-27 19:21:30.802114 test begin: paddle.nn.functional.linear(x=Tensor([4051, 12544],"float32"), weight=Tensor([12544, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([4051, 12544],"float32"), weight=Tensor([12544, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, ) 	 63661824 	 1000 	 6.266111612319946 	 6.271347284317017 	 3.202033519744873 	 6.246795654296875 	 12.160362720489502 	 12.151548385620117 	 2.4927618503570557 	 3.0987024307250977 	 
2025-07-27 19:22:10.266142 test begin: paddle.nn.functional.linear(x=Tensor([4096, 12404],"float32"), weight=Tensor([12404, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([4096, 12404],"float32"), weight=Tensor([12404, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, ) 	 63509504 	 1000 	 6.208129405975342 	 6.206429481506348 	 3.1723389625549316 	 6.180509328842163 	 12.063971519470215 	 12.03085708618164 	 2.4729654788970947 	 3.067840099334717 	 
2025-07-27 19:22:49.720801 test begin: paddle.nn.functional.linear(x=Tensor([4096, 12544],"float32"), weight=Tensor([12544, 4051],"float32"), bias=Tensor([4051],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([4096, 12544],"float32"), weight=Tensor([12544, 4051],"float32"), bias=Tensor([4051],"float32"), name=None, ) 	 102200019 	 1000 	 24.03857707977295 	 24.03800392150879 	 12.283736228942871 	 24.015824794769287 	 48.091684103012085 	 47.952372789382935 	 9.858408689498901 	 12.22778582572937 	 
2025-07-27 19:25:17.362036 test begin: paddle.nn.functional.linear(x=Tensor([4096, 49613],"float32"), weight=Tensor([49613, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
[Prof] paddle.nn.functional.linear 	 paddle.nn.functional.linear(x=Tensor([4096, 49613],"float32"), weight=Tensor([49613, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, ) 	 254019584 	 1000 	 24.776978254318237 	 24.772241830825806 	 12.661064147949219 	 24.738368272781372 	 47.81588912010193 	 47.74506425857544 	 9.80183458328247 	 12.175134420394897 	 
2025-07-27 19:27:46.994227 test begin: paddle.nn.functional.local_response_norm(Tensor([10585, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
W0727 19:27:47.755435 163577 gpu_resources.cc:243] WARNING: device: 0. The installed Paddle is compiled with CUDNN 8.9, but CUDNN version in your machine is 8.9, which may cause serious incompatible bug. Please recompile or reinstall Paddle with compatible CUDNN version.
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(Tensor([10585, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, ) 	 50808000 	 1000 	 4.248570919036865 	 5.0927574634552 	 0.7230384349822998 	 0.6509590148925781 	 8.873358488082886 	 8.641302347183228 	 1.0052731037139893 	 0.5193676948547363 	 
2025-07-27 19:28:16.560185 test begin: paddle.nn.functional.local_response_norm(Tensor([3, 10585, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(Tensor([3, 10585, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, ) 	 50808000 	 1000 	 3.4353866577148438 	 4.749788522720337 	 0.5836813449859619 	 0.6075012683868408 	 7.1750218868255615 	 7.5673606395721436 	 0.8134024143218994 	 0.4834425449371338 	 
2025-07-27 19:28:44.354065 test begin: paddle.nn.functional.local_response_norm(Tensor([3, 3, 141121, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(Tensor([3, 3, 141121, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, ) 	 50803560 	 1000 	 4.324959754943848 	 5.249218702316284 	 0.7360546588897705 	 0.6712477207183838 	 8.958048343658447 	 8.84933352470398 	 1.0147523880004883 	 0.5654659271240234 	 
2025-07-27 19:29:13.484403 test begin: paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 141121],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 141121],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, ) 	 50803560 	 1000 	 4.324847459793091 	 4.295480966567993 	 0.7360110282897949 	 0.5491805076599121 	 8.926096200942993 	 7.92238712310791 	 1.0111193656921387 	 0.5060930252075195 	 
2025-07-27 19:29:42.118881 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 47041],"float32"), size=5, data_format="NCDHW", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 47041],"float32"), size=5, data_format="NCDHW", ) 	 50804280 	 1000 	 4.328946590423584 	 4.683999538421631 	 0.7365219593048096 	 0.5986180305480957 	 8.87178087234497 	 8.56659746170044 	 1.0051312446594238 	 0.5473415851593018 	 
2025-07-27 19:30:10.316974 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 47041, 40],"float32"), size=5, data_format="NCDHW", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 47041, 40],"float32"), size=5, data_format="NCDHW", ) 	 50804280 	 1000 	 4.327681303024292 	 4.686680316925049 	 0.7364909648895264 	 0.5986466407775879 	 8.871622800827026 	 8.566822528839111 	 1.0051002502441406 	 0.5473756790161133 	 
2025-07-27 19:30:39.930819 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3529, 40, 40],"float32"), size=5, data_format="NCDHW", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3529, 40, 40],"float32"), size=5, data_format="NCDHW", ) 	 50817600 	 1000 	 4.325945615768433 	 4.250275373458862 	 0.7357757091522217 	 0.543133020401001 	 8.952392578125 	 7.831267356872559 	 1.014261245727539 	 0.5004291534423828 	 
2025-07-27 19:31:07.627179 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3529],"float32"), size=5, data_format="NDHWC", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3529],"float32"), size=5, data_format="NDHWC", ) 	 50817600 	 1000 	 7.140333652496338 	 4.822117567062378 	 1.2114441394805908 	 0.6161565780639648 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([3, 3, 40, 40, 3529]) and output[0] has a shape of torch.Size([3, 3529, 3, 40, 40]).
2025-07-27 19:31:37.821908 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 47041, 3],"float32"), size=5, data_format="NDHWC", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 47041, 3],"float32"), size=5, data_format="NDHWC", ) 	 50804280 	 1000 	 8.167273759841919 	 4.990025997161865 	 1.3469645977020264 	 0.6378393173217773 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([3, 3, 40, 47041, 3]) and output[0] has a shape of torch.Size([3, 3, 3, 40, 47041]).
2025-07-27 19:32:19.222895 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 47041, 40, 3],"float32"), size=5, data_format="NDHWC", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 47041, 40, 3],"float32"), size=5, data_format="NDHWC", ) 	 50804280 	 1000 	 7.920692443847656 	 4.996289968490601 	 1.3468544483184814 	 0.6378436088562012 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([3, 3, 47041, 40, 3]) and output[0] has a shape of torch.Size([3, 3, 3, 47041, 40]).
2025-07-27 19:32:59.460195 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 3, 40, 40],"float32"), size=5, data_format="NCDHW", ) 	 50817600 	 1000 	 3.430292844772339 	 4.2343456745147705 	 0.583967924118042 	 0.541558027267456 	 7.140534400939941 	 7.3289642333984375 	 0.8094277381896973 	 0.46809959411621094 	 
2025-07-27 19:33:23.279148 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 40, 40, 3],"float32"), size=5, data_format="NDHWC", ) 	 50817600 	 1000 	 7.920149326324463 	 4.55241584777832 	 1.3471715450286865 	 0.5820510387420654 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([3, 3529, 40, 40, 3]) and output[0] has a shape of torch.Size([3, 3, 3529, 40, 40]).
2025-07-27 19:34:03.369094 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", ) 	 50817600 	 1000 	 4.249786615371704 	 4.525693416595459 	 0.7232654094696045 	 0.5786895751953125 	 8.776140689849854 	 8.541099071502686 	 0.994300365447998 	 0.5457198619842529 	 
2025-07-27 19:34:31.180461 test begin: paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
[Prof] paddle.nn.functional.local_response_norm 	 paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", ) 	 50817600 	 1000 	 7.923603534698486 	 4.53832745552063 	 1.3479030132293701 	 0.5802998542785645 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([3529, 3, 40, 40, 3]) and output[0] has a shape of torch.Size([3529, 3, 3, 40, 40]).
2025-07-27 19:35:10.986865 test begin: paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), )
[Prof] paddle.nn.functional.log_loss 	 paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), ) 	 101606402 	 1000 	 0.4953911304473877 	 3.4296951293945312 	 0.48632264137268066 	 0.34953808784484863 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:35:18.000610 test begin: paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), epsilon=1e-07, )
[Prof] paddle.nn.functional.log_loss 	 paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), epsilon=1e-07, ) 	 101606402 	 1000 	 0.49542856216430664 	 3.418478012084961 	 0.47893309593200684 	 0.3495759963989258 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:35:25.029342 test begin: paddle.nn.functional.log_sigmoid(Tensor([10, 10, 254017],"float64"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([10, 10, 254017],"float64"), None, ) 	 25401700 	 1000 	 0.4404940605163574 	 0.4589695930480957 	 0.4246525764465332 	 0.442826509475708 	 0.44989633560180664 	 0.45088863372802734 	 0.38471412658691406 	 0.38402318954467773 	 
2025-07-27 19:35:27.925310 test begin: paddle.nn.functional.log_sigmoid(Tensor([10, 10, 508033],"float32"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([10, 10, 508033],"float32"), None, ) 	 50803300 	 1000 	 0.3005952835083008 	 0.2984952926635742 	 0.28487658500671387 	 0.27821946144104004 	 0.4503939151763916 	 0.4503059387207031 	 0.387775182723999 	 0.38205432891845703 	 
2025-07-27 19:35:31.099754 test begin: paddle.nn.functional.log_sigmoid(Tensor([10, 254017, 10],"float64"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([10, 254017, 10],"float64"), None, ) 	 25401700 	 1000 	 0.4404914379119873 	 0.4562549591064453 	 0.42505812644958496 	 0.4362056255340576 	 0.4498629570007324 	 0.4508368968963623 	 0.3887617588043213 	 0.3759608268737793 	 
2025-07-27 19:35:34.009105 test begin: paddle.nn.functional.log_sigmoid(Tensor([10, 508033, 10],"float32"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([10, 508033, 10],"float32"), None, ) 	 50803300 	 1000 	 0.3005504608154297 	 1.0443670749664307 	 0.29197192192077637 	 0.2849133014678955 	 0.4503812789916992 	 0.4503602981567383 	 0.3996708393096924 	 0.3821258544921875 	 
2025-07-27 19:35:40.440382 test begin: paddle.nn.functional.log_sigmoid(Tensor([254017, 10, 10],"float64"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([254017, 10, 10],"float64"), None, ) 	 25401700 	 1000 	 0.4404726028442383 	 0.4650540351867676 	 0.4320240020751953 	 0.4425675868988037 	 0.4498279094696045 	 0.4507925510406494 	 0.399289608001709 	 0.38318300247192383 	 
2025-07-27 19:35:43.291177 test begin: paddle.nn.functional.log_sigmoid(Tensor([508033, 10, 10],"float32"), None, )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(Tensor([508033, 10, 10],"float32"), None, ) 	 50803300 	 1000 	 0.3005852699279785 	 0.29845213890075684 	 0.29195594787597656 	 0.2850203514099121 	 0.44983386993408203 	 0.4502079486846924 	 0.39904260635375977 	 0.38332152366638184 	 
2025-07-27 19:35:46.469217 test begin: paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 508033],"float32"), )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 508033],"float32"), ) 	 50803300 	 1000 	 0.30059051513671875 	 0.29846858978271484 	 0.29167938232421875 	 0.2851073741912842 	 0.4503467082977295 	 0.4502885341644287 	 0.3993797302246094 	 0.3802356719970703 	 
2025-07-27 19:35:49.605115 test begin: paddle.nn.functional.log_sigmoid(x=Tensor([10, 508033, 10],"float32"), )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(x=Tensor([10, 508033, 10],"float32"), ) 	 50803300 	 1000 	 0.30056166648864746 	 0.29846906661987305 	 0.291583776473999 	 0.2851381301879883 	 0.4502534866333008 	 0.4502561092376709 	 0.3994770050048828 	 0.3835580348968506 	 
2025-07-27 19:35:52.764144 test begin: paddle.nn.functional.log_sigmoid(x=Tensor([508033, 10, 10],"float32"), )
[Prof] paddle.nn.functional.log_sigmoid 	 paddle.nn.functional.log_sigmoid(x=Tensor([508033, 10, 10],"float32"), ) 	 50803300 	 1000 	 0.3005807399749756 	 0.3002030849456787 	 0.29152965545654297 	 0.28443193435668945 	 0.4503202438354492 	 0.4503450393676758 	 0.398665189743042 	 0.3684699535369873 	 
2025-07-27 19:35:55.889407 test begin: paddle.nn.functional.log_softmax(Tensor([128, 396901],"float32"), axis=-1, )
[Prof] paddle.nn.functional.log_softmax 	 paddle.nn.functional.log_softmax(Tensor([128, 396901],"float32"), axis=-1, ) 	 50803328 	 1000 	 0.7042603492736816 	 0.6294801235198975 	 0.6952142715454102 	 0.6044573783874512 	 1.3941614627838135 	 0.6507394313812256 	 1.3398163318634033 	 0.5853166580200195 	 
2025-07-27 19:36:02.745463 test begin: paddle.nn.functional.log_softmax(Tensor([264, 192612],"float32"), axis=-1, )
[Prof] paddle.nn.functional.log_softmax 	 paddle.nn.functional.log_softmax(Tensor([264, 192612],"float32"), axis=-1, ) 	 50849568 	 1000 	 0.6196544170379639 	 0.645211935043335 	 0.6104223728179932 	 0.6305897235870361 	 0.8616068363189697 	 0.6648380756378174 	 0.8078098297119141 	 0.6005189418792725 	 
2025-07-27 19:36:07.212292 test begin: paddle.nn.functional.log_softmax(Tensor([2944, 17257],"float32"), axis=1, )
[Prof] paddle.nn.functional.log_softmax 	 paddle.nn.functional.log_softmax(Tensor([2944, 17257],"float32"), axis=1, ) 	 50804608 	 1000 	 0.3334696292877197 	 0.3377370834350586 	 0.32318997383117676 	 0.3231832981109619 	 0.6466019153594971 	 0.5221359729766846 	 0.5923576354980469 	 0.4292600154876709 	 
2025-07-27 19:36:10.688426 test begin: paddle.nn.functional.log_softmax(Tensor([4224, 12028],"float32"), axis=1, )
[Prof] paddle.nn.functional.log_softmax 	 paddle.nn.functional.log_softmax(Tensor([4224, 12028],"float32"), axis=1, ) 	 50806272 	 1000 	 0.3053247928619385 	 0.3076927661895752 	 0.2951195240020752 	 0.2932417392730713 	 0.629734992980957 	 0.45467400550842285 	 0.5760412216186523 	 0.3886699676513672 	 
2025-07-27 19:36:14.095757 test begin: paddle.nn.functional.log_softmax(Tensor([7664, 6629],"float32"), axis=1, )
[Prof] paddle.nn.functional.log_softmax 	 paddle.nn.functional.log_softmax(Tensor([7664, 6629],"float32"), axis=1, ) 	 50804656 	 1000 	 0.3031606674194336 	 0.2990424633026123 	 0.2926638126373291 	 0.2849760055541992 	 0.595512866973877 	 0.5140767097473145 	 0.5413732528686523 	 0.44847893714904785 	 
2025-07-27 19:36:17.469290 test begin: paddle.nn.functional.lp_pool1d(Tensor([2, 3, 8467201],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
[Prof] paddle.nn.functional.lp_pool1d 	 paddle.nn.functional.lp_pool1d(Tensor([2, 3, 8467201],"float32"), 4.0, 3, 2, 1, False, "NCL", None, ) 	 50803206 	 1000 	 0.9307663440704346 	 1.9149765968322754 	 0.9021282196044922 	 0.2441105842590332 	 1.4191906452178955 	 4.947231292724609 	 0.7251067161560059 	 0.3162801265716553 	 
2025-07-27 19:36:27.981809 test begin: paddle.nn.functional.lp_pool1d(Tensor([2, 793801, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
[Prof] paddle.nn.functional.lp_pool1d 	 paddle.nn.functional.lp_pool1d(Tensor([2, 793801, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, ) 	 50803264 	 1000 	 0.9309899806976318 	 1.9384818077087402 	 0.9032387733459473 	 0.24714231491088867 	 1.4234976768493652 	 5.140539646148682 	 0.7273595333099365 	 0.3286449909210205 	 
2025-07-27 19:36:40.696057 test begin: paddle.nn.functional.lp_pool1d(Tensor([529201, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
[Prof] paddle.nn.functional.lp_pool1d 	 paddle.nn.functional.lp_pool1d(Tensor([529201, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, ) 	 50803296 	 1000 	 0.9311752319335938 	 1.938246726989746 	 0.8871769905090332 	 0.24710440635681152 	 1.421003818511963 	 5.1416709423065186 	 0.7260420322418213 	 0.32871294021606445 	 
2025-07-27 19:36:51.365718 test begin: paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, ) 	 50804736 	 1000 	 2.101752519607544 	 3.4928367137908936 	 2.0775251388549805 	 0.4453706741333008 	 2.2526538372039795 	 6.802602052688599 	 1.1510684490203857 	 0.4634060859680176 	 
2025-07-27 19:37:08.341279 test begin: paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, ) 	 50804736 	 1000 	 0.5551598072052002 	 1.2064380645751953 	 0.5312190055847168 	 0.15361309051513672 	 0.9960064888000488 	 3.652956008911133 	 0.5089211463928223 	 0.24915528297424316 	 
2025-07-27 19:37:15.939534 test begin: paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, ) 	 50804736 	 1000 	 0.9395232200622559 	 0.7894918918609619 	 0.9154560565948486 	 0.10037469863891602 	 1.9258191585540771 	 3.2895424365997314 	 0.9839608669281006 	 0.22439837455749512 	 
2025-07-27 19:37:23.842502 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, ) 	 50804736 	 1000 	 2.1016383171081543 	 3.4927330017089844 	 2.0772340297698975 	 0.4453744888305664 	 2.252528429031372 	 6.800893306732178 	 1.1509404182434082 	 0.4632408618927002 	 
2025-07-27 19:37:40.660854 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, ) 	 50804736 	 1000 	 0.5551276206970215 	 1.204559564590454 	 0.5312972068786621 	 0.1534438133239746 	 0.9960873126983643 	 3.6485800743103027 	 0.508939266204834 	 0.24888205528259277 	 
2025-07-27 19:37:48.146658 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, ) 	 50804736 	 1000 	 0.9398336410522461 	 0.8147385120391846 	 0.9157364368438721 	 0.1003878116607666 	 1.9260079860687256 	 3.296032667160034 	 0.9841563701629639 	 0.22486615180969238 	 
2025-07-27 19:37:56.066265 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, ) 	 50803392 	 1000 	 2.1691272258758545 	 3.510938882827759 	 2.145224094390869 	 0.44776344299316406 	 2.297400712966919 	 6.939061641693115 	 1.1738970279693604 	 0.44351792335510254 	 
2025-07-27 19:38:14.113148 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, ) 	 50803392 	 1000 	 0.5557785034179688 	 1.2068521976470947 	 0.532015323638916 	 0.15372920036315918 	 0.998992919921875 	 3.654642343521118 	 0.510443925857544 	 0.23372435569763184 	 
2025-07-27 19:38:21.646511 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, ) 	 50803392 	 1000 	 2.092834711074829 	 3.5804405212402344 	 2.0769476890563965 	 0.45659422874450684 	 2.2970898151397705 	 6.927549839019775 	 1.1737337112426758 	 0.44270849227905273 	 
2025-07-27 19:38:40.108935 test begin: paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
[Prof] paddle.nn.functional.lp_pool2d 	 paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, ) 	 50803392 	 1000 	 0.5554399490356445 	 1.211815357208252 	 0.5368378162384033 	 0.15439391136169434 	 0.9957931041717529 	 3.608328104019165 	 0.508756160736084 	 0.23080110549926758 	 
2025-07-27 19:38:47.612057 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([1373060, 37],"float32"), Tensor([1373060],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([1373060, 37],"float32"), Tensor([1373060],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, ) 	 52176280 	 1000 	 2.947413921356201 	 1.6538798809051514 	 0.33457207679748535 	 0.11235690116882324 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:53.722556 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float16"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float16"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, ) 	 965260838 	 1000 	 52.477484703063965 	 19.439147233963013 	 5.959141254425049 	 1.322805643081665 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:40:45.068402 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float32"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float32"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, ) 	 965260838 	 1000 	 54.98233604431152 	 30.165040016174316 	 6.241438627243042 	 1.8112125396728516 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:37.691384 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([2746119, 37],"float16"), Tensor([2746119],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([2746119, 37],"float16"), Tensor([2746119],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, ) 	 104352522 	 1000 	 5.7470362186431885 	 2.1459062099456787 	 0.6524622440338135 	 0.14606809616088867 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:50.310679 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([5, 10160641],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([5, 10160641],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, ) 	 50803210 	 1000 	 70.02257776260376 	 6.192066192626953 	 6.511580944061279 	 0.4210929870605469 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:44:07.832587 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", ) 	 25401610 	 1000 	 41.96966004371643 	 15.897379398345947 	 3.6075923442840576 	 1.0874545574188232 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:45:07.546219 test begin: paddle.nn.functional.margin_cross_entropy(Tensor([686530, 37],"float64"), Tensor([686530],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
[Prof] paddle.nn.functional.margin_cross_entropy 	 paddle.nn.functional.margin_cross_entropy(Tensor([686530, 37],"float64"), Tensor([686530],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", ) 	 26088140 	 1000 	 2.488539695739746 	 25.831892728805542 	 0.23082399368286133 	 1.780787467956543 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:45:39.753676 test begin: paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", )
[Prof] paddle.nn.functional.margin_ranking_loss 	 paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", ) 	 76204830 	 1000 	 1.3390092849731445 	 1.9361515045166016 	 0.27324676513671875 	 0.28273439407348633 	 1.8079032897949219 	 2.10925555229187 	 0.4621708393096924 	 0.2698397636413574 	 
2025-07-27 19:45:48.577201 test begin: paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", None, )
[Prof] paddle.nn.functional.margin_ranking_loss 	 paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", None, ) 	 76204830 	 1000 	 1.3387856483459473 	 1.9484386444091797 	 0.2732541561126709 	 0.2825953960418701 	 1.8090968132019043 	 2.1091644763946533 	 0.462446928024292 	 0.26981329917907715 	 
2025-07-27 19:46:00.605160 test begin: paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", )
[Prof] paddle.nn.functional.margin_ranking_loss 	 paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", ) 	 76204830 	 1000 	 1.3390393257141113 	 1.936018466949463 	 0.2733161449432373 	 0.28263425827026367 	 1.807544469833374 	 2.1090633869171143 	 0.4620516300201416 	 0.2697916030883789 	 
2025-07-27 19:46:09.472179 test begin: paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", None, )
[Prof] paddle.nn.functional.margin_ranking_loss 	 paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", None, ) 	 76204830 	 1000 	 1.3387186527252197 	 1.9360735416412354 	 0.27321672439575195 	 0.2826535701751709 	 1.8085620403289795 	 2.1093032360076904 	 0.4623270034790039 	 0.26985883712768555 	 
2025-07-27 19:46:18.352492 test begin: paddle.nn.functional.margin_ranking_loss(Tensor([50803201],"float32"), Tensor([50803201],"float32"), Tensor([50803201],"float32"), 0.5, "mean", None, )
[Prof] paddle.nn.functional.margin_ranking_loss 	 paddle.nn.functional.margin_ranking_loss(Tensor([50803201],"float32"), Tensor([50803201],"float32"), Tensor([50803201],"float32"), 0.5, "mean", None, ) 	 152409603 	 1000 	 1.6432273387908936 	 1.9395711421966553 	 0.23994016647338867 	 0.28316617012023926 	 2.190249443054199 	 2.2474231719970703 	 0.5600850582122803 	 0.2874593734741211 	 
2025-07-27 19:46:28.842004 test begin: paddle.nn.functional.max_pool1d(Tensor([2, 3, 8467201],"float32"), 2, None, 0, False, False, None, )
[Prof] paddle.nn.functional.max_pool1d 	 paddle.nn.functional.max_pool1d(Tensor([2, 3, 8467201],"float32"), 2, None, 0, False, False, None, ) 	 50803206 	 1000 	 0.2689061164855957 	 0.4159414768218994 	 0.23897957801818848 	 0.38987159729003906 	 0.7774631977081299 	 1.3082902431488037 	 0.39719104766845703 	 0.6684520244598389 	 
2025-07-27 19:46:32.861946 test begin: paddle.nn.functional.max_pool1d(Tensor([226801, 32, 7],"float32"), 7, )
[Prof] paddle.nn.functional.max_pool1d 	 paddle.nn.functional.max_pool1d(Tensor([226801, 32, 7],"float32"), 7, ) 	 50803424 	 1000 	 0.3154561519622803 	 0.21570992469787598 	 0.28580141067504883 	 0.18959999084472656 	 18.18056082725525 	 4.400972604751587 	 18.104295253753662 	 2.2486987113952637 	 
2025-07-27 19:46:59.353989 test begin: paddle.nn.functional.max_pool1d(Tensor([91, 32, 17447],"float32"), 7, )
[Prof] paddle.nn.functional.max_pool1d 	 paddle.nn.functional.max_pool1d(Tensor([91, 32, 17447],"float32"), 7, ) 	 50805664 	 1000 	 0.3169395923614502 	 0.215928316116333 	 0.2839314937591553 	 0.1900019645690918 	 0.7411787509918213 	 1.2711765766143799 	 0.37863755226135254 	 0.649482250213623 	 
2025-07-27 19:47:04.745441 test begin: paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 83],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 83],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 50995200 	 1000 	 0.20929861068725586 	 0.2754976749420166 	 0.19128084182739258 	 0.2551722526550293 	 0.6719794273376465 	 1.3471722602844238 	 0.3432931900024414 	 0.6882598400115967 	 
2025-07-27 19:47:08.285495 test begin: paddle.nn.functional.max_pool2d(Tensor([10, 128, 83, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([10, 128, 83, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 50995200 	 1000 	 0.1977682113647461 	 0.2731144428253174 	 0.17933893203735352 	 0.25403308868408203 	 0.6645739078521729 	 1.3520190715789795 	 0.3395063877105713 	 0.6908020973205566 	 
2025-07-27 19:47:11.815804 test begin: paddle.nn.functional.max_pool2d(Tensor([10, 23, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([10, 23, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 52992000 	 1000 	 0.2099764347076416 	 0.29054880142211914 	 0.19168829917907715 	 0.26926541328430176 	 0.6972537040710449 	 1.407092571258545 	 0.35623908042907715 	 0.7189157009124756 	 
2025-07-27 19:47:15.560245 test begin: paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 13],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 13],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 53673984 	 1000 	 0.36351537704467773 	 0.38232898712158203 	 0.3456540107727051 	 0.36321520805358887 	 0.4985992908477783 	 1.4649848937988281 	 0.43985652923583984 	 0.748528242111206 	 
2025-07-27 19:47:19.412775 test begin: paddle.nn.functional.max_pool2d(Tensor([1536, 24, 13, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([1536, 24, 13, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 53673984 	 1000 	 0.3375582695007324 	 0.3670685291290283 	 0.3200359344482422 	 0.3479926586151123 	 0.4889507293701172 	 1.4452121257781982 	 0.42999911308288574 	 0.7384495735168457 	 
2025-07-27 19:47:23.151471 test begin: paddle.nn.functional.max_pool2d(Tensor([1536, 3, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([1536, 3, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 57802752 	 1000 	 0.40418457984924316 	 0.37783098220825195 	 0.38636040687561035 	 0.35858750343322754 	 0.9110603332519531 	 1.5624775886535645 	 0.4654855728149414 	 0.798393726348877 	 
2025-07-27 19:47:27.616872 test begin: paddle.nn.functional.max_pool2d(Tensor([169, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([169, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 50878464 	 1000 	 0.30045628547668457 	 0.33329200744628906 	 0.2829020023345947 	 0.3145616054534912 	 0.8049633502960205 	 1.3793540000915527 	 0.41125059127807617 	 0.7047944068908691 	 
2025-07-27 19:47:31.491691 test begin: paddle.nn.functional.max_pool2d(Tensor([2, 128, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([2, 128, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, ) 	 58982400 	 1000 	 0.23032569885253906 	 0.3382911682128906 	 0.2121577262878418 	 0.30040788650512695 	 0.7735669612884521 	 1.5656371116638184 	 0.39519548416137695 	 0.799903392791748 	 
2025-07-27 19:47:37.493494 test begin: paddle.nn.functional.max_pool2d(Tensor([2, 64, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([2, 64, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, ) 	 63438848 	 1000 	 0.4014604091644287 	 0.4179573059082031 	 0.36165952682495117 	 0.39918971061706543 	 1.007253646850586 	 1.7512836456298828 	 0.514620304107666 	 0.8948578834533691 	 
2025-07-27 19:47:43.970485 test begin: paddle.nn.functional.max_pool2d(Tensor([8, 13, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([8, 13, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, ) 	 51544064 	 1000 	 0.3528764247894287 	 0.3408033847808838 	 0.3362743854522705 	 0.3217041492462158 	 0.8213930130004883 	 1.4248313903808594 	 0.41966915130615234 	 0.7280263900756836 	 
2025-07-27 19:47:47.973584 test begin: paddle.nn.functional.max_pool2d(Tensor([8, 64, 141, 704],"float32"), kernel_size=3, stride=2, padding=1, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([8, 64, 141, 704],"float32"), kernel_size=3, stride=2, padding=1, ) 	 50823168 	 1000 	 0.3080730438232422 	 0.337069034576416 	 0.2913377285003662 	 0.31851649284362793 	 0.8046538829803467 	 1.4046440124511719 	 0.41110754013061523 	 0.7177255153656006 	 
2025-07-27 19:47:51.892079 test begin: paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 141],"float32"), kernel_size=3, stride=2, padding=1, )
[Prof] paddle.nn.functional.max_pool2d 	 paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 141],"float32"), kernel_size=3, stride=2, padding=1, ) 	 50823168 	 1000 	 0.3090834617614746 	 0.3380413055419922 	 0.2922849655151367 	 0.31934404373168945 	 0.8061389923095703 	 1.3845560550689697 	 0.4118466377258301 	 0.7075400352478027 	 
2025-07-27 19:47:55.773586 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 16934401],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/api_config/config_analyzer.py:1878: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach(), rather than paddle.to_tensor(sourceTensor).
  self.paddle_tensor = paddle.to_tensor(
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 16934401],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 101606406 	 1000 	 0.039755821228027344 	 0.04018568992614746 	 2.0503997802734375e-05 	 6.079673767089844e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:55.940001 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 76204806 	 1000 	 0.03920578956604004 	 0.039675235748291016 	 2.5510787963867188e-05 	 5.221366882324219e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:56.096408 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803227 	 1000 	 0.04136037826538086 	 0.03951883316040039 	 2.0742416381835938e-05 	 5.030632019042969e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:56.255810 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, ) 	 101606406 	 1000 	 2.210909128189087 	 2.340259075164795 	 1.1289310455322266 	 1.1906113624572754 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:07.720529 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 101606406 	 1000 	 2.213101625442505 	 2.3301949501037598 	 1.129385232925415 	 1.1905224323272705 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:18.144335 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803206 	 1000 	 0.0426173210144043 	 0.04097700119018555 	 3.0517578125e-05 	 5.125999450683594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:18.309881 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, ) 	 76204806 	 1000 	 1.126802682876587 	 1.1740269660949707 	 0.5752377510070801 	 0.5997858047485352 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:23.597690 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 76204806 	 1000 	 1.1270701885223389 	 1.1740105152130127 	 0.575394868850708 	 0.5998008251190186 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:28.862410 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, ) 	 50803206 	 1000 	 1.129746913909912 	 1.173875331878662 	 0.5751404762268066 	 0.5996809005737305 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:34.123498 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803206 	 1000 	 1.904085397720337 	 1.1755497455596924 	 0.572474479675293 	 0.5999829769134521 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:41.859433 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 25401627 	 1000 	 1.126800298690796 	 1.1738674640655518 	 0.5751643180847168 	 0.5997335910797119 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:47.130740 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 25401627 	 1000 	 1.1271491050720215 	 1.184967279434204 	 0.5754973888397217 	 0.5998179912567139 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:52.416347 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 25401627 	 1000 	 0.03952503204345703 	 0.039689064025878906 	 2.6226043701171875e-05 	 4.839897155761719e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:52.575020 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 25401632 	 1000 	 0.038999080657958984 	 0.03971672058105469 	 1.430511474609375e-05 	 3.409385681152344e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:52.731928 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 25401648 	 1000 	 0.03933262825012207 	 0.039792537689208984 	 1.811981201171875e-05 	 3.337860107421875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:52.888183 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, ) 	 50803227 	 1000 	 0.034021854400634766 	 0.03832864761352539 	 1.2636184692382812e-05 	 2.9802322387695312e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.037081 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803227 	 1000 	 0.034624576568603516 	 0.03935718536376953 	 1.8596649169921875e-05 	 3.170967102050781e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.187162 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, ) 	 50803232 	 1000 	 0.03406500816345215 	 0.03865623474121094 	 1.3113021850585938e-05 	 3.0279159545898438e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.339176 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803232 	 1000 	 0.03470253944396973 	 0.03857064247131348 	 1.5020370483398438e-05 	 3.719329833984375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.489168 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 50803248 	 1000 	 0.03413224220275879 	 0.03835177421569824 	 1.4543533325195312e-05 	 3.7670135498046875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.638054 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803248 	 1000 	 0.034975290298461914 	 0.03813505172729492 	 1.33514404296875e-05 	 3.0517578125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.789734 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803216 	 1000 	 0.03912830352783203 	 0.03963446617126465 	 1.2874603271484375e-05 	 3.075599670410156e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:53.948263 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 25401632 	 1000 	 1.126697063446045 	 1.176145315170288 	 0.5751922130584717 	 0.5997591018676758 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:48:59.241208 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 25401632 	 1000 	 1.1270546913146973 	 1.1740775108337402 	 0.5752828121185303 	 0.5998334884643555 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:04.495656 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, ) 	 50803216 	 1000 	 1.1265761852264404 	 1.1741971969604492 	 0.5750863552093506 	 0.5998861789703369 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:10.994418 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803216 	 1000 	 1.1197688579559326 	 1.1743485927581787 	 0.5703973770141602 	 0.5999207496643066 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:18.071389 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, ) 	 76204816 	 1000 	 1.1268432140350342 	 1.174098253250122 	 0.5752863883972168 	 0.5998823642730713 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:23.361130 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 76204816 	 1000 	 1.127016544342041 	 1.174088954925537 	 0.5752921104431152 	 0.5998456478118896 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:28.634485 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803232 	 1000 	 0.060515403747558594 	 0.052626848220825195 	 1.9311904907226562e-05 	 4.887580871582031e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:28.842877 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 76204816 	 1000 	 0.06288027763366699 	 0.05489945411682129 	 3.4332275390625e-05 	 6.413459777832031e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:29.056592 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 6350401, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 6350401, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 101606416 	 1000 	 0.06050825119018555 	 0.05568861961364746 	 3.0517578125e-05 	 6.198883056640625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:29.269647 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, ) 	 101606416 	 1000 	 2.2106831073760986 	 2.385389566421509 	 1.1289124488830566 	 1.2373037338256836 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:41.175680 test begin: paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 101606416 	 1000 	 2.2103116512298584 	 2.3312063217163086 	 1.128746747970581 	 1.190488338470459 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:51.625489 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803248 	 1000 	 0.039389610290527344 	 0.03989362716674805 	 1.811981201171875e-05 	 5.054473876953125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:51.785693 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 25401648 	 1000 	 1.1241705417633057 	 1.1740562915802002 	 0.5733671188354492 	 0.5998053550720215 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:49:57.030875 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 25401648 	 1000 	 1.1229891777038574 	 1.1741735935211182 	 0.5732331275939941 	 0.5998260974884033 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:02.277775 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 50803248 	 1000 	 1.1236367225646973 	 1.174116611480713 	 0.573622465133667 	 0.5998263359069824 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:07.513098 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 50803248 	 1000 	 1.1229348182678223 	 1.1741619110107422 	 0.5731494426727295 	 0.5998446941375732 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:12.789766 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 76204848 	 1000 	 1.1244111061096191 	 1.1800637245178223 	 0.5735907554626465 	 0.6000802516937256 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:21.071286 test begin: paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 76204848 	 1000 	 1.1230621337890625 	 1.1740703582763672 	 0.5733988285064697 	 0.5998153686523438 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:26.377964 test begin: paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 50803248 	 1000 	 0.04029655456542969 	 0.039682865142822266 	 2.6464462280273438e-05 	 4.38690185546875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:26.536853 test begin: paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 76204848 	 1000 	 0.0394747257232666 	 0.03967928886413574 	 1.4066696166992188e-05 	 3.600120544433594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:26.692468 test begin: paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([2116801, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([2116801, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], ) 	 101606448 	 1000 	 0.039330482482910156 	 0.039526939392089844 	 2.0742416381835938e-05 	 3.266334533691406e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:26.847386 test begin: paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, ) 	 101606448 	 1000 	 2.2101428508758545 	 2.4807188510894775 	 1.1286132335662842 	 1.341083288192749 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:37.722809 test begin: paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
[Prof] paddle.nn.functional.max_unpool1d 	 paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, ) 	 101606448 	 1000 	 2.2168049812316895 	 2.3301801681518555 	 1.1291112899780273 	 1.1905055046081543 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:48.900624 test begin: paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 101639616 	 1000 	 0.05905652046203613 	 0.08845019340515137 	 0.029932260513305664 	 0.04364013671875 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:49.346497 test begin: paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52537056 	 1000 	 0.05861258506774902 	 0.08566951751708984 	 0.029910802841186523 	 0.04363703727722168 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:49.756091 test begin: paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 101621728 	 1000 	 0.021486997604370117 	 0.03120112419128418 	 0.0005965232849121094 	 5.340576171875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:49.966537 test begin: paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51647472 	 1000 	 0.021474361419677734 	 0.03047013282775879 	 0.0008428096771240234 	 4.982948303222656e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.162556 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 101638144 	 1000 	 0.021477460861206055 	 0.0408170223236084 	 0.0007650852203369141 	 7.867813110351562e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.367516 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51655680 	 1000 	 0.0214846134185791 	 0.029796838760375977 	 0.0008323192596435547 	 4.839897155761719e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.562764 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 101625856 	 1000 	 0.02147197723388672 	 0.030464887619018555 	 0.0008530616760253906 	 4.315376281738281e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.761077 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51649536 	 1000 	 0.021491050720214844 	 0.030153274536132812 	 0.0007791519165039062 	 5.412101745605469e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:50.976467 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51647472 	 1000 	 0.02147650718688965 	 0.030129671096801758 	 0.0007762908935546875 	 5.412101745605469e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:51.171540 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51655680 	 1000 	 0.021473169326782227 	 0.029756546020507812 	 0.0007281303405761719 	 4.1961669921875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:51.363857 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51649536 	 1000 	 0.02148270606994629 	 0.03456449508666992 	 0.0002951622009277344 	 3.814697265625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:51.578702 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51660544 	 1000 	 0.02146315574645996 	 0.02960038185119629 	 0.0008406639099121094 	 4.315376281738281e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:51.769068 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 101746944 	 1000 	 0.058597564697265625 	 0.08566045761108398 	 0.029929637908935547 	 0.04362940788269043 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:52.180261 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52590720 	 1000 	 0.05858564376831055 	 0.08561253547668457 	 0.02991318702697754 	 0.043602705001831055 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:52.591544 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 101670912 	 1000 	 0.020763635635375977 	 0.030195236206054688 	 2.193450927734375e-05 	 3.457069396972656e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:52.740919 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51222528 	 1000 	 0.021691322326660156 	 0.03206777572631836 	 1.5020370483398438e-05 	 4.410743713378906e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:52.895269 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51222528 	 1000 	 0.021047592163085938 	 0.03007340431213379 	 1.52587890625e-05 	 3.170967102050781e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.045553 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51204096 	 1000 	 0.020771503448486328 	 0.030193805694580078 	 1.5735626220703125e-05 	 4.506111145019531e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.196841 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51202368 	 1000 	 0.0208895206451416 	 0.03048992156982422 	 1.5497207641601562e-05 	 4.029273986816406e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.346846 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51196320 	 1000 	 0.020840883255004883 	 0.030219316482543945 	 1.5497207641601562e-05 	 3.075599670410156e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.495651 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51204096 	 1000 	 0.0207369327545166 	 0.030025243759155273 	 1.5020370483398438e-05 	 4.506111145019531e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.643653 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 101634048 	 1000 	 0.020706653594970703 	 0.029994487762451172 	 1.5735626220703125e-05 	 3.147125244140625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.792408 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51202368 	 1000 	 0.025915861129760742 	 0.035776376724243164 	 1.7881393432617188e-05 	 3.337860107421875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:53.980576 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 101630592 	 1000 	 0.020624637603759766 	 0.03568458557128906 	 1.5735626220703125e-05 	 3.886222839355469e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:54.151357 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 101637120 	 1000 	 0.058600425720214844 	 0.08970522880554199 	 0.029921531677246094 	 0.043625831604003906 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:54.574745 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52535808 	 1000 	 0.058608293533325195 	 0.0866389274597168 	 0.029924631118774414 	 0.04363679885864258 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:54.990923 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 101625856 	 1000 	 0.058547258377075195 	 0.08559918403625488 	 0.029897689819335938 	 0.0435793399810791 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:55.413322 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52530176 	 1000 	 0.05858016014099121 	 0.08563494682312012 	 0.02991008758544922 	 0.04361987113952637 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:55.826546 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52537056 	 1000 	 0.058599233627319336 	 0.0856173038482666 	 0.02991795539855957 	 0.043611764907836914 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:56.240310 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52590720 	 1000 	 0.05858755111694336 	 0.0856325626373291 	 0.02993297576904297 	 0.04360699653625488 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:56.653550 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52535808 	 1000 	 0.05858778953552246 	 0.0856330394744873 	 0.029907941818237305 	 0.043618202209472656 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:57.065221 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], ) 	 52530176 	 1000 	 0.058562278747558594 	 0.08562564849853516 	 0.029896974563598633 	 0.043622732162475586 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:57.478923 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 51660544 	 1000 	 0.02147674560546875 	 0.029881000518798828 	 0.0008227825164794922 	 3.8623809814453125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:57.681232 test begin: paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], ) 	 101647872 	 1000 	 0.02147078514099121 	 0.02970719337463379 	 0.0007874965667724609 	 4.935264587402344e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:57.871425 test begin: paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 51196320 	 1000 	 0.020944833755493164 	 0.030215740203857422 	 1.71661376953125e-05 	 4.458427429199219e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:58.020910 test begin: paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
[Prof] paddle.nn.functional.max_unpool2d 	 paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], ) 	 101618496 	 1000 	 0.02062678337097168 	 0.04343700408935547 	 1.8596649169921875e-05 	 5.9604644775390625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:50:58.188195 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803440 	 1000 	 1.703493356704712 	 1.7771930694580078 	 0.8696699142456055 	 0.16395115852355957 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:09.817786 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803440 	 1000 	 2.638615369796753 	 2.6019418239593506 	 1.3467414379119873 	 0.18959856033325195 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:25.877076 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803440 	 1000 	 1.724470615386963 	 1.7723479270935059 	 0.8800427913665771 	 0.1636950969696045 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:37.549453 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402080 	 1000 	 1.7129137516021729 	 1.7692549228668213 	 0.8685948848724365 	 0.16374421119689941 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:51:47.608613 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 25402080 	 1000 	 2.6346020698547363 	 2.5975942611694336 	 1.3460218906402588 	 0.18961143493652344 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:02.404714 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402080 	 1000 	 1.723863124847412 	 1.768388032913208 	 0.8804256916046143 	 0.1636660099029541 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:12.572319 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 76205040 	 1000 	 1.7010486125946045 	 1.7679784297943115 	 0.8683509826660156 	 0.1636965274810791 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:22.773125 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 76205040 	 1000 	 2.638995885848999 	 2.600656509399414 	 1.346062421798706 	 0.18958640098571777 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:39.978953 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803380 	 1000 	 0.029154539108276367 	 0.03337860107421875 	 3.886222839355469e-05 	 4.57763671875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.130332 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803380 	 1000 	 0.037261009216308594 	 0.042623281478881836 	 1.9311904907226562e-05 	 6.103515625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.300726 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803380 	 1000 	 0.037153005599975586 	 0.04252958297729492 	 1.4066696166992188e-05 	 5.1021575927734375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.477630 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402050 	 1000 	 0.02986931800842285 	 0.03284883499145508 	 2.0265579223632812e-05 	 6.103515625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.612983 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 25402050 	 1000 	 0.028244972229003906 	 0.032457828521728516 	 3.266334533691406e-05 	 4.649162292480469e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.746722 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402050 	 1000 	 0.034974098205566406 	 0.03241109848022461 	 1.8596649169921875e-05 	 5.0067901611328125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:40.880820 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 76204980 	 1000 	 0.02836012840270996 	 0.0350494384765625 	 1.8358230590820312e-05 	 4.291534423828125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.013743 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 76204980 	 1000 	 0.03264307975769043 	 0.03652453422546387 	 4.029273986816406e-05 	 4.887580871582031e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.151549 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803344 	 1000 	 0.04420161247253418 	 0.03455495834350586 	 1.7881393432617188e-05 	 5.0067901611328125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.295811 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803344 	 1000 	 0.031935930252075195 	 0.032529354095458984 	 1.7881393432617188e-05 	 4.291534423828125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.422544 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803344 	 1000 	 0.028484582901000977 	 0.03265810012817383 	 2.6226043701171875e-05 	 5.698204040527344e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.545414 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402032 	 1000 	 0.04675126075744629 	 0.03352522850036621 	 3.504753112792969e-05 	 5.4836273193359375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.702433 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 25402032 	 1000 	 0.06345748901367188 	 0.03264594078063965 	 3.504753112792969e-05 	 5.125999450683594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:41.893184 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402032 	 1000 	 0.036629676818847656 	 0.03410482406616211 	 2.002716064453125e-05 	 6.222724914550781e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.085666 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 76204944 	 1000 	 0.044187068939208984 	 0.03285789489746094 	 2.5033950805664062e-05 	 5.125999450683594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.249122 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 76204944 	 1000 	 0.07056236267089844 	 0.04993867874145508 	 4.482269287109375e-05 	 8.797645568847656e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.434390 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803320 	 1000 	 0.02928900718688965 	 0.03245139122009277 	 1.2874603271484375e-05 	 3.170967102050781e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.558947 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803320 	 1000 	 0.057640790939331055 	 0.04240894317626953 	 2.7894973754882812e-05 	 4.2438507080078125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.737516 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803320 	 1000 	 0.02779412269592285 	 0.03253364562988281 	 1.1682510375976562e-05 	 4.38690185546875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.859309 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402020 	 1000 	 0.02887868881225586 	 0.032529592514038086 	 1.4066696166992188e-05 	 3.9577484130859375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:42.983434 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 25402020 	 1000 	 0.028261899948120117 	 0.03305506706237793 	 1.1205673217773438e-05 	 4.363059997558594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.105338 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402020 	 1000 	 0.03218507766723633 	 0.032630205154418945 	 1.8358230590820312e-05 	 4.76837158203125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.252167 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 76204920 	 1000 	 0.028363466262817383 	 0.03541207313537598 	 1.7881393432617188e-05 	 4.839897155761719e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.377962 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 76204920 	 1000 	 0.04532790184020996 	 0.03238844871520996 	 3.170967102050781e-05 	 2.956390380859375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.522754 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402080 	 1000 	 0.02785801887512207 	 0.03282594680786133 	 1.0013580322265625e-05 	 2.8848648071289062e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.643685 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402050 	 1000 	 0.0285489559173584 	 0.03237581253051758 	 1.3589859008789062e-05 	 2.6226043701171875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.764469 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402032 	 1000 	 0.02782750129699707 	 0.03482651710510254 	 1.049041748046875e-05 	 3.3855438232421875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:43.890361 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402020 	 1000 	 0.03473067283630371 	 0.032434701919555664 	 1.4543533325195312e-05 	 3.528594970703125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.018291 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803620 	 1000 	 0.028270244598388672 	 0.03409385681152344 	 1.239776611328125e-05 	 3.4332275390625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.141199 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803620 	 1000 	 0.029456615447998047 	 0.0325169563293457 	 1.4066696166992188e-05 	 2.7894973754882812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.263815 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803632 	 1000 	 0.030652999877929688 	 0.03242921829223633 	 1.4543533325195312e-05 	 3.0994415283203125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.390724 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803632 	 1000 	 0.028179645538330078 	 0.03260970115661621 	 1.33514404296875e-05 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.515092 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803650 	 1000 	 0.02797412872314453 	 0.03254890441894531 	 1.049041748046875e-05 	 2.9087066650390625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.635644 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803650 	 1000 	 0.028170108795166016 	 0.0328066349029541 	 1.049041748046875e-05 	 2.86102294921875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.762150 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803680 	 1000 	 0.029120683670043945 	 0.033678531646728516 	 1.430511474609375e-05 	 3.8623809814453125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:44.914128 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803680 	 1000 	 0.03609108924865723 	 0.03252434730529785 	 1.6927719116210938e-05 	 3.1948089599609375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.076002 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803920 	 1000 	 0.028128862380981445 	 0.03235816955566406 	 1.2159347534179688e-05 	 3.3855438232421875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.197310 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803920 	 1000 	 0.02830958366394043 	 0.03284859657287598 	 1.1205673217773438e-05 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.319910 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402320 	 1000 	 0.0282895565032959 	 0.032726287841796875 	 1.0967254638671875e-05 	 3.0517578125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.449757 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 101606520 	 1000 	 0.028232097625732422 	 0.032630205154418945 	 1.0251998901367188e-05 	 2.765655517578125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.572284 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 101606520 	 1000 	 0.02798151969909668 	 0.03246045112609863 	 1.1920928955078125e-05 	 3.528594970703125e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.693909 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 101606544 	 1000 	 0.028058767318725586 	 0.03223252296447754 	 1.2159347534179688e-05 	 2.86102294921875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.814750 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 101606544 	 1000 	 0.02829432487487793 	 0.03231167793273926 	 1.2874603271484375e-05 	 3.933906555175781e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:45.942537 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 101606580 	 1000 	 0.029213905334472656 	 0.032300710678100586 	 1.9073486328125e-05 	 3.838539123535156e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:46.068161 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 101606580 	 1000 	 0.05009937286376953 	 0.03251361846923828 	 2.2649765014648438e-05 	 4.863739013671875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:52:46.217016 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 101606640 	 1000 	 3.4058306217193604 	 3.5435211658477783 	 1.7391026020050049 	 0.163926362991333 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:07.448179 test begin: paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 101606640 	 1000 	 5.269238710403442 	 5.1908628940582275 	 2.6904687881469727 	 0.18884730339050293 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:37.490274 test begin: paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 101607120 	 1000 	 3.404691696166992 	 3.5687012672424316 	 1.7389674186706543 	 0.1651301383972168 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:53:57.782439 test begin: paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 101607120 	 1000 	 5.269648790359497 	 5.180551052093506 	 2.6918516159057617 	 0.18810558319091797 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:54:27.553509 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402320 	 1000 	 1.7009427547454834 	 1.7827086448669434 	 0.8681344985961914 	 0.16405987739562988 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:54:40.166963 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 25402320 	 1000 	 2.6384081840515137 	 2.600572347640991 	 1.3456909656524658 	 0.1896357536315918 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:54:56.754045 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 25402320 	 1000 	 1.7246639728546143 	 1.7697465419769287 	 0.8808047771453857 	 0.16368627548217773 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:06.988519 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 76205520 	 1000 	 1.6996064186096191 	 1.7681770324707031 	 0.8681747913360596 	 0.1636335849761963 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:17.035404 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 76205520 	 1000 	 2.6346261501312256 	 2.5978519916534424 	 1.345966100692749 	 0.1896965503692627 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:31.860123 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803920 	 1000 	 1.7007360458374023 	 1.7817082405090332 	 0.8688907623291016 	 0.16373157501220703 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:41.993970 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, ) 	 50803920 	 1000 	 2.6349809169769287 	 2.598020315170288 	 1.3464300632476807 	 0.189605712890625 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:55:56.792857 test begin: paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
[Prof] paddle.nn.functional.max_unpool3d 	 paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, ) 	 50803920 	 1000 	 1.7237873077392578 	 1.7685744762420654 	 0.8802430629730225 	 0.16369009017944336 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:56:06.978009 test begin: paddle.nn.functional.maxout(Tensor([100, 4, 21169, 3],"float64"), 2, 1, None, )
[Error] shape '[100, 0, 2, 2, 2, 21169, 3]' is invalid for input of size 25402800
2025-07-27 19:56:08.744494 test begin: paddle.nn.functional.maxout(Tensor([100, 4, 3, 21169],"float64"), 2, 1, None, )
[Error] shape '[100, 0, 2, 2, 2, 3, 21169]' is invalid for input of size 25402800
2025-07-27 19:56:10.490938 test begin: paddle.nn.functional.maxout(Tensor([100, 4, 3, 42337],"float32"), 2, 1, None, )
[Error] shape '[100, 0, 2, 2, 2, 3, 42337]' is invalid for input of size 50804400
2025-07-27 19:56:12.948423 test begin: paddle.nn.functional.maxout(Tensor([100, 4, 42337, 3],"float32"), 2, 1, None, )
[Error] shape '[100, 0, 2, 2, 2, 42337, 3]' is invalid for input of size 50804400
2025-07-27 19:56:15.355233 test begin: paddle.nn.functional.maxout(Tensor([1411201, 4, 3, 3],"float32"), 2, 1, None, )
[Error] shape '[1411201, 0, 2, 2, 2, 3, 3]' is invalid for input of size 50803236
2025-07-27 19:56:17.723913 test begin: paddle.nn.functional.maxout(Tensor([705601, 4, 3, 3],"float64"), 2, 1, None, )
[Error] shape '[705601, 0, 2, 2, 2, 3, 3]' is invalid for input of size 25401636
2025-07-27 19:56:19.480520 test begin: paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 42337],"float32"), groups=2, )
[Error] shape '[100, 0, 2, 2, 2, 3, 42337]' is invalid for input of size 50804400
2025-07-27 19:56:21.941266 test begin: paddle.nn.functional.maxout(x=Tensor([100, 4, 42337, 3],"float32"), groups=2, )
[Error] shape '[100, 0, 2, 2, 2, 42337, 3]' is invalid for input of size 50804400
2025-07-27 19:56:24.366250 test begin: paddle.nn.functional.maxout(x=Tensor([1411201, 4, 3, 3],"float32"), groups=2, )
[Error] shape '[1411201, 0, 2, 2, 2, 3, 3]' is invalid for input of size 50803236
2025-07-27 19:56:26.756610 test begin: paddle.nn.functional.mish(Tensor([12, 10585, 20, 20],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 10585, 20, 20],"float32"), ) 	 50808000 	 1000 	 0.30527400970458984 	 0.3001861572265625 	 0.29622840881347656 	 0.2848548889160156 	 0.453693151473999 	 0.4542655944824219 	 0.40279150009155273 	 0.3832087516784668 	 
2025-07-27 19:56:29.933572 test begin: paddle.nn.functional.mish(Tensor([12, 128, 40, 827],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 128, 40, 827],"float32"), ) 	 50810880 	 1000 	 0.3053767681121826 	 0.30014872550964355 	 0.2961869239807129 	 0.2848207950592041 	 0.45366787910461426 	 0.45428037643432617 	 0.40238118171691895 	 0.37894415855407715 	 
2025-07-27 19:56:33.116707 test begin: paddle.nn.functional.mish(Tensor([12, 128, 827, 40],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 128, 827, 40],"float32"), ) 	 50810880 	 1000 	 0.30603694915771484 	 1.063699722290039 	 0.29604625701904297 	 0.2847425937652588 	 0.4536564350128174 	 0.4542665481567383 	 0.4020514488220215 	 0.3853580951690674 	 
2025-07-27 19:56:39.755158 test begin: paddle.nn.functional.mish(Tensor([12, 256, 40, 414],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 256, 40, 414],"float32"), ) 	 50872320 	 1000 	 0.30694055557250977 	 0.3006319999694824 	 0.2890470027923584 	 0.27760958671569824 	 0.45407938957214355 	 0.45504045486450195 	 0.3926234245300293 	 0.3613736629486084 	 
2025-07-27 19:56:42.896551 test begin: paddle.nn.functional.mish(Tensor([12, 256, 414, 40],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 256, 414, 40],"float32"), ) 	 50872320 	 1000 	 0.30521130561828613 	 0.3005387783050537 	 0.2893831729888916 	 0.27809643745422363 	 0.4541606903076172 	 0.4549369812011719 	 0.3937053680419922 	 0.3779730796813965 	 
2025-07-27 19:56:46.057601 test begin: paddle.nn.functional.mish(Tensor([12, 2647, 40, 40],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 2647, 40, 40],"float32"), ) 	 50822400 	 1000 	 0.30574870109558105 	 0.3004264831542969 	 0.2832353115081787 	 0.2726585865020752 	 0.45502614974975586 	 0.4545249938964844 	 0.3939943313598633 	 0.37880778312683105 	 
2025-07-27 19:56:49.248212 test begin: paddle.nn.functional.mish(Tensor([12, 512, 20, 414],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 512, 20, 414],"float32"), ) 	 50872320 	 1000 	 0.30624842643737793 	 0.30049896240234375 	 0.2964932918548584 	 0.28497743606567383 	 0.4541511535644531 	 0.45491790771484375 	 0.39963388442993164 	 0.3844146728515625 	 
2025-07-27 19:56:54.161322 test begin: paddle.nn.functional.mish(Tensor([12, 512, 414, 20],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([12, 512, 414, 20],"float32"), ) 	 50872320 	 1000 	 0.9785103797912598 	 0.3004753589630127 	 0.2965571880340576 	 0.27803635597229004 	 0.4542357921600342 	 0.45494723320007324 	 0.4021439552307129 	 0.37219738960266113 	 
2025-07-27 19:56:58.615384 test begin: paddle.nn.functional.mish(Tensor([125, 256, 40, 40],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([125, 256, 40, 40],"float32"), ) 	 51200000 	 1000 	 0.3078927993774414 	 0.3024575710296631 	 0.29874229431152344 	 0.28745555877685547 	 0.45693159103393555 	 0.4577372074127197 	 0.4058256149291992 	 0.388852596282959 	 
2025-07-27 19:57:01.832274 test begin: paddle.nn.functional.mish(Tensor([249, 128, 40, 40],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([249, 128, 40, 40],"float32"), ) 	 50995200 	 1000 	 0.3058583736419678 	 0.30119824409484863 	 0.2973463535308838 	 0.28562259674072266 	 0.4552319049835205 	 0.4560253620147705 	 0.40442371368408203 	 0.3865675926208496 	 
2025-07-27 19:57:05.029278 test begin: paddle.nn.functional.mish(Tensor([249, 512, 20, 20],"float32"), )
[Prof] paddle.nn.functional.mish 	 paddle.nn.functional.mish(Tensor([249, 512, 20, 20],"float32"), ) 	 50995200 	 1000 	 0.30588674545288086 	 0.30115580558776855 	 0.29723191261291504 	 0.28565478324890137 	 0.45522475242614746 	 0.45603156089782715 	 0.40291762351989746 	 0.3865950107574463 	 
2025-07-27 19:57:08.187984 test begin: paddle.nn.functional.mse_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "mean", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "mean", ) 	 101608320 	 1000 	 0.8935472965240479 	 0.5985109806060791 	 0.22798681259155273 	 0.20359158515930176 	 1.0588939189910889 	 1.1600475311279297 	 0.36092424392700195 	 0.29631900787353516 	 
2025-07-27 19:57:13.588155 test begin: paddle.nn.functional.mse_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "mean", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "mean", ) 	 101671488 	 1000 	 0.893904447555542 	 0.5989797115325928 	 0.2280564308166504 	 0.20377063751220703 	 1.0595271587371826 	 1.1607308387756348 	 0.3611116409301758 	 0.29650259017944336 	 
2025-07-27 19:57:18.990717 test begin: paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", )
/usr/local/lib/python3.10/dist-packages/torch/utils/_device.py:104: UserWarning: Using a target size (torch.Size([3548, 12, 170, 8])) that is different to the input size (torch.Size([3548, 12, 170, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return func(*args, **kwargs)
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", ) 	 65141280 	 1000 	 0.8642034530639648 	 0.5752112865447998 	 0.22057318687438965 	 0.1956777572631836 	 1.5467212200164795 	 1.6177737712860107 	 0.39525818824768066 	 0.3309462070465088 	 
2025-07-27 19:57:24.691676 test begin: paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "mean", )
/usr/local/lib/python3.10/dist-packages/torch/utils/_device.py:104: UserWarning: Using a target size (torch.Size([3548, 12, 170, 1])) that is different to the input size (torch.Size([3548, 12, 170, 8])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return func(*args, **kwargs)
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "mean", ) 	 65141280 	 1000 	 0.8652021884918213 	 0.5746896266937256 	 0.22081279754638672 	 0.19548916816711426 	 1.1362519264221191 	 1.6173696517944336 	 0.38725781440734863 	 0.3308558464050293 	 
2025-07-27 19:57:29.935013 test begin: paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", ) 	 115806720 	 1000 	 1.015843152999878 	 0.7162344455718994 	 0.25922679901123047 	 0.24138975143432617 	 1.2064931392669678 	 1.3184144496917725 	 0.4111320972442627 	 0.33675241470336914 	 
2025-07-27 19:57:37.485481 test begin: paddle.nn.functional.mse_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "mean", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "mean", ) 	 102537200 	 1000 	 0.9071619510650635 	 0.6035761833190918 	 0.2300567626953125 	 0.20530271530151367 	 1.0684974193572998 	 1.1699533462524414 	 0.3642001152038574 	 0.29883790016174316 	 
2025-07-27 19:57:43.808770 test begin: paddle.nn.functional.mse_loss(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), "none", ) 	 101646336 	 1000 	 0.7545063495635986 	 0.4482285976409912 	 0.38114333152770996 	 0.4234945774078369 	 0.9236772060394287 	 1.4456865787506104 	 0.47196459770202637 	 0.3692898750305176 	 
2025-07-27 19:57:49.823890 test begin: paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), "none", ) 	 101670912 	 1000 	 0.7461910247802734 	 0.4470791816711426 	 0.3812427520751953 	 0.42374491691589355 	 0.9239346981048584 	 1.4460718631744385 	 0.47200775146484375 	 0.3693370819091797 	 
2025-07-27 19:57:55.818730 test begin: paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), "none", ) 	 101744640 	 1000 	 0.7668564319610596 	 0.44950032234191895 	 0.38150548934936523 	 0.4229292869567871 	 0.9253065586090088 	 1.4471817016601562 	 0.47267913818359375 	 0.36971449851989746 	 
2025-07-27 19:58:04.899841 test begin: paddle.nn.functional.mse_loss(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), "none", ) 	 103809024 	 1000 	 0.7616724967956543 	 0.45627546310424805 	 0.38918018341064453 	 0.4329354763031006 	 0.9437432289123535 	 1.4757070541381836 	 0.48221874237060547 	 0.3769800662994385 	 
2025-07-27 19:58:11.047037 test begin: paddle.nn.functional.mse_loss(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), "none", ) 	 103809024 	 1000 	 0.7615747451782227 	 0.4562976360321045 	 0.38904881477355957 	 0.43309593200683594 	 0.9437441825866699 	 1.475705862045288 	 0.4822070598602295 	 0.377042293548584 	 
2025-07-27 19:58:17.236212 test begin: paddle.nn.functional.mse_loss(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), "none", ) 	 104857600 	 1000 	 0.7693572044372559 	 0.46084141731262207 	 0.393035888671875 	 0.43762898445129395 	 0.9520053863525391 	 1.4907379150390625 	 0.4863724708557129 	 0.38088464736938477 	 
2025-07-27 19:58:23.507086 test begin: paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), "none", ) 	 101646336 	 1000 	 0.7457175254821777 	 0.44699788093566895 	 0.38095569610595703 	 0.42356133460998535 	 0.9239189624786377 	 1.445554256439209 	 0.47208166122436523 	 0.3692636489868164 	 
2025-07-27 19:58:29.536045 test begin: paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), "none", ) 	 101646336 	 1000 	 0.7458968162536621 	 0.4469587802886963 	 0.381084680557251 	 0.42388367652893066 	 0.9237921237945557 	 1.4460639953613281 	 0.4720017910003662 	 0.36926937103271484 	 
2025-07-27 19:58:37.412409 test begin: paddle.nn.functional.mse_loss(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), "none", )
[Prof] paddle.nn.functional.mse_loss 	 paddle.nn.functional.mse_loss(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), "none", ) 	 101744640 	 1000 	 0.7538483142852783 	 0.4473862648010254 	 0.3815610408782959 	 0.41559624671936035 	 0.925239086151123 	 1.4472990036010742 	 0.4727163314819336 	 0.3697524070739746 	 
2025-07-27 19:58:44.468469 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=None, )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=None, ) 	 50803210 	 1000 	 3.374330759048462 	 3.3252434730529785 	 0.31344151496887207 	 0.28264379501342773 	 4.631873369216919 	 4.300855398178101 	 0.3651607036590576 	 0.3387410640716553 	 
2025-07-27 19:59:01.268193 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=Tensor([5, 5080321],"float64"), )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=Tensor([5, 5080321],"float64"), ) 	 76204815 	 1000 	 3.825065851211548 	 3.7665529251098633 	 0.3251762390136719 	 0.2956094741821289 	 5.374484062194824 	 5.063146352767944 	 0.3923366069793701 	 0.3451426029205322 	 
2025-07-27 19:59:23.430128 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), weight=Tensor([5, 5080321],"float64"), reduction="mean", name=None, )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), weight=Tensor([5, 5080321],"float64"), reduction="mean", name=None, ) 	 76204815 	 1000 	 3.824878692626953 	 3.793168067932129 	 0.32530784606933594 	 0.29576992988586426 	 5.373881578445435 	 5.063025951385498 	 0.39232659339904785 	 0.34517931938171387 	 
2025-07-27 19:59:43.300344 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=None, )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=None, ) 	 50803210 	 1000 	 3.39144229888916 	 3.4910452365875244 	 0.3150002956390381 	 0.29642558097839355 	 4.715166091918945 	 4.456329584121704 	 0.37164902687072754 	 0.3508870601654053 	 
2025-07-27 20:00:00.534218 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=Tensor([5080321, 5],"float64"), )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=Tensor([5080321, 5],"float64"), ) 	 76204815 	 1000 	 3.8390915393829346 	 3.941240072250366 	 0.3263866901397705 	 0.30857014656066895 	 5.459775447845459 	 5.210925817489624 	 0.3985576629638672 	 0.3552877902984619 	 
2025-07-27 20:00:21.529486 test begin: paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), weight=Tensor([5080321, 5],"float64"), reduction="mean", name=None, )
[Prof] paddle.nn.functional.multi_label_soft_margin_loss 	 paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), weight=Tensor([5080321, 5],"float64"), reduction="mean", name=None, ) 	 76204815 	 1000 	 3.842824935913086 	 3.9317004680633545 	 0.3263380527496338 	 0.30866336822509766 	 5.459394454956055 	 5.211075067520142 	 0.39853334426879883 	 0.3552091121673584 	 
2025-07-27 20:00:42.887473 test begin: paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
W0727 20:00:43.544867  1821 dygraph_functions.cc:93089] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, ) 	 38102403 	 1000 	 3.8604300022125244 	 16.25519824028015 	 0.0002117156982421875 	 5.52687931060791 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:01:07.978039 test begin: paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, ) 	 38102403 	 1000 	 3.794335126876831 	 16.176061630249023 	 0.0001266002655029297 	 16.15690016746521 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:01:35.028788 test begin: paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, ) 	 38102403 	 1000 	 3.8674254417419434 	 16.25478458404541 	 0.00019025802612304688 	 5.5267698764801025 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:02:01.893722 test begin: paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, ) 	 76204803 	 1000 	 7.525050401687622 	 32.488099575042725 	 0.000415802001953125 	 11.046117305755615 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:02:51.670501 test begin: paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, ) 	 76204803 	 1000 	 7.386645793914795 	 32.33569145202637 	 0.0002758502960205078 	 32.317219972610474 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:03:41.934846 test begin: paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, ) 	 76204803 	 1000 	 7.531533241271973 	 32.49343252182007 	 0.0004162788391113281 	 11.04883074760437 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:31.661137 test begin: paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, ) 	 25401610 	 1000 	 1.2769801616668701 	 6.033644914627075 	 2.5510787963867188e-05 	 3.0829312801361084 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:42.582330 test begin: paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, ) 	 25401610 	 1000 	 1.2635116577148438 	 6.037333965301514 	 2.09808349609375e-05 	 6.018975257873535 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:04:52.775100 test begin: paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
[Prof] paddle.nn.functional.multi_margin_loss 	 paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, ) 	 25401610 	 1000 	 1.2836811542510986 	 6.038973093032837 	 0.0001392364501953125 	 3.085892677307129 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:05:03.022988 test begin: paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="mean", name=None, )
[Prof] paddle.nn.functional.nll_loss 	 paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="mean", name=None, ) 	 25443143 	 1000 	 0.027097702026367188 	 0.03668498992919922 	 1.3589859008789062e-05 	 4.1961669921875e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:05:03.757524 test begin: paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="none", name=None, )
[Prof] paddle.nn.functional.nll_loss 	 paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="none", name=None, ) 	 25443143 	 1000 	 0.027578353881835938 	 0.023905277252197266 	 2.6941299438476562e-05 	 3.600120544433594e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:05:04.493700 test begin: paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="sum", name=None, )
[Prof] paddle.nn.functional.nll_loss 	 paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="sum", name=None, ) 	 25443143 	 1000 	 0.024296283721923828 	 0.03385591506958008 	 2.1457672119140625e-05 	 3.6716461181640625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:05:05.234066 test begin: paddle.nn.functional.normalize(Tensor([2009, 25288],"float32"), )
[Prof] paddle.nn.functional.normalize 	 paddle.nn.functional.normalize(Tensor([2009, 25288],"float32"), ) 	 50803592 	 1000 	 0.47646093368530273 	 0.4697532653808594 	 0.0971384048461914 	 0.15979552268981934 	 2.682169198989868 	 3.2019317150115967 	 0.5490682125091553 	 0.23371124267578125 	 
2025-07-27 20:05:14.284459 test begin: paddle.nn.functional.normalize(Tensor([2081, 24413],"float32"), )
[Prof] paddle.nn.functional.normalize 	 paddle.nn.functional.normalize(Tensor([2081, 24413],"float32"), ) 	 50803453 	 1000 	 0.4737100601196289 	 0.47013115882873535 	 0.09684109687805176 	 0.16011548042297363 	 2.681971549987793 	 3.2028145790100098 	 0.5491013526916504 	 0.23374247550964355 	 
2025-07-27 20:05:22.787192 test begin: paddle.nn.functional.normalize(Tensor([2331, 21795],"float32"), )
[Prof] paddle.nn.functional.normalize 	 paddle.nn.functional.normalize(Tensor([2331, 21795],"float32"), ) 	 50804145 	 1000 	 0.47240591049194336 	 0.47084712982177734 	 0.09652876853942871 	 0.1603233814239502 	 2.6762256622314453 	 3.2037222385406494 	 0.5478432178497314 	 0.23362112045288086 	 
2025-07-27 20:05:31.416159 test begin: paddle.nn.functional.normalize(Tensor([99226, 512],"float32"), )
[Prof] paddle.nn.functional.normalize 	 paddle.nn.functional.normalize(Tensor([99226, 512],"float32"), ) 	 50803712 	 1000 	 0.4882509708404541 	 0.48903679847717285 	 0.09982872009277344 	 0.15906810760498047 	 2.717644453048706 	 3.213447093963623 	 0.5563302040100098 	 0.23457908630371094 	 
2025-07-27 20:05:42.729255 test begin: paddle.nn.functional.npair_loss(Tensor([18, 2822401],"float32"), positive=Tensor([18, 2822401],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
[Prof] paddle.nn.functional.npair_loss 	 paddle.nn.functional.npair_loss(Tensor([18, 2822401],"float32"), positive=Tensor([18, 2822401],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, ) 	 101606454 	 1000 	 1.4674506187438965 	 1.4155471324920654 	 0.06256866455078125 	 0.07202553749084473 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:05:51.088945 test begin: paddle.nn.functional.pad(Tensor([7573, 11, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([7573, 11, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, ) 	 106627840 	 1000 	 1.2371745109558105 	 0.46880602836608887 	 1.2263150215148926 	 0.15962982177734375 	 0.9875288009643555 	 0.8023393154144287 	 0.9340972900390625 	 0.27303194999694824 	 
2025-07-27 20:05:58.152144 test begin: paddle.nn.functional.pad(Tensor([7573, 8, 1678],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([7573, 8, 1678],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, ) 	 101659952 	 1000 	 1.179610013961792 	 0.44751930236816406 	 1.168365240097046 	 0.15238118171691895 	 0.9414591789245605 	 0.7655878067016602 	 0.8880922794342041 	 0.2605934143066406 	 
2025-07-27 20:06:04.770886 test begin: paddle.nn.functional.pad(Tensor([7710, 11, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([7710, 11, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, ) 	 108556800 	 1000 	 1.2581875324249268 	 0.47707390785217285 	 1.2471020221710205 	 0.16250109672546387 	 1.0049922466278076 	 0.8163068294525146 	 0.9495370388031006 	 0.27784013748168945 	 
2025-07-27 20:06:11.882054 test begin: paddle.nn.functional.pad(Tensor([7710, 8, 1648],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([7710, 8, 1648],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, ) 	 101648640 	 1000 	 1.1790013313293457 	 0.4474058151245117 	 1.1678266525268555 	 0.15241312980651855 	 0.9412641525268555 	 0.7649674415588379 	 0.8877785205841064 	 0.26035022735595703 	 
2025-07-27 20:06:18.466323 test begin: paddle.nn.functional.pad(Tensor([8162, 10, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([8162, 10, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, ) 	 104473600 	 1000 	 1.2143363952636719 	 0.45986342430114746 	 1.200937271118164 	 0.15660333633422852 	 0.9675209522247314 	 0.7866194248199463 	 0.9139492511749268 	 0.2677345275878906 	 
2025-07-27 20:06:25.388762 test begin: paddle.nn.functional.pad(Tensor([8162, 8, 1557],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([8162, 8, 1557],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, ) 	 101665872 	 1000 	 1.1824226379394531 	 0.44745945930480957 	 1.1679773330688477 	 0.15236854553222656 	 0.9414658546447754 	 0.7655863761901855 	 0.8878552913665771 	 0.2605626583099365 	 
2025-07-27 20:06:32.011203 test begin: paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, ) 	 101611520 	 1000 	 1.1787383556365967 	 0.4534111022949219 	 1.1674268245697021 	 0.22713470458984375 	 0.9410686492919922 	 0.7618613243103027 	 0.8873014450073242 	 0.38838911056518555 	 
2025-07-27 20:06:42.162692 test begin: paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, ) 	 101611520 	 1000 	 1.1787464618682861 	 0.6803464889526367 	 1.1674938201904297 	 0.22706174850463867 	 0.9411237239837646 	 0.7619228363037109 	 0.8869245052337646 	 0.3892552852630615 	 
2025-07-27 20:06:51.844489 test begin: paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
[Prof] paddle.nn.functional.pad 	 paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, ) 	 101611520 	 1000 	 1.1788511276245117 	 0.44454121589660645 	 1.1674833297729492 	 0.22703909873962402 	 0.9409348964691162 	 0.7621281147003174 	 0.8851079940795898 	 0.3894155025482178 	 
2025-07-27 20:06:58.453755 test begin: paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, False, None, )
[Prof] paddle.nn.functional.pairwise_distance 	 paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, False, None, ) 	 101606600 	 1000 	 1.1402559280395508 	 1.062591552734375 	 0.19385862350463867 	 0.27127647399902344 	 1.8961710929870605 	 2.7748868465423584 	 0.968818187713623 	 0.28365111351013184 	 
2025-07-27 20:07:07.023676 test begin: paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, True, None, )
[Prof] paddle.nn.functional.pairwise_distance 	 paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, True, None, ) 	 101606600 	 1000 	 1.1403727531433105 	 1.0626826286315918 	 0.19387459754943848 	 0.27127766609191895 	 1.8951871395111084 	 2.7748520374298096 	 0.9684500694274902 	 0.2837061882019043 	 
2025-07-27 20:07:15.578755 test begin: paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, False, None, )
[Prof] paddle.nn.functional.pairwise_distance 	 paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, False, None, ) 	 101606600 	 1000 	 1.525346040725708 	 1.6457021236419678 	 0.31192851066589355 	 0.5607516765594482 	 1.9830634593963623 	 2.7862441539764404 	 1.0132851600646973 	 0.2848079204559326 	 
2025-07-27 20:07:25.177459 test begin: paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, True, None, )
[Prof] paddle.nn.functional.pairwise_distance 	 paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, True, None, ) 	 101606600 	 1000 	 1.5253138542175293 	 1.6456215381622314 	 0.3119010925292969 	 0.560706377029419 	 1.9833271503448486 	 2.786102771759033 	 1.0134329795837402 	 0.28479790687561035 	 
2025-07-27 20:07:34.777875 test begin: paddle.nn.functional.pixel_shuffle(Tensor([13, 256, 128, 128],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([13, 256, 128, 128],"float32"), 2, "NCHW", None, ) 	 54525952 	 1000 	 0.4100804328918457 	 0.36510157585144043 	 0.39670348167419434 	 0.32444286346435547 	 0.39522242546081543 	 0.34306907653808594 	 0.33614158630371094 	 0.2655012607574463 	 
2025-07-27 20:07:41.000850 test begin: paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 388],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 388],"float32"), 2, "NCHW", None, ) 	 50855936 	 1000 	 0.37870192527770996 	 0.33333277702331543 	 0.3665590286254883 	 0.31495213508605957 	 0.40216732025146484 	 0.3253471851348877 	 0.3518683910369873 	 0.2513248920440674 	 
2025-07-27 20:07:44.099190 test begin: paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 388, 128],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 388, 128],"float32"), 2, "NCHW", None, ) 	 50855936 	 1000 	 0.3859293460845947 	 0.33771371841430664 	 0.36748600006103516 	 0.3078577518463135 	 0.3994472026824951 	 0.32257866859436035 	 0.3399012088775635 	 0.23759937286376953 	 
2025-07-27 20:07:47.178370 test begin: paddle.nn.functional.pixel_shuffle(Tensor([4, 776, 128, 128],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([4, 776, 128, 128],"float32"), 2, "NCHW", None, ) 	 50855936 	 1000 	 0.377727746963501 	 0.3284785747528076 	 0.361039400100708 	 0.3023810386657715 	 0.36811184883117676 	 0.32064008712768555 	 0.30755138397216797 	 0.24110937118530273 	 
2025-07-27 20:07:50.215947 test begin: paddle.nn.functional.pixel_shuffle(Tensor([49, 256, 64, 64],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([49, 256, 64, 64],"float32"), 2, "NCHW", None, ) 	 51380224 	 1000 	 1.2732515335083008 	 0.356792688369751 	 0.36876463890075684 	 0.30411243438720703 	 0.36547374725341797 	 0.32749485969543457 	 0.3059678077697754 	 0.24542713165283203 	 
2025-07-27 20:07:56.878764 test begin: paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 25],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 25],"float32"), 2, "NCHW", None, ) 	 52428800 	 1000 	 0.38605237007141113 	 0.33996009826660156 	 0.3694038391113281 	 0.3139021396636963 	 0.39014673233032227 	 0.34412384033203125 	 0.3305356502532959 	 0.26375484466552734 	 
2025-07-27 20:08:00.047042 test begin: paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 25, 128],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 25, 128],"float32"), 2, "NCHW", None, ) 	 52428800 	 1000 	 0.39444565773010254 	 0.3388819694519043 	 0.3849151134490967 	 0.3205301761627197 	 0.37872791290283203 	 0.32227396965026855 	 0.3285186290740967 	 0.24536895751953125 	 
2025-07-27 20:08:03.214648 test begin: paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 49, 64],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 49, 64],"float32"), 2, "NCHW", None, ) 	 51380224 	 1000 	 0.3859236240386963 	 0.33661484718322754 	 0.376448392868042 	 0.318190336227417 	 0.3653440475463867 	 0.31876039505004883 	 0.3136887550354004 	 0.24096965789794922 	 
2025-07-27 20:08:06.275578 test begin: paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 64, 49],"float32"), 2, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_shuffle 	 paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 64, 49],"float32"), 2, "NCHW", None, ) 	 51380224 	 1000 	 0.3803832530975342 	 0.3309035301208496 	 0.36873459815979004 	 0.3089742660522461 	 0.37484264373779297 	 0.3324611186981201 	 0.3243577480316162 	 0.2584414482116699 	 
2025-07-27 20:08:09.334963 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", ) 	 25401744 	 1000 	 0.3171224594116211 	 0.30194854736328125 	 0.3064002990722656 	 0.2833995819091797 	 0.31596851348876953 	 0.30214452743530273 	 0.26482605934143066 	 0.22116613388061523 	 
2025-07-27 20:08:11.641683 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", None, ) 	 25401744 	 1000 	 0.317188024520874 	 0.3018941879272461 	 0.3064911365509033 	 0.28357768058776855 	 0.31585097312927246 	 0.3021409511566162 	 0.2657608985900879 	 0.22803306579589844 	 
2025-07-27 20:08:13.967145 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([2, 176401, 12, 12],"float32"), 3, "NCHW", )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([2, 176401, 12, 12],"float32"), 3, "NCHW", ) 	 50803488 	 1000 	 0.3667178153991699 	 0.32991528511047363 	 0.3567235469818115 	 0.3068537712097168 	 0.3623785972595215 	 0.3238654136657715 	 0.31108808517456055 	 0.24965119361877441 	 
2025-07-27 20:08:17.016383 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", ) 	 25401888 	 1000 	 0.3172318935394287 	 0.30205345153808594 	 0.3071632385253906 	 0.27759313583374023 	 0.31594228744506836 	 0.30212926864624023 	 0.2641935348510742 	 0.22795963287353516 	 
2025-07-27 20:08:19.331406 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", None, )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", None, ) 	 25401888 	 1000 	 0.3171253204345703 	 0.30220460891723633 	 0.3069801330566406 	 0.2835509777069092 	 0.3159761428833008 	 0.3021674156188965 	 0.24941802024841309 	 0.225935697555542 	 
2025-07-27 20:08:21.637887 test begin: paddle.nn.functional.pixel_unshuffle(Tensor([352801, 1, 12, 12],"float32"), 3, "NCHW", )
[Prof] paddle.nn.functional.pixel_unshuffle 	 paddle.nn.functional.pixel_unshuffle(Tensor([352801, 1, 12, 12],"float32"), 3, "NCHW", ) 	 50803344 	 1000 	 0.3661360740661621 	 0.32587623596191406 	 0.35602664947509766 	 0.3072543144226074 	 0.3624598979949951 	 0.3238539695739746 	 0.31232476234436035 	 0.24884319305419922 	 
2025-07-27 20:08:24.679430 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"bfloat16"), )
W0727 20:08:27.700479  2300 multiply_fwd_func.cc:76] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"bfloat16"), ) 	 203212812 	 1000 	 3.1496334075927734 	 2.5976364612579346 	 0.5355708599090576 	 0.5292143821716309 	 5.701570987701416 	 4.810652017593384 	 0.9705469608306885 	 0.7023470401763916 	 
2025-07-27 20:08:46.892714 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"float16"), ) 	 203212812 	 1000 	 3.149120807647705 	 2.5918331146240234 	 0.5355548858642578 	 0.5283710956573486 	 5.703591346740723 	 4.807392597198486 	 0.9710693359375 	 0.7018520832061768 	 
2025-07-27 20:09:07.121116 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"bfloat16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"bfloat16"), ) 	 203212816 	 1000 	 3.151740312576294 	 2.592707633972168 	 0.5355381965637207 	 0.5292272567749023 	 5.701674222946167 	 4.810662031173706 	 0.9705157279968262 	 0.7023305892944336 	 
2025-07-27 20:09:26.711802 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"float16"), ) 	 203212816 	 1000 	 3.15173077583313 	 2.600625514984131 	 0.5356872081756592 	 0.5286092758178711 	 5.7031214237213135 	 4.807004690170288 	 0.9707536697387695 	 0.701786994934082 	 
2025-07-27 20:09:48.574387 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), ) 	 50803224 	 1000 	 1.6685388088226318 	 1.0685782432556152 	 0.2435622215270996 	 0.2180929183959961 	 2.2713730335235596 	 2.1702370643615723 	 0.3315465450286865 	 0.2773449420928955 	 
2025-07-27 20:09:56.728315 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"bfloat16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"bfloat16"), ) 	 101606424 	 1000 	 1.586106538772583 	 1.315263032913208 	 0.26972055435180664 	 0.2681763172149658 	 2.8648674488067627 	 2.4206340312957764 	 0.48763179779052734 	 0.3533194065093994 	 
2025-07-27 20:10:10.398364 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float16"), ) 	 101606424 	 1000 	 1.585721731185913 	 1.3108978271484375 	 0.26975178718566895 	 0.26757025718688965 	 2.8667492866516113 	 2.418937921524048 	 0.48793935775756836 	 0.3531301021575928 	 
2025-07-27 20:10:20.357017 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), ) 	 101606424 	 1000 	 3.307668685913086 	 2.101289987564087 	 0.48294758796691895 	 0.42895960807800293 	 4.514146566390991 	 4.299337863922119 	 0.6590361595153809 	 0.5494353771209717 	 
2025-07-27 20:10:37.668663 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"bfloat16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"bfloat16"), ) 	 203212824 	 1000 	 3.1696865558624268 	 2.5928609371185303 	 0.5356557369232178 	 0.5292558670043945 	 5.704634666442871 	 4.810827732086182 	 0.9717295169830322 	 0.702427864074707 	 
2025-07-27 20:10:57.457765 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"float16"), ) 	 203212824 	 1000 	 3.14866304397583 	 2.58986759185791 	 0.5355579853057861 	 0.5284600257873535 	 5.70299220085144 	 4.807924509048462 	 0.9707760810852051 	 0.702031135559082 	 
2025-07-27 20:11:18.247615 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), ) 	 50803216 	 1000 	 1.6685993671417236 	 1.0687556266784668 	 0.24361944198608398 	 0.21825528144836426 	 2.2706916332244873 	 2.170309066772461 	 0.33146190643310547 	 0.2773730754852295 	 
2025-07-27 20:11:26.453077 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"bfloat16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"bfloat16"), ) 	 101606416 	 1000 	 1.5863256454467773 	 1.3129496574401855 	 0.2698531150817871 	 0.26798176765441895 	 2.86576509475708 	 2.4204294681549072 	 0.48782896995544434 	 0.35332179069519043 	 
2025-07-27 20:11:37.542957 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float16"), ) 	 101606416 	 1000 	 1.5959770679473877 	 1.3110873699188232 	 0.2698659896850586 	 0.26758289337158203 	 2.866704225540161 	 2.4192276000976562 	 0.488025426864624 	 0.3531346321105957 	 
2025-07-27 20:11:48.316591 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), ) 	 101606416 	 1000 	 3.308938503265381 	 2.1040849685668945 	 0.48291540145874023 	 0.42925095558166504 	 4.512486219406128 	 4.299047470092773 	 0.6587972640991211 	 0.5493576526641846 	 
2025-07-27 20:12:04.469553 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), ) 	 50803212 	 1000 	 1.6685490608215332 	 1.069955587387085 	 0.24367618560791016 	 0.21847987174987793 	 2.2708184719085693 	 2.1703624725341797 	 0.3314998149871826 	 0.27732396125793457 	 
2025-07-27 20:12:12.605254 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"bfloat16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"bfloat16"), ) 	 101606412 	 1000 	 1.586225986480713 	 1.3154096603393555 	 0.26981616020202637 	 0.26801180839538574 	 2.8659868240356445 	 2.421027898788452 	 0.4879004955291748 	 0.353440523147583 	 
2025-07-27 20:12:24.601978 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float16"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float16"), ) 	 101606412 	 1000 	 1.5860438346862793 	 1.312974452972412 	 0.2697434425354004 	 0.2678999900817871 	 2.8666393756866455 	 2.419268846511841 	 0.48801469802856445 	 0.3531942367553711 	 
2025-07-27 20:12:34.678622 test begin: paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), )
[Prof] paddle.nn.functional.poisson_nll_loss 	 paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), ) 	 101606412 	 1000 	 3.307265281677246 	 2.103156089782715 	 0.48292970657348633 	 0.4290463924407959 	 4.512515306472778 	 4.298994541168213 	 0.6588425636291504 	 0.5494339466094971 	 
2025-07-27 20:12:51.481987 test begin: paddle.nn.functional.prelu(Tensor([104, 128, 56, 69],"float32"), Tensor([128],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([104, 128, 56, 69],"float32"), Tensor([128],"float32"), data_format="NCHW", ) 	 51437696 	 1000 	 0.3053915500640869 	 0.3127598762512207 	 0.29293394088745117 	 0.2969174385070801 	 1.1007559299468994 	 0.796461820602417 	 0.37445569038391113 	 0.2708911895751953 	 
2025-07-27 20:12:55.714620 test begin: paddle.nn.functional.prelu(Tensor([104, 128, 69, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([104, 128, 69, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", ) 	 51437696 	 1000 	 0.3046901226043701 	 0.3126101493835449 	 0.2929987907409668 	 0.29692530632019043 	 1.103374719619751 	 0.7962737083435059 	 0.375262975692749 	 0.27086424827575684 	 
2025-07-27 20:12:59.919605 test begin: paddle.nn.functional.prelu(Tensor([104, 156, 56, 56],"float32"), Tensor([156],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([104, 156, 56, 56],"float32"), Tensor([156],"float32"), data_format="NCHW", ) 	 50878620 	 1000 	 0.3013179302215576 	 0.31900835037231445 	 0.28931736946105957 	 0.29338574409484863 	 1.0824716091156006 	 0.7933409214019775 	 0.36818933486938477 	 0.26983118057250977 	 
2025-07-27 20:13:04.112434 test begin: paddle.nn.functional.prelu(Tensor([127, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([127, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", ) 	 50978944 	 1000 	 0.30254459381103516 	 0.30982375144958496 	 0.2872896194458008 	 0.29404139518737793 	 1.0905084609985352 	 0.787656307220459 	 0.3709120750427246 	 0.2679128646850586 	 
2025-07-27 20:13:08.278636 test begin: paddle.nn.functional.prelu(Tensor([128, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([128, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", ) 	 51380352 	 1000 	 0.30427980422973633 	 0.3123641014099121 	 0.29248929023742676 	 0.2969226837158203 	 1.0962352752685547 	 0.7936854362487793 	 0.3728978633880615 	 0.2699697017669678 	 
2025-07-27 20:13:12.483423 test begin: paddle.nn.functional.prelu(Tensor([128, 256, 28, 56],"float32"), Tensor([256],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([128, 256, 28, 56],"float32"), Tensor([256],"float32"), data_format="NCHW", ) 	 51380480 	 1000 	 0.3043968677520752 	 0.3122739791870117 	 0.2927086353302002 	 0.29689478874206543 	 1.0959515571594238 	 0.7939810752868652 	 0.37282299995422363 	 0.2701261043548584 	 
2025-07-27 20:13:16.713499 test begin: paddle.nn.functional.prelu(Tensor([128, 256, 56, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([128, 256, 56, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", ) 	 51380480 	 1000 	 0.30438971519470215 	 0.31233739852905273 	 0.2922186851501465 	 0.29700517654418945 	 1.0959899425506592 	 0.7942807674407959 	 0.3728017807006836 	 0.27018022537231445 	 
2025-07-27 20:13:20.909119 test begin: paddle.nn.functional.prelu(Tensor([128, 507, 28, 28],"float32"), Tensor([507],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([128, 507, 28, 28],"float32"), Tensor([507],"float32"), data_format="NCHW", ) 	 50878971 	 1000 	 0.30138254165649414 	 0.31191444396972656 	 0.2878684997558594 	 0.29340410232543945 	 1.074944257736206 	 0.7807579040527344 	 0.36560869216918945 	 0.3988957405090332 	 
2025-07-27 20:13:28.481793 test begin: paddle.nn.functional.prelu(Tensor([254, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
[Prof] paddle.nn.functional.prelu 	 paddle.nn.functional.prelu(Tensor([254, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", ) 	 50979072 	 1000 	 0.3019130229949951 	 0.3098409175872803 	 0.2901625633239746 	 0.2942020893096924 	 1.0911288261413574 	 0.7894773483276367 	 0.3711414337158203 	 0.2685520648956299 	 
2025-07-27 20:13:32.670168 test begin: paddle.nn.functional.relu(Tensor([10, 128, 480, 83],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([10, 128, 480, 83],"float32"), None, ) 	 50995200 	 1000 	 0.2970244884490967 	 0.3002889156341553 	 0.2883121967315674 	 0.2831611633300781 	 0.45192575454711914 	 0.44829249382019043 	 0.394533634185791 	 0.3765594959259033 	 
2025-07-27 20:13:37.387647 test begin: paddle.nn.functional.relu(Tensor([10, 128, 83, 480],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([10, 128, 83, 480],"float32"), None, ) 	 50995200 	 1000 	 0.5220658779144287 	 0.30205726623535156 	 0.2814826965332031 	 0.2757275104522705 	 0.45199012756347656 	 0.44821977615356445 	 0.39080381393432617 	 0.3711092472076416 	 
2025-07-27 20:13:41.238546 test begin: paddle.nn.functional.relu(Tensor([10, 23, 480, 480],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([10, 23, 480, 480],"float32"), None, ) 	 52992000 	 1000 	 0.3113138675689697 	 0.3105623722076416 	 0.292957067489624 	 0.28731679916381836 	 0.4696052074432373 	 0.46566152572631836 	 0.4081075191497803 	 0.38813066482543945 	 
2025-07-27 20:13:44.559553 test begin: paddle.nn.functional.relu(Tensor([2, 128, 480, 480],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([2, 128, 480, 480],"float32"), None, ) 	 58982400 	 1000 	 0.34280848503112793 	 0.3450615406036377 	 0.3272671699523926 	 0.32209324836730957 	 0.521996259689331 	 0.517859935760498 	 0.46115541458129883 	 0.44115233421325684 	 
2025-07-27 20:13:48.282351 test begin: paddle.nn.functional.relu(Tensor([2, 256, 352, 352],"float32"), )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([2, 256, 352, 352],"float32"), ) 	 63438848 	 1000 	 0.3685612678527832 	 0.37058496475219727 	 0.35308098793029785 	 0.34756946563720703 	 0.5610337257385254 	 0.5566346645355225 	 0.4947659969329834 	 0.4803452491760254 	 
2025-07-27 20:13:52.231762 test begin: paddle.nn.functional.relu(Tensor([64, 64, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([64, 64, 112, 112],"float32"), None, ) 	 51380224 	 1000 	 0.29930543899536133 	 0.3012971878051758 	 0.28311944007873535 	 0.27829504013061523 	 0.45531511306762695 	 0.4521360397338867 	 0.394162654876709 	 0.37557530403137207 	 
2025-07-27 20:13:55.405849 test begin: paddle.nn.functional.relu(Tensor([640, 64, 112, 12],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([640, 64, 112, 12],"float32"), None, ) 	 55050240 	 1000 	 0.32030272483825684 	 0.322232723236084 	 0.3116171360015869 	 0.307100772857666 	 0.48733997344970703 	 0.4835789203643799 	 0.4352874755859375 	 0.4140329360961914 	 
2025-07-27 20:13:58.873899 test begin: paddle.nn.functional.relu(Tensor([640, 64, 12, 112],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([640, 64, 12, 112],"float32"), None, ) 	 55050240 	 1000 	 0.3203115463256836 	 0.3222310543060303 	 0.31146717071533203 	 0.3068277835845947 	 0.48740649223327637 	 0.4835026264190674 	 0.4355802536010742 	 0.4118471145629883 	 
2025-07-27 20:14:02.268205 test begin: paddle.nn.functional.relu(Tensor([640, 7, 112, 112],"float32"), None, )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([640, 7, 112, 112],"float32"), None, ) 	 56197120 	 1000 	 0.32675600051879883 	 0.328887939453125 	 0.3181002140045166 	 0.3131246566772461 	 0.49752306938171387 	 0.493640661239624 	 0.4442148208618164 	 0.41803908348083496 	 
2025-07-27 20:14:05.742344 test begin: paddle.nn.functional.relu(Tensor([8, 256, 352, 71],"float32"), )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([8, 256, 352, 71],"float32"), ) 	 51183616 	 1000 	 0.298114538192749 	 0.3001439571380615 	 0.2894861698150635 	 0.28493285179138184 	 0.45357251167297363 	 0.4498317241668701 	 0.39702630043029785 	 0.3818063735961914 	 
2025-07-27 20:14:08.973526 test begin: paddle.nn.functional.relu(Tensor([8, 256, 71, 352],"float32"), )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([8, 256, 71, 352],"float32"), ) 	 51183616 	 1000 	 0.2981405258178711 	 0.30016136169433594 	 0.2879469394683838 	 0.28473877906799316 	 0.45360684394836426 	 0.44977903366088867 	 0.4019596576690674 	 0.38065409660339355 	 
2025-07-27 20:14:12.141724 test begin: paddle.nn.functional.relu(Tensor([8, 52, 352, 352],"float32"), )
[Prof] paddle.nn.functional.relu 	 paddle.nn.functional.relu(Tensor([8, 52, 352, 352],"float32"), ) 	 51544064 	 1000 	 0.30045104026794434 	 0.3077719211578369 	 0.29137134552001953 	 0.28633832931518555 	 0.45677804946899414 	 0.45304107666015625 	 0.40492939949035645 	 0.37264132499694824 	 
2025-07-27 20:14:15.332221 test begin: paddle.nn.functional.relu6(Tensor([128, 144, 112, 25],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([128, 144, 112, 25],"float32"), ) 	 51609600 	 1000 	 0.3004171848297119 	 0.30254054069519043 	 0.2920057773590088 	 0.28425025939941406 	 0.45735883712768555 	 0.45360565185546875 	 0.40622878074645996 	 0.3826558589935303 	 
2025-07-27 20:14:18.551920 test begin: paddle.nn.functional.relu6(Tensor([128, 144, 25, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([128, 144, 25, 112],"float32"), ) 	 51609600 	 1000 	 0.300443172454834 	 0.30469489097595215 	 0.29205775260925293 	 0.2839169502258301 	 0.4572758674621582 	 0.45358777046203613 	 0.4058115482330322 	 0.37659120559692383 	 
2025-07-27 20:14:21.741827 test begin: paddle.nn.functional.relu6(Tensor([128, 192, 112, 19],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([128, 192, 112, 19],"float32"), ) 	 52297728 	 1000 	 0.30426502227783203 	 0.3065180778503418 	 0.2958371639251709 	 0.28765249252319336 	 0.4632298946380615 	 0.45963144302368164 	 0.4121417999267578 	 0.3810703754425049 	 
2025-07-27 20:14:25.031041 test begin: paddle.nn.functional.relu6(Tensor([128, 192, 19, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([128, 192, 19, 112],"float32"), ) 	 52297728 	 1000 	 0.3042936325073242 	 0.30654144287109375 	 0.2959892749786377 	 0.28852343559265137 	 0.46340060234069824 	 0.4596431255340576 	 0.4123811721801758 	 0.3802809715270996 	 
2025-07-27 20:14:28.345883 test begin: paddle.nn.functional.relu6(Tensor([128, 32, 112, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([128, 32, 112, 112],"float32"), ) 	 51380224 	 1000 	 0.7509655952453613 	 0.3193850517272949 	 0.29057812690734863 	 0.2752349376678467 	 0.45542263984680176 	 0.4517345428466797 	 0.40128350257873535 	 0.36168766021728516 	 
2025-07-27 20:14:34.235938 test begin: paddle.nn.functional.relu6(Tensor([22, 192, 112, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([22, 192, 112, 112],"float32"), ) 	 52985856 	 1000 	 0.312391996383667 	 0.31458210945129395 	 0.2998201847076416 	 0.2904040813446045 	 0.46958184242248535 	 0.4655320644378662 	 0.4190037250518799 	 0.3955831527709961 	 
2025-07-27 20:14:39.648576 test begin: paddle.nn.functional.relu6(Tensor([256, 16, 112, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([256, 16, 112, 112],"float32"), ) 	 51380224 	 1000 	 0.3001716136932373 	 0.30122804641723633 	 0.290773868560791 	 0.28321409225463867 	 0.45525193214416504 	 0.45166945457458496 	 0.4047281742095947 	 0.38109445571899414 	 
2025-07-27 20:14:42.854431 test begin: paddle.nn.functional.relu6(Tensor([256, 96, 112, 19],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([256, 96, 112, 19],"float32"), ) 	 52297728 	 1000 	 0.3070669174194336 	 0.3065836429595947 	 0.2888803482055664 	 0.27939486503601074 	 0.4633204936981201 	 0.4596076011657715 	 0.4034121036529541 	 0.38014912605285645 	 
2025-07-27 20:14:46.172601 test begin: paddle.nn.functional.relu6(Tensor([256, 96, 19, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([256, 96, 19, 112],"float32"), ) 	 52297728 	 1000 	 0.3042759895324707 	 0.3065037727355957 	 0.2958211898803711 	 0.2887272834777832 	 0.4633054733276367 	 0.45963430404663086 	 0.41251611709594727 	 0.3879671096801758 	 
2025-07-27 20:14:49.398467 test begin: paddle.nn.functional.relu6(Tensor([29, 144, 112, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([29, 144, 112, 112],"float32"), ) 	 52383744 	 1000 	 0.3047924041748047 	 0.3070335388183594 	 0.2963294982910156 	 0.28913354873657227 	 0.46412062644958496 	 0.4604160785675049 	 0.4135315418243408 	 0.39313769340515137 	 
2025-07-27 20:14:52.684001 test begin: paddle.nn.functional.relu6(Tensor([43, 96, 112, 112],"float32"), )
[Prof] paddle.nn.functional.relu6 	 paddle.nn.functional.relu6(Tensor([43, 96, 112, 112],"float32"), ) 	 51781632 	 1000 	 0.30152297019958496 	 0.3051021099090576 	 0.2931497097015381 	 0.28550267219543457 	 0.4589078426361084 	 0.4550740718841553 	 0.4083998203277588 	 0.38628292083740234 	 
2025-07-27 20:14:55.879608 test begin: paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4233601],"float64"), 0.05, 0.25, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4233601],"float64"), 0.05, 0.25, training=False, ) 	 25401606 	 1000 	 0.48219871520996094 	 0.29883289337158203 	 0.4666476249694824 	 0.27685999870300293 	 0.5844578742980957 	 0.4431796073913574 	 0.5338466167449951 	 0.37575507164001465 	 
2025-07-27 20:14:58.806071 test begin: paddle.nn.functional.rrelu(Tensor([1, 2, 3175201, 4],"float64"), 0.05, 0.25, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([1, 2, 3175201, 4],"float64"), 0.05, 0.25, training=False, ) 	 25401608 	 1000 	 0.48218774795532227 	 0.3005807399749756 	 0.4718348979949951 	 0.2767210006713867 	 0.5844316482543945 	 0.4431498050689697 	 0.5307958126068115 	 0.3748798370361328 	 
2025-07-27 20:15:01.694852 test begin: paddle.nn.functional.rrelu(Tensor([1, 2116801, 3, 4],"float64"), 0.05, 0.25, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([1, 2116801, 3, 4],"float64"), 0.05, 0.25, training=False, ) 	 25401612 	 1000 	 0.4819910526275635 	 0.29923391342163086 	 0.4715919494628906 	 0.27593111991882324 	 0.5844910144805908 	 0.44316887855529785 	 0.5100021362304688 	 0.3696153163909912 	 
2025-07-27 20:15:04.582639 test begin: paddle.nn.functional.rrelu(Tensor([1058401, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([1058401, 2, 3, 4],"float64"), 0.05, 0.25, training=False, ) 	 25401624 	 1000 	 0.4819822311401367 	 0.2989165782928467 	 0.4716494083404541 	 0.2657496929168701 	 0.5844931602478027 	 0.4432194232940674 	 0.5343248844146729 	 0.36623048782348633 	 
2025-07-27 20:15:07.459155 test begin: paddle.nn.functional.rrelu(Tensor([2, 1270081, 4, 5],"float32"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 1270081, 4, 5],"float32"), 0.1, 0.3, training=False, ) 	 50803240 	 1000 	 0.49045276641845703 	 0.2980186939239502 	 0.4791548252105713 	 0.2670629024505615 	 0.6043241024017334 	 0.4465923309326172 	 0.553581953048706 	 0.37886834144592285 	 
2025-07-27 20:15:11.005238 test begin: paddle.nn.functional.rrelu(Tensor([2, 3, 1693441, 5],"float32"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 3, 1693441, 5],"float32"), 0.1, 0.3, training=False, ) 	 50803230 	 1000 	 0.49042224884033203 	 0.3002021312713623 	 0.48020219802856445 	 0.27634119987487793 	 0.6042110919952393 	 0.44651007652282715 	 0.553828239440918 	 0.37903666496276855 	 
2025-07-27 20:15:14.539718 test begin: paddle.nn.functional.rrelu(Tensor([2, 3, 4, 1058401],"float64"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 3, 4, 1058401],"float64"), 0.1, 0.3, training=False, ) 	 25401624 	 1000 	 0.48218870162963867 	 0.29878735542297363 	 0.46953678131103516 	 0.276320219039917 	 0.5845003128051758 	 0.4431149959564209 	 0.5338261127471924 	 0.3760404586791992 	 
2025-07-27 20:15:17.413196 test begin: paddle.nn.functional.rrelu(Tensor([2, 3, 4, 2116801],"float32"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 3, 4, 2116801],"float32"), 0.1, 0.3, training=False, ) 	 50803224 	 1000 	 0.49056291580200195 	 0.2987840175628662 	 0.47392725944519043 	 0.27519679069519043 	 0.604290246963501 	 0.44678831100463867 	 0.5535681247711182 	 0.35041165351867676 	 
2025-07-27 20:15:20.877992 test begin: paddle.nn.functional.rrelu(Tensor([2, 3, 846721, 5],"float64"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 3, 846721, 5],"float64"), 0.1, 0.3, training=False, ) 	 25401630 	 1000 	 0.4820220470428467 	 0.3028748035430908 	 0.47181010246276855 	 0.2764453887939453 	 0.5844695568084717 	 0.4431886672973633 	 0.5335845947265625 	 0.3746209144592285 	 
2025-07-27 20:15:23.725796 test begin: paddle.nn.functional.rrelu(Tensor([2, 635041, 4, 5],"float64"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([2, 635041, 4, 5],"float64"), 0.1, 0.3, training=False, ) 	 25401640 	 1000 	 0.4816417694091797 	 0.29877257347106934 	 0.471449613571167 	 0.2768106460571289 	 0.5844933986663818 	 0.4432234764099121 	 0.5137600898742676 	 0.3755199909210205 	 
2025-07-27 20:15:26.576409 test begin: paddle.nn.functional.rrelu(Tensor([423361, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([423361, 3, 4, 5],"float64"), 0.1, 0.3, training=False, ) 	 25401660 	 1000 	 0.4849278926849365 	 0.2988295555114746 	 0.47144579887390137 	 0.2769041061401367 	 0.5844933986663818 	 0.44318628311157227 	 0.5332179069519043 	 0.37488269805908203 	 
2025-07-27 20:15:29.477812 test begin: paddle.nn.functional.rrelu(Tensor([846721, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
[Prof] paddle.nn.functional.rrelu 	 paddle.nn.functional.rrelu(Tensor([846721, 3, 4, 5],"float32"), 0.1, 0.3, training=False, ) 	 50803260 	 1000 	 0.4905095100402832 	 0.29805469512939453 	 0.4801754951477051 	 0.27625608444213867 	 0.6042814254760742 	 0.4466133117675781 	 0.5518183708190918 	 0.37922024726867676 	 
2025-07-27 20:15:32.973456 test begin: paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, ) 	 25401750 	 1000 	 0.2997775077819824 	 1.8317503929138184 	 0.29145383834838867 	 0.3113439083099365 	 0.44818830490112305 	 2.124131917953491 	 0.3888363838195801 	 0.2715475559234619 	 
2025-07-27 20:15:40.694238 test begin: paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, None, ) 	 25401750 	 1000 	 0.8006629943847656 	 1.8283722400665283 	 0.29126477241516113 	 0.3112626075744629 	 0.4481322765350342 	 2.123810052871704 	 0.3990192413330078 	 0.2715308666229248 	 
2025-07-27 20:15:47.596094 test begin: paddle.nn.functional.selu(Tensor([2822401, 3, 3],"float64"), 1.0507009873554805, 0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([2822401, 3, 3],"float64"), 1.0507009873554805, 0, None, ) 	 25401609 	 1000 	 0.2998061180114746 	 1.8333702087402344 	 0.2913649082183838 	 0.31128716468811035 	 0.4479713439941406 	 2.123917818069458 	 0.3959195613861084 	 0.27155017852783203 	 
2025-07-27 20:15:53.362257 test begin: paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, ) 	 25401750 	 1000 	 0.29976320266723633 	 1.8262453079223633 	 0.291149377822876 	 0.3112654685974121 	 0.44815969467163086 	 2.1237916946411133 	 0.39863038063049316 	 0.27152371406555176 	 
2025-07-27 20:15:59.102936 test begin: paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, None, ) 	 25401750 	 1000 	 0.2997469902038574 	 1.8264200687408447 	 0.2914402484893799 	 0.3112335205078125 	 0.4482309818267822 	 2.123979330062866 	 0.392136812210083 	 0.2715413570404053 	 
2025-07-27 20:16:04.910321 test begin: paddle.nn.functional.selu(Tensor([3, 2822401, 3],"float64"), 1.0507009873554805, 0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 2822401, 3],"float64"), 1.0507009873554805, 0, None, ) 	 25401609 	 1000 	 0.2998354434967041 	 1.826319932937622 	 0.29131531715393066 	 0.3112623691558838 	 0.4481518268585205 	 2.1239774227142334 	 0.39828038215637207 	 0.2715942859649658 	 
2025-07-27 20:16:10.669727 test begin: paddle.nn.functional.selu(Tensor([3, 3, 2822401],"float64"), 1.0507009873554805, 0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 3, 2822401],"float64"), 1.0507009873554805, 0, None, ) 	 25401609 	 1000 	 0.2999286651611328 	 1.826237678527832 	 0.287311315536499 	 0.311248779296875 	 0.4479539394378662 	 2.123833656311035 	 0.3981301784515381 	 0.27155399322509766 	 
2025-07-27 20:16:16.430474 test begin: paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, ) 	 25401750 	 1000 	 0.3004443645477295 	 1.826096773147583 	 0.2897965908050537 	 0.31113719940185547 	 0.4481477737426758 	 2.12391996383667 	 0.39736151695251465 	 0.27152204513549805 	 
2025-07-27 20:16:22.240350 test begin: paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, None, ) 	 25401750 	 1000 	 0.29976463317871094 	 1.8264048099517822 	 0.2913341522216797 	 0.3112375736236572 	 0.44815659523010254 	 2.1238458156585693 	 0.3984050750732422 	 0.27153897285461426 	 
2025-07-27 20:16:27.985975 test begin: paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, ) 	 25401675 	 1000 	 0.30034732818603516 	 1.8261253833770752 	 0.2920365333557129 	 0.31124305725097656 	 0.44811558723449707 	 2.123866081237793 	 0.39856648445129395 	 0.2715303897857666 	 
2025-07-27 20:16:33.812154 test begin: paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, None, )
[Prof] paddle.nn.functional.selu 	 paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, None, ) 	 25401675 	 1000 	 0.3014254570007324 	 1.8329041004180908 	 0.29198765754699707 	 0.3112151622772217 	 0.44814515113830566 	 2.1239421367645264 	 0.3969571590423584 	 0.27155017852783203 	 
2025-07-27 20:16:41.841208 test begin: paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 705601],"float64"), maxlen=5, dtype=type(numpy.int32), )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 705601],"float64"), maxlen=5, dtype=type(numpy.int32), ) 	 25401636 	 1000 	 0.7796635627746582 	 1.495967149734497 	 0.768089771270752 	 0.5055677890777588 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:16:48.067680 test begin: paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 705601, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 705601, 3],"float64"), maxlen=5, dtype=type(numpy.int32), ) 	 25401636 	 1000 	 0.7796120643615723 	 1.490879774093628 	 0.7678377628326416 	 0.5055270195007324 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:16:50.873247 test begin: paddle.nn.functional.sequence_mask(Tensor([2, 2, 705601, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([2, 2, 705601, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), ) 	 25401636 	 1000 	 0.7796022891998291 	 1.4828267097473145 	 0.7679834365844727 	 0.5055615901947021 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:16:53.666123 test begin: paddle.nn.functional.sequence_mask(Tensor([2, 470401, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([2, 470401, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), ) 	 25401654 	 1000 	 0.7818999290466309 	 1.482816457748413 	 0.7680506706237793 	 0.5055685043334961 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:16:56.454753 test begin: paddle.nn.functional.sequence_mask(Tensor([470401, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([470401, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), ) 	 25401654 	 1000 	 0.7813539505004883 	 1.482832908630371 	 0.767949104309082 	 0.5055489540100098 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:16:59.238191 test begin: paddle.nn.functional.sequence_mask(Tensor([50803201],"int32"), maxlen=4, dtype="float32", )
[Prof] paddle.nn.functional.sequence_mask 	 paddle.nn.functional.sequence_mask(Tensor([50803201],"int32"), maxlen=4, dtype="float32", ) 	 50803201 	 1000 	 1.2115116119384766 	 2.4257445335388184 	 1.1995604038238525 	 0.8270854949951172 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:17:03.958958 test begin: paddle.nn.functional.sigmoid(Tensor([10, 32, 400, 400],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([10, 32, 400, 400],"float32"), ) 	 51200000 	 1000 	 0.2973971366882324 	 0.30068302154541016 	 0.2887570858001709 	 0.2895958423614502 	 0.4536902904510498 	 0.4499645233154297 	 0.4026148319244385 	 0.3834571838378906 	 
2025-07-27 20:17:07.126255 test begin: paddle.nn.functional.sigmoid(Tensor([364, 304, 460],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([364, 304, 460],"float32"), ) 	 50901760 	 1000 	 0.2959747314453125 	 0.29905223846435547 	 0.28685736656188965 	 0.2878451347351074 	 0.4511265754699707 	 0.44748759269714355 	 0.3997011184692383 	 0.356595516204834 	 
2025-07-27 20:17:10.254241 test begin: paddle.nn.functional.sigmoid(Tensor([364, 416, 336],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([364, 416, 336],"float32"), ) 	 50878464 	 1000 	 0.29678797721862793 	 0.2988450527191162 	 0.28667545318603516 	 0.28765082359313965 	 0.4508543014526367 	 0.44716572761535645 	 0.3993415832519531 	 0.3791842460632324 	 
2025-07-27 20:17:13.380744 test begin: paddle.nn.functional.sigmoid(Tensor([372, 304, 450],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([372, 304, 450],"float32"), ) 	 50889600 	 1000 	 0.29554104804992676 	 0.29892468452453613 	 0.28682899475097656 	 0.28765249252319336 	 0.4510345458984375 	 0.447263240814209 	 0.3997468948364258 	 0.37996935844421387 	 
2025-07-27 20:17:16.503636 test begin: paddle.nn.functional.sigmoid(Tensor([372, 407, 336],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([372, 407, 336],"float32"), ) 	 50871744 	 1000 	 0.2953987121582031 	 0.3051929473876953 	 0.2867143154144287 	 0.2874441146850586 	 0.4507715702056885 	 0.4470560550689697 	 0.39946436882019043 	 0.3795621395111084 	 
2025-07-27 20:17:19.675125 test begin: paddle.nn.functional.sigmoid(Tensor([498, 304, 336],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([498, 304, 336],"float32"), ) 	 50867712 	 1000 	 0.295440673828125 	 0.2987792491912842 	 0.2867443561553955 	 0.28746485710144043 	 0.4507784843444824 	 0.4470350742340088 	 0.39931583404541016 	 0.3785998821258545 	 
2025-07-27 20:17:22.812864 test begin: paddle.nn.functional.sigmoid(Tensor([8, 32, 400, 497],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([8, 32, 400, 497],"float32"), ) 	 50892800 	 1000 	 0.2954864501953125 	 0.29894113540649414 	 0.28687024116516113 	 0.2872276306152344 	 0.45090818405151367 	 0.44721198081970215 	 0.3998842239379883 	 0.37987661361694336 	 
2025-07-27 20:17:25.970072 test begin: paddle.nn.functional.sigmoid(Tensor([8, 32, 497, 400],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([8, 32, 497, 400],"float32"), ) 	 50892800 	 1000 	 0.29549527168273926 	 0.298919677734375 	 0.28679776191711426 	 0.28766441345214844 	 0.4509296417236328 	 0.44730162620544434 	 0.3996899127960205 	 0.3650662899017334 	 
2025-07-27 20:17:29.098042 test begin: paddle.nn.functional.sigmoid(Tensor([8, 40, 400, 400],"float32"), )
[Prof] paddle.nn.functional.sigmoid 	 paddle.nn.functional.sigmoid(Tensor([8, 40, 400, 400],"float32"), ) 	 51200000 	 1000 	 0.2973775863647461 	 0.30066800117492676 	 0.2887086868286133 	 0.28963446617126465 	 0.45357680320739746 	 0.44990062713623047 	 0.40258359909057617 	 0.3828775882720947 	 
2025-07-27 20:17:32.251429 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803248 	 1000 	 6.893862009048462 	 5.6497883796691895 	 0.000690460205078125 	 0.30338239669799805 	 9.259285688400269 	 9.16560173034668 	 0.41177964210510254 	 0.3747706413269043 	 combined
2025-07-27 20:18:06.486062 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803249 	 1000 	 7.194395065307617 	 5.940545558929443 	 0.0009853839874267578 	 0.3031926155090332 	 10.012081146240234 	 10.963115930557251 	 0.39359164237976074 	 0.35040283203125 	 combined
2025-07-27 20:18:41.700274 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", ) 	 50803249 	 1000 	 7.199688196182251 	 5.950366020202637 	 0.0009512901306152344 	 0.3031446933746338 	 10.016393661499023 	 10.962499856948853 	 0.3937382698059082 	 0.350391149520874 	 combined
2025-07-27 20:19:18.392647 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803320 	 1000 	 6.902153015136719 	 5.646681547164917 	 0.0006937980651855469 	 0.30330848693847656 	 9.259676933288574 	 9.164906740188599 	 0.41177988052368164 	 0.3748154640197754 	 combined
2025-07-27 20:19:54.305048 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803321 	 1000 	 7.1940598487854 	 5.943640947341919 	 0.000982522964477539 	 0.30309534072875977 	 10.015210151672363 	 10.962444067001343 	 0.3936779499053955 	 0.350339412689209 	 combined
2025-07-27 20:20:29.997314 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", ) 	 50803321 	 1000 	 7.191750526428223 	 5.940289735794067 	 0.0009784698486328125 	 0.3031644821166992 	 10.01500415802002 	 10.962340593338013 	 0.39369726181030273 	 0.3504049777984619 	 combined
2025-07-27 20:21:07.461800 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803360 	 1000 	 6.904674768447876 	 5.639127254486084 	 0.0006728172302246094 	 0.30327320098876953 	 9.263091325759888 	 9.165668487548828 	 0.4118368625640869 	 0.3747236728668213 	 combined
2025-07-27 20:21:40.974095 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803361 	 1000 	 7.194965124130249 	 5.940509557723999 	 0.0009393692016601562 	 0.3031752109527588 	 10.01459789276123 	 10.96283507347107 	 0.39371538162231445 	 0.35039544105529785 	 combined
2025-07-27 20:22:16.137053 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", ) 	 50803361 	 1000 	 7.201419115066528 	 5.954851150512695 	 0.0009534358978271484 	 0.30311155319213867 	 10.018191814422607 	 10.96256422996521 	 0.39383506774902344 	 0.35030364990234375 	 combined
2025-07-27 20:22:56.755364 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803440 	 1000 	 6.900852203369141 	 5.643409252166748 	 0.0006735324859619141 	 0.30329442024230957 	 9.257527112960815 	 9.166381597518921 	 0.4116332530975342 	 0.3747398853302002 	 combined
2025-07-27 20:23:28.772232 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", ) 	 50803441 	 1000 	 7.201014995574951 	 5.940455675125122 	 0.0009582042694091797 	 0.30310750007629395 	 10.005808353424072 	 10.962503433227539 	 0.3933219909667969 	 0.3503561019897461 	 combined
2025-07-27 20:24:04.522838 test begin: paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
[Prof] paddle.nn.functional.sigmoid_focal_loss 	 paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", ) 	 50803441 	 1000 	 7.19792628288269 	 5.9407432079315186 	 0.0009860992431640625 	 0.3031783103942871 	 10.005357027053833 	 10.963785886764526 	 0.39328932762145996 	 0.3502953052520752 	 combined
2025-07-27 20:24:41.082128 test begin: paddle.nn.functional.silu(Tensor([128, 128, 128, 25],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 128, 128, 25],"float32"), None, ) 	 52428800 	 1000 	 0.3084254264831543 	 0.3075728416442871 	 0.2962322235107422 	 0.292771577835083 	 0.46463441848754883 	 0.4644591808319092 	 0.4131810665130615 	 0.3973541259765625 	 
2025-07-27 20:24:44.369669 test begin: paddle.nn.functional.silu(Tensor([128, 128, 25, 128],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 128, 25, 128],"float32"), None, ) 	 52428800 	 1000 	 0.304607629776001 	 0.3075594902038574 	 0.2960805892944336 	 0.2927405834197998 	 0.46480703353881836 	 0.46446681022644043 	 0.41234731674194336 	 0.3976287841796875 	 
2025-07-27 20:24:47.670192 test begin: paddle.nn.functional.silu(Tensor([128, 25, 128, 128],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 25, 128, 128],"float32"), None, ) 	 52428800 	 1000 	 0.30452823638916016 	 0.309844970703125 	 0.29619312286376953 	 0.29251670837402344 	 0.46488118171691895 	 0.46454739570617676 	 0.4132404327392578 	 0.3982400894165039 	 
2025-07-27 20:24:50.923193 test begin: paddle.nn.functional.silu(Tensor([128, 256, 25, 64],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 256, 25, 64],"float32"), None, ) 	 52428800 	 1000 	 0.3045501708984375 	 0.3075835704803467 	 0.296100378036499 	 0.29289865493774414 	 0.464937686920166 	 0.4644627571105957 	 0.41314029693603516 	 0.39684510231018066 	 
2025-07-27 20:24:54.186870 test begin: paddle.nn.functional.silu(Tensor([128, 256, 64, 25],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 256, 64, 25],"float32"), None, ) 	 52428800 	 1000 	 0.3045804500579834 	 0.3075730800628662 	 0.2962017059326172 	 0.29280996322631836 	 0.4647786617279053 	 0.4645805358886719 	 0.4111144542694092 	 0.39810991287231445 	 
2025-07-27 20:24:57.410283 test begin: paddle.nn.functional.silu(Tensor([128, 64, 128, 49],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 64, 128, 49],"float32"), None, ) 	 51380224 	 1000 	 0.2985985279083252 	 0.30166053771972656 	 0.29019713401794434 	 0.28687024116516113 	 0.4555087089538574 	 0.45527005195617676 	 0.4038410186767578 	 0.38878965377807617 	 
2025-07-27 20:25:00.639703 test begin: paddle.nn.functional.silu(Tensor([128, 64, 49, 128],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 64, 49, 128],"float32"), None, ) 	 51380224 	 1000 	 0.29859066009521484 	 0.3016993999481201 	 0.2902498245239258 	 0.286914587020874 	 0.4554412364959717 	 0.4552185535430908 	 0.4037628173828125 	 0.38808417320251465 	 
2025-07-27 20:25:03.807859 test begin: paddle.nn.functional.silu(Tensor([128, 97, 64, 64],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([128, 97, 64, 64],"float32"), None, ) 	 50855936 	 1000 	 0.29538559913635254 	 0.29861879348754883 	 0.2870304584503174 	 0.279587984085083 	 0.4508635997772217 	 0.45053958892822266 	 0.39897608757019043 	 0.38379669189453125 	 
2025-07-27 20:25:07.020661 test begin: paddle.nn.functional.silu(Tensor([25, 128, 128, 128],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([25, 128, 128, 128],"float32"), None, ) 	 52428800 	 1000 	 0.3045654296875 	 0.3075857162475586 	 0.2960939407348633 	 0.2929847240447998 	 0.464829683303833 	 0.4645111560821533 	 0.4127945899963379 	 0.39340996742248535 	 
2025-07-27 20:25:10.282877 test begin: paddle.nn.functional.silu(Tensor([49, 256, 64, 64],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([49, 256, 64, 64],"float32"), None, ) 	 51380224 	 1000 	 0.29862546920776367 	 0.30167150497436523 	 0.2902536392211914 	 0.28661274909973145 	 0.45554161071777344 	 0.4552273750305176 	 0.40206003189086914 	 0.3788425922393799 	 
2025-07-27 20:25:13.459880 test begin: paddle.nn.functional.silu(Tensor([49, 64, 128, 128],"float32"), None, )
[Prof] paddle.nn.functional.silu 	 paddle.nn.functional.silu(Tensor([49, 64, 128, 128],"float32"), None, ) 	 51380224 	 1000 	 0.29861021041870117 	 0.3016791343688965 	 0.2901279926300049 	 0.28687047958374023 	 0.4555480480194092 	 0.45531535148620605 	 0.39910197257995605 	 0.3744838237762451 	 
2025-07-27 20:25:16.625917 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"float32"), reduction="none", )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"float32"), reduction="none", ) 	 101606500 	 1000 	 0.8128411769866943 	 0.4469754695892334 	 0.4151792526245117 	 0.4216759204864502 	 1.627138614654541 	 1.4463751316070557 	 0.41569066047668457 	 0.3694784641265869 	 
2025-07-27 20:25:23.495461 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([1017, 50000],"float32"), Tensor([1017, 50000],"float32"), reduction="mean", delta=1.0, name=None, )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([1017, 50000],"float32"), Tensor([1017, 50000],"float32"), reduction="mean", delta=1.0, name=None, ) 	 101700000 	 1000 	 0.9646146297454834 	 0.598475456237793 	 0.2461717128753662 	 0.20364928245544434 	 1.7651481628417969 	 1.1612210273742676 	 0.36084532737731934 	 0.2966041564941406 	 
2025-07-27 20:25:29.702632 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([1914, 26543],"float32"), Tensor([1914, 26543],"float32"), reduction="none", )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([1914, 26543],"float32"), Tensor([1914, 26543],"float32"), reduction="none", ) 	 101606604 	 1000 	 0.8121523857116699 	 0.44698405265808105 	 0.41490936279296875 	 0.41905760765075684 	 1.6272509098052979 	 1.4462676048278809 	 0.4157373905181885 	 0.36942291259765625 	 
2025-07-27 20:25:37.366520 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([33960, 187, 8],"float32"), Tensor([33960, 187, 8],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([33960, 187, 8],"float32"), Tensor([33960, 187, 8],"float32"), reduction="sum", ) 	 101608320 	 1000 	 0.9721391201019287 	 0.5985920429229736 	 0.246351957321167 	 0.20362448692321777 	 1.7627077102661133 	 1.1604735851287842 	 0.3602733612060547 	 0.2963531017303467 	 
2025-07-27 20:25:46.752744 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 4245],"float32"), Tensor([64, 187, 4245],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 4245],"float32"), Tensor([64, 187, 4245],"float32"), reduction="sum", ) 	 101608320 	 1000 	 0.9640955924987793 	 0.5985803604125977 	 0.24599552154541016 	 0.20362138748168945 	 1.7620553970336914 	 1.1603360176086426 	 0.3602719306945801 	 0.2964048385620117 	 
2025-07-27 20:25:52.940661 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([64, 99226, 8],"float32"), Tensor([64, 99226, 8],"float32"), reduction="sum", )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([64, 99226, 8],"float32"), Tensor([64, 99226, 8],"float32"), reduction="sum", ) 	 101607424 	 1000 	 0.9655048847198486 	 0.5984041690826416 	 0.24597501754760742 	 0.20359230041503906 	 1.7609312534332275 	 1.1603972911834717 	 0.3600187301635742 	 0.2964181900024414 	 
2025-07-27 20:25:59.109234 test begin: paddle.nn.functional.smooth_l1_loss(Tensor([7, 7257601],"float32"), Tensor([7, 7257601],"float32"), reduction="mean", delta=1.0, name=None, )
[Prof] paddle.nn.functional.smooth_l1_loss 	 paddle.nn.functional.smooth_l1_loss(Tensor([7, 7257601],"float32"), Tensor([7, 7257601],"float32"), reduction="mean", delta=1.0, name=None, ) 	 101606414 	 1000 	 0.977327823638916 	 0.5984725952148438 	 0.24605464935302734 	 0.20359587669372559 	 1.762373685836792 	 1.1602914333343506 	 0.360248327255249 	 0.29643797874450684 	 
2025-07-27 20:26:05.328425 test begin: paddle.nn.functional.softmax(Tensor([10, 2304, 2304],"float32"), axis=-1, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([10, 2304, 2304],"float32"), axis=-1, ) 	 53084160 	 1000 	 0.3158586025238037 	 0.5302612781524658 	 0.2981750965118408 	 0.5046591758728027 	 0.49040794372558594 	 0.9309413433074951 	 0.42671966552734375 	 0.475663423538208 	 
2025-07-27 20:26:09.348448 test begin: paddle.nn.functional.softmax(Tensor([3840, 1, 144, 144],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([3840, 1, 144, 144],"float32"), -1, name=None, ) 	 79626240 	 1000 	 0.462329626083374 	 0.5034105777740479 	 0.4464399814605713 	 0.47954654693603516 	 0.7010211944580078 	 1.392641544342041 	 0.6413507461547852 	 0.7115418910980225 	 
2025-07-27 20:26:15.128489 test begin: paddle.nn.functional.softmax(Tensor([3840, 4, 144, 23],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([3840, 4, 144, 23],"float32"), -1, name=None, ) 	 50872320 	 1000 	 0.3679683208465576 	 0.5040111541748047 	 0.35046887397766113 	 0.4816567897796631 	 0.45064687728881836 	 0.8947408199310303 	 0.3909754753112793 	 0.4571568965911865 	 
2025-07-27 20:26:19.060928 test begin: paddle.nn.functional.softmax(Tensor([3840, 4, 23, 144],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([3840, 4, 23, 144],"float32"), -1, name=None, ) 	 50872320 	 1000 	 0.2970106601715088 	 0.32340097427368164 	 0.2805154323577881 	 0.3011622428894043 	 0.44977760314941406 	 0.8924436569213867 	 0.3900742530822754 	 0.4559659957885742 	 
2025-07-27 20:26:22.696229 test begin: paddle.nn.functional.softmax(Tensor([4096, 1, 144, 144],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([4096, 1, 144, 144],"float32"), -1, name=None, ) 	 84934656 	 1000 	 0.4931800365447998 	 0.535736083984375 	 0.47693610191345215 	 0.5136942863464355 	 0.7473859786987305 	 1.4849894046783447 	 0.6876339912414551 	 0.7587666511535645 	 
2025-07-27 20:26:28.746374 test begin: paddle.nn.functional.softmax(Tensor([4096, 4, 144, 22],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([4096, 4, 144, 22],"float32"), -1, name=None, ) 	 51904512 	 1000 	 0.4616219997406006 	 0.5364842414855957 	 0.44587063789367676 	 0.5144169330596924 	 0.46331214904785156 	 0.9142796993255615 	 0.40355753898620605 	 0.4671294689178467 	 
2025-07-27 20:26:32.898388 test begin: paddle.nn.functional.softmax(Tensor([4096, 4, 22, 144],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([4096, 4, 22, 144],"float32"), -1, name=None, ) 	 51904512 	 1000 	 0.30276989936828613 	 1.1570487022399902 	 0.28704333305358887 	 0.30822181701660156 	 0.458773136138916 	 0.9103906154632568 	 0.3940563201904297 	 0.4651150703430176 	 
2025-07-27 20:26:40.040199 test begin: paddle.nn.functional.softmax(Tensor([60, 2304, 368],"float32"), axis=-1, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([60, 2304, 368],"float32"), axis=-1, ) 	 50872320 	 1000 	 0.303755521774292 	 0.3027524948120117 	 0.2847304344177246 	 0.280562162399292 	 0.45038366317749023 	 0.8928980827331543 	 0.39063048362731934 	 0.4562060832977295 	 
2025-07-27 20:26:43.762994 test begin: paddle.nn.functional.softmax(Tensor([60, 368, 2304],"float32"), axis=-1, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([60, 368, 2304],"float32"), axis=-1, ) 	 50872320 	 1000 	 0.30257248878479004 	 0.5222163200378418 	 0.2922701835632324 	 0.4838728904724121 	 0.46944212913513184 	 0.892420768737793 	 0.4146714210510254 	 0.45589733123779297 	 
2025-07-27 20:26:50.801086 test begin: paddle.nn.functional.softmax(Tensor([613, 4, 144, 144],"float32"), -1, name=None, )
[Prof] paddle.nn.functional.softmax 	 paddle.nn.functional.softmax(Tensor([613, 4, 144, 144],"float32"), -1, name=None, ) 	 50844672 	 1000 	 0.29679417610168457 	 0.3270401954650879 	 0.28080177307128906 	 0.3015778064727783 	 0.4495203495025635 	 0.8920681476593018 	 0.3897359371185303 	 0.4558084011077881 	 
2025-07-27 20:26:54.584741 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=-1, )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.nn.functional.loss.softmax_with_cross_entropy" is deprecated since 2.0.0, and will be removed in future versions. Please use "paddle.nn.functional.cross_entropy" instead.
    Reason: Please notice that behavior of "paddle.nn.functional.softmax_with_cross_entropy" and "paddle.nn.functional.cross_entropy" is different. [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.nn.functional.loss.softmax_with_cross_entropy" is deprecated since 2.0.0, and will be removed in future versions. Please use "paddle.nn.functional.cross_entropy" instead.
    Reason: Please notice that behavior of "paddle.nn.functional.softmax_with_cross_entropy" and "paddle.nn.functional.cross_entropy" is different. [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=-1, ) 	 51617280 	 1000 	 0.3450312614440918 	 1.2764651775360107 	 0.31780409812927246 	 0.2604341506958008 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:26:57.613635 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=3, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=3, ) 	 51617280 	 1000 	 0.34500694274902344 	 1.2765603065490723 	 0.3188142776489258 	 0.260390043258667 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:00.662780 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 1, 64],"int64"), axis=2, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 1, 64],"int64"), axis=2, ) 	 52394496 	 1000 	 1.27250075340271 	 2.2458112239837646 	 0.6501114368438721 	 0.38185977935791016 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:05.644300 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=-1, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=-1, ) 	 51600640 	 1000 	 0.34537696838378906 	 1.2761197090148926 	 0.32756686210632324 	 0.2603456974029541 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:08.667987 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=3, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=3, ) 	 51600640 	 1000 	 0.3453538417816162 	 1.276099681854248 	 0.327681303024292 	 0.26031017303466797 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:11.684908 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, ) 	 50806784 	 1000 	 25.702666997909546 	 1.5178523063659668 	 13.13373327255249 	 0.25582218170166016 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:41.296693 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=-1, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=-1, ) 	 51598560 	 1000 	 0.34535717964172363 	 1.276193618774414 	 0.32774972915649414 	 0.26035475730895996 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:44.315662 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=3, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=3, ) 	 51598560 	 1000 	 0.3477194309234619 	 1.2761635780334473 	 0.32759547233581543 	 0.2603795528411865 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:47.352727 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 1, 49613],"int64"), axis=2, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 1, 49613],"int64"), axis=2, ) 	 52391328 	 1000 	 1.5402228832244873 	 2.21848464012146 	 0.7870116233825684 	 0.37719202041625977 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:53.181620 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, ) 	 50804736 	 1000 	 1.533506155014038 	 1.0821785926818848 	 0.622349739074707 	 0.21950268745422363 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:27:57.632895 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, ) 	 50804736 	 1000 	 0.6400086879730225 	 1.076523780822754 	 0.6220703125 	 0.21958494186401367 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:28:00.657285 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 793801],"float32"), Tensor([2, 16, 1, 793801],"int64"), axis=2, )
[Prof] paddle.nn.functional.softmax_with_cross_entropy 	 paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 793801],"float32"), Tensor([2, 16, 1, 793801],"int64"), axis=2, ) 	 838253856 	 1000 	 24.003675937652588 	 44.58605480194092 	 12.265597820281982 	 5.049006700515747 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:29:33.071247 test begin: paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 793801, 64],"float32"), Tensor([2, 16, 793801, 1],"int64"), axis=-1, )
[Error] CUDA out of memory. Tried to allocate 6.06 GiB. GPU 0 has a total capacity of 39.39 GiB of which 1.35 GiB is free. Process 51020 has 38.03 GiB memory in use. Of the allocated memory 18.75 GiB is allocated by PyTorch, and 199.95 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-07-27 20:30:34.736092 test begin: paddle.nn.functional.softplus(Tensor([113401, 7, 64],"float32"), )
W0727 20:30:39.753374 24685 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([113401, 7, 64],"float32"), ) 	 50803648 	 1000 	 0.30408596992492676 	 0.30191707611083984 	 0.2902512550354004 	 0.2884652614593506 	 0.45062732696533203 	 0.4505891799926758 	 0.3943178653717041 	 0.35341930389404297 	 
2025-07-27 20:30:42.805035 test begin: paddle.nn.functional.softplus(Tensor([13, 10, 390794],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([13, 10, 390794],"float32"), ) 	 50803220 	 1000 	 0.2998170852661133 	 0.29988622665405273 	 0.2832934856414795 	 0.2818756103515625 	 0.45068812370300293 	 0.4505422115325928 	 0.3857853412628174 	 0.3880164623260498 	 
2025-07-27 20:30:45.956061 test begin: paddle.nn.functional.softplus(Tensor([13, 1007, 3881],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([13, 1007, 3881],"float32"), ) 	 50806171 	 1000 	 0.300264835357666 	 0.30736422538757324 	 0.2903289794921875 	 0.28861331939697266 	 0.4506065845489502 	 0.45065736770629883 	 0.3944683074951172 	 0.3677985668182373 	 
2025-07-27 20:30:49.084601 test begin: paddle.nn.functional.softplus(Tensor([13, 61062, 64],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([13, 61062, 64],"float32"), ) 	 50803584 	 1000 	 0.301410436630249 	 0.29991817474365234 	 0.2917449474334717 	 0.2821848392486572 	 0.45067429542541504 	 0.4506072998046875 	 0.3947784900665283 	 0.3818221092224121 	 
2025-07-27 20:30:52.178185 test begin: paddle.nn.functional.softplus(Tensor([14, 56701, 64],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([14, 56701, 64],"float32"), ) 	 50804096 	 1000 	 0.30104970932006836 	 0.3024098873138428 	 0.2845265865325928 	 0.2821362018585205 	 0.45068788528442383 	 0.45070743560791016 	 0.38573265075683594 	 0.35932350158691406 	 
2025-07-27 20:30:55.398924 test begin: paddle.nn.functional.softplus(Tensor([14, 7, 518401],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([14, 7, 518401],"float32"), ) 	 50803298 	 1000 	 0.30159425735473633 	 0.29987621307373047 	 0.2920980453491211 	 0.28845810890197754 	 0.45079684257507324 	 0.45064520835876465 	 0.3947920799255371 	 0.3684971332550049 	 
2025-07-27 20:30:58.489679 test begin: paddle.nn.functional.softplus(Tensor([789, 1007, 64],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([789, 1007, 64],"float32"), ) 	 50849472 	 1000 	 0.300494909286499 	 0.30023932456970215 	 0.29039740562438965 	 0.28257012367248535 	 0.45099854469299316 	 0.4509866237640381 	 0.38625073432922363 	 0.382429838180542 	 
2025-07-27 20:31:01.570482 test begin: paddle.nn.functional.softplus(Tensor([79381, 10, 64],"float32"), )
[Prof] paddle.nn.functional.softplus 	 paddle.nn.functional.softplus(Tensor([79381, 10, 64],"float32"), ) 	 50803840 	 1000 	 0.3013954162597656 	 0.303192138671875 	 0.2849898338317871 	 0.2820117473602295 	 0.4507150650024414 	 0.45053577423095703 	 0.386124849319458 	 0.3803141117095947 	 
2025-07-27 20:31:04.726604 test begin: paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 0, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 0, None, ) 	 25401609 	 1000 	 0.29836487770080566 	 0.30635929107666016 	 0.2820556163787842 	 0.28612494468688965 	 0.44861578941345215 	 0.4458916187286377 	 0.38376879692077637 	 0.3571650981903076 	 
2025-07-27 20:31:10.539877 test begin: paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 5, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 5, None, ) 	 25401609 	 1000 	 0.9458093643188477 	 0.3050699234008789 	 0.2888197898864746 	 0.28652167320251465 	 0.44835948944091797 	 0.44637060165405273 	 0.3924736976623535 	 0.36356377601623535 	 
2025-07-27 20:31:16.356662 test begin: paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 0, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 0, None, ) 	 25401609 	 1000 	 0.3019084930419922 	 0.2989072799682617 	 0.28891468048095703 	 0.28682780265808105 	 0.4483327865600586 	 0.44585227966308594 	 0.39290761947631836 	 0.36228251457214355 	 
2025-07-27 20:31:18.865122 test begin: paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 5, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 5, None, ) 	 25401609 	 1000 	 0.29829883575439453 	 0.2987196445465088 	 0.28893184661865234 	 0.2802555561065674 	 0.44830846786499023 	 0.4460291862487793 	 0.3782646656036377 	 0.37386465072631836 	 
2025-07-27 20:31:21.327235 test begin: paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 0, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 0, None, ) 	 25401609 	 1000 	 0.2983071804046631 	 0.2996854782104492 	 0.2889707088470459 	 0.28688478469848633 	 0.44785571098327637 	 0.4459187984466553 	 0.3924245834350586 	 0.36203813552856445 	 
2025-07-27 20:31:23.840153 test begin: paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 5, None, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 5, None, ) 	 25401609 	 1000 	 0.29831457138061523 	 0.29873228073120117 	 0.2888667583465576 	 0.28700852394104004 	 0.44849348068237305 	 0.44596433639526367 	 0.3929011821746826 	 0.3842785358428955 	 
2025-07-27 20:31:26.293910 test begin: paddle.nn.functional.softshrink(Tensor([32, 15, 207, 8, 32, 2],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([32, 15, 207, 8, 32, 2],"float32"), threshold=0.01, ) 	 50872320 	 1000 	 0.29808616638183594 	 0.298844575881958 	 0.2868311405181885 	 0.27960681915283203 	 0.450908899307251 	 0.44722914695739746 	 0.3947310447692871 	 0.37473058700561523 	 
2025-07-27 20:31:29.376303 test begin: paddle.nn.functional.softshrink(Tensor([32, 15, 8, 207, 32, 2],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([32, 15, 8, 207, 32, 2],"float32"), threshold=0.01, ) 	 50872320 	 1000 	 0.29637575149536133 	 0.29884839057922363 	 0.28676605224609375 	 0.2857029438018799 	 0.4510042667388916 	 0.44726133346557617 	 0.39431095123291016 	 0.3630959987640381 	 
2025-07-27 20:31:32.390070 test begin: paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 52],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 52],"float32"), threshold=0.01, ) 	 51118080 	 1000 	 0.2982780933380127 	 0.3003203868865967 	 0.2879631519317627 	 0.2813715934753418 	 0.453075647354126 	 0.44943666458129883 	 0.39690732955932617 	 0.3787505626678467 	 
2025-07-27 20:31:37.766750 test begin: paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 827, 2],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 827, 2],"float32"), threshold=0.01, ) 	 50810880 	 1000 	 0.5324933528900146 	 0.29846739768981934 	 0.2840614318847656 	 0.2858004570007324 	 0.4503200054168701 	 0.4467310905456543 	 0.3942553997039795 	 0.3633534908294678 	 
2025-07-27 20:31:42.569755 test begin: paddle.nn.functional.softshrink(Tensor([32, 388, 8, 8, 32, 2],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([32, 388, 8, 8, 32, 2],"float32"), threshold=0.01, ) 	 50855936 	 1000 	 0.3000938892364502 	 0.298687219619751 	 0.2863631248474121 	 0.28647756576538086 	 0.450732946395874 	 0.44711756706237793 	 0.3947868347167969 	 0.38391971588134766 	 
2025-07-27 20:31:45.700117 test begin: paddle.nn.functional.softshrink(Tensor([827, 15, 8, 8, 32, 2],"float32"), threshold=0.01, )
[Prof] paddle.nn.functional.softshrink 	 paddle.nn.functional.softshrink(Tensor([827, 15, 8, 8, 32, 2],"float32"), threshold=0.01, ) 	 50810880 	 1000 	 0.29598307609558105 	 0.3019285202026367 	 0.28600549697875977 	 0.28606748580932617 	 0.4504356384277344 	 0.4468343257904053 	 0.3849349021911621 	 0.3828926086425781 	 
2025-07-27 20:31:48.937309 test begin: paddle.nn.functional.softsign(Tensor([12404, 4096],"float32"), )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([12404, 4096],"float32"), ) 	 50806784 	 1000 	 0.29564523696899414 	 1.0432355403900146 	 0.28629565238952637 	 0.35543203353881836 	 0.45027971267700195 	 3.2791028022766113 	 0.3923654556274414 	 0.41880059242248535 	 
2025-07-27 20:31:55.636208 test begin: paddle.nn.functional.softsign(Tensor([2822401, 3, 3],"float64"), None, )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([2822401, 3, 3],"float64"), None, ) 	 25401609 	 1000 	 0.2994365692138672 	 1.0430269241333008 	 0.28385448455810547 	 0.3552825450897217 	 0.447998046875 	 3.269550085067749 	 0.38385486602783203 	 0.4175586700439453 	 
2025-07-27 20:32:01.857076 test begin: paddle.nn.functional.softsign(Tensor([3, 2822401, 3],"float64"), None, )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([3, 2822401, 3],"float64"), None, ) 	 25401609 	 1000 	 0.2994043827056885 	 1.0560333728790283 	 0.29038524627685547 	 0.35522913932800293 	 0.4480721950531006 	 3.2696006298065186 	 0.36415767669677734 	 0.41760802268981934 	 
2025-07-27 20:32:07.959563 test begin: paddle.nn.functional.softsign(Tensor([3, 3, 2822401],"float64"), None, )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([3, 3, 2822401],"float64"), None, ) 	 25401609 	 1000 	 0.29935574531555176 	 1.0428080558776855 	 0.2903292179107666 	 0.3551926612854004 	 0.448012113571167 	 3.2696828842163086 	 0.38449978828430176 	 0.4176290035247803 	 
2025-07-27 20:32:14.083426 test begin: paddle.nn.functional.softsign(Tensor([300, 169345],"float32"), )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([300, 169345],"float32"), ) 	 50803500 	 1000 	 0.2951834201812744 	 1.0429799556732178 	 0.28580546379089355 	 0.3552978038787842 	 0.4503486156463623 	 3.279001235961914 	 0.39527273178100586 	 0.4187893867492676 	 
2025-07-27 20:32:22.226557 test begin: paddle.nn.functional.softsign(Tensor([32, 1587601],"float32"), )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([32, 1587601],"float32"), ) 	 50803232 	 1000 	 0.2969801425933838 	 1.0431756973266602 	 0.279339075088501 	 0.3553893566131592 	 0.45052433013916016 	 3.2786662578582764 	 0.38634681701660156 	 0.4187297821044922 	 
2025-07-27 20:32:29.101869 test begin: paddle.nn.functional.softsign(Tensor([396901, 128],"float32"), )
[Prof] paddle.nn.functional.softsign 	 paddle.nn.functional.softsign(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.29649972915649414 	 1.0430841445922852 	 0.27912378311157227 	 0.3553493022918701 	 0.45029139518737793 	 3.2789058685302734 	 0.3932151794433594 	 0.4187178611755371 	 
2025-07-27 20:32:37.495266 test begin: paddle.nn.functional.square_error_cost(Tensor([10161, 100, 100],"float16"), Tensor([10161, 100, 100],"float32"), )
W0727 20:32:40.758239 24785 dygraph_functions.cc:93089] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([10161, 100, 100],"float16"), Tensor([10161, 100, 100],"float32"), ) 	 203220000 	 1000 	 1.9632651805877686 	 1.4028141498565674 	 0.6689004898071289 	 0.7166359424591064 	 2.2918312549591064 	 3.137216567993164 	 0.7805173397064209 	 0.534325361251831 	 combined
2025-07-27 20:32:51.417511 test begin: paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), ) 	 25401624 	 1000 	 0.601954460144043 	 0.5987555980682373 	 0.30582404136657715 	 0.3058457374572754 	 4.14176082611084 	 1.516465663909912 	 1.0592496395111084 	 0.2213890552520752 	 combined
2025-07-27 20:32:59.316424 test begin: paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 4233601],"float64"), label=Tensor([3, 2, 1, 4233601],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 4233601],"float64"), label=Tensor([3, 2, 1, 4233601],"float64"), ) 	 50803212 	 1000 	 0.7433807849884033 	 0.7413535118103027 	 0.37974023818969727 	 0.37871408462524414 	 0.9264898300170898 	 1.352168083190918 	 0.4733469486236572 	 0.2765071392059326 	 combined
2025-07-27 20:33:04.510411 test begin: paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), ) 	 25401624 	 1000 	 0.5975358486175537 	 0.5988388061523438 	 0.3048884868621826 	 0.3058948516845703 	 3.837946653366089 	 1.5169858932495117 	 1.308307409286499 	 0.22157812118530273 	 combined
2025-07-27 20:33:12.396161 test begin: paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), ) 	 50803224 	 1000 	 0.7436525821685791 	 0.7413227558135986 	 0.3798868656158447 	 0.3787109851837158 	 0.9264965057373047 	 1.3522977828979492 	 0.4733262062072754 	 0.2765834331512451 	 combined
2025-07-27 20:33:17.626010 test begin: paddle.nn.functional.square_error_cost(Tensor([3, 4233601, 1, 2],"float64"), label=Tensor([3, 4233601, 1, 2],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([3, 4233601, 1, 2],"float64"), label=Tensor([3, 4233601, 1, 2],"float64"), ) 	 50803212 	 1000 	 0.7443015575408936 	 0.7413909435272217 	 0.38005924224853516 	 0.37877321243286133 	 0.9264957904815674 	 1.3523485660552979 	 0.4733250141143799 	 0.27661705017089844 	 combined
2025-07-27 20:33:22.981035 test begin: paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float16"), Tensor([5081, 100, 100],"float32"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float16"), Tensor([5081, 100, 100],"float32"), ) 	 101620000 	 1000 	 1.00050950050354 	 0.7065768241882324 	 0.3360910415649414 	 0.3609945774078369 	 1.15034818649292 	 1.5798578262329102 	 0.39173340797424316 	 0.2691233158111572 	 combined
2025-07-27 20:33:31.734704 test begin: paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float32"), Tensor([5081, 100, 100],"float32"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float32"), Tensor([5081, 100, 100],"float32"), ) 	 101620000 	 1000 	 0.7456662654876709 	 0.7541980743408203 	 0.3809051513671875 	 0.3797166347503662 	 0.9243388175964355 	 1.353450059890747 	 0.4722473621368408 	 0.2768125534057617 	 combined
2025-07-27 20:33:40.001401 test begin: paddle.nn.functional.square_error_cost(Tensor([6350401, 2, 1, 2],"float64"), label=Tensor([6350401, 2, 1, 2],"float64"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([6350401, 2, 1, 2],"float64"), label=Tensor([6350401, 2, 1, 2],"float64"), ) 	 50803208 	 1000 	 0.7457332611083984 	 0.7413153648376465 	 0.3799722194671631 	 0.3786773681640625 	 0.9264202117919922 	 1.3521294593811035 	 0.4733164310455322 	 0.276444673538208 	 combined
2025-07-27 20:33:45.296905 test begin: paddle.nn.functional.square_error_cost(Tensor([8, 100, 63505],"float32"), Tensor([8, 100, 63505],"float32"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([8, 100, 63505],"float32"), Tensor([8, 100, 63505],"float32"), ) 	 101608000 	 1000 	 0.7457070350646973 	 0.7430193424224854 	 0.3809328079223633 	 0.3795349597930908 	 0.9243412017822266 	 1.3531734943389893 	 0.4722440242767334 	 0.2767467498779297 	 combined
2025-07-27 20:33:51.416295 test begin: paddle.nn.functional.square_error_cost(Tensor([8, 63505, 100],"float32"), Tensor([8, 63505, 100],"float32"), )
[Prof] paddle.nn.functional.square_error_cost 	 paddle.nn.functional.square_error_cost(Tensor([8, 63505, 100],"float32"), Tensor([8, 63505, 100],"float32"), ) 	 101608000 	 1000 	 0.7514207363128662 	 0.7430157661437988 	 0.3809685707092285 	 0.3795945644378662 	 0.9241194725036621 	 1.3532099723815918 	 0.4721231460571289 	 0.27673840522766113 	 combined
2025-07-27 20:33:57.514723 test begin: paddle.nn.functional.swish(Tensor([128, 32, 112, 112],"float32"), )
2025-07-27 20:34:01.671346 test begin: paddle.nn.functional.swish(Tensor([128, 96, 112, 37],"float32"), )
2025-07-27 20:34:05.857239 test begin: paddle.nn.functional.swish(Tensor([128, 96, 37, 112],"float32"), )
2025-07-27 20:34:09.943293 test begin: paddle.nn.functional.swish(Tensor([16, 22, 384, 384],"float32"), )
2025-07-27 20:34:14.313010 test begin: paddle.nn.functional.swish(Tensor([16, 24, 368, 368],"float32"), )
2025-07-27 20:34:18.486508 test begin: paddle.nn.functional.swish(Tensor([16, 64, 130, 384],"float32"), )
2025-07-27 20:34:22.577955 test begin: paddle.nn.functional.swish(Tensor([16, 64, 135, 368],"float32"), )
2025-07-27 20:34:26.717933 test begin: paddle.nn.functional.swish(Tensor([16, 64, 368, 135],"float32"), )
2025-07-27 20:34:33.211010 test begin: paddle.nn.functional.swish(Tensor([16, 64, 384, 130],"float32"), )
2025-07-27 20:34:40.042236 test begin: paddle.nn.functional.swish(Tensor([43, 96, 112, 112],"float32"), )
2025-07-27 20:34:44.279564 test begin: paddle.nn.functional.swish(Tensor([6, 64, 368, 368],"float32"), )
2025-07-27 20:34:48.438603 test begin: paddle.nn.functional.swish(Tensor([6, 64, 384, 384],"float32"), )
2025-07-27 20:34:53.014860 test begin: paddle.nn.functional.tanh(Tensor([1016065, 50],"float32"), None, )
[Prof] paddle.nn.functional.tanh 	 paddle.nn.functional.tanh(Tensor([1016065, 50],"float32"), None, ) 	 50803250 	 1000 	 0.29650020599365234 	 0.2981102466583252 	 0.27980518341064453 	 0.28069519996643066 	 0.4502389430999756 	 0.4466128349304199 	 0.3862640857696533 	 0.3539154529571533 	 
2025-07-27 20:34:56.230798 test begin: paddle.nn.functional.tanh(Tensor([147015, 346],"float32"), None, )
[Prof] paddle.nn.functional.tanh 	 paddle.nn.functional.tanh(Tensor([147015, 346],"float32"), None, ) 	 50867190 	 1000 	 0.2960526943206787 	 0.2985374927520752 	 0.2801847457885742 	 0.28086209297180176 	 0.4508330821990967 	 0.44705629348754883 	 0.38639092445373535 	 0.3552985191345215 	 
2025-07-27 20:34:59.416876 test begin: paddle.nn.functional.tanh(Tensor([282600, 180],"float32"), None, )
[Prof] paddle.nn.functional.tanh 	 paddle.nn.functional.tanh(Tensor([282600, 180],"float32"), None, ) 	 50868000 	 1000 	 0.29605937004089355 	 0.29847002029418945 	 0.2868804931640625 	 0.2812483310699463 	 0.4507100582122803 	 0.4471135139465332 	 0.3953993320465088 	 0.3767886161804199 	 
2025-07-27 20:35:02.484607 test begin: paddle.nn.functional.tanh(Tensor([564481, 90],"float32"), None, )
[Prof] paddle.nn.functional.tanh 	 paddle.nn.functional.tanh(Tensor([564481, 90],"float32"), None, ) 	 50803290 	 1000 	 0.295454740524292 	 0.29807281494140625 	 0.28636765480041504 	 0.2868466377258301 	 0.45022034645080566 	 0.44652628898620605 	 0.39521360397338867 	 0.3851206302642822 	 
2025-07-27 20:35:05.498383 test begin: paddle.nn.functional.tanh(Tensor([93401, 544],"float32"), None, )
[Prof] paddle.nn.functional.tanh 	 paddle.nn.functional.tanh(Tensor([93401, 544],"float32"), None, ) 	 50810144 	 1000 	 0.2956562042236328 	 0.29816293716430664 	 0.2865564823150635 	 0.2812464237213135 	 0.4502856731414795 	 0.44659423828125 	 0.39470505714416504 	 0.3744466304779053 	 
2025-07-27 20:35:08.646663 test begin: paddle.nn.functional.tanhshrink(Tensor([2822401, 3, 3],"float64"), None, )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(Tensor([2822401, 3, 3],"float64"), None, ) 	 25401609 	 1000 	 0.2995011806488037 	 0.7431435585021973 	 0.29056262969970703 	 0.379636287689209 	 0.4478926658630371 	 1.184908390045166 	 0.38236236572265625 	 0.4037656784057617 	 
2025-07-27 20:35:12.426712 test begin: paddle.nn.functional.tanhshrink(Tensor([3, 2822401, 3],"float64"), None, )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(Tensor([3, 2822401, 3],"float64"), None, ) 	 25401609 	 1000 	 0.3008425235748291 	 0.7430453300476074 	 0.2905142307281494 	 0.37959837913513184 	 0.44770121574401855 	 1.1847975254058838 	 0.3931238651275635 	 0.40361905097961426 	 
2025-07-27 20:35:16.104184 test begin: paddle.nn.functional.tanhshrink(Tensor([3, 3, 2822401],"float64"), None, )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(Tensor([3, 3, 2822401],"float64"), None, ) 	 25401609 	 1000 	 0.29952049255371094 	 0.7430911064147949 	 0.29062581062316895 	 0.37962937355041504 	 0.44794583320617676 	 1.1849150657653809 	 0.3928537368774414 	 0.4037606716156006 	 
2025-07-27 20:35:19.793035 test begin: paddle.nn.functional.tanhshrink(Tensor([50803201],"float32"), None, )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(Tensor([50803201],"float32"), None, ) 	 50803201 	 1000 	 0.29566144943237305 	 0.7432303428649902 	 0.2790553569793701 	 0.3796849250793457 	 0.45031237602233887 	 1.188978910446167 	 0.3870220184326172 	 0.4051191806793213 	 
2025-07-27 20:35:24.252932 test begin: paddle.nn.functional.tanhshrink(x=Tensor([2822401, 3, 3],"float64"), )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(x=Tensor([2822401, 3, 3],"float64"), ) 	 25401609 	 1000 	 0.29957008361816406 	 0.7431008815765381 	 0.2830543518066406 	 0.3796055316925049 	 0.44823598861694336 	 1.1849915981292725 	 0.3844602108001709 	 0.40377330780029297 	 
2025-07-27 20:35:28.090125 test begin: paddle.nn.functional.tanhshrink(x=Tensor([3, 2822401, 3],"float64"), )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(x=Tensor([3, 2822401, 3],"float64"), ) 	 25401609 	 1000 	 0.29953765869140625 	 0.7430365085601807 	 0.2903285026550293 	 0.3795757293701172 	 0.44800901412963867 	 1.1848490238189697 	 0.39342474937438965 	 0.40364599227905273 	 
2025-07-27 20:35:31.748828 test begin: paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 2822401],"float64"), )
[Prof] paddle.nn.functional.tanhshrink 	 paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 2822401],"float64"), ) 	 25401609 	 1000 	 0.2994985580444336 	 0.743044376373291 	 0.29028892517089844 	 0.3796069622039795 	 0.44811010360717773 	 1.1849679946899414 	 0.3851163387298584 	 0.4037899971008301 	 
2025-07-27 20:35:36.168410 test begin: paddle.nn.functional.temporal_shift(Tensor([128, 127, 56, 56],"float32"), 8, 0.125, )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:42.567768 test begin: paddle.nn.functional.temporal_shift(Tensor([128, 256, 28, 56],"float32"), 8, 0.125, )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:45.255332 test begin: paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 28],"float32"), 8, 0.125, )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:47.812644 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 256, 15, 56],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:50.418554 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 15],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:53.054239 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 271, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:55.630236 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 512, 15, 28],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:35:58.208780 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 15],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:36:00.802233 test begin: paddle.nn.functional.temporal_shift(Tensor([240, 68, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:36:03.479001 test begin: paddle.nn.functional.temporal_shift(Tensor([64, 256, 56, 56],"float32"), 8, 0.125, )
[Error] too many values to unpack (expected 4)
2025-07-27 20:36:06.104764 test begin: paddle.nn.functional.temporal_shift(Tensor([64, 256, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
[Error] too many values to unpack (expected 4)
2025-07-27 20:36:08.700608 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 28225, 3, 3],"float64"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 28225, 3, 3],"float64"), 1.0, 0.0, None, ) 	 25402500 	 1000 	 0.29819798469543457 	 0.29856276512145996 	 0.2880990505218506 	 0.2711789608001709 	 0.44872403144836426 	 0.445892333984375 	 0.38496899604797363 	 0.34565043449401855 	 
2025-07-27 20:36:11.174233 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 4, 21169, 3],"float64"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 4, 21169, 3],"float64"), 1.0, 0.0, None, ) 	 25402800 	 1000 	 0.29819774627685547 	 0.29827117919921875 	 0.28862667083740234 	 0.2790381908416748 	 0.4485135078430176 	 0.4459240436553955 	 0.38815760612487793 	 0.36150527000427246 	 
2025-07-27 20:36:13.586139 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 21169],"float64"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 21169],"float64"), 1.0, 0.0, None, ) 	 25402800 	 1000 	 0.29822659492492676 	 0.29826903343200684 	 0.2885885238647461 	 0.27879762649536133 	 0.4485206604003906 	 0.44588398933410645 	 0.39347314834594727 	 0.36309051513671875 	 
2025-07-27 20:36:16.010995 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 42337],"float32"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 42337],"float32"), 1.0, 0.0, None, ) 	 50804400 	 1000 	 0.29597902297973633 	 0.2980930805206299 	 0.28614354133605957 	 0.2787501811981201 	 0.4502389430999756 	 0.4466893672943115 	 0.39539551734924316 	 0.36226940155029297 	 
2025-07-27 20:36:19.049996 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 4, 42337, 3],"float32"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 4, 42337, 3],"float32"), 1.0, 0.0, None, ) 	 50804400 	 1000 	 0.2960317134857178 	 0.29813575744628906 	 0.2860555648803711 	 0.2715725898742676 	 0.45027899742126465 	 0.4466979503631592 	 0.3953237533569336 	 0.37717509269714355 	 
2025-07-27 20:36:22.048744 test begin: paddle.nn.functional.thresholded_relu(Tensor([100, 56449, 3, 3],"float32"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([100, 56449, 3, 3],"float32"), 1.0, 0.0, None, ) 	 50804100 	 1000 	 0.29588842391967773 	 0.2980513572692871 	 0.2862236499786377 	 0.2788512706756592 	 0.45029211044311523 	 0.44670820236206055 	 0.39531469345092773 	 0.3625752925872803 	 
2025-07-27 20:36:25.111628 test begin: paddle.nn.functional.thresholded_relu(Tensor([1411201, 4, 3, 3],"float32"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([1411201, 4, 3, 3],"float32"), 1.0, 0.0, None, ) 	 50803236 	 1000 	 0.29822468757629395 	 0.2980611324310303 	 0.28604602813720703 	 0.2783479690551758 	 0.4502749443054199 	 0.44666075706481934 	 0.39229369163513184 	 0.36161065101623535 	 
2025-07-27 20:36:28.151327 test begin: paddle.nn.functional.thresholded_relu(Tensor([705601, 4, 3, 3],"float64"), 1.0, 0.0, None, )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(Tensor([705601, 4, 3, 3],"float64"), 1.0, 0.0, None, ) 	 25401636 	 1000 	 0.29821038246154785 	 0.2996549606323242 	 0.2885446548461914 	 0.2712979316711426 	 0.44866228103637695 	 0.44597554206848145 	 0.38252902030944824 	 0.3564262390136719 	 
2025-07-27 20:36:30.714130 test begin: paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 42337],"float32"), )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 42337],"float32"), ) 	 50804400 	 1000 	 0.29599928855895996 	 0.2980613708496094 	 0.28598618507385254 	 0.27866148948669434 	 0.45020198822021484 	 0.4466991424560547 	 0.3951454162597656 	 0.3618769645690918 	 
2025-07-27 20:36:33.827764 test begin: paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 42337, 3],"float32"), )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 42337, 3],"float32"), ) 	 50804400 	 1000 	 0.2960488796234131 	 0.3044567108154297 	 0.28589534759521484 	 0.27147841453552246 	 0.4503159523010254 	 0.4466569423675537 	 0.39470410346984863 	 0.3716869354248047 	 
2025-07-27 20:36:39.497633 test begin: paddle.nn.functional.thresholded_relu(x=Tensor([100, 56449, 3, 3],"float32"), )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(x=Tensor([100, 56449, 3, 3],"float32"), ) 	 50804100 	 1000 	 0.2968599796295166 	 0.2980763912200928 	 0.2858119010925293 	 0.27913546562194824 	 0.4503021240234375 	 0.44670748710632324 	 0.3955836296081543 	 0.384371280670166 	 
2025-07-27 20:36:42.544890 test begin: paddle.nn.functional.thresholded_relu(x=Tensor([1411201, 4, 3, 3],"float32"), )
[Prof] paddle.nn.functional.thresholded_relu 	 paddle.nn.functional.thresholded_relu(x=Tensor([1411201, 4, 3, 3],"float32"), ) 	 50803236 	 1000 	 0.9676463603973389 	 0.3094766139984131 	 0.2856564521789551 	 0.27106523513793945 	 0.4502677917480469 	 0.44677090644836426 	 0.39548158645629883 	 0.3525807857513428 	 
2025-07-27 20:36:48.482730 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="mean", name=None, ) 	 76204815 	 1000 	 2.3608217239379883 	 1.8208873271942139 	 3.147125244140625e-05 	 0.15474629402160645 	 4.074222564697266 	 2.8671255111694336 	 0.4643387794494629 	 0.1833970546722412 	 
2025-07-27 20:37:01.759416 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="none", name=None, ) 	 76204815 	 1000 	 2.326887607574463 	 1.816145896911621 	 3.981590270996094e-05 	 0.16849422454833984 	 4.070786476135254 	 2.863548517227173 	 0.5210256576538086 	 0.19543194770812988 	 
2025-07-27 20:37:14.895579 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="sum", name=None, ) 	 76204815 	 1000 	 2.3419017791748047 	 1.819746494293213 	 1.52587890625e-05 	 0.1546165943145752 	 4.073107957839966 	 2.86336612701416 	 0.4643242359161377 	 0.19539713859558105 	 
2025-07-27 20:37:27.606636 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, ) 	 76204815 	 1000 	 2.807114362716675 	 2.247769832611084 	 0.0001575946807861328 	 0.2072770595550537 	 4.420939683914185 	 3.2557125091552734 	 0.5037534236907959 	 0.20830559730529785 	 
2025-07-27 20:37:44.591486 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, ) 	 76204815 	 1000 	 2.7505948543548584 	 2.198819637298584 	 0.0001544952392578125 	 0.2490386962890625 	 4.3881988525390625 	 3.223123073577881 	 0.561577558517456 	 0.21985554695129395 	 
2025-07-27 20:37:59.851106 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
[Prof] paddle.nn.functional.triplet_margin_with_distance_loss 	 paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, ) 	 76204815 	 1000 	 2.803542375564575 	 2.23416805267334 	 0.00015282630920410156 	 0.20732736587524414 	 4.4205803871154785 	 3.199808120727539 	 0.5036749839782715 	 0.21829009056091309 	 
2025-07-27 20:38:14.306128 test begin: paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), ) 	 50831360 	 1000 	 1.7472691535949707 	 2.6437366008758545 	 0.17848992347717285 	 0.24551653861999512 	 3.7391436100006104 	 7.1790549755096436 	 0.3475973606109619 	 7.097637414932251 	 
2025-07-27 20:38:39.520403 test begin: paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, ) 	 50831360 	 1000 	 1.7475659847259521 	 2.6511425971984863 	 0.17847084999084473 	 0.24548053741455078 	 3.7391417026519775 	 7.178380489349365 	 0.3476879596710205 	 7.095172882080078 	 
2025-07-27 20:39:07.377096 test begin: paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, 1, tuple(1,1,), )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, 1, tuple(1,1,), ) 	 50805120 	 1000 	 1.8278326988220215 	 2.652099370956421 	 0.18678832054138184 	 0.225860595703125 	 3.778843402862549 	 7.226147651672363 	 0.35132884979248047 	 7.130024433135986 	 
2025-07-27 20:39:34.488446 test begin: paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, tuple(1,1,), 1, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, tuple(1,1,), 1, ) 	 50805120 	 1000 	 2.2953898906707764 	 2.6522626876831055 	 0.18680763244628906 	 0.2259371280670166 	 3.779053211212158 	 7.441125392913818 	 0.3513014316558838 	 7.349103689193726 	 
2025-07-27 20:40:02.022738 test begin: paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, 1, tuple(1,1,), )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, 1, tuple(1,1,), ) 	 50805120 	 1000 	 2.8457205295562744 	 2.9895401000976562 	 0.22037458419799805 	 0.254514217376709 	 3.7120771408081055 	 7.099201679229736 	 0.3450808525085449 	 7.008908748626709 	 
2025-07-27 20:40:28.955061 test begin: paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, tuple(1,1,), 1, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, tuple(1,1,), 1, ) 	 50805120 	 1000 	 2.1582400798797607 	 2.989410161972046 	 0.22191953659057617 	 0.25448107719421387 	 3.712095022201538 	 7.099043369293213 	 0.34508681297302246 	 7.009044170379639 	 
2025-07-27 20:40:55.014210 test begin: paddle.nn.functional.unfold(Tensor([338, 3, 224, 224],"float32"), 16, 16, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([338, 3, 224, 224],"float32"), 16, 16, ) 	 50878464 	 1000 	 24.229304552078247 	 24.06497049331665 	 0.0732271671295166 	 0.0727543830871582 	 3.286465883255005 	 2.110697031021118 	 0.009892702102661133 	 2.0208587646484375 	 
2025-07-27 20:41:50.633710 test begin: paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), ) 	 50810880 	 1000 	 36.47292923927307 	 30.864519834518433 	 0.009001731872558594 	 0.007529735565185547 	 80.75916600227356 	 7.17603325843811 	 0.01990962028503418 	 7.093400955200195 	 
2025-07-27 20:44:34.817682 test begin: paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, ) 	 50810880 	 1000 	 36.897289514541626 	 30.853879690170288 	 0.008995532989501953 	 0.007520914077758789 	 80.75734949111938 	 7.176931619644165 	 0.01984381675720215 	 7.09287428855896 	 
2025-07-27 20:47:20.547143 test begin: paddle.nn.functional.unfold(Tensor([64, 16, 224, 224],"float32"), 16, 16, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([64, 16, 224, 224],"float32"), 16, 16, ) 	 51380224 	 1000 	 15.3794527053833 	 7.924430847167969 	 0.24550080299377441 	 0.12636303901672363 	 1.869905710220337 	 2.131398916244507 	 0.02929544448852539 	 2.0453107357025146 	 
2025-07-27 20:47:50.753772 test begin: paddle.nn.functional.unfold(Tensor([64, 3, 1182, 224],"float32"), 16, 16, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([64, 3, 1182, 224],"float32"), 16, 16, ) 	 50835456 	 1000 	 15.343406915664673 	 7.866110801696777 	 0.24498248100280762 	 0.12554240226745605 	 1.8631832599639893 	 2.4089622497558594 	 0.029198884963989258 	 1.2309210300445557 	 
2025-07-27 20:48:20.059545 test begin: paddle.nn.functional.unfold(Tensor([64, 3, 224, 1182],"float32"), 16, 16, )
[Prof] paddle.nn.functional.unfold 	 paddle.nn.functional.unfold(Tensor([64, 3, 224, 1182],"float32"), 16, 16, ) 	 50835456 	 1000 	 15.766937732696533 	 7.973083972930908 	 0.2517080307006836 	 0.12718987464904785 	 1.8630566596984863 	 2.4126782417297363 	 0.029211044311523438 	 1.2334935665130615 	 
2025-07-27 20:48:51.039623 test begin: paddle.nn.functional.zeropad2d(Tensor([169, 3, 224, 224],"int64"), Tensor([4],"int32"), )
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:129: VisibleDeprecationWarning: [93m
Warning:
API "paddle.nn.functional.common.zeropad2d" is deprecated since 3.0.0, and will be removed in future versions. Please use "paddle.nn.ZeroPad2D" instead.
    Reason: Please use class ZeroPad2D [0m
  paddle_output = self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
/root/paddlejob/workspace/env_run/ningzs/PaddleAPITest/tester/paddle_torch_gpu_performance.py:147: VisibleDeprecationWarning: [93m
Warning:
API "paddle.nn.functional.common.zeropad2d" is deprecated since 3.0.0, and will be removed in future versions. Please use "paddle.nn.ZeroPad2D" instead.
    Reason: Please use class ZeroPad2D [0m
  self.paddle_api(*tuple(self.paddle_args), **self.paddle_kwargs)
W0727 20:48:52.111006 27124 backward.cc:462] While running Node (Pad3dGradNode) raises an EnforceNotMet exception
[Error] (NotFound) The kernel with key (GPU, Undefined(AnyLayout), int64) of kernel `pad3d_grad` is not registered and fail to fallback to CPU one. Selected wrong DataType `int64`. Paddle support following DataTypes: float64, complex128, float16, float32, complex64, bfloat16.
  [Hint: Expected kernel_iter != iter->second.end(), but received kernel_iter == iter->second.end().] (at ../paddle/phi/core/kernel_factory.cc:380)

[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([169, 3, 224, 224],"int64"), Tensor([4],"int32"), ) 	 25439236 	 1000 	 0.3771207332611084 	 0.532045841217041 	 0.0003230571746826172 	 0.0004525184631347656 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:48:52.720663 test begin: paddle.nn.functional.zeropad2d(Tensor([338, 3, 224, 224],"float32"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([338, 3, 224, 224],"float32"), list[2,2,2,2,], ) 	 50878464 	 1000 	 0.6301851272583008 	 0.4681417942047119 	 0.5949487686157227 	 0.2390754222869873 	 0.7494790554046631 	 0.3115861415863037 	 0.3821897506713867 	 0.21851897239685059 	 combined
2025-07-27 20:48:56.517588 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"float64"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"float64"), list[2,2,2,2,], ) 	 25489408 	 1000 	 0.32410717010498047 	 0.46613335609436035 	 0.2889564037322998 	 0.2344679832458496 	 0.4613301753997803 	 0.3038156032562256 	 0.23575067520141602 	 0.21429920196533203 	 combined
2025-07-27 20:49:00.964422 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"int64"), Tensor([4],"int32"), )
W0727 20:49:02.032971 27217 backward.cc:462] While running Node (Pad3dGradNode) raises an EnforceNotMet exception
[Error] (NotFound) The kernel with key (GPU, Undefined(AnyLayout), int64) of kernel `pad3d_grad` is not registered and fail to fallback to CPU one. Selected wrong DataType `int64`. Paddle support following DataTypes: float64, complex128, float16, float32, complex64, bfloat16.
  [Hint: Expected kernel_iter != iter->second.end(), but received kernel_iter == iter->second.end().] (at ../paddle/phi/core/kernel_factory.cc:380)

[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"int64"), Tensor([4],"int32"), ) 	 25489412 	 1000 	 0.3702723979949951 	 0.5462572574615479 	 0.0003178119659423828 	 0.0004451274871826172 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:49:04.585310 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 254, 224, 224],"float32"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 254, 224, 224],"float32"), list[2,2,2,2,], ) 	 50978816 	 1000 	 0.6314032077789307 	 0.46904897689819336 	 0.5968680381774902 	 0.2395780086517334 	 0.7495026588439941 	 0.31240200996398926 	 0.3829176425933838 	 0.24127531051635742 	 combined
2025-07-27 20:49:08.504808 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 3, 18901, 224],"float32"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 3, 18901, 224],"float32"), list[2,2,2,2,], ) 	 50805888 	 1000 	 0.6192090511322021 	 0.4649167060852051 	 0.584195613861084 	 0.23745179176330566 	 0.7465875148773193 	 0.31102490425109863 	 0.38143157958984375 	 0.24066758155822754 	 combined
2025-07-27 20:49:12.324133 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 18901],"float32"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 18901],"float32"), list[2,2,2,2,], ) 	 50805888 	 1000 	 0.6207799911499023 	 0.44432616233825684 	 0.5701839923858643 	 0.22693967819213867 	 0.7465946674346924 	 0.30843615531921387 	 0.3814525604248047 	 0.20668697357177734 	 combined
2025-07-27 20:49:16.163565 test begin: paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 9451],"float64"), list[2,2,2,2,], )
[Prof] paddle.nn.functional.zeropad2d 	 paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 9451],"float64"), list[2,2,2,2,], ) 	 25404288 	 1000 	 0.31988072395324707 	 0.44207334518432617 	 0.2848622798919678 	 0.22476506233215332 	 0.4588956832885742 	 0.2999112606048584 	 0.23502182960510254 	 0.20777535438537598 	 combined
2025-07-27 20:49:18.748067 test begin: paddle.nonzero(Tensor([510, 128, 28, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([510, 128, 28, 28],"float32"), ) 	 51179520 	 1000 	 7.438130855560303 	 2.3274219036102295 	 0.005471467971801758 	 0.0021123886108398438 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:29.519486 test begin: paddle.nonzero(Tensor([510, 80, 28, 45],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([510, 80, 28, 45],"float32"), ) 	 51408000 	 1000 	 7.4320526123046875 	 2.35900616645813 	 0.0055310726165771484 	 0.002131938934326172 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:41.323929 test begin: paddle.nonzero(Tensor([510, 80, 45, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([510, 80, 45, 28],"float32"), ) 	 51408000 	 1000 	 7.464616775512695 	 2.343695878982544 	 0.005489349365234375 	 0.0021255016326904297 	 None 	 None 	 None 	 None 	 
2025-07-27 20:49:51.986708 test begin: paddle.nonzero(Tensor([511, 127, 28, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([511, 127, 28, 28],"float32"), ) 	 50879248 	 1000 	 7.421077728271484 	 2.337644577026367 	 0.005440711975097656 	 0.0021209716796875 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:02.619551 test begin: paddle.nonzero(Tensor([511, 80, 28, 45],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([511, 80, 28, 45],"float32"), ) 	 51508800 	 1000 	 7.451094150543213 	 2.357185125350952 	 0.005481243133544922 	 0.0021293163299560547 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:13.451833 test begin: paddle.nonzero(Tensor([511, 80, 45, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([511, 80, 45, 28],"float32"), ) 	 51508800 	 1000 	 7.45026159286499 	 2.351864814758301 	 0.00547480583190918 	 0.002141714096069336 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:24.263356 test begin: paddle.nonzero(Tensor([512, 127, 28, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([512, 127, 28, 28],"float32"), ) 	 50978816 	 1000 	 7.444109916687012 	 2.3225088119506836 	 0.0055005550384521484 	 0.0020990371704101562 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:35.105653 test begin: paddle.nonzero(Tensor([512, 80, 28, 45],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([512, 80, 28, 45],"float32"), ) 	 51609600 	 1000 	 7.467775344848633 	 2.356569290161133 	 0.0054666996002197266 	 0.002145528793334961 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:48.328932 test begin: paddle.nonzero(Tensor([512, 80, 45, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([512, 80, 45, 28],"float32"), ) 	 51609600 	 1000 	 7.4632110595703125 	 2.356855869293213 	 0.005511283874511719 	 0.0021283626556396484 	 None 	 None 	 None 	 None 	 
2025-07-27 20:50:59.005393 test begin: paddle.nonzero(Tensor([811, 80, 28, 28],"float32"), )
[Prof] paddle.nonzero 	 paddle.nonzero(Tensor([811, 80, 28, 28],"float32"), ) 	 50865920 	 1000 	 7.359965085983276 	 2.318613052368164 	 0.005413532257080078 	 0.002109527587890625 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:11.475248 test begin: paddle.not_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), ) 	 38103936 	 1000 	 1.4113712310791016 	 0.5257911682128906 	 0.5374939441680908 	 0.5029401779174805 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:18.335732 test begin: paddle.not_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), ) 	 38102688 	 1000 	 0.5578310489654541 	 0.5156536102294922 	 0.5452840328216553 	 0.4970543384552002 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:20.227915 test begin: paddle.not_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), ) 	 31753280 	 1000 	 0.21318531036376953 	 0.21956324577331543 	 0.20307660102844238 	 0.20752573013305664 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:21.205296 test begin: paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), ) 	 25403456 	 1000 	 0.5633320808410645 	 0.47243332862854004 	 0.5458924770355225 	 0.4539618492126465 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:22.671073 test begin: paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), ) 	 25405120 	 1000 	 1.046271562576294 	 0.9697411060333252 	 1.0362882614135742 	 0.9382874965667725 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:25.132178 test begin: paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), ) 	 228616128 	 1000 	 1.790799856185913 	 1.570800542831421 	 1.774639368057251 	 1.5590214729309082 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:32.262618 test begin: paddle.not_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), ) 	 76205064 	 1000 	 1.1064441204071045 	 1.0297789573669434 	 1.0962519645690918 	 1.0178005695343018 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:40.772813 test begin: paddle.not_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), ) 	 76205376 	 1000 	 1.0991802215576172 	 1.02476167678833 	 1.087578296661377 	 1.0129129886627197 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:44.583205 test begin: paddle.not_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), ) 	 76205184 	 1000 	 1.100665807723999 	 1.026400089263916 	 1.0906689167022705 	 1.0119378566741943 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:48.022863 test begin: paddle.not_equal(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([25401601],"int64"), Tensor([25401601],"int64"), ) 	 50803202 	 1000 	 0.31044983863830566 	 0.31322407722473145 	 0.3011031150817871 	 0.3024122714996338 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:49.497410 test begin: paddle.not_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), )
[Prof] paddle.not_equal 	 paddle.not_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), ) 	 38102784 	 1000 	 0.5581731796264648 	 0.5169355869293213 	 0.5468904972076416 	 0.5046136379241943 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:51.251200 test begin: paddle.numel(Tensor([50803201],"float32"), )
[Prof] paddle.numel 	 paddle.numel(Tensor([50803201],"float32"), ) 	 50803201 	 1000 	 0.008313179016113281 	 0.02823662757873535 	 1.8596649169921875e-05 	 4.649162292480469e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:52.159171 test begin: paddle.ones_like(Tensor([144, 392, 901],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([144, 392, 901],"float32"), ) 	 50859648 	 1000 	 0.13486814498901367 	 0.13436126708984375 	 0.12313008308410645 	 0.11928486824035645 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:53.301315 test begin: paddle.ones_like(Tensor([144, 901, 392],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([144, 901, 392],"float32"), ) 	 50859648 	 1000 	 0.13791632652282715 	 0.13872170448303223 	 0.11092877388000488 	 0.11646628379821777 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:54.458203 test begin: paddle.ones_like(Tensor([160, 392, 811],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([160, 392, 811],"float32"), ) 	 50865920 	 1000 	 0.13580846786499023 	 0.15578174591064453 	 0.12311029434204102 	 0.12375473976135254 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:55.630239 test begin: paddle.ones_like(Tensor([160, 811, 392],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([160, 811, 392],"float32"), ) 	 50865920 	 1000 	 0.13422608375549316 	 0.13428926467895508 	 0.12296581268310547 	 0.12248563766479492 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:56.737993 test begin: paddle.ones_like(Tensor([176, 392, 737],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([176, 392, 737],"float32"), ) 	 50847104 	 1000 	 0.13411521911621094 	 0.13424086570739746 	 0.12301492691040039 	 0.12286233901977539 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:57.833986 test begin: paddle.ones_like(Tensor([176, 737, 392],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([176, 737, 392],"float32"), ) 	 50847104 	 1000 	 0.1341257095336914 	 0.13433361053466797 	 0.12288331985473633 	 0.12275338172912598 	 None 	 None 	 None 	 None 	 
2025-07-27 20:51:58.993509 test begin: paddle.ones_like(Tensor([331, 392, 392],"float32"), )
[Prof] paddle.ones_like 	 paddle.ones_like(Tensor([331, 392, 392],"float32"), ) 	 50862784 	 1000 	 0.13605856895446777 	 0.14136266708374023 	 0.12311649322509766 	 0.12373709678649902 	 None 	 None 	 None 	 None 	 
2025-07-27 20:52:00.130006 test begin: paddle.outer(Tensor([50803201],"float32"), Tensor([2],"float32"), )
[Prof] paddle.outer 	 paddle.outer(Tensor([50803201],"float32"), Tensor([2],"float32"), ) 	 50803203 	 1000 	 5.293287992477417 	 0.5184998512268066 	 0.11029815673828125 	 0.5040380954742432 	 3.7124545574188232 	 2.6159331798553467 	 1.2616698741912842 	 0.5333518981933594 	 
2025-07-27 20:52:15.070086 test begin: paddle.outer(Tensor([50803201],"float32"), Tensor([32],"float32"), )
[Prof] paddle.outer 	 paddle.outer(Tensor([50803201],"float32"), Tensor([32],"float32"), ) 	 50803233 	 1000 	 5.395628929138184 	 5.551690101623535 	 0.11244726181030273 	 1.4182963371276855 	 13.181601762771606 	 40.7344024181366 	 4.486068964004517 	 2.0789947509765625 	 
2025-07-27 20:53:47.984145 test begin: paddle.outer(Tensor([50803201],"float32"), Tensor([4],"float32"), )
[Prof] paddle.outer 	 paddle.outer(Tensor([50803201],"float32"), Tensor([4],"float32"), ) 	 50803205 	 1000 	 5.309187650680542 	 0.9470829963684082 	 0.11045694351196289 	 0.9321541786193848 	 4.349271535873413 	 5.068966388702393 	 1.4787499904632568 	 1.033984899520874 	 
2025-07-27 20:54:08.209057 test begin: paddle.pdist(Tensor([10, 5080321],"float32"), 0, )
[Prof] paddle.pdist 	 paddle.pdist(Tensor([10, 5080321],"float32"), 0, ) 	 50803210 	 1000 	 5.942078351974487 	 9.024052381515503 	 5.173683166503906e-05 	 9.012520551681519 	 5.646354675292969 	 0.13402676582336426 	 0.005539894104003906 	 0.06617569923400879 	 
2025-07-27 20:54:29.876796 test begin: paddle.pdist(Tensor([10, 5080321],"float32"), 1.0, )
[Prof] paddle.pdist 	 paddle.pdist(Tensor([10, 5080321],"float32"), 1.0, ) 	 50803210 	 1000 	 5.9223175048828125 	 8.38407278060913 	 1.7881393432617188e-05 	 8.37270712852478 	 22.85634160041809 	 13.575543403625488 	 0.02266979217529297 	 6.936976194381714 	 
2025-07-27 20:55:22.253798 test begin: paddle.pdist(Tensor([50, 508033],"float64"), 2.0, )
[Prof] paddle.pdist 	 paddle.pdist(Tensor([50, 508033],"float64"), 2.0, ) 	 25401650 	 1000 	 22.974567890167236 	 2.1218204498291016 	 4.982948303222656e-05 	 2.110569477081299 	 88.01759791374207 	 39.3120903968811 	 0.08769369125366211 	 4.446156978607178 	 
2025-07-27 20:57:56.580138 test begin: paddle.polar(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), )
[Prof] paddle.polar 	 paddle.polar(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), ) 	 101606528 	 1000 	 2.090172052383423 	 2.074927806854248 	 0.4248816967010498 	 0.42410945892333984 	 4.6022419929504395 	 5.0376811027526855 	 0.6715354919433594 	 0.4676492214202881 	 combined
2025-07-27 20:58:15.109144 test begin: paddle.polar(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), )
[Prof] paddle.polar 	 paddle.polar(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), ) 	 101613568 	 1000 	 2.0791280269622803 	 2.073786973953247 	 0.42620205879211426 	 0.42413854598999023 	 4.59798526763916 	 5.038572788238525 	 0.6708521842956543 	 0.4676783084869385 	 combined
2025-07-27 20:58:32.041983 test begin: paddle.polar(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
[Prof] paddle.polar 	 paddle.polar(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), ) 	 51380224 	 1000 	 1.7944917678833008 	 1.837712287902832 	 0.3666977882385254 	 0.3701002597808838 	 3.4990313053131104 	 4.652610778808594 	 0.39688539505004883 	 0.3653836250305176 	 combined
2025-07-27 20:58:47.210902 test begin: paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
[Prof] paddle.polar 	 paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), ) 	 51380224 	 1000 	 1.209775686264038 	 1.213679552078247 	 0.24762868881225586 	 0.24848413467407227 	 2.6093850135803223 	 2.896730661392212 	 0.29512691497802734 	 0.22737503051757812 	 combined
2025-07-27 20:58:57.062526 test begin: paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
[Prof] paddle.polar 	 paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), ) 	 101711872 	 1000 	 2.081191062927246 	 2.077176094055176 	 0.4252903461456299 	 0.4244534969329834 	 4.604237794876099 	 5.043248176574707 	 0.6717100143432617 	 0.4681999683380127 	 combined
2025-07-27 20:59:14.559827 test begin: paddle.polygamma(Tensor([10, 20, 254017],"float32"), 1, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([10, 20, 254017],"float32"), 1, ) 	 50803400 	 1000 	 5.58002781867981 	 0.628258228302002 	 5.570529460906982 	 0.6160988807678223 	 9.084986925125122 	 10.277477502822876 	 9.030950784683228 	 5.2516419887542725 	 
2025-07-27 20:59:41.922419 test begin: paddle.polygamma(Tensor([10, 5080321, 1],"float32"), 1, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([10, 5080321, 1],"float32"), 1, ) 	 50803210 	 1000 	 5.581666707992554 	 0.6447165012359619 	 5.57248330116272 	 0.6196601390838623 	 9.089016199111938 	 10.274136781692505 	 9.034475088119507 	 5.247377634048462 	 
2025-07-27 21:00:10.755405 test begin: paddle.polygamma(Tensor([2, 12700801],"float64"), 1, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([2, 12700801],"float64"), 1, ) 	 25401602 	 1000 	 9.274822473526001 	 0.6408083438873291 	 9.259948253631592 	 0.6266212463378906 	 11.446582555770874 	 21.541088819503784 	 11.379677534103394 	 11.008320093154907 	 
2025-07-27 21:00:54.974443 test begin: paddle.polygamma(Tensor([2, 2, 6350401],"float64"), 2, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([2, 2, 6350401],"float64"), 2, ) 	 25401604 	 1000 	 11.441481590270996 	 21.083877086639404 	 11.432241201400757 	 21.070213556289673 	 9.133998394012451 	 9.299607992172241 	 9.078198432922363 	 4.7505786418914795 	 
2025-07-27 21:01:48.364661 test begin: paddle.polygamma(Tensor([2, 2116801, 6],"float64"), 2, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([2, 2116801, 6],"float64"), 2, ) 	 25401612 	 1000 	 11.394962549209595 	 21.090271711349487 	 11.381892204284668 	 21.07969856262207 	 9.13641619682312 	 9.29628849029541 	 9.08197021484375 	 4.750586986541748 	 
2025-07-27 21:02:40.540781 test begin: paddle.polygamma(Tensor([2116801, 2, 6],"float64"), 2, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([2116801, 2, 6],"float64"), 2, ) 	 25401612 	 1000 	 11.390785217285156 	 21.11633586883545 	 11.370927572250366 	 21.09210705757141 	 9.136332988739014 	 9.29744839668274 	 9.082295417785645 	 4.751362323760986 	 
2025-07-27 21:03:32.894454 test begin: paddle.polygamma(Tensor([2540161, 20, 1],"float32"), 1, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([2540161, 20, 1],"float32"), 1, ) 	 50803220 	 1000 	 5.577771425247192 	 0.6292924880981445 	 5.567692279815674 	 0.618659496307373 	 9.091794729232788 	 10.274762153625488 	 9.017027139663696 	 5.250930309295654 	 
2025-07-27 21:04:00.436255 test begin: paddle.polygamma(Tensor([4233601, 6],"float64"), 1, )
[Prof] paddle.polygamma 	 paddle.polygamma(Tensor([4233601, 6],"float64"), 1, ) 	 25401606 	 1000 	 9.280385494232178 	 0.6538083553314209 	 9.260589361190796 	 0.6296720504760742 	 11.450293064117432 	 21.529739379882812 	 11.396390199661255 	 10.999421834945679 	 
2025-07-27 21:04:44.556481 test begin: paddle.positive(Tensor([10, 5080321],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.0019130706787109375 	 0.00020503997802734375 	 1.1205673217773438e-05 	 1.3589859008789062e-05 	 0.030183076858520508 	 0.04683208465576172 	 3.24249267578125e-05 	 6.437301635742188e-05 	 combined
2025-07-27 21:04:46.283449 test begin: paddle.positive(Tensor([1693441, 3, 4, 5],"float16"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([1693441, 3, 4, 5],"float16"), ) 	 101606460 	 1000 	 0.0018928050994873047 	 0.0002009868621826172 	 1.1205673217773438e-05 	 1.2636184692382812e-05 	 0.03008580207824707 	 0.05726051330566406 	 3.409385681152344e-05 	 7.081031799316406e-05 	 combined
2025-07-27 21:04:50.191475 test begin: paddle.positive(Tensor([2, 1270081, 4, 5],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 1270081, 4, 5],"float32"), ) 	 50803240 	 1000 	 0.0018777847290039062 	 0.00020122528076171875 	 5.4836273193359375e-06 	 1.33514404296875e-05 	 0.03055548667907715 	 0.04746723175048828 	 2.09808349609375e-05 	 4.792213439941406e-05 	 combined
2025-07-27 21:04:51.936654 test begin: paddle.positive(Tensor([2, 2540161, 4, 5],"float16"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 2540161, 4, 5],"float16"), ) 	 101606440 	 1000 	 0.0018987655639648438 	 0.00019979476928710938 	 5.9604644775390625e-06 	 1.4066696166992188e-05 	 0.030060529708862305 	 0.05073189735412598 	 1.7404556274414062e-05 	 7.700920104980469e-05 	 combined
2025-07-27 21:04:55.950868 test begin: paddle.positive(Tensor([2, 3, 1693441, 5],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 3, 1693441, 5],"float32"), ) 	 50803230 	 1000 	 0.0019292831420898438 	 0.00021195411682128906 	 1.0728836059570312e-05 	 1.3828277587890625e-05 	 0.03058910369873047 	 0.04772782325744629 	 2.8371810913085938e-05 	 5.53131103515625e-05 	 combined
2025-07-27 21:04:57.726494 test begin: paddle.positive(Tensor([2, 3, 3386881, 5],"float16"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 3, 3386881, 5],"float16"), ) 	 101606430 	 1000 	 0.0018584728240966797 	 0.00020694732666015625 	 5.9604644775390625e-06 	 1.3589859008789062e-05 	 0.05023503303527832 	 0.0485074520111084 	 3.814697265625e-05 	 6.723403930664062e-05 	 combined
2025-07-27 21:05:01.741187 test begin: paddle.positive(Tensor([2, 3, 4, 2116801],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 3, 4, 2116801],"float32"), ) 	 50803224 	 1000 	 0.002446889877319336 	 0.00020122528076171875 	 6.9141387939453125e-06 	 1.3589859008789062e-05 	 0.031115293502807617 	 0.047837018966674805 	 3.552436828613281e-05 	 7.414817810058594e-05 	 combined
2025-07-27 21:05:03.513143 test begin: paddle.positive(Tensor([2, 3, 4, 4233601],"float16"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([2, 3, 4, 4233601],"float16"), ) 	 101606424 	 1000 	 0.0018963813781738281 	 0.00019931793212890625 	 5.245208740234375e-06 	 1.3113021850585938e-05 	 0.030228376388549805 	 0.049085378646850586 	 1.430511474609375e-05 	 6.270408630371094e-05 	 combined
2025-07-27 21:05:07.576308 test begin: paddle.positive(Tensor([49613, 1024],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([49613, 1024],"float32"), ) 	 50803712 	 1000 	 0.0018687248229980469 	 0.0002002716064453125 	 5.4836273193359375e-06 	 1.33514404296875e-05 	 0.03068089485168457 	 0.04663515090942383 	 3.647804260253906e-05 	 5.602836608886719e-05 	 combined
2025-07-27 21:05:09.328372 test begin: paddle.positive(Tensor([846721, 3, 4, 5],"float32"), )
[Prof] paddle.positive 	 paddle.positive(Tensor([846721, 3, 4, 5],"float32"), ) 	 50803260 	 1000 	 0.0018558502197265625 	 0.0002009868621826172 	 6.67572021484375e-06 	 1.4066696166992188e-05 	 0.031204700469970703 	 0.054625749588012695 	 2.3603439331054688e-05 	 8.225440979003906e-05 	 combined
2025-07-27 21:05:11.140774 test begin: paddle.pow(Tensor([1024, 1024, 25],"float64"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([1024, 1024, 25],"float64"), 2, ) 	 26214400 	 1000 	 0.5951509475708008 	 0.3076810836791992 	 0.5811252593994141 	 0.288100004196167 	 0.6252238750457764 	 1.0843842029571533 	 0.5614919662475586 	 0.3694155216217041 	 
2025-07-27 21:05:14.929162 test begin: paddle.pow(Tensor([1024, 1024, 49],"float32"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([1024, 1024, 49],"float32"), 2, ) 	 51380224 	 1000 	 0.3732593059539795 	 0.30108189582824707 	 0.36042261123657227 	 0.28830790519714355 	 0.4586920738220215 	 1.063915491104126 	 0.40221285820007324 	 0.362393856048584 	 
2025-07-27 21:05:18.928035 test begin: paddle.pow(Tensor([1024, 3101, 8],"float64"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([1024, 3101, 8],"float64"), 2, ) 	 25403392 	 1000 	 0.5729854106903076 	 0.3028693199157715 	 0.563260555267334 	 0.2856886386871338 	 0.6060006618499756 	 1.0538349151611328 	 0.5500757694244385 	 0.35939526557922363 	 
2025-07-27 21:05:22.583276 test begin: paddle.pow(Tensor([1024, 6202, 8],"float32"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([1024, 6202, 8],"float32"), 2, ) 	 50806784 	 1000 	 0.36913251876831055 	 0.2980327606201172 	 0.35929131507873535 	 0.2799065113067627 	 0.45241308212280273 	 1.0549545288085938 	 0.39721131324768066 	 0.35986828804016113 	 
2025-07-27 21:05:26.530976 test begin: paddle.pow(Tensor([22, 81, 94, 311],"float32"), 2.0, )
[Prof] paddle.pow 	 paddle.pow(Tensor([22, 81, 94, 311],"float32"), 2.0, ) 	 52094988 	 1000 	 0.37862539291381836 	 0.3054237365722656 	 0.36097288131713867 	 0.28485822677612305 	 0.4635591506958008 	 1.0842235088348389 	 0.39989399909973145 	 0.2778034210205078 	 
2025-07-27 21:05:30.569800 test begin: paddle.pow(Tensor([3101, 1024, 8],"float64"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([3101, 1024, 8],"float64"), 2, ) 	 25403392 	 1000 	 0.5744502544403076 	 0.31685733795166016 	 0.5570540428161621 	 0.2853386402130127 	 0.6045286655426025 	 1.0511813163757324 	 0.5466921329498291 	 0.35807108879089355 	 
2025-07-27 21:05:37.172049 test begin: paddle.pow(Tensor([4, 435, 94, 311],"float32"), 2.0, )
[Prof] paddle.pow 	 paddle.pow(Tensor([4, 435, 94, 311],"float32"), 2.0, ) 	 50867160 	 1000 	 0.5984196662902832 	 0.31433558464050293 	 0.35280728340148926 	 0.2773160934448242 	 0.4530904293060303 	 1.0619473457336426 	 0.38770008087158203 	 0.2713797092437744 	 
2025-07-27 21:05:42.740411 test begin: paddle.pow(Tensor([4, 81, 505, 311],"float32"), 2.0, )
[Prof] paddle.pow 	 paddle.pow(Tensor([4, 81, 505, 311],"float32"), 2.0, ) 	 50885820 	 1000 	 0.3700425624847412 	 0.2982823848724365 	 0.353283166885376 	 0.27769970893859863 	 0.4531433582305908 	 1.0568633079528809 	 0.38620734214782715 	 0.27028632164001465 	 
2025-07-27 21:05:46.920893 test begin: paddle.pow(Tensor([4, 81, 94, 1669],"float32"), 2.0, )
[Prof] paddle.pow 	 paddle.pow(Tensor([4, 81, 94, 1669],"float32"), 2.0, ) 	 50831064 	 1000 	 0.36933231353759766 	 0.29802966117858887 	 0.3525974750518799 	 0.27785325050354004 	 0.4528021812438965 	 1.0557453632354736 	 0.387556791305542 	 0.26993489265441895 	 
2025-07-27 21:05:50.815644 test begin: paddle.pow(Tensor([6202, 1024, 8],"float32"), 2, )
[Prof] paddle.pow 	 paddle.pow(Tensor([6202, 1024, 8],"float32"), 2, ) 	 50806784 	 1000 	 0.3721601963043213 	 0.2978658676147461 	 0.36092686653137207 	 0.28490662574768066 	 0.45226407051086426 	 1.052323341369629 	 0.39412569999694824 	 0.3585209846496582 	 
2025-07-27 21:05:54.756066 test begin: paddle.prod(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
Warning: The core code of paddle.prod is too complex.
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402502 	 1000 	 0.3123617172241211 	 0.03509354591369629 	 0.00021529197692871094 	 3.4809112548828125e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([10]) and output[0] has a shape of torch.Size([1, 10, 1, 1]).
2025-07-27 21:05:56.632428 test begin: paddle.prod(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402502 	 1000 	 0.32021164894104004 	 0.03508591651916504 	 0.00022530555725097656 	 4.076957702636719e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([9]) and output[0] has a shape of torch.Size([1, 1, 9, 1]).
2025-07-27 21:05:58.374127 test begin: paddle.prod(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), ) 	 25402412 	 1000 	 0.22212934494018555 	 0.023751020431518555 	 0.00018167495727539062 	 4.0531158447265625e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([10, 9]) and output[0] has a shape of torch.Size([10, 1, 9, 1]).
2025-07-27 21:06:00.014838 test begin: paddle.prod(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402412 	 1000 	 5.669684886932373 	 0.03470349311828613 	 0.005496025085449219 	 4.696846008300781e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([9]) and output[0] has a shape of torch.Size([1, 1, 1, 9]).
2025-07-27 21:06:07.161216 test begin: paddle.prod(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), ) 	 25402052 	 1000 	 0.31641244888305664 	 0.023814916610717773 	 0.00028395652770996094 	 5.459785461425781e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([10, 56449]) and output[0] has a shape of torch.Size([10, 1, 56449, 1]).
2025-07-27 21:06:08.915846 test begin: paddle.prod(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), )
[Prof] paddle.prod 	 paddle.prod(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), ) 	 25402052 	 1000 	 0.1998000144958496 	 0.023550748825073242 	 0.0001647472381591797 	 3.314018249511719e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([10, 9]) and output[0] has a shape of torch.Size([10, 1, 9, 1]).
2025-07-27 21:06:10.542977 test begin: paddle.prod(Tensor([16, 3175201],"float32"), -1, )
[Prof] paddle.prod 	 paddle.prod(Tensor([16, 3175201],"float32"), -1, ) 	 50803216 	 1000 	 0.17828679084777832 	 0.15251541137695312 	 0.09109091758728027 	 0.07790374755859375 	 0.7920548915863037 	 1.5820062160491943 	 0.7328712940216064 	 0.000640869140625 	 
2025-07-27 21:06:14.305683 test begin: paddle.prod(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
[Prof] paddle.prod 	 paddle.prod(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], ) 	 25402412 	 1000 	 0.327333927154541 	 0.05380964279174805 	 0.00021028518676757812 	 4.124641418457031e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([10]) and output[0] has a shape of torch.Size([1, 10, 1, 1]).
2025-07-27 21:06:16.087952 test begin: paddle.prod(Tensor([49613, 1024],"float32"), -1, )
[Prof] paddle.prod 	 paddle.prod(Tensor([49613, 1024],"float32"), -1, ) 	 50803712 	 1000 	 0.14649033546447754 	 0.14738750457763672 	 0.11827588081359863 	 0.1337885856628418 	 0.7923741340637207 	 1.6067070960998535 	 0.7258279323577881 	 0.0006148815155029297 	 
2025-07-27 21:06:19.647805 test begin: paddle.prod(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), )
[Prof] paddle.prod 	 paddle.prod(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), ) 	 25402007 	 1000 	 0.5135116577148438 	 0.023682355880737305 	 0.0004589557647705078 	 4.5299530029296875e-05 	 None 	 None 	 None 	 None 	 
[Error] Mismatch in shape: grad_output[0] has a shape of torch.Size([5, 9]) and output[0] has a shape of torch.Size([1, 5, 1, 9]).
2025-07-27 21:06:21.627588 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, ) 	 25402750 	 1000 	 39.44496417045593 	 52.652095317840576 	 0.03877830505371094 	 17.95486307144165 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:08:56.453870 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([2032129, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([2032129, 5, 5],"float32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.13505077362060547 	 0.027473926544189453 	 2.1696090698242188e-05 	 5.555152893066406e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 21:08:56.722940 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 2032129, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 2032129, 5],"float32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.13517093658447266 	 0.027208566665649414 	 2.288818359375e-05 	 4.673004150390625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:17:57.272846 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 2032129],"float32"), 1, "mul", True, False, )
W0727 19:17:57.475715 160412 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 2032129],"float32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.12767291069030762 	 0.027456283569335938 	 4.076957702636719e-05 	 5.078315734863281e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:17:58.153049 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 2032129, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 2032129, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 46.471052408218384 	 46.16296195983887 	 0.04587411880493164 	 15.74138331413269 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:21:31.581410 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([2032129, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([2032129, 5, 5],"int32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.1311964988708496 	 0.025563716888427734 	 2.4318695068359375e-05 	 3.647804260253906e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:21:31.826396 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 2032129, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 2032129, 5],"int32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.12752795219421387 	 0.025830984115600586 	 1.9073486328125e-05 	 3.218650817871094e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:21:32.066338 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 2032129],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 2032129],"int32"), 1, "mul", True, False, ) 	 50804350 	 1000 	 0.13031363487243652 	 0.025684833526611328 	 1.049041748046875e-05 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:21:32.307895 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, ) 	 25402750 	 1000 	 26.317514419555664 	 25.266167402267456 	 0.025421619415283203 	 8.619263410568237 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:24.365776 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([1016065, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([1016065, 5, 5],"int64"), 1, "mul", True, False, ) 	 25402750 	 1000 	 0.12895941734313965 	 0.025659561157226562 	 1.33514404296875e-05 	 3.528594970703125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:24.608264 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 1016065, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 1016065, 5],"int64"), 1, "mul", True, False, ) 	 25402750 	 1000 	 0.13117671012878418 	 0.02580738067626953 	 1.0251998901367188e-05 	 3.123283386230469e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:24.852170 test begin: paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 1016065],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 1016065],"int64"), 1, "mul", True, False, ) 	 25402750 	 1000 	 0.1340932846069336 	 0.025734663009643555 	 2.193450927734375e-05 	 4.00543212890625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:25.097552 test begin: paddle.put_along_axis(Tensor([10, 10, 254017],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 254017],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, ) 	 25401950 	 1000 	 0.37588977813720703 	 0.6307358741760254 	 0.00030994415283203125 	 0.12862706184387207 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:27.322419 test begin: paddle.put_along_axis(Tensor([10, 10, 508033],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 508033],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.3747732639312744 	 0.6308772563934326 	 0.00029659271240234375 	 0.1286613941192627 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:23:30.428798 test begin: paddle.put_along_axis(Tensor([10, 10, 508033],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 10, 508033],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.3717305660247803 	 0.6307821273803711 	 0.0003046989440917969 	 0.12865114212036133 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:33.077204 test begin: paddle.put_along_axis(Tensor([10, 254017, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 254017, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, ) 	 25401950 	 1000 	 0.3798072338104248 	 0.6301944255828857 	 0.000308990478515625 	 0.12853360176086426 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:37.505174 test begin: paddle.put_along_axis(Tensor([10, 508033, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 508033, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.3785207271575928 	 0.630089521408081 	 0.00030159950256347656 	 0.12851738929748535 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:23:42.391779 test begin: paddle.put_along_axis(Tensor([10, 508033, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([10, 508033, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.3733041286468506 	 0.630079984664917 	 0.00030350685119628906 	 0.12849903106689453 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:23:45.253008 test begin: paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([254017, 5, 5],"int64"), Tensor([254017, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([254017, 5, 5],"int64"), Tensor([254017, 5, 5],"int64"), 1, "mul", True, False, ) 	 38102550 	 1000 	 0.8281452655792236 	 1.029857873916626 	 0.0006248950958251953 	 0.2104966640472412 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:24:02.238750 test begin: paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, ) 	 25401950 	 1000 	 0.37731099128723145 	 0.6310074329376221 	 0.0003082752227783203 	 0.12874484062194824 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:24:04.476407 test begin: paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([254017, 5, 5],"int64"), Tensor([508033, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([254017, 5, 5],"int64"), Tensor([508033, 5, 5],"float32"), 1, "mul", True, False, ) 	 69854550 	 1000 	 0.783501386642456 	 0.9547083377838135 	 0.0005741119384765625 	 0.19504261016845703 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:24:21.909116 test begin: paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.3739657402038574 	 0.630666971206665 	 0.0002982616424560547 	 0.12863445281982422 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:24:25.023277 test begin: paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, ) 	 50803550 	 1000 	 0.37259387969970703 	 0.6306242942810059 	 0.00030350685119628906 	 0.12862181663513184 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:24:27.685330 test begin: paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([508033, 5, 5],"int32"), Tensor([508033, 5, 5],"int32"), 1, "mul", True, False, )
[Prof] paddle.put_along_axis 	 paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([508033, 5, 5],"int32"), Tensor([508033, 5, 5],"int32"), 1, "mul", True, False, ) 	 76204950 	 1000 	 1.0518138408660889 	 1.2580146789550781 	 0.0008327960968017578 	 0.2572653293609619 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:00.204172 test begin: paddle.rad2deg(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.5187373161315918 	 0.2979443073272705 	 0.28080153465270996 	 0.28369975090026855 	 0.296156644821167 	 0.2978055477142334 	 0.24339079856872559 	 0.23021411895751953 	 
2025-07-27 19:25:04.934663 test begin: paddle.rad2deg(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.29613494873046875 	 0.29781579971313477 	 0.2809610366821289 	 0.2832655906677246 	 0.29610347747802734 	 0.2976839542388916 	 0.24535870552062988 	 0.2355968952178955 	 
2025-07-27 19:25:07.837706 test begin: paddle.rad2deg(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.2969400882720947 	 0.29794788360595703 	 0.2816307544708252 	 0.28302955627441406 	 0.29615163803100586 	 0.2977023124694824 	 0.24569344520568848 	 0.23316621780395508 	 
2025-07-27 19:25:10.729945 test begin: paddle.rad2deg(x=Tensor([1587601, 4, 4],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([1587601, 4, 4],"float64"), ) 	 25401616 	 1000 	 0.2981255054473877 	 0.29828786849975586 	 0.2831413745880127 	 0.28440070152282715 	 0.29787588119506836 	 0.2982931137084961 	 0.24908041954040527 	 0.23638343811035156 	 
2025-07-27 19:25:12.977275 test begin: paddle.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.2980949878692627 	 0.3050832748413086 	 0.2830631732940674 	 0.2843146324157715 	 0.29788851737976074 	 0.298403263092041 	 0.24891042709350586 	 0.23267006874084473 	 
2025-07-27 19:25:15.227211 test begin: paddle.rad2deg(x=Tensor([4, 1587601, 4],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([4, 1587601, 4],"float64"), ) 	 25401616 	 1000 	 0.29810595512390137 	 0.29834675788879395 	 0.2831141948699951 	 0.2844083309173584 	 0.297868013381958 	 0.298372745513916 	 0.24862241744995117 	 0.23572111129760742 	 
2025-07-27 19:25:17.492434 test begin: paddle.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.29808878898620605 	 0.2984488010406494 	 0.2831082344055176 	 0.2826106548309326 	 0.297882080078125 	 0.2983849048614502 	 0.24866151809692383 	 0.2353060245513916 	 
2025-07-27 19:25:19.774987 test begin: paddle.rad2deg(x=Tensor([4, 4, 1587601],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([4, 4, 1587601],"float64"), ) 	 25401616 	 1000 	 0.29820919036865234 	 0.29840707778930664 	 0.2795255184173584 	 0.2825186252593994 	 0.29819369316101074 	 0.29835033416748047 	 0.24669909477233887 	 0.23609685897827148 	 
2025-07-27 19:25:22.038129 test begin: paddle.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.298114538192749 	 0.2983856201171875 	 0.28314971923828125 	 0.28426289558410645 	 0.29785943031311035 	 0.29842066764831543 	 0.24796509742736816 	 0.23372697830200195 	 
2025-07-27 19:25:24.346375 test begin: paddle.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.rad2deg 	 paddle.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 0.2981545925140381 	 0.30013489723205566 	 0.2824094295501709 	 0.28402090072631836 	 0.29790449142456055 	 0.29831576347351074 	 0.24808859825134277 	 0.2348029613494873 	 
2025-07-27 19:25:26.585250 test begin: paddle.rank(Tensor([10160641, 5],"float32"), )
[Prof] paddle.rank 	 paddle.rank(Tensor([10160641, 5],"float32"), ) 	 50803205 	 1000 	 0.04085111618041992 	 0.02827167510986328 	 1.9073486328125e-05 	 4.506111145019531e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:27.488234 test begin: paddle.rank(Tensor([3, 16934401],"float32"), )
[Prof] paddle.rank 	 paddle.rank(Tensor([3, 16934401],"float32"), ) 	 50803203 	 1000 	 0.04481148719787598 	 0.02850174903869629 	 2.956390380859375e-05 	 4.100799560546875e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:28.407300 test begin: paddle.rank(input=Tensor([12700801, 2],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([12700801, 2],"float64"), ) 	 25401602 	 1000 	 0.05652022361755371 	 0.027977466583251953 	 2.9087066650390625e-05 	 3.314018249511719e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:29.040853 test begin: paddle.rank(input=Tensor([2, 12700801],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([2, 12700801],"float64"), ) 	 25401602 	 1000 	 0.03967404365539551 	 0.02861618995666504 	 1.7642974853515625e-05 	 5.078315734863281e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:29.658600 test begin: paddle.rank(input=Tensor([3, 2, 2, 2116801],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([3, 2, 2, 2116801],"float64"), ) 	 25401612 	 1000 	 0.04172253608703613 	 0.028934001922607422 	 1.9788742065429688e-05 	 4.291534423828125e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:30.278080 test begin: paddle.rank(input=Tensor([3, 2, 2116801, 2],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([3, 2, 2116801, 2],"float64"), ) 	 25401612 	 1000 	 0.03896450996398926 	 0.028353452682495117 	 1.6450881958007812e-05 	 4.124641418457031e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:30.893581 test begin: paddle.rank(input=Tensor([3, 2116801, 2, 2],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([3, 2116801, 2, 2],"float64"), ) 	 25401612 	 1000 	 0.03914785385131836 	 0.02823662757873535 	 1.621246337890625e-05 	 3.3855438232421875e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:31.508391 test begin: paddle.rank(input=Tensor([3175201, 2, 2, 2],"float64"), )
[Prof] paddle.rank 	 paddle.rank(input=Tensor([3175201, 2, 2, 2],"float64"), ) 	 25401608 	 1000 	 0.03941607475280762 	 0.0294036865234375 	 1.52587890625e-05 	 5.435943603515625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:25:32.126938 test begin: paddle.reciprocal(Tensor([125, 1, 640, 640],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([125, 1, 640, 640],"float32"), ) 	 51200000 	 1000 	 0.30055665969848633 	 0.30071353912353516 	 0.2896888256072998 	 0.2901034355163574 	 0.4539790153503418 	 1.0484004020690918 	 0.393754243850708 	 0.357158899307251 	 
2025-07-27 19:25:37.539433 test begin: paddle.reciprocal(Tensor([16, 1, 4962, 640],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([16, 1, 4962, 640],"float32"), ) 	 50810880 	 1000 	 0.8213033676147461 	 0.2982361316680908 	 0.2872812747955322 	 0.28771018981933594 	 0.4505164623260498 	 1.04048752784729 	 0.3996572494506836 	 0.35446810722351074 	 
2025-07-27 19:25:42.387149 test begin: paddle.reciprocal(Tensor([16, 1, 640, 4962],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([16, 1, 640, 4962],"float32"), ) 	 50810880 	 1000 	 0.2959320545196533 	 0.2982926368713379 	 0.28648805618286133 	 0.28716492652893066 	 0.45053982734680176 	 1.0405185222625732 	 0.3943619728088379 	 0.3545114994049072 	 
2025-07-27 19:25:46.158041 test begin: paddle.reciprocal(Tensor([16, 8, 640, 640],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([16, 8, 640, 640],"float32"), ) 	 52428800 	 1000 	 0.3059074878692627 	 0.3075590133666992 	 0.2967524528503418 	 0.29701852798461914 	 0.46457839012145996 	 1.0735595226287842 	 0.412883996963501 	 0.3660295009613037 	 
2025-07-27 19:25:50.037811 test begin: paddle.reciprocal(Tensor([4, 1, 13231, 960],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([4, 1, 13231, 960],"float32"), ) 	 50807040 	 1000 	 0.2999911308288574 	 0.2982158660888672 	 0.28731513023376465 	 0.2875790596008301 	 0.4504058361053467 	 1.0404722690582275 	 0.39761972427368164 	 0.35447168350219727 	 
2025-07-27 19:25:53.737604 test begin: paddle.reciprocal(Tensor([4, 1, 960, 13231],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([4, 1, 960, 13231],"float32"), ) 	 50807040 	 1000 	 0.2959601879119873 	 0.29813146591186523 	 0.28741025924682617 	 0.28757762908935547 	 0.450214147567749 	 1.0404624938964844 	 0.39908719062805176 	 0.35445642471313477 	 
2025-07-27 19:25:57.512719 test begin: paddle.reciprocal(Tensor([4, 14, 960, 960],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([4, 14, 960, 960],"float32"), ) 	 51609600 	 1000 	 0.3005852699279785 	 0.30279994010925293 	 0.29177355766296387 	 0.29185986518859863 	 0.45737338066101074 	 1.0568532943725586 	 0.40626096725463867 	 0.36005377769470215 	 
2025-07-27 19:26:01.334168 test begin: paddle.reciprocal(Tensor([56, 1, 960, 960],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([56, 1, 960, 960],"float32"), ) 	 51609600 	 1000 	 0.30057811737060547 	 0.3057577610015869 	 0.29163527488708496 	 0.29186511039733887 	 0.45740532875061035 	 1.056913137435913 	 0.4064483642578125 	 0.3601512908935547 	 
2025-07-27 19:26:07.841557 test begin: paddle.reciprocal(Tensor([8, 1, 6616, 960],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([8, 1, 6616, 960],"float32"), ) 	 50810880 	 1000 	 0.29599523544311523 	 0.2982165813446045 	 0.2873725891113281 	 0.2876572608947754 	 0.45038485527038574 	 1.040459394454956 	 0.3988828659057617 	 0.3544626235961914 	 
2025-07-27 19:26:11.655014 test begin: paddle.reciprocal(Tensor([8, 1, 960, 6616],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([8, 1, 960, 6616],"float32"), ) 	 50810880 	 1000 	 0.2960376739501953 	 0.3017721176147461 	 0.28740358352661133 	 0.28768253326416016 	 0.45038580894470215 	 1.0404646396636963 	 0.39926886558532715 	 0.35448741912841797 	 
2025-07-27 19:26:15.476481 test begin: paddle.reciprocal(Tensor([8, 7, 960, 960],"float32"), )
[Prof] paddle.reciprocal 	 paddle.reciprocal(Tensor([8, 7, 960, 960],"float32"), ) 	 51609600 	 1000 	 0.3005547523498535 	 0.3028531074523926 	 0.29167985916137695 	 0.2918562889099121 	 0.4573476314544678 	 1.0567808151245117 	 0.38386058807373047 	 0.3600180149078369 	 
2025-07-27 19:26:19.295818 test begin: paddle.reduce_as(Tensor([30, 1270081, 40],"float32"), Tensor([1270081, 40],"float32"), )
[Prof] paddle.reduce_as 	 paddle.reduce_as(Tensor([30, 1270081, 40],"float32"), Tensor([1270081, 40],"float32"), ) 	 1574900440 	 1000 	 5.190990924835205 	 5.343921899795532 	 5.179486989974976 	 1.365412950515747 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:27:06.402913 test begin: paddle.reduce_as(Tensor([30, 200, 254017],"float32"), Tensor([200, 254017],"float32"), )
[Prof] paddle.reduce_as 	 paddle.reduce_as(Tensor([30, 200, 254017],"float32"), Tensor([200, 254017],"float32"), ) 	 1574905400 	 1000 	 5.1926350593566895 	 5.344161510467529 	 5.179704427719116 	 1.3654229640960693 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:27:54.393966 test begin: paddle.reduce_as(Tensor([30, 200, 8468],"float32"), Tensor([200, 8468],"float32"), )
[Prof] paddle.reduce_as 	 paddle.reduce_as(Tensor([30, 200, 8468],"float32"), Tensor([200, 8468],"float32"), ) 	 52501600 	 1000 	 0.17778301239013672 	 0.15550565719604492 	 0.16656780242919922 	 0.12119317054748535 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:27:55.783501 test begin: paddle.reduce_as(Tensor([30, 42337, 40],"float32"), Tensor([42337, 40],"float32"), )
[Prof] paddle.reduce_as 	 paddle.reduce_as(Tensor([30, 42337, 40],"float32"), Tensor([42337, 40],"float32"), ) 	 52497880 	 1000 	 0.17884492874145508 	 0.15738511085510254 	 0.16787314414978027 	 0.12267446517944336 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:27:57.183187 test begin: paddle.reduce_as(Tensor([6351, 200, 40],"float32"), Tensor([200, 40],"float32"), )
[Prof] paddle.reduce_as 	 paddle.reduce_as(Tensor([6351, 200, 40],"float32"), Tensor([200, 40],"float32"), ) 	 50816000 	 1000 	 0.2600865364074707 	 0.15567898750305176 	 0.13290143013000488 	 0.0795140266418457 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 19:27:58.545337 test begin: paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"float32"), Tensor([1, 2, 1270081, 4, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"float32"), Tensor([1, 2, 1270081, 4, 5],"float32"), ) 	 101606480 	 1000 	 0.4501168727874756 	 0.44946837425231934 	 0.44045329093933105 	 0.43796372413635254 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:01.111558 test begin: paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"int32"), Tensor([1, 2, 1270081, 4, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"int32"), Tensor([1, 2, 1270081, 4, 5],"int32"), ) 	 101606480 	 1000 	 0.4500601291656494 	 0.449634313583374 	 0.44043588638305664 	 0.4383864402770996 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:03.181240 test begin: paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"float32"), Tensor([1, 2, 3, 1693441, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"float32"), Tensor([1, 2, 3, 1693441, 5],"float32"), ) 	 101606460 	 1000 	 0.4500699043273926 	 0.44930458068847656 	 0.44055676460266113 	 0.43755173683166504 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:05.686305 test begin: paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"int32"), Tensor([1, 2, 3, 1693441, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"int32"), Tensor([1, 2, 3, 1693441, 5],"int32"), ) 	 101606460 	 1000 	 0.45018649101257324 	 0.4496917724609375 	 0.4406092166900635 	 0.4375925064086914 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:07.726397 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 1058401],"float64"), Tensor([1, 2, 3, 4, 1058401],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 1058401],"float64"), Tensor([1, 2, 3, 4, 1058401],"float64"), ) 	 50803248 	 1000 	 0.44663572311401367 	 0.45665454864501953 	 0.43735551834106445 	 0.4452228546142578 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:09.665265 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"float32"), Tensor([1, 2, 3, 4, 2116801],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"float32"), Tensor([1, 2, 3, 4, 2116801],"float32"), ) 	 101606448 	 1000 	 0.4499940872192383 	 0.4494338035583496 	 0.4405086040496826 	 0.43823790550231934 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:12.185476 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"int32"), Tensor([1, 2, 3, 4, 2116801],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"int32"), Tensor([1, 2, 3, 4, 2116801],"int32"), ) 	 101606448 	 1000 	 0.45014214515686035 	 0.4524533748626709 	 0.4405100345611572 	 0.43810367584228516 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:14.280287 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), ) 	 50803440 	 1000 	 0.297727108001709 	 0.342756986618042 	 0.2873077392578125 	 0.31927061080932617 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:16.863402 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), ) 	 25401840 	 1000 	 0.4330263137817383 	 0.37173032760620117 	 0.42292046546936035 	 0.3550398349761963 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:19.424156 test begin: paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), ) 	 50803440 	 1000 	 0.3000524044036865 	 0.34323859214782715 	 0.2894585132598877 	 0.33135104179382324 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:20.637513 test begin: paddle.remainder(Tensor([1, 2, 3, 846721, 5],"float64"), Tensor([1, 2, 3, 846721, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 3, 846721, 5],"float64"), Tensor([1, 2, 3, 846721, 5],"float64"), ) 	 50803260 	 1000 	 0.4466423988342285 	 0.4565756320953369 	 0.43756651878356934 	 0.44519996643066406 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:22.574085 test begin: paddle.remainder(Tensor([1, 2, 635041, 4, 5],"float64"), Tensor([1, 2, 635041, 4, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 2, 635041, 4, 5],"float64"), Tensor([1, 2, 635041, 4, 5],"float64"), ) 	 50803280 	 1000 	 0.4465796947479248 	 0.4566843509674072 	 0.43746137619018555 	 0.44518065452575684 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:24.588691 test begin: paddle.remainder(Tensor([1, 423361, 3, 4, 5],"float64"), Tensor([1, 423361, 3, 4, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 423361, 3, 4, 5],"float64"), Tensor([1, 423361, 3, 4, 5],"float64"), ) 	 50803320 	 1000 	 0.44657230377197266 	 0.45666956901550293 	 0.4373199939727783 	 0.44551753997802734 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:26.588295 test begin: paddle.remainder(Tensor([1, 846721, 3, 4, 5],"float32"), Tensor([1, 846721, 3, 4, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 846721, 3, 4, 5],"float32"), Tensor([1, 846721, 3, 4, 5],"float32"), ) 	 101606520 	 1000 	 0.4500300884246826 	 0.4493553638458252 	 0.4405646324157715 	 0.43712425231933594 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:29.126114 test begin: paddle.remainder(Tensor([1, 846721, 3, 4, 5],"int32"), Tensor([1, 846721, 3, 4, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([1, 846721, 3, 4, 5],"int32"), Tensor([1, 846721, 3, 4, 5],"int32"), ) 	 101606520 	 1000 	 0.4500720500946045 	 0.4496426582336426 	 0.44048213958740234 	 0.4383268356323242 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:31.176598 test begin: paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), ) 	 25401840 	 1000 	 0.40009188652038574 	 0.36367249488830566 	 0.38997864723205566 	 0.35157036781311035 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:32.462391 test begin: paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), ) 	 50803440 	 1000 	 0.4468221664428711 	 0.4604032039642334 	 0.4376349449157715 	 0.44510579109191895 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:34.447668 test begin: paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), ) 	 50803440 	 1000 	 0.29685139656066895 	 1.004469633102417 	 0.2865002155303955 	 0.31945204734802246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:39.386231 test begin: paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), ) 	 101606640 	 1000 	 0.45000576972961426 	 0.4493701457977295 	 0.4402592182159424 	 0.4380788803100586 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:41.925180 test begin: paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), ) 	 50803440 	 1000 	 0.2981100082397461 	 0.33827924728393555 	 0.2875676155090332 	 0.3262052536010742 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:43.131255 test begin: paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), )
[Prof] paddle.remainder 	 paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), ) 	 101606640 	 1000 	 0.4499995708465576 	 0.4496612548828125 	 0.4401376247406006 	 0.43838024139404297 	 None 	 None 	 None 	 None 	 
2025-07-27 19:28:45.204711 test begin: paddle.renorm(Tensor([10, 20, 254017],"float32"), 1.0, -1, 2.05, )
[Prof] paddle.renorm 	 paddle.renorm(Tensor([10, 20, 254017],"float32"), 1.0, -1, 2.05, ) 	 50803400 	 1000 	 2.853586196899414 	 0.48155713081359863 	 0.7280774116516113 	 0.16390657424926758 	 5.561585426330566 	 2.9199702739715576 	 1.421034812927246 	 0.2292773723602295 	 
2025-07-27 19:28:58.793582 test begin: paddle.repeat_interleave(Tensor([1, 1500, 33869],"float32"), 5, axis=0, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([1, 1500, 33869],"float32"), 5, axis=0, ) 	 50803500 	 1000 	 1.8593730926513672 	 1.5084185600280762 	 0.9500930309295654 	 1.486454963684082 	 2.4140141010284424 	 0.874453067779541 	 0.82291579246521 	 0.7935464382171631 	 
2025-07-27 19:29:10.424015 test begin: paddle.repeat_interleave(Tensor([1, 39691, 1280],"float32"), 5, axis=0, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([1, 39691, 1280],"float32"), 5, axis=0, ) 	 50804480 	 1000 	 1.8650929927825928 	 1.734236717224121 	 0.953016996383667 	 1.46970796585083 	 2.4123940467834473 	 0.8628931045532227 	 0.8224666118621826 	 0.7812409400939941 	 
2025-07-27 19:29:24.175259 test begin: paddle.repeat_interleave(Tensor([14, 1, 384, 9451],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([14, 1, 384, 9451],"float32"), repeats=3, axis=1, ) 	 50808576 	 1000 	 1.1032660007476807 	 0.8487446308135986 	 0.5637392997741699 	 0.826650857925415 	 1.2302637100219727 	 0.5868008136749268 	 0.4193565845489502 	 0.5020580291748047 	 
2025-07-27 19:29:31.233190 test begin: paddle.repeat_interleave(Tensor([14, 1, 9451, 384],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([14, 1, 9451, 384],"float32"), repeats=3, axis=1, ) 	 50808576 	 1000 	 1.103153944015503 	 0.8630359172821045 	 0.563678503036499 	 0.8150074481964111 	 1.2295289039611816 	 0.5868420600891113 	 0.4190840721130371 	 0.5044240951538086 	 
2025-07-27 19:29:40.058015 test begin: paddle.repeat_interleave(Tensor([14, 25, 384, 384],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([14, 25, 384, 384],"float32"), repeats=3, axis=1, ) 	 51609600 	 1000 	 1.0464751720428467 	 0.730994462966919 	 0.5347476005554199 	 0.7086389064788818 	 1.203467845916748 	 0.6025941371917725 	 0.410214900970459 	 0.5137019157409668 	 
2025-07-27 19:29:47.011019 test begin: paddle.repeat_interleave(Tensor([27, 1500, 1280],"float32"), 5, axis=0, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([27, 1500, 1280],"float32"), 5, axis=0, ) 	 51840000 	 1000 	 1.6941819190979004 	 1.1080241203308105 	 0.8656461238861084 	 1.0857083797454834 	 1.875734567642212 	 0.8808279037475586 	 0.6394376754760742 	 0.7970573902130127 	 
2025-07-27 19:29:57.560874 test begin: paddle.repeat_interleave(Tensor([345, 1, 384, 384],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([345, 1, 384, 384],"float32"), repeats=3, axis=1, ) 	 50872320 	 1000 	 1.0317952632904053 	 0.7205548286437988 	 0.5267999172210693 	 0.6980166435241699 	 1.1967353820800781 	 0.5943055152893066 	 0.4078683853149414 	 0.5095992088317871 	 
2025-07-27 19:30:04.505793 test begin: paddle.repeat_interleave(Tensor([5, 1, 13231, 768],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([5, 1, 13231, 768],"float32"), repeats=3, axis=1, ) 	 50807040 	 1000 	 1.122812271118164 	 0.9039583206176758 	 0.5735650062561035 	 0.881629467010498 	 1.5039892196655273 	 0.5867724418640137 	 0.5127501487731934 	 0.4995150566101074 	 
2025-07-27 19:30:11.949144 test begin: paddle.repeat_interleave(Tensor([5, 1, 768, 13231],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([5, 1, 768, 13231],"float32"), repeats=3, axis=1, ) 	 50807040 	 1000 	 1.1227936744689941 	 0.9039750099182129 	 0.5735642910003662 	 0.8819377422332764 	 1.5045435428619385 	 0.5867674350738525 	 0.5128695964813232 	 0.5027072429656982 	 
2025-07-27 19:30:19.354886 test begin: paddle.repeat_interleave(Tensor([5, 18, 768, 768],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([5, 18, 768, 768],"float32"), repeats=3, axis=1, ) 	 53084160 	 1000 	 1.0559413433074951 	 1.1623139381408691 	 0.539405345916748 	 0.681710958480835 	 1.253885269165039 	 0.6253798007965088 	 0.4273667335510254 	 0.5419399738311768 	 
2025-07-27 19:30:29.403742 test begin: paddle.repeat_interleave(Tensor([87, 1, 768, 768],"float32"), repeats=3, axis=1, )
[Prof] paddle.repeat_interleave 	 paddle.repeat_interleave(Tensor([87, 1, 768, 768],"float32"), repeats=3, axis=1, ) 	 51314688 	 1000 	 1.020749807357788 	 0.683969259262085 	 0.5215921401977539 	 0.658128023147583 	 1.2135014533996582 	 0.6048285961151123 	 0.41373252868652344 	 0.5232579708099365 	 
2025-07-27 19:30:37.482275 test begin: paddle.reshape(Tensor([14176, 7168],"bfloat16"), list[-1,7168,], )
[Prof] paddle.reshape 	 paddle.reshape(Tensor([14176, 7168],"bfloat16"), list[-1,7168,], ) 	 101613568 	 1000 	 0.005339145660400391 	 0.00391077995300293 	 1.7881393432617188e-05 	 3.075599670410156e-05 	 0.04321765899658203 	 0.45359086990356445 	 2.6226043701171875e-05 	 0.37891197204589844 	 
2025-07-27 19:30:41.207060 test begin: paddle.reverse(Tensor([12, 132301, 16],"float64"), axis=list[0,], )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([12, 132301, 16],"float64"), axis=list[0,], ) 	 25401792 	 1000 	 0.5098869800567627 	 0.303926944732666 	 0.5007369518280029 	 0.2905118465423584 	 0.5089876651763916 	 0.3036928176879883 	 0.4606912136077881 	 0.24196624755859375 	 
2025-07-27 19:30:43.912207 test begin: paddle.reverse(Tensor([12, 264601, 8],"float64"), axis=0, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([12, 264601, 8],"float64"), axis=0, ) 	 25401696 	 1000 	 0.5101275444030762 	 0.3053717613220215 	 0.5011541843414307 	 0.29035449028015137 	 0.5093345642089844 	 0.30373167991638184 	 0.46109604835510254 	 0.24074053764343262 	 
2025-07-27 19:30:46.572464 test begin: paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=0, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=0, ) 	 25401648 	 1000 	 0.5087795257568359 	 0.3038966655731201 	 0.49980688095092773 	 0.29048609733581543 	 0.5105209350585938 	 0.30371904373168945 	 0.46192479133605957 	 0.24182438850402832 	 
2025-07-27 19:30:49.252956 test begin: paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=list[0,], )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=list[0,], ) 	 25401648 	 1000 	 0.5090169906616211 	 0.30393457412719727 	 0.4999537467956543 	 0.29058146476745605 	 0.5108523368835449 	 0.30370020866394043 	 0.46230149269104004 	 0.24086475372314453 	 
2025-07-27 19:30:51.981922 test begin: paddle.reverse(Tensor([396901, 4, 16],"float64"), axis=list[0,], )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([396901, 4, 16],"float64"), axis=list[0,], ) 	 25401664 	 1000 	 0.5031919479370117 	 0.3046889305114746 	 0.4941141605377197 	 0.2892889976501465 	 0.5046415328979492 	 0.302417516708374 	 0.45571374893188477 	 0.24008631706237793 	 
2025-07-27 19:30:54.630685 test begin: paddle.reverse(Tensor([4, 12, 529201],"float64"), axis=1, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([4, 12, 529201],"float64"), axis=1, ) 	 25401648 	 1000 	 0.5092647075653076 	 0.3057718276977539 	 0.5002632141113281 	 0.292421817779541 	 0.5102014541625977 	 0.3055562973022461 	 0.4615945816040039 	 0.24402093887329102 	 
2025-07-27 19:30:57.307626 test begin: paddle.reverse(Tensor([4, 198451, 32],"float64"), axis=1, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([4, 198451, 32],"float64"), axis=1, ) 	 25401728 	 1000 	 0.5044276714324951 	 0.3033902645111084 	 0.4953789710998535 	 0.29007768630981445 	 0.5033316612243652 	 0.3031611442565918 	 0.4547293186187744 	 0.24065303802490234 	 
2025-07-27 19:30:59.993938 test begin: paddle.reverse(Tensor([66151, 12, 32],"float64"), axis=1, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([66151, 12, 32],"float64"), axis=1, ) 	 25401984 	 1000 	 0.5034456253051758 	 0.3034474849700928 	 0.494464635848999 	 0.2900688648223877 	 0.5035421848297119 	 0.3032543659210205 	 0.4551568031311035 	 0.24017858505249023 	 
2025-07-27 19:31:02.645006 test begin: paddle.reverse(Tensor([793801, 4, 8],"float64"), axis=0, )
[Prof] paddle.reverse 	 paddle.reverse(Tensor([793801, 4, 8],"float64"), axis=0, ) 	 25401632 	 1000 	 0.504941463470459 	 0.30289196968078613 	 0.49591779708862305 	 0.28958797454833984 	 0.5048568248748779 	 0.3026587963104248 	 0.4564180374145508 	 0.23986554145812988 	 
2025-07-27 19:31:07.581779 test begin: paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), ) 	 50921472 	 1000 	 0.5458521842956543 	 0.7865500450134277 	 0.5337209701538086 	 0.40189099311828613 	 0.5460829734802246 	 0.7844805717468262 	 0.49486327171325684 	 0.40097498893737793 	 
2025-07-27 19:31:11.874357 test begin: paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), ) 	 50921472 	 1000 	 0.5460991859436035 	 0.7861568927764893 	 0.5348436832427979 	 0.4006049633026123 	 0.5459811687469482 	 0.7865293025970459 	 0.4949016571044922 	 0.4018588066101074 	 
2025-07-27 19:31:16.213698 test begin: paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), ) 	 50921472 	 1000 	 0.5457518100738525 	 0.7890069484710693 	 0.5344369411468506 	 0.40317511558532715 	 0.5457339286804199 	 0.7869060039520264 	 0.49378347396850586 	 0.40206456184387207 	 
2025-07-27 19:31:20.518779 test begin: paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), ) 	 50921472 	 1000 	 0.5460972785949707 	 0.7867796421051025 	 0.534904956817627 	 0.40204524993896484 	 0.5458338260650635 	 0.7891108989715576 	 0.49317169189453125 	 0.4031810760498047 	 
2025-07-27 19:31:24.848709 test begin: paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), ) 	 50978816 	 1000 	 0.5466094017028809 	 0.7885656356811523 	 0.535393476486206 	 0.4029388427734375 	 0.5465297698974609 	 0.786229133605957 	 0.49556708335876465 	 0.4017188549041748 	 
2025-07-27 19:31:29.166065 test begin: paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), ) 	 50978816 	 1000 	 0.5465121269226074 	 0.7872529029846191 	 0.5350804328918457 	 0.40239858627319336 	 0.546574592590332 	 0.7888319492340088 	 0.49530863761901855 	 0.40305352210998535 	 
2025-07-27 19:31:34.782885 test begin: paddle.roll(Tensor([44, 96, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([44, 96, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), ) 	 51904512 	 1000 	 0.5560946464538574 	 0.8050720691680908 	 0.5448675155639648 	 0.4077017307281494 	 0.5560224056243896 	 0.7948284149169922 	 0.5044078826904297 	 0.4060933589935303 	 
2025-07-27 19:31:39.864253 test begin: paddle.roll(Tensor([64, 65, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([64, 65, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), ) 	 51118080 	 1000 	 0.5478756427764893 	 0.7854948043823242 	 0.5349388122558594 	 0.4013843536376953 	 0.5479617118835449 	 0.7830893993377686 	 0.49655652046203613 	 0.4001023769378662 	 
2025-07-27 19:31:44.169472 test begin: paddle.roll(Tensor([64, 96, 65, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([64, 96, 65, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), ) 	 51118080 	 1000 	 0.5476727485656738 	 0.7891738414764404 	 0.5365092754364014 	 0.40189456939697266 	 0.5477285385131836 	 0.7840449810028076 	 0.494565486907959 	 0.40059876441955566 	 
2025-07-27 19:31:48.495449 test begin: paddle.roll(Tensor([64, 96, 96, 87],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([64, 96, 96, 87],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), ) 	 51314688 	 1000 	 0.5502781867980957 	 0.791999340057373 	 0.5389840602874756 	 0.4047694206237793 	 0.5499722957611084 	 0.7887928485870361 	 0.49832844734191895 	 0.4030187129974365 	 
2025-07-27 19:31:52.849504 test begin: paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), ) 	 51179520 	 1000 	 0.5486621856689453 	 0.7892823219299316 	 0.5373623371124268 	 0.40329742431640625 	 0.5485575199127197 	 0.7871990203857422 	 0.4941833019256592 	 0.402188777923584 	 
2025-07-27 19:31:57.191897 test begin: paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
[Prof] paddle.roll 	 paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), ) 	 51179520 	 1000 	 0.5486302375793457 	 0.7870521545410156 	 0.5372316837310791 	 0.40217137336730957 	 0.5487308502197266 	 0.7894318103790283 	 0.49692368507385254 	 0.40334439277648926 	 
2025-07-27 19:32:01.538182 test begin: paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.5163424015045166 	 0.30659914016723633 	 0.4924647808074951 	 0.2878286838531494 	 0.8278870582580566 	 0.30368781089782715 	 0.4227025508880615 	 0.23790454864501953 	 
2025-07-27 19:32:04.532041 test begin: paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8219597339630127 	 0.30345654487609863 	 0.41967177391052246 	 0.287172794342041 	 0.516455888748169 	 0.3032536506652832 	 0.46133875846862793 	 0.23663759231567383 	 
2025-07-27 19:32:07.538497 test begin: paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8170316219329834 	 0.30513930320739746 	 0.41715002059936523 	 0.28706812858581543 	 0.5168251991271973 	 0.3028881549835205 	 0.4604775905609131 	 0.23772382736206055 	 
2025-07-27 19:32:10.593423 test begin: paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), ) 	 25401664 	 1000 	 0.5191035270690918 	 0.3069477081298828 	 0.4957926273345947 	 0.2887551784515381 	 0.8313891887664795 	 0.30242300033569336 	 0.4247405529022217 	 0.23489880561828613 	 
2025-07-27 19:32:13.601855 test begin: paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.9545149803161621 	 0.3042464256286621 	 0.4876894950866699 	 0.2880547046661377 	 0.5219686031341553 	 0.30411553382873535 	 0.46639418601989746 	 0.23942947387695312 	 
2025-07-27 19:32:16.763904 test begin: paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8166627883911133 	 0.3034670352935791 	 0.4173612594604492 	 0.2871131896972656 	 0.5167450904846191 	 0.30288004875183105 	 0.4612448215484619 	 0.2371072769165039 	 
2025-07-27 19:32:19.747549 test begin: paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), ) 	 25401664 	 1000 	 0.5203149318695068 	 0.3043513298034668 	 0.49645376205444336 	 0.2889387607574463 	 0.8316938877105713 	 0.30370020866394043 	 0.42498326301574707 	 0.23789262771606445 	 
2025-07-27 19:32:22.782009 test begin: paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8333096504211426 	 0.30431437492370605 	 0.4258458614349365 	 0.28757405281066895 	 0.5167663097381592 	 0.3032493591308594 	 0.4615824222564697 	 0.23823332786560059 	 
2025-07-27 19:32:25.772997 test begin: paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8219039440155029 	 0.30429649353027344 	 0.4199528694152832 	 0.28798604011535645 	 0.5208754539489746 	 0.30560827255249023 	 0.4657900333404541 	 0.24102497100830078 	 
2025-07-27 19:32:28.784296 test begin: paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), ) 	 25401664 	 1000 	 0.5202465057373047 	 0.3042922019958496 	 0.49678874015808105 	 0.2890479564666748 	 0.831371545791626 	 0.3036949634552002 	 0.424757719039917 	 0.23927044868469238 	 
2025-07-27 19:32:31.814651 test begin: paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], ) 	 25401664 	 1000 	 0.8313696384429932 	 0.3202652931213379 	 0.4248051643371582 	 0.2879917621612549 	 0.5212986469268799 	 0.30614304542541504 	 0.4661273956298828 	 0.23807621002197266 	 
2025-07-27 19:32:34.831257 test begin: paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), )
[Prof] paddle.rot90 	 paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), ) 	 25401664 	 1000 	 0.8123283386230469 	 0.3106350898742676 	 0.41498851776123047 	 0.28977012634277344 	 0.5163650512695312 	 0.3028833866119385 	 0.46079158782958984 	 0.2371525764465332 	 
2025-07-27 19:32:39.542719 test begin: paddle.round(Tensor([128, 396901],"float32"), )
[Prof] paddle.round 	 paddle.round(Tensor([128, 396901],"float32"), ) 	 50803328 	 1000 	 0.2958056926727295 	 0.3093836307525635 	 0.28702688217163086 	 0.28723788261413574 	 0.13401126861572266 	 0.1342322826385498 	 0.08405709266662598 	 0.07289552688598633 	 
2025-07-27 19:32:42.490642 test begin: paddle.round(Tensor([16, 1587601],"float64"), )
[Prof] paddle.round 	 paddle.round(Tensor([16, 1587601],"float64"), ) 	 25401616 	 1000 	 0.30491137504577637 	 0.32538938522338867 	 0.2943997383117676 	 0.2879314422607422 	 0.13378500938415527 	 0.13462495803833008 	 0.0858452320098877 	 0.0745997428894043 	 
2025-07-27 19:32:45.346494 test begin: paddle.round(Tensor([396901, 128],"float32"), )
[Prof] paddle.round 	 paddle.round(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.2957625389099121 	 0.30552005767822266 	 0.28699493408203125 	 0.28725767135620117 	 0.13392257690429688 	 0.13403916358947754 	 0.08252239227294922 	 0.07486724853515625 	 
2025-07-27 19:32:47.839731 test begin: paddle.round(Tensor([99226, 256],"float64"), )
[Prof] paddle.round 	 paddle.round(Tensor([99226, 256],"float64"), ) 	 25401856 	 1000 	 0.3042163848876953 	 0.2984766960144043 	 0.29564380645751953 	 0.2877957820892334 	 0.133833646774292 	 0.1345200538635254 	 0.08504319190979004 	 0.07462549209594727 	 
2025-07-27 19:32:49.756596 test begin: paddle.round(x=Tensor([3, 3, 5644801],"float32"), )
[Prof] paddle.round 	 paddle.round(x=Tensor([3, 3, 5644801],"float32"), ) 	 50803209 	 1000 	 0.295635461807251 	 0.2977898120880127 	 0.2866523265838623 	 0.28736400604248047 	 0.13391685485839844 	 0.13401436805725098 	 0.0851888656616211 	 0.07109761238098145 	 
2025-07-27 19:32:52.270960 test begin: paddle.round(x=Tensor([3, 5644801, 3],"float32"), )
[Prof] paddle.round 	 paddle.round(x=Tensor([3, 5644801, 3],"float32"), ) 	 50803209 	 1000 	 0.2955901622772217 	 0.30015015602111816 	 0.2866086959838867 	 0.28723597526550293 	 0.1339552402496338 	 0.1340634822845459 	 0.0837090015411377 	 0.07288336753845215 	 
2025-07-27 19:32:54.775619 test begin: paddle.round(x=Tensor([5644801, 3, 3],"float32"), )
[Prof] paddle.round 	 paddle.round(x=Tensor([5644801, 3, 3],"float32"), ) 	 50803209 	 1000 	 0.295595645904541 	 0.29787540435791016 	 0.2866332530975342 	 0.28752827644348145 	 0.1339404582977295 	 0.13410735130310059 	 0.08475756645202637 	 0.07451844215393066 	 
2025-07-27 19:32:57.308903 test begin: paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], ) 	 76204872 	 1000 	 0.9544863700866699 	 0.9222660064697266 	 0.16260576248168945 	 0.9074726104736328 	 0.9378464221954346 	 0.06870794296264648 	 0.15970921516418457 	 6.556510925292969e-05 	 
2025-07-27 19:33:03.398162 test begin: paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], ) 	 25401624 	 1000 	 0.3157768249511719 	 0.3130931854248047 	 0.16133642196655273 	 0.15986871719360352 	 0.31556129455566406 	 0.05433487892150879 	 0.16119885444641113 	 5.91278076171875e-05 	 
2025-07-27 19:33:05.445946 test begin: paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.32117581367492676 	 0.32319116592407227 	 0.08220338821411133 	 0.3087022304534912 	 0.3162691593170166 	 0.06821227073669434 	 0.0809168815612793 	 6.699562072753906e-05 	 
2025-07-27 19:33:07.513587 test begin: paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.3253929615020752 	 0.32023072242736816 	 0.08299112319946289 	 0.3058159351348877 	 0.3158259391784668 	 0.06749153137207031 	 0.08048772811889648 	 3.981590270996094e-05 	 
2025-07-27 19:33:09.583526 test begin: paddle.row_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], ) 	 76204836 	 1000 	 0.9578378200531006 	 0.9149651527404785 	 0.16316509246826172 	 0.9006907939910889 	 0.9542932510375977 	 0.08827972412109375 	 0.16251063346862793 	 7.200241088867188e-05 	 
2025-07-27 19:33:15.800150 test begin: paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], ) 	 25401656 	 1000 	 0.32156896591186523 	 0.3215014934539795 	 0.0823051929473877 	 0.30724477767944336 	 0.32106781005859375 	 0.06770133972167969 	 0.08215188980102539 	 6.842613220214844e-05 	 
2025-07-27 19:33:17.878072 test begin: paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401656 	 1000 	 0.3279228210449219 	 0.31835412979125977 	 0.08361172676086426 	 0.3043503761291504 	 0.3262481689453125 	 0.06872963905334473 	 0.08317160606384277 	 5.0067901611328125e-05 	 
2025-07-27 19:33:19.974001 test begin: paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 76204980 	 1000 	 0.9457833766937256 	 0.9185631275177002 	 0.16112375259399414 	 0.9036886692047119 	 0.9457025527954102 	 0.06727766990661621 	 0.1610872745513916 	 4.1484832763671875e-05 	 
2025-07-27 19:33:26.443932 test begin: paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401660 	 1000 	 0.314486026763916 	 0.3134782314300537 	 0.16068220138549805 	 0.15984559059143066 	 0.3130009174346924 	 0.05298447608947754 	 0.15987205505371094 	 4.7206878662109375e-05 	 
2025-07-27 19:33:28.475119 test begin: paddle.row_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], ) 	 76204818 	 1000 	 0.9559600353240967 	 0.9201633930206299 	 0.16283798217773438 	 0.905747652053833 	 0.9450950622558594 	 0.06615376472473145 	 0.16096735000610352 	 4.2438507080078125e-05 	 
2025-07-27 19:33:34.521495 test begin: paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 76204890 	 1000 	 0.9555001258850098 	 0.9343085289001465 	 0.16277718544006348 	 0.9139542579650879 	 0.9433448314666748 	 0.07359600067138672 	 0.16065692901611328 	 7.653236389160156e-05 	 
2025-07-27 19:33:41.025617 test begin: paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401630 	 1000 	 0.31575703620910645 	 0.3131237030029297 	 0.16132736206054688 	 0.15985989570617676 	 0.31560611724853516 	 0.052777767181396484 	 0.16119003295898438 	 5.459785461425781e-05 	 
2025-07-27 19:33:43.065470 test begin: paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], ) 	 25401656 	 1000 	 0.32069873809814453 	 0.3086435794830322 	 0.0817720890045166 	 0.29437994956970215 	 0.31985020637512207 	 0.0664834976196289 	 0.08155107498168945 	 4.1484832763671875e-05 	 
2025-07-27 19:33:45.182301 test begin: paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], ) 	 76204824 	 1000 	 0.9554541110992432 	 0.9237475395202637 	 0.16274166107177734 	 0.9006083011627197 	 0.94191575050354 	 0.06880736351013184 	 0.16038918495178223 	 5.6743621826171875e-05 	 
2025-07-27 19:33:52.194887 test begin: paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.31969213485717773 	 0.3113102912902832 	 0.08152294158935547 	 0.2968475818634033 	 0.31299638748168945 	 0.06728601455688477 	 0.07979726791381836 	 4.363059997558594e-05 	 
2025-07-27 19:33:54.245006 test begin: paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 76204920 	 1000 	 0.9396257400512695 	 0.9222218990325928 	 0.16004562377929688 	 0.9073328971862793 	 0.9406454563140869 	 0.0719146728515625 	 0.16018223762512207 	 8.106231689453125e-05 	 
2025-07-27 19:34:00.362927 test begin: paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.row_stack 	 paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401640 	 1000 	 0.31447529792785645 	 0.3130679130554199 	 0.16068768501281738 	 0.15984582901000977 	 0.31304001808166504 	 0.055716514587402344 	 0.1599137783050537 	 3.8623809814453125e-05 	 
2025-07-27 19:34:02.404915 test begin: paddle.rsqrt(Tensor([10000, 1694, 3],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([10000, 1694, 3],"float32"), ) 	 50820000 	 1000 	 0.29585933685302734 	 0.2980787754058838 	 0.28728318214416504 	 0.28727030754089355 	 0.44942545890808105 	 1.040818452835083 	 0.39820241928100586 	 0.3546111583709717 	 
2025-07-27 19:34:06.264698 test begin: paddle.rsqrt(Tensor([10000, 2, 1271],"float64"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([10000, 2, 1271],"float64"), ) 	 25420000 	 1000 	 0.2985806465148926 	 0.29921817779541016 	 0.2903931140899658 	 0.2885472774505615 	 0.4477202892303467 	 1.0400032997131348 	 0.39556169509887695 	 0.35431337356567383 	 
2025-07-27 19:34:09.471651 test begin: paddle.rsqrt(Tensor([10000, 2, 2541],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([10000, 2, 2541],"float32"), ) 	 50820000 	 1000 	 0.2958638668060303 	 0.30249762535095215 	 0.28737401962280273 	 0.2871274948120117 	 0.44936299324035645 	 1.0407977104187012 	 0.3976304531097412 	 0.35458898544311523 	 
2025-07-27 19:34:13.268316 test begin: paddle.rsqrt(Tensor([10000, 847, 3],"float64"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([10000, 847, 3],"float64"), ) 	 25410000 	 1000 	 0.2984609603881836 	 0.2991170883178711 	 0.29028940200805664 	 0.2883338928222656 	 0.447948694229126 	 1.0396218299865723 	 0.39647746086120605 	 0.35423946380615234 	 
2025-07-27 19:34:16.422543 test begin: paddle.rsqrt(Tensor([13, 1007, 3881],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([13, 1007, 3881],"float32"), ) 	 50806171 	 1000 	 0.2956819534301758 	 0.29790449142456055 	 0.2871816158294678 	 0.28711724281311035 	 0.44925856590270996 	 1.0405826568603516 	 0.3976879119873047 	 0.3545083999633789 	 
2025-07-27 19:34:20.208989 test begin: paddle.rsqrt(Tensor([13, 3907939, 1],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([13, 3907939, 1],"float32"), ) 	 50803207 	 1000 	 0.2957439422607422 	 0.2978682518005371 	 0.2872006893157959 	 0.28696227073669434 	 0.44927978515625 	 1.0404858589172363 	 0.39765214920043945 	 0.35449671745300293 	 
2025-07-27 19:34:23.971592 test begin: paddle.rsqrt(Tensor([4233601, 2, 3],"float64"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([4233601, 2, 3],"float64"), ) 	 25401606 	 1000 	 0.29834604263305664 	 0.2990450859069824 	 0.29010581970214844 	 0.288038969039917 	 0.44800591468811035 	 1.0391545295715332 	 0.39652156829833984 	 0.3539927005767822 	 
2025-07-27 19:34:27.125895 test begin: paddle.rsqrt(Tensor([50451, 1007, 1],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([50451, 1007, 1],"float32"), ) 	 50804157 	 1000 	 0.29566001892089844 	 0.2978849411010742 	 0.2870907783508301 	 0.2869091033935547 	 0.4492206573486328 	 1.0403826236724854 	 0.39772605895996094 	 0.3544342517852783 	 
2025-07-27 19:34:30.884913 test begin: paddle.rsqrt(Tensor([8467201, 2, 3],"float32"), )
[Prof] paddle.rsqrt 	 paddle.rsqrt(Tensor([8467201, 2, 3],"float32"), ) 	 50803206 	 1000 	 0.2957279682159424 	 0.2978799343109131 	 0.2871255874633789 	 0.2870919704437256 	 0.4492685794830322 	 1.040452003479004 	 0.39756083488464355 	 0.35446667671203613 	 
2025-07-27 19:34:34.659863 test begin: paddle.scale(Tensor([2, 256, 256, 388],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([2, 256, 256, 388],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.2958195209503174 	 0.6254897117614746 	 0.2862226963043213 	 0.3044414520263672 	 0.2958042621612549 	 0.29795408248901367 	 0.24640274047851562 	 0.23081159591674805 	 combined
2025-07-27 19:34:40.743950 test begin: paddle.scale(Tensor([2, 256, 388, 256],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([2, 256, 388, 256],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.29582929611206055 	 0.5976221561431885 	 0.2862849235534668 	 0.30446696281433105 	 0.29573893547058105 	 0.2979757785797119 	 0.24636578559875488 	 0.23206162452697754 	 combined
2025-07-27 19:34:43.916924 test begin: paddle.scale(Tensor([2, 388, 256, 256],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([2, 388, 256, 256],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.2958719730377197 	 0.5958669185638428 	 0.2860126495361328 	 0.3044283390045166 	 0.2957031726837158 	 0.29791831970214844 	 0.24611330032348633 	 0.23189496994018555 	 combined
2025-07-27 19:34:47.029124 test begin: paddle.scale(Tensor([4, 194, 256, 256],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 194, 256, 256],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.29583096504211426 	 0.5958590507507324 	 0.28629446029663086 	 0.30444884300231934 	 0.29575181007385254 	 0.2980210781097412 	 0.24607014656066895 	 0.23145747184753418 	 combined
2025-07-27 19:34:50.248238 test begin: paddle.scale(Tensor([4, 256, 194, 256],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 256, 194, 256],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.29585790634155273 	 0.6018586158752441 	 0.2864093780517578 	 0.3044884204864502 	 0.29581761360168457 	 0.29796528816223145 	 0.2460174560546875 	 0.23141884803771973 	 combined
2025-07-27 19:34:56.766469 test begin: paddle.scale(Tensor([4, 256, 256, 194],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 256, 256, 194],"float32"), scale=1.1111111111111112, ) 	 50855936 	 1000 	 0.2958524227142334 	 0.5978245735168457 	 0.2863185405731201 	 0.30446743965148926 	 0.2957932949066162 	 0.298006534576416 	 0.24633550643920898 	 0.21817374229431152 	 combined
2025-07-27 19:34:59.941075 test begin: paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, ) 	 67108864 	 1000 	 0.3889343738555908 	 0.7831900119781494 	 0.37897825241088867 	 0.40018129348754883 	 0.38897013664245605 	 0.39161133766174316 	 0.3396742343902588 	 0.32557106018066406 	 combined
2025-07-27 19:35:04.055691 test begin: paddle.scale(Tensor([4, 256, 256, 388],"float16"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 256, 256, 388],"float16"), scale=1.1111111111111112, ) 	 101711872 	 1000 	 0.2986922264099121 	 0.5926094055175781 	 0.2877216339111328 	 0.3028247356414795 	 0.29875612258911133 	 0.29634571075439453 	 0.24911856651306152 	 0.2297680377960205 	 combined
2025-07-27 19:35:09.318448 test begin: paddle.scale(Tensor([4, 256, 388, 256],"float16"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 256, 388, 256],"float16"), scale=1.1111111111111112, ) 	 101711872 	 1000 	 0.2986941337585449 	 0.6057286262512207 	 0.28907275199890137 	 0.30280375480651855 	 0.298781156539917 	 0.29632067680358887 	 0.2469038963317871 	 0.2281031608581543 	 combined
2025-07-27 19:35:14.656378 test begin: paddle.scale(Tensor([4, 388, 256, 256],"float16"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([4, 388, 256, 256],"float16"), scale=1.1111111111111112, ) 	 101711872 	 1000 	 0.29866623878479004 	 0.592581033706665 	 0.2891058921813965 	 0.3028101921081543 	 0.2987484931945801 	 0.2963438034057617 	 0.24856352806091309 	 0.23020720481872559 	 combined
2025-07-27 19:35:19.907362 test begin: paddle.scale(Tensor([7, 256, 256, 256],"float16"), scale=1.1111111111111112, )
[Prof] paddle.scale 	 paddle.scale(Tensor([7, 256, 256, 256],"float16"), scale=1.1111111111111112, ) 	 117440512 	 1000 	 0.34417176246643066 	 0.6849508285522461 	 0.3337287902832031 	 0.34902429580688477 	 0.3442068099975586 	 0.3416175842285156 	 0.29451513290405273 	 0.2754507064819336 	 combined
2025-07-27 19:35:25.979835 test begin: paddle.scatter(Tensor([262144, 194],"float32"), Tensor([197],"int32"), Tensor([197, 194],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 194],"float32"), Tensor([197],"int32"), Tensor([197, 194],"float32"), overwrite=True, ) 	 50894351 	 1000 	 0.311964750289917 	 6.700680732727051 	 0.15939998626708984 	 0.00024247169494628906 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:35:35.083843 test begin: paddle.scatter(Tensor([262144, 194],"float32"), Tensor([205],"int32"), Tensor([205, 194],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 194],"float32"), Tensor([205],"int32"), Tensor([205, 194],"float32"), overwrite=True, ) 	 50895911 	 1000 	 0.3116941452026367 	 7.046721458435059 	 0.15925836563110352 	 0.0002040863037109375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:35:45.211003 test begin: paddle.scatter(Tensor([262144, 194],"float32"), Tensor([219],"int32"), Tensor([219, 194],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 194],"float32"), Tensor([219],"int32"), Tensor([219, 194],"float32"), overwrite=True, ) 	 50898641 	 1000 	 0.3113899230957031 	 7.194400787353516 	 0.15910816192626953 	 0.0002200603485107422 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:35:54.730586 test begin: paddle.scatter(Tensor([262144, 2314],"float32"), Tensor([219],"int32"), Tensor([219, 2314],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 2314],"float32"), Tensor([219],"int32"), Tensor([219, 2314],"float32"), overwrite=True, ) 	 607108201 	 1000 	 3.601419687271118 	 7.233240604400635 	 1.2241034507751465 	 8.225440979003906e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:36:29.139055 test begin: paddle.scatter(Tensor([262144, 2476],"float32"), Tensor([205],"int32"), Tensor([205, 2476],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 2476],"float32"), Tensor([205],"int32"), Tensor([205, 2476],"float32"), overwrite=True, ) 	 649576329 	 1000 	 4.716948747634888 	 6.7903993129730225 	 1.310598373413086 	 7.224082946777344e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:37:08.475164 test begin: paddle.scatter(Tensor([262144, 2569],"float32"), Tensor([197],"int32"), Tensor([197, 2569],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 2569],"float32"), Tensor([197],"int32"), Tensor([197, 2569],"float32"), overwrite=True, ) 	 673954226 	 1000 	 3.999145746231079 	 7.461788654327393 	 1.358710527420044 	 7.05718994140625e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:37:47.987709 test begin: paddle.scatter(Tensor([262144, 64],"float32"), Tensor([197],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 64],"float32"), Tensor([197],"int32"), Tensor([7938, 64],"float32"), overwrite=True, ) 	 17285445 	 1000 	 0.1114494800567627 	 6.503730058670044 	 0.056307077407836914 	 0.00022649765014648438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:37:55.325663 test begin: paddle.scatter(Tensor([262144, 64],"float32"), Tensor([205],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 64],"float32"), Tensor([205],"int32"), Tensor([7938, 64],"float32"), overwrite=True, ) 	 17285453 	 1000 	 0.11025571823120117 	 6.834434270858765 	 0.0563204288482666 	 0.00022172927856445312 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:02.982740 test begin: paddle.scatter(Tensor([262144, 64],"float32"), Tensor([219],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([262144, 64],"float32"), Tensor([219],"int32"), Tensor([7938, 64],"float32"), overwrite=True, ) 	 17285467 	 1000 	 0.11027216911315918 	 7.2187299728393555 	 0.0563352108001709 	 0.00022649765014648438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:11.494430 test begin: paddle.scatter(Tensor([793801, 64],"float32"), Tensor([197],"int32"), Tensor([197, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([793801, 64],"float32"), Tensor([197],"int32"), Tensor([197, 64],"float32"), overwrite=True, ) 	 50816069 	 1000 	 0.32149314880371094 	 6.515399932861328 	 0.10931086540222168 	 0.00023698806762695312 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:20.759369 test begin: paddle.scatter(Tensor([793801, 64],"float32"), Tensor([205],"int32"), Tensor([205, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([793801, 64],"float32"), Tensor([205],"int32"), Tensor([205, 64],"float32"), overwrite=True, ) 	 50816589 	 1000 	 0.32146263122558594 	 6.7777063846588135 	 0.1092996597290039 	 0.0002338886260986328 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:29.934683 test begin: paddle.scatter(Tensor([793801, 64],"float32"), Tensor([219],"int32"), Tensor([219, 64],"float32"), overwrite=True, )
[Prof] paddle.scatter 	 paddle.scatter(Tensor([793801, 64],"float32"), Tensor([219],"int32"), Tensor([219, 64],"float32"), overwrite=True, ) 	 50817499 	 1000 	 0.3223714828491211 	 7.23769998550415 	 0.10961437225341797 	 0.00014257431030273438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:40.080578 test begin: paddle.scatter_nd(Tensor([128, 2],"int64"), Tensor([128, 9, 10],"float32"), list[3,5,9,10,], )
[Prof] paddle.scatter_nd 	 paddle.scatter_nd(Tensor([128, 2],"int64"), Tensor([128, 9, 10],"float32"), list[3,5,9,10,], ) 	 11776 	 1000 	 0.03468918800354004 	 15.281156778335571 	 1.8596649169921875e-05 	 0.0002040863037109375 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:38:55.491675 test begin: paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), ) 	 105808018 	 1000 	 0.39760637283325195 	 69.55850625038147 	 0.20314812660217285 	 0.00019431114196777344 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:40:09.634044 test begin: paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587 7168],"bfloat16"), )
[config parse error] paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587 7168],"bfloat16"), ) invalid syntax. Perhaps you forgot a comma? (<string>, line 1)
2025-07-27 19:40:09.634537 test begin: paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), ) 	 105879718 	 1000 	 0.39801907539367676 	 70.57884383201599 	 0.2033848762512207 	 0.00020360946655273438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:41:24.935964 test begin: paddle.scatter_nd_add(Tensor([1, 8192, 12404],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 12404],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([1, 8192, 12404],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 12404],"bfloat16"), ) 	 108895890 	 1000 	 0.5348289012908936 	 69.87211513519287 	 0.2732865810394287 	 0.00020313262939453125 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:42:42.577372 test begin: paddle.scatter_nd_add(Tensor([1, 8192, 17069],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 17069],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([1, 8192, 17069],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 17069],"bfloat16"), ) 	 149986493 	 1000 	 0.9005789756774902 	 70.90610480308533 	 0.46016836166381836 	 0.00020432472229003906 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:44:00.350717 test begin: paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), ) 	 121634962 	 1000 	 0.4436326026916504 	 69.59208726882935 	 0.22667932510375977 	 0.00020623207092285156 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:45:15.089957 test begin: paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 7168],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 7168],"bfloat16"), ) 	 121649302 	 1000 	 0.4436304569244385 	 69.69883751869202 	 0.22666406631469727 	 0.00019359588623046875 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:46:29.966542 test begin: paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), )
[Prof] paddle.scatter_nd_add 	 paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), ) 	 121706662 	 1000 	 0.44463205337524414 	 70.31071996688843 	 0.22719645500183105 	 0.00020360946655273438 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 19:47:45.489687 test begin: paddle.searchsorted(Tensor([1024],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([1024],"float32"), Tensor([50803201],"float32"), ) 	 50804225 	 1000 	 1.3676321506500244 	 1.029867172241211 	 1.3598620891571045 	 1.0188379287719727 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:48.702716 test begin: paddle.searchsorted(Tensor([1024],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([1024],"float64"), Tensor([25401601],"float64"), ) 	 25402625 	 1000 	 0.650266170501709 	 0.4968421459197998 	 0.6424655914306641 	 0.481579065322876 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:50.377010 test begin: paddle.searchsorted(Tensor([1024],"int32"), Tensor([50803201],"int32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([1024],"int32"), Tensor([50803201],"int32"), ) 	 50804225 	 1000 	 1.2604045867919922 	 0.9611892700195312 	 1.2504198551177979 	 0.9495253562927246 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:53.169636 test begin: paddle.searchsorted(Tensor([25401601],"float64"), Tensor([25401601],"float64"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([25401601],"float64"), Tensor([25401601],"float64"), ) 	 50803202 	 1000 	 1.3953728675842285 	 1.0791964530944824 	 1.387636423110962 	 1.0680158138275146 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:56.693803 test begin: paddle.searchsorted(Tensor([25401601],"float64"), Tensor([512],"float64"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([25401601],"float64"), Tensor([512],"float64"), ) 	 25402113 	 1000 	 0.008213996887207031 	 0.010605096817016602 	 0.0004127025604248047 	 2.5510787963867188e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:47:57.235910 test begin: paddle.searchsorted(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([50803201],"float32"), Tensor([50803201],"float32"), ) 	 101606402 	 1000 	 2.967418909072876 	 2.317894220352173 	 2.9595911502838135 	 2.3069047927856445 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:04.578384 test begin: paddle.searchsorted(Tensor([50803201],"float32"), Tensor([512],"float32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([50803201],"float32"), Tensor([512],"float32"), ) 	 50803713 	 1000 	 0.00855708122253418 	 0.010770320892333984 	 0.0007669925689697266 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:07.648576 test begin: paddle.searchsorted(Tensor([50803201],"int32"), Tensor([50803201],"int32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([50803201],"int32"), Tensor([50803201],"int32"), ) 	 101606402 	 1000 	 2.962925434112549 	 2.3180088996887207 	 2.9551124572753906 	 2.307002067565918 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:14.105295 test begin: paddle.searchsorted(Tensor([50803201],"int32"), Tensor([512],"int32"), )
[Prof] paddle.searchsorted 	 paddle.searchsorted(Tensor([50803201],"int32"), Tensor([512],"int32"), ) 	 50803713 	 1000 	 0.008409738540649414 	 0.010924577713012695 	 0.0006530284881591797 	 2.9802322387695312e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 19:48:14.699703 test begin: paddle.select_scatter(Tensor([12700801, 3, 4],"float32"), Tensor([12700801, 4],"float32"), 1, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([12700801, 3, 4],"float32"), Tensor([12700801, 4],"float32"), 1, 1, ) 	 203212816 	 1000 	 0.7273194789886475 	 1.6510505676269531 	 0.7071025371551514 	 0.5619692802429199 	 3.2557590007781982 	 1.7944703102111816 	 0.4161388874053955 	 0.458268404006958 	 
2025-07-27 19:48:28.003048 test begin: paddle.select_scatter(Tensor([1693441, 3, 4, 5],"float64"), Tensor([1693441, 3, 5],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([1693441, 3, 4, 5],"float64"), Tensor([1693441, 3, 5],"float64"), 2, 1, ) 	 127008075 	 1000 	 0.7439711093902588 	 3.310825824737549 	 0.7229561805725098 	 0.6754169464111328 	 3.565284252166748 	 2.1322052478790283 	 0.45513033866882324 	 0.5444421768188477 	 
2025-07-27 19:48:44.340707 test begin: paddle.select_scatter(Tensor([2, 211681, 4, 5, 6],"int32"), Tensor([2, 211681, 5, 6],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 211681, 4, 5, 6],"int32"), Tensor([2, 211681, 5, 6],"int32"), 2, 1, ) 	 63504300 	 1000 	 0.1791837215423584 	 0.49204230308532715 	 0.15911054611206055 	 0.1673603057861328 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:48:47.276334 test begin: paddle.select_scatter(Tensor([2, 2540161, 4, 5],"float64"), Tensor([2, 2540161, 5],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 2540161, 4, 5],"float64"), Tensor([2, 2540161, 5],"float64"), 2, 1, ) 	 127008050 	 1000 	 0.7451982498168945 	 1.9841866493225098 	 0.7254929542541504 	 0.6752920150756836 	 3.565122365951538 	 2.1319053173065186 	 0.4549074172973633 	 0.5444366931915283 	 
2025-07-27 19:49:00.500672 test begin: paddle.select_scatter(Tensor([2, 3, 25401601],"float32"), Tensor([2, 25401601],"float32"), 1, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 25401601],"float32"), Tensor([2, 25401601],"float32"), 1, 1, ) 	 203212808 	 1000 	 0.3647010326385498 	 1.2356417179107666 	 0.3451826572418213 	 0.4176514148712158 	 2.685358762741089 	 1.3633089065551758 	 0.3427743911743164 	 0.3477902412414551 	 
2025-07-27 19:49:14.671904 test begin: paddle.select_scatter(Tensor([2, 3, 282241, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 282241, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, ) 	 50803560 	 1000 	 0.01976919174194336 	 0.3167417049407959 	 1.1444091796875e-05 	 0.10763382911682129 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:49:16.514628 test begin: paddle.select_scatter(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 1058401],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 1058401],"float64"), 2, 1, ) 	 31752030 	 1000 	 0.07992148399353027 	 0.39250731468200684 	 0.05981040000915527 	 0.13347554206848145 	 0.717313289642334 	 0.4307827949523926 	 0.09146928787231445 	 0.10987138748168945 	 
2025-07-27 19:49:19.329203 test begin: paddle.select_scatter(Tensor([2, 3, 4, 1411201, 6],"int32"), Tensor([2, 3, 1411201, 6],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 1411201, 6],"int32"), Tensor([2, 3, 1411201, 6],"int32"), 2, 1, ) 	 254016180 	 1000 	 0.5413403511047363 	 1.532696008682251 	 0.5213160514831543 	 0.5213308334350586 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:49:30.032525 test begin: paddle.select_scatter(Tensor([2, 3, 4, 352801, 6],"int32"), Tensor([2, 3, 352801, 6],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 352801, 6],"int32"), Tensor([2, 3, 352801, 6],"int32"), 2, 1, ) 	 63504180 	 1000 	 0.13843512535095215 	 0.3924868106842041 	 0.11822366714477539 	 0.13344645500183105 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:49:32.738234 test begin: paddle.select_scatter(Tensor([2, 3, 4, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), 2, 1, ) 	 127008030 	 1000 	 0.3045978546142578 	 1.5589234828948975 	 0.284928560256958 	 0.520256519317627 	 2.7656126022338867 	 1.66485595703125 	 0.3525872230529785 	 0.42476439476013184 	 
2025-07-27 19:49:44.991259 test begin: paddle.select_scatter(Tensor([2, 3, 4, 5, 1693441],"int32"), Tensor([2, 3, 5, 1693441],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 5, 1693441],"int32"), Tensor([2, 3, 5, 1693441],"int32"), 2, 1, ) 	 254016150 	 1000 	 0.5412142276763916 	 1.5371248722076416 	 0.5214443206787109 	 0.5213277339935303 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:49:55.727195 test begin: paddle.select_scatter(Tensor([2, 3, 4, 5, 423361],"int32"), Tensor([2, 3, 5, 423361],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 4, 5, 423361],"int32"), Tensor([2, 3, 5, 423361],"int32"), 2, 1, ) 	 63504150 	 1000 	 0.13866877555847168 	 0.39623475074768066 	 0.1057734489440918 	 0.13343238830566406 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:49:58.448742 test begin: paddle.select_scatter(Tensor([2, 3, 8467201],"float32"), Tensor([2, 8467201],"float32"), 1, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 8467201],"float32"), Tensor([2, 8467201],"float32"), 1, 1, ) 	 67737608 	 1000 	 0.12453913688659668 	 0.41731977462768555 	 0.1048734188079834 	 0.1419217586517334 	 0.9071650505065918 	 0.46528124809265137 	 0.11578226089477539 	 0.11871767044067383 	 
2025-07-27 19:50:02.309261 test begin: paddle.select_scatter(Tensor([2, 3, 846721, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 3, 846721, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, ) 	 25401660 	 1000 	 0.01965808868408203 	 0.31622838973999023 	 1.0251998901367188e-05 	 0.10743451118469238 	 0.3308289051055908 	 0.31816935539245605 	 0.041991472244262695 	 0.0810849666595459 	 
2025-07-27 19:50:04.343637 test begin: paddle.select_scatter(Tensor([2, 6350401, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 6350401, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, ) 	 50803216 	 1000 	 0.020093441009521484 	 0.3162209987640381 	 1.4781951904296875e-05 	 0.10744833946228027 	 0.33017992973327637 	 0.3181955814361572 	 0.041931867599487305 	 0.08113360404968262 	 
2025-07-27 19:50:07.004915 test begin: paddle.select_scatter(Tensor([2, 635041, 4, 5],"float64"), Tensor([2, 635041, 5],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 635041, 4, 5],"float64"), Tensor([2, 635041, 5],"float64"), 2, 1, ) 	 31752050 	 1000 	 0.18531227111816406 	 0.49811720848083496 	 0.1652517318725586 	 0.16948771476745605 	 0.894921064376831 	 0.546989917755127 	 0.11430025100708008 	 0.13957762718200684 	 
2025-07-27 19:50:10.337242 test begin: paddle.select_scatter(Tensor([2, 846721, 4, 5, 6],"int32"), Tensor([2, 846721, 5, 6],"int32"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([2, 846721, 4, 5, 6],"int32"), Tensor([2, 846721, 5, 6],"int32"), 2, 1, ) 	 254016300 	 1000 	 0.7043719291687012 	 1.981961727142334 	 0.6840989589691162 	 0.6721374988555908 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:50:22.364064 test begin: paddle.select_scatter(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 4],"float32"), 1, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 4],"float32"), 1, 1, ) 	 67737616 	 1000 	 0.2444322109222412 	 0.5595142841339111 	 0.22415733337402344 	 0.19041204452514648 	 1.1108596324920654 	 0.6155145168304443 	 0.1418623924255371 	 0.15715289115905762 	 
2025-07-27 19:50:26.832664 test begin: paddle.select_scatter(Tensor([423361, 3, 4, 5],"float64"), Tensor([423361, 3, 5],"float64"), 2, 1, )
[Prof] paddle.select_scatter 	 paddle.select_scatter(Tensor([423361, 3, 4, 5],"float64"), Tensor([423361, 3, 5],"float64"), 2, 1, ) 	 31752075 	 1000 	 0.18547868728637695 	 0.4979543685913086 	 0.1655287742614746 	 0.16943740844726562 	 0.8949277400970459 	 0.546837329864502 	 0.11425423622131348 	 0.13959240913391113 	 
2025-07-27 19:50:30.126322 test begin: paddle.sgn(Tensor([12, 1058401, 2],"float64"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([12, 1058401, 2],"float64"), ) 	 25401624 	 1000 	 0.30873537063598633 	 0.298414945602417 	 0.2919039726257324 	 0.28758883476257324 	 0.29802727699279785 	 0.050573110580444336 	 0.24874281883239746 	 3.3855438232421875e-05 	 
2025-07-27 19:50:32.120432 test begin: paddle.sgn(Tensor([12, 20, 105841],"float64"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([12, 20, 105841],"float64"), ) 	 25401840 	 1000 	 0.3083016872406006 	 0.2985687255859375 	 0.2915027141571045 	 0.28771162033081055 	 0.29804539680480957 	 0.05057382583618164 	 0.24859166145324707 	 2.956390380859375e-05 	 
2025-07-27 19:50:34.163628 test begin: paddle.sgn(Tensor([12, 20, 211681],"float32"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([12, 20, 211681],"float32"), ) 	 50803440 	 1000 	 0.34395313262939453 	 0.3095424175262451 	 0.3279898166656494 	 0.28604912757873535 	 0.29543137550354004 	 0.051584720611572266 	 0.24560141563415527 	 6.270408630371094e-05 	 
2025-07-27 19:50:40.186197 test begin: paddle.sgn(Tensor([12, 2116801, 2],"float32"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([12, 2116801, 2],"float32"), ) 	 50803224 	 1000 	 0.3442389965057373 	 0.2978229522705078 	 0.3284337520599365 	 0.28707075119018555 	 0.29560065269470215 	 0.05035734176635742 	 0.24614977836608887 	 2.956390380859375e-05 	 
2025-07-27 19:50:42.834652 test begin: paddle.sgn(Tensor([1270081, 20, 2],"float32"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([1270081, 20, 2],"float32"), ) 	 50803240 	 1000 	 0.34427976608276367 	 0.29784560203552246 	 0.3283512592315674 	 0.2870209217071533 	 0.29558610916137695 	 0.0666043758392334 	 0.24566006660461426 	 5.054473876953125e-05 	 
2025-07-27 19:50:45.461005 test begin: paddle.sgn(Tensor([635041, 20, 2],"float64"), )
[Prof] paddle.sgn 	 paddle.sgn(Tensor([635041, 20, 2],"float64"), ) 	 25401640 	 1000 	 0.30894970893859863 	 0.30094146728515625 	 0.2924997806549072 	 0.2875936031341553 	 0.2975478172302246 	 0.05147385597229004 	 0.24835610389709473 	 3.552436828613281e-05 	 
2025-07-27 19:50:47.459535 test begin: paddle.shape(Tensor([1, 1600, 376, 280],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([1, 1600, 376, 280],"float32"), ) 	 168448000 	 1000 	 0.00433349609375 	 0.03137636184692383 	 7.152557373046875e-06 	 4.458427429199219e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:50.168535 test begin: paddle.shape(Tensor([13, 128, 256, 256],"float16"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([13, 128, 256, 256],"float16"), ) 	 109051904 	 1000 	 0.004511833190917969 	 0.03058004379272461 	 2.1696090698242188e-05 	 3.814697265625e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:52.276794 test begin: paddle.shape(Tensor([4, 121, 376, 280],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 121, 376, 280],"float32"), ) 	 50955520 	 1000 	 0.004276275634765625 	 0.03066086769104004 	 1.3828277587890625e-05 	 6.246566772460938e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:53.128888 test begin: paddle.shape(Tensor([4, 128, 256, 388],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 128, 256, 388],"float32"), ) 	 50855936 	 1000 	 0.004317283630371094 	 0.0308988094329834 	 1.3589859008789062e-05 	 3.457069396972656e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:53.979662 test begin: paddle.shape(Tensor([4, 128, 256, 776],"float16"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 128, 256, 776],"float16"), ) 	 101711872 	 1000 	 0.004342317581176758 	 0.030542850494384766 	 8.106231689453125e-06 	 4.315376281738281e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:55.933993 test begin: paddle.shape(Tensor([4, 128, 388, 256],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 128, 388, 256],"float32"), ) 	 50855936 	 1000 	 0.004251956939697266 	 0.030527114868164062 	 8.821487426757812e-06 	 4.291534423828125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:56.780300 test begin: paddle.shape(Tensor([4, 128, 776, 256],"float16"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 128, 776, 256],"float16"), ) 	 101711872 	 1000 	 0.005723476409912109 	 0.03072357177734375 	 4.38690185546875e-05 	 4.6253204345703125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:58.751061 test begin: paddle.shape(Tensor([4, 1600, 29, 280],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 1600, 29, 280],"float32"), ) 	 51968000 	 1000 	 0.004272937774658203 	 0.03064703941345215 	 8.344650268554688e-06 	 4.5299530029296875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:50:59.627844 test begin: paddle.shape(Tensor([4, 1600, 376, 22],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 1600, 376, 22],"float32"), ) 	 52940800 	 1000 	 0.004323005676269531 	 0.03096938133239746 	 2.09808349609375e-05 	 6.008148193359375e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:00.515361 test begin: paddle.shape(Tensor([4, 194, 256, 256],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 194, 256, 256],"float32"), ) 	 50855936 	 1000 	 0.004285097122192383 	 0.03049445152282715 	 6.9141387939453125e-06 	 5.340576171875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:01.401816 test begin: paddle.shape(Tensor([4, 388, 256, 256],"float16"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([4, 388, 256, 256],"float16"), ) 	 101711872 	 1000 	 0.00439763069152832 	 0.030684709548950195 	 1.5020370483398438e-05 	 3.24249267578125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:03.395174 test begin: paddle.shape(Tensor([7, 128, 256, 256],"float32"), )
[Prof] paddle.shape 	 paddle.shape(Tensor([7, 128, 256, 256],"float32"), ) 	 58720256 	 1000 	 0.004288434982299805 	 0.03047347068786621 	 7.152557373046875e-06 	 4.291534423828125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:04.376219 test begin: paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
[Prof] paddle.shard_index 	 paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ) 	 25401602 	 1000 	 0.30947184562683105 	 2.041321277618408 	 0.30086660385131836 	 0.0006632804870605469 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:09.760841 test begin: paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
[Prof] paddle.shard_index 	 paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, ) 	 25401602 	 1000 	 0.3094673156738281 	 2.0367491245269775 	 0.30066657066345215 	 0.0006611347198486328 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:12.835049 test begin: paddle.shard_index(input=Tensor([25401601, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
[Prof] paddle.shard_index 	 paddle.shard_index(input=Tensor([25401601, 1],"int64"), index_num=13, nshards=3, shard_id=0, ) 	 25401601 	 1000 	 0.30996155738830566 	 2.230956792831421 	 0.3014414310455322 	 0.0007619857788085938 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:15.877291 test begin: paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
[Prof] paddle.shard_index 	 paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, ) 	 25401604 	 1000 	 0.309431791305542 	 2.0377986431121826 	 0.3008992671966553 	 0.0006630420684814453 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:18.869340 test begin: paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
[Prof] paddle.shard_index 	 paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, ) 	 25401604 	 1000 	 0.3094675540924072 	 2.0369105339050293 	 0.300750732421875 	 0.0006594657897949219 	 None 	 None 	 None 	 None 	 combined
2025-07-27 19:51:22.422166 test begin: paddle.sign(Tensor([12404, 32, 128],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([12404, 32, 128],"float32"), ) 	 50806784 	 1000 	 0.3429265022277832 	 0.3013167381286621 	 0.3346285820007324 	 0.286632776260376 	 0.2953946590423584 	 0.05214428901672363 	 0.24543476104736328 	 5.4836273193359375e-05 	 
2025-07-27 19:51:25.502888 test begin: paddle.sign(Tensor([32, 12404, 128],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([32, 12404, 128],"float32"), ) 	 50806784 	 1000 	 0.34294843673706055 	 0.297837495803833 	 0.3347756862640381 	 0.2871222496032715 	 0.29541897773742676 	 0.05088472366333008 	 0.2461528778076172 	 4.1484832763671875e-05 	 
2025-07-27 19:51:28.107272 test begin: paddle.sign(Tensor([32, 32, 49613],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([32, 32, 49613],"float32"), ) 	 50803712 	 1000 	 0.34392666816711426 	 0.2978219985961914 	 0.33570075035095215 	 0.28696441650390625 	 0.2954533100128174 	 0.05314230918884277 	 0.2458488941192627 	 5.3882598876953125e-05 	 
2025-07-27 19:51:30.768814 test begin: paddle.sign(Tensor([64, 1, 28, 28351],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([64, 1, 28, 28351],"float32"), ) 	 50804992 	 1000 	 0.3441770076751709 	 0.2978372573852539 	 0.33603978157043457 	 0.28706979751586914 	 0.2955009937286377 	 0.051390647888183594 	 0.24598288536071777 	 2.9325485229492188e-05 	 
2025-07-27 19:51:33.405115 test begin: paddle.sign(Tensor([64, 1, 28351, 28],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([64, 1, 28351, 28],"float32"), ) 	 50804992 	 1000 	 0.3441448211669922 	 0.9648139476776123 	 0.3360142707824707 	 0.2869858741760254 	 0.29554033279418945 	 0.052010536193847656 	 0.24571561813354492 	 4.9114227294921875e-05 	 
2025-07-27 19:51:39.111502 test begin: paddle.sign(Tensor([64, 1013, 28, 28],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([64, 1013, 28, 28],"float32"), ) 	 50828288 	 1000 	 0.3451664447784424 	 0.2980167865753174 	 0.3368358612060547 	 0.2864837646484375 	 0.2956857681274414 	 0.05178213119506836 	 0.24560284614562988 	 3.24249267578125e-05 	 
2025-07-27 19:51:41.738842 test begin: paddle.sign(Tensor([64801, 1, 28, 28],"float32"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([64801, 1, 28, 28],"float32"), ) 	 50803984 	 1000 	 0.34444236755371094 	 0.3005549907684326 	 0.3362889289855957 	 0.2870144844055176 	 0.29555606842041016 	 0.0526425838470459 	 0.24606084823608398 	 4.601478576660156e-05 	 
2025-07-27 19:51:44.393288 test begin: paddle.sign(Tensor([66151, 1, 384],"int64"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([66151, 1, 384],"int64"), ) 	 25401984 	 1000 	 0.3072805404663086 	 0.2986185550689697 	 0.2990586757659912 	 0.28792667388916016 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:51:46.110037 test begin: paddle.sign(Tensor([7, 1, 3628801],"int64"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([7, 1, 3628801],"int64"), ) 	 25401607 	 1000 	 0.30782246589660645 	 0.3001060485839844 	 0.29964113235473633 	 0.28771352767944336 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:51:47.825610 test begin: paddle.sign(Tensor([7, 9451, 384],"int64"), )
[Prof] paddle.sign 	 paddle.sign(Tensor([7, 9451, 384],"int64"), ) 	 25404288 	 1000 	 0.3074166774749756 	 0.29862523078918457 	 0.29921722412109375 	 0.28780698776245117 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 19:51:49.537490 test begin: paddle.signal.stft(Tensor([16, 3175201],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
[Prof] paddle.signal.stft 	 paddle.signal.stft(Tensor([16, 3175201],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", ) 	 50803816 	 1000 	 19.408348560333252 	 4.763906240463257 	 2.483513593673706 	 0.9754388332366943 	 43.26861810684204 	 33.87039756774902 	 2.942798137664795 	 1.7282307147979736 	 
2025-07-27 19:53:37.225927 test begin: paddle.signal.stft(Tensor([16, 3175201],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
[Prof] paddle.signal.stft 	 paddle.signal.stft(Tensor([16, 3175201],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", ) 	 50804416 	 1000 	 19.79787015914917 	 4.9855732917785645 	 2.5335371494293213 	 1.0213618278503418 	 43.09444522857666 	 32.34772491455078 	 2.931070327758789 	 1.6501657962799072 	 
2025-07-27 19:55:24.898848 test begin: paddle.signal.stft(Tensor([16, 3175201],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
[Error] CUDA out of memory. Tried to allocate 1.95 GiB. GPU 0 has a total capacity of 39.39 GiB of which 1.77 GiB is free. Process 54307 has 37.61 GiB memory in use. Of the allocated memory 4.26 GiB is allocated by PyTorch, and 5.18 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-07-27 19:56:50.708834 test begin: paddle.signal.stft(Tensor([1993, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
W0727 19:56:51.691219  1697 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.signal.stft 	 paddle.signal.stft(Tensor([1993, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", ) 	 50822100 	 1000 	 17.68925929069519 	 4.7845988273620605 	 2.26353120803833 	 0.98040771484375 	 42.4423189163208 	 31.101404666900635 	 2.8868918418884277 	 1.5867183208465576 	 
2025-07-27 19:58:33.938866 test begin: paddle.signal.stft(Tensor([1993, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
[Prof] paddle.signal.stft 	 paddle.signal.stft(Tensor([1993, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", ) 	 50822700 	 1000 	 18.1588397026062 	 5.100663185119629 	 2.3231475353240967 	 1.0398857593536377 	 42.7206084728241 	 31.48290514945984 	 2.905834674835205 	 1.6062119007110596 	 
2025-07-27 20:00:18.584656 test begin: paddle.signal.stft(Tensor([1993, 25500],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
[Error] CUDA out of memory. Tried to allocate 1.94 GiB. GPU 0 has a total capacity of 39.39 GiB of which 1.15 GiB is free. Process 117052 has 38.24 GiB memory in use. Of the allocated memory 4.47 GiB is allocated by PyTorch, and 1.76 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-07-27 20:01:43.630723 test begin: paddle.signbit(Tensor([11, 17, 271],"int32"), )
W0727 20:01:44.032328  1928 gpu_resources.cc:114] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.2, Runtime API Version: 11.8
[Prof] paddle.signbit 	 paddle.signbit(Tensor([11, 17, 271],"int32"), ) 	 50677 	 1000 	 2.1749556064605713 	 0.010597944259643555 	 1.9550323486328125e-05 	 3.361701965332031e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:46.640923 test begin: paddle.signbit(Tensor([11, 17, 543],"int16"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([11, 17, 543],"int16"), ) 	 101541 	 1000 	 4.179938316345215 	 0.016474246978759766 	 5.0067901611328125e-05 	 4.220008850097656e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:50.881628 test begin: paddle.signbit(Tensor([11, 461, 10],"int32"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([11, 461, 10],"int32"), ) 	 50710 	 1000 	 2.246105909347534 	 0.016617298126220703 	 9.679794311523438e-05 	 5.364418029785156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:53.183871 test begin: paddle.signbit(Tensor([11, 923, 10],"int16"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([11, 923, 10],"int16"), ) 	 101530 	 1000 	 4.176537990570068 	 0.010116338729858398 	 5.5789947509765625e-05 	 3.0279159545898438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:57.409953 test begin: paddle.signbit(Tensor([12, 20, 211],"float32"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([12, 20, 211],"float32"), ) 	 50640 	 1000 	 2.2910497188568115 	 0.009964227676391602 	 2.3126602172851562e-05 	 3.600120544433594e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:01:59.745150 test begin: paddle.signbit(Tensor([12, 2116, 2],"float32"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([12, 2116, 2],"float32"), ) 	 50784 	 1000 	 2.2102415561676025 	 0.009996652603149414 	 3.314018249511719e-05 	 2.5033950805664062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:02.000518 test begin: paddle.signbit(Tensor([1270, 20, 2],"float32"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([1270, 20, 2],"float32"), ) 	 50800 	 1000 	 2.2749314308166504 	 0.009996175765991211 	 2.1457672119140625e-05 	 2.7179718017578125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:04.319505 test begin: paddle.signbit(Tensor([298, 17, 10],"int32"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([298, 17, 10],"int32"), ) 	 50660 	 1000 	 2.1959474086761475 	 0.010028600692749023 	 2.1219253540039062e-05 	 2.7894973754882812e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:06.559003 test begin: paddle.signbit(Tensor([597, 17, 10],"int16"), )
[Prof] paddle.signbit 	 paddle.signbit(Tensor([597, 17, 10],"int16"), ) 	 101490 	 1000 	 4.129846096038818 	 0.010112524032592773 	 4.2438507080078125e-05 	 3.7670135498046875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:02:10.736884 test begin: paddle.sin(Tensor([128512, 396],"float32"), )
[Prof] paddle.sin 	 paddle.sin(Tensor([128512, 396],"float32"), ) 	 50890752 	 1000 	 0.2962453365325928 	 0.29877448081970215 	 0.2869231700897217 	 0.2878377437591553 	 0.45134639739990234 	 0.7451386451721191 	 0.39702916145324707 	 0.38065004348754883 	 
2025-07-27 20:02:14.220471 test begin: paddle.sin(Tensor([254017, 200],"float32"), )
[Prof] paddle.sin 	 paddle.sin(Tensor([254017, 200],"float32"), ) 	 50803400 	 1000 	 0.29577207565307617 	 0.2982473373413086 	 0.28650474548339844 	 0.2877025604248047 	 0.4506509304046631 	 0.743617057800293 	 0.3938570022583008 	 0.37991905212402344 	 
2025-07-27 20:02:17.642221 test begin: paddle.sin(Tensor([50000, 1017],"float32"), )
[Prof] paddle.sin 	 paddle.sin(Tensor([50000, 1017],"float32"), ) 	 50850000 	 1000 	 0.29604244232177734 	 0.29852795600891113 	 0.2867395877838135 	 0.2878108024597168 	 0.45096611976623535 	 0.7443339824676514 	 0.3962397575378418 	 0.3803222179412842 	 
2025-07-27 20:02:21.062306 test begin: paddle.sin(Tensor([508033, 100],"float32"), )
[Prof] paddle.sin 	 paddle.sin(Tensor([508033, 100],"float32"), ) 	 50803300 	 1000 	 1.1293132305145264 	 0.7478289604187012 	 0.2864563465118408 	 0.2876579761505127 	 0.45046448707580566 	 0.7435581684112549 	 0.3955833911895752 	 0.37992405891418457 	 
2025-07-27 20:02:27.526758 test begin: paddle.sin(Tensor([68608, 741],"float32"), )
[Prof] paddle.sin 	 paddle.sin(Tensor([68608, 741],"float32"), ) 	 50838528 	 1000 	 0.29604268074035645 	 0.2984158992767334 	 0.2868185043334961 	 0.2879526615142822 	 0.4509434700012207 	 0.744605541229248 	 0.394726037979126 	 0.38068699836730957 	 
2025-07-27 20:02:30.976969 test begin: paddle.sinc(Tensor([16, 1587601],"float64"), )
[Prof] paddle.sinc 	 paddle.sinc(Tensor([16, 1587601],"float64"), ) 	 25401616 	 1000 	 2.946171283721924 	 0.3046114444732666 	 0.2511460781097412 	 0.2911841869354248 	 2.5896575450897217 	 3.7675111293792725 	 0.44087958335876465 	 0.32069969177246094 	 
2025-07-27 20:02:43.570174 test begin: paddle.sinc(Tensor([396901, 64],"float64"), )
[Prof] paddle.sinc 	 paddle.sinc(Tensor([396901, 64],"float64"), ) 	 25401664 	 1000 	 2.94516921043396 	 0.3018972873687744 	 0.250964879989624 	 0.2917368412017822 	 2.589639902114868 	 3.767357349395752 	 0.44083380699157715 	 0.32065510749816895 	 
2025-07-27 20:02:54.257888 test begin: paddle.sinh(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.sinh 	 paddle.sinh(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.296062707901001 	 0.29830360412597656 	 0.2865579128265381 	 0.2877826690673828 	 0.45032644271850586 	 0.7438733577728271 	 0.39600086212158203 	 0.38003063201904297 	 
2025-07-27 20:02:57.676575 test begin: paddle.sinh(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.sinh 	 paddle.sinh(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.29576849937438965 	 0.29828524589538574 	 0.2869303226470947 	 0.28121113777160645 	 0.45029449462890625 	 0.7438492774963379 	 0.3962826728820801 	 0.38003110885620117 	 
2025-07-27 20:03:01.088971 test begin: paddle.sinh(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.sinh 	 paddle.sinh(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.29566121101379395 	 0.2982828617095947 	 0.2867283821105957 	 0.28778553009033203 	 0.4504885673522949 	 0.7438087463378906 	 0.39341163635253906 	 0.38004350662231445 	 
2025-07-27 20:03:04.507907 test begin: paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
W0727 20:03:06.213778  2000 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], ) 	 101609920 	 1000 	 0.008035898208618164 	 0.013677120208740234 	 7.867813110351562e-06 	 3.0040740966796875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:06.617232 test begin: paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
W0727 20:03:08.312093  2005 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], ) 	 101609920 	 1000 	 0.007639408111572266 	 0.013654947280883789 	 8.821487426757812e-06 	 2.574920654296875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:08.699387 test begin: paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
W0727 20:03:10.394261  2009 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], ) 	 101609920 	 1000 	 0.0076444149017333984 	 0.013585329055786133 	 1.4066696166992188e-05 	 2.86102294921875e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:10.782511 test begin: paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
W0727 20:03:12.456398  2016 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], ) 	 101607680 	 1000 	 0.007740020751953125 	 0.013464689254760742 	 1.6689300537109375e-05 	 2.3603439331054688e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:12.820171 test begin: paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
W0727 20:03:14.522187  2019 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], ) 	 101607680 	 1000 	 0.007825136184692383 	 0.013599872589111328 	 3.933906555175781e-05 	 2.5987625122070312e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:14.890123 test begin: paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
W0727 20:03:16.591650  2020 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (InvalidArgument) The type of data we are trying to retrieve (bfloat16) does not match the type of data (float32) currently contained in the container.
  [Hint: Expected dtype() == phi::CppTypeToDataType<T>::Type(), but received dtype():10 != phi::CppTypeToDataType<T>::Type():16.] (at ../paddle/phi/core/dense_tensor.cc:167)

[Prof] paddle.slice 	 paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], ) 	 101607680 	 1000 	 0.007664203643798828 	 0.013544082641601562 	 1.430511474609375e-05 	 2.765655517578125e-05 	 None 	 None 	 None 	 None 	 combined
2025-07-27 20:03:16.955852 test begin: paddle.slice_scatter(Tensor([8, 1058401, 3, 9],"float32"), Tensor([8, 1058401, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 1058401, 3, 9],"float32"), Tensor([8, 1058401, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 279417864 	 1000 	 1.4701530933380127 	 2.8477163314819336 	 1.4543192386627197 	 0.9688694477081299 	 4.067312717437744 	 3.7872703075408936 	 0.6923809051513672 	 0.7740516662597656 	 combined
2025-07-27 20:03:40.275816 test begin: paddle.slice_scatter(Tensor([8, 117601, 3, 9],"float64"), Tensor([8, 117601, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 117601, 3, 9],"float64"), Tensor([8, 117601, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 31046664 	 1000 	 0.233809232711792 	 0.5513298511505127 	 0.2162644863128662 	 0.18759608268737793 	 0.8286900520324707 	 0.7753252983093262 	 0.14107036590576172 	 0.1583693027496338 	 combined
2025-07-27 20:03:43.839815 test begin: paddle.slice_scatter(Tensor([8, 235201, 3, 9],"float32"), Tensor([8, 235201, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 235201, 3, 9],"float32"), Tensor([8, 235201, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 62093064 	 1000 	 0.3282594680786133 	 0.6418004035949707 	 0.3123936653137207 	 0.21849608421325684 	 0.929957389831543 	 0.8660037517547607 	 0.15829753875732422 	 0.17696166038513184 	 combined
2025-07-27 20:03:48.419790 test begin: paddle.slice_scatter(Tensor([8, 423361, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 423361, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 50803560 	 1000 	 0.015563011169433594 	 0.3172330856323242 	 1.0013580322265625e-05 	 0.10782217979431152 	 0.32407283782958984 	 0.32238245010375977 	 0.05507326126098633 	 0.06575322151184082 	 combined
2025-07-27 20:03:51.065452 test begin: paddle.slice_scatter(Tensor([8, 529201, 3, 9],"float64"), Tensor([8, 529201, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 529201, 3, 9],"float64"), Tensor([8, 529201, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 139709064 	 1000 	 1.0578501224517822 	 2.4545416831970215 	 1.041907787322998 	 0.8354268074035645 	 3.613532066345215 	 3.3899574279785156 	 0.6151809692382812 	 0.69268798828125 	 combined
2025-07-27 20:04:07.107110 test begin: paddle.slice_scatter(Tensor([8, 6, 117601, 9],"float32"), Tensor([8, 6, 117601, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 117601, 9],"float32"), Tensor([8, 6, 117601, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 62093328 	 1000 	 0.328296422958374 	 0.6416337490081787 	 0.3123171329498291 	 0.21846270561218262 	 0.9335331916809082 	 0.8662371635437012 	 0.1589033603668213 	 0.17708420753479004 	 combined
2025-07-27 20:04:11.734313 test begin: paddle.slice_scatter(Tensor([8, 6, 211681, 5],"float32"), Tensor([8, 2, 211681, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 211681, 5],"float32"), Tensor([8, 2, 211681, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 67737920 	 1000 	 0.18349480628967285 	 0.41855549812316895 	 0.167311429977417 	 0.14237403869628906 	 0.7748157978057861 	 0.5729465484619141 	 0.1319272518157959 	 0.11699652671813965 	 combined
2025-07-27 20:04:15.608825 test begin: paddle.slice_scatter(Tensor([8, 6, 264601, 9],"float64"), Tensor([8, 6, 264601, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 264601, 9],"float64"), Tensor([8, 6, 264601, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 139709328 	 1000 	 1.0585505962371826 	 2.4545345306396484 	 1.042907476425171 	 0.8355457782745361 	 3.6131582260131836 	 3.390249013900757 	 0.6151416301727295 	 0.6928086280822754 	 combined
2025-07-27 20:04:31.502945 test begin: paddle.slice_scatter(Tensor([8, 6, 3, 1058401],"float32"), Tensor([8, 2, 3, 1058401],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 3, 1058401],"float32"), Tensor([8, 2, 3, 1058401],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 203212992 	 1000 	 0.5409502983093262 	 2.2112085819244385 	 0.5236914157867432 	 0.418560266494751 	 2.2791051864624023 	 1.673482894897461 	 0.3882472515106201 	 0.34172654151916504 	 combined
2025-07-27 20:04:45.600396 test begin: paddle.slice_scatter(Tensor([8, 6, 3, 176401],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 3, 176401],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 25402032 	 1000 	 0.015557050704956055 	 0.3196899890899658 	 1.2159347534179688e-05 	 0.10785174369812012 	 0.3266294002532959 	 0.3226809501647949 	 0.055501699447631836 	 0.06577801704406738 	 combined
2025-07-27 20:04:47.626722 test begin: paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 2, 3, 352801],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 2, 3, 352801],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 67737792 	 1000 	 0.18340778350830078 	 0.41861867904663086 	 0.16771697998046875 	 0.14237689971923828 	 0.7764101028442383 	 0.5730540752410889 	 0.13219118118286133 	 0.1169748306274414 	 combined
2025-07-27 20:04:51.514640 test begin: paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 50803632 	 1000 	 0.015687227249145508 	 0.3174169063568115 	 1.3589859008789062e-05 	 0.10781574249267578 	 0.32692384719848633 	 0.32268214225769043 	 0.05554938316345215 	 0.06578373908996582 	 combined
2025-07-27 20:04:54.138620 test begin: paddle.slice_scatter(Tensor([8, 6, 529201, 9],"float32"), Tensor([8, 6, 529201, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 529201, 9],"float32"), Tensor([8, 6, 529201, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 279418128 	 1000 	 1.4705400466918945 	 2.84554386138916 	 1.4543755054473877 	 0.9687321186065674 	 4.067255973815918 	 3.7871217727661133 	 0.692420244216919 	 0.7741513252258301 	 combined
2025-07-27 20:05:14.565641 test begin: paddle.slice_scatter(Tensor([8, 6, 58801, 9],"float64"), Tensor([8, 6, 58801, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 58801, 9],"float64"), Tensor([8, 6, 58801, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 31046928 	 1000 	 0.2339792251586914 	 0.551311731338501 	 0.21831798553466797 	 0.18761825561523438 	 0.831200122833252 	 0.7752327919006348 	 0.14144110679626465 	 0.15836644172668457 	 combined
2025-07-27 20:05:18.121240 test begin: paddle.slice_scatter(Tensor([8, 6, 635041, 5],"float32"), Tensor([8, 2, 635041, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
[Prof] paddle.slice_scatter 	 paddle.slice_scatter(Tensor([8, 6, 635041, 5],"float32"), Tensor([8, 2, 635041, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], ) 	 203213120 	 1000 	 0.5410542488098145 	 1.2303540706634521 	 0.5253920555114746 	 0.41852283477783203 	 2.2788443565368652 	 1.6733851432800293 	 0.3881356716156006 	 0.341754674911499 	 combined
2025-07-27 20:05:29.605065 test begin: paddle.sqrt(Tensor([128, 396901],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([128, 396901],"float32"), ) 	 50803328 	 1000 	 0.2947564125061035 	 0.2996077537536621 	 0.28591370582580566 	 0.2847864627838135 	 0.4504811763763428 	 0.7473387718200684 	 0.3954277038574219 	 0.3817863464355469 	 
2025-07-27 20:05:33.054465 test begin: paddle.sqrt(Tensor([18, 15, 3, 256, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([18, 15, 3, 256, 256],"float32"), ) 	 53084160 	 1000 	 0.30734753608703613 	 0.7671480178833008 	 0.2984750270843506 	 0.3010833263397217 	 0.47041821479797363 	 0.7805523872375488 	 0.41371893882751465 	 0.39872193336486816 	 
2025-07-27 20:05:39.648167 test begin: paddle.sqrt(Tensor([259, 3, 256, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([259, 3, 256, 256],"float32"), ) 	 50921472 	 1000 	 0.29537129402160645 	 0.32465171813964844 	 0.2863922119140625 	 0.2883422374725342 	 0.45151519775390625 	 0.7490444183349609 	 0.39311814308166504 	 0.3826899528503418 	 
2025-07-27 20:05:45.505228 test begin: paddle.sqrt(Tensor([4, 15, 13, 256, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([4, 15, 13, 256, 256],"float32"), ) 	 51118080 	 1000 	 0.2961587905883789 	 0.3007040023803711 	 0.28740525245666504 	 0.29000282287597656 	 0.4530022144317627 	 0.7517576217651367 	 0.3980429172515869 	 0.38407421112060547 	 
2025-07-27 20:05:48.939321 test begin: paddle.sqrt(Tensor([4, 15, 3, 1103, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([4, 15, 3, 1103, 256],"float32"), ) 	 50826240 	 1000 	 0.2947733402252197 	 0.29917407035827637 	 0.27907633781433105 	 0.2820119857788086 	 0.45059800148010254 	 0.7477631568908691 	 0.3862583637237549 	 0.38203954696655273 	 
2025-07-27 20:05:52.354909 test begin: paddle.sqrt(Tensor([4, 15, 3, 256, 1103],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([4, 15, 3, 256, 1103],"float32"), ) 	 50826240 	 1000 	 0.29481029510498047 	 0.2991209030151367 	 0.2791299819946289 	 0.28194570541381836 	 0.45058417320251465 	 0.7476387023925781 	 0.38649678230285645 	 0.3819916248321533 	 
2025-07-27 20:05:55.767967 test begin: paddle.sqrt(Tensor([4, 65, 3, 256, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([4, 65, 3, 256, 256],"float32"), ) 	 51118080 	 1000 	 0.29621005058288574 	 0.3007049560546875 	 0.2755117416381836 	 0.2837338447570801 	 0.4530649185180664 	 0.7517900466918945 	 0.38853001594543457 	 0.3841371536254883 	 
2025-07-27 20:05:59.231163 test begin: paddle.sqrt(Tensor([544, 93431],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([544, 93431],"float32"), ) 	 50826464 	 1000 	 0.29482030868530273 	 0.29918789863586426 	 0.27886366844177246 	 0.2820930480957031 	 0.4506213665008545 	 0.7477731704711914 	 0.38645291328430176 	 0.381976842880249 	 
2025-07-27 20:06:02.658243 test begin: paddle.sqrt(Tensor([64, 13, 256, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([64, 13, 256, 256],"float32"), ) 	 54525952 	 1000 	 0.31553173065185547 	 0.3204154968261719 	 0.2997117042541504 	 0.3034341335296631 	 0.4831101894378662 	 0.801171064376831 	 0.4150528907775879 	 0.4093654155731201 	 
2025-07-27 20:06:06.376801 test begin: paddle.sqrt(Tensor([64, 3, 1034, 256],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([64, 3, 1034, 256],"float32"), ) 	 50823168 	 1000 	 0.29462099075317383 	 0.29917478561401367 	 0.27889347076416016 	 0.282210111618042 	 0.4507014751434326 	 0.7475616931915283 	 0.38609981536865234 	 0.38195371627807617 	 
2025-07-27 20:06:09.797519 test begin: paddle.sqrt(Tensor([64, 3, 256, 1034],"float32"), )
[Prof] paddle.sqrt 	 paddle.sqrt(Tensor([64, 3, 256, 1034],"float32"), ) 	 50823168 	 1000 	 0.29460740089416504 	 0.29927635192871094 	 0.2789647579193115 	 0.2785801887512207 	 0.45063233375549316 	 0.7475790977478027 	 0.3866000175476074 	 0.38195300102233887 	 
2025-07-27 20:06:13.286051 test begin: paddle.square(Tensor([104, 488493],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([104, 488493],"float32"), ) 	 50803272 	 1000 	 0.2960014343261719 	 0.2981233596801758 	 0.2804088592529297 	 0.2795219421386719 	 0.44986629486083984 	 1.0557820796966553 	 0.38629770278930664 	 0.26991891860961914 	 
2025-07-27 20:06:17.098288 test begin: paddle.square(Tensor([128, 396901],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([128, 396901],"float32"), ) 	 50803328 	 1000 	 0.2961537837982178 	 0.29796671867370605 	 0.2792062759399414 	 0.2795562744140625 	 0.44985342025756836 	 1.055717945098877 	 0.38600945472717285 	 0.2699441909790039 	 
2025-07-27 20:06:20.854716 test begin: paddle.square(Tensor([24904, 12, 170, 1],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([24904, 12, 170, 1],"float32"), ) 	 50804160 	 1000 	 0.29587817192077637 	 0.29790663719177246 	 0.2802712917327881 	 0.27915239334106445 	 0.4498319625854492 	 1.0558149814605713 	 0.3860664367675781 	 0.269925594329834 	 
2025-07-27 20:06:24.577512 test begin: paddle.square(Tensor([3548, 12, 1194, 1],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([3548, 12, 1194, 1],"float32"), ) 	 50835744 	 1000 	 0.296048641204834 	 0.30057668685913086 	 0.28049492835998535 	 0.2798032760620117 	 0.45006513595581055 	 1.0564696788787842 	 0.3861992359161377 	 0.27009105682373047 	 
2025-07-27 20:06:28.303143 test begin: paddle.square(Tensor([3548, 12, 170, 8],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([3548, 12, 170, 8],"float32"), ) 	 57903360 	 1000 	 0.33624815940856934 	 0.3389444351196289 	 0.31981658935546875 	 0.3203132152557373 	 0.5122528076171875 	 1.2010815143585205 	 0.4489905834197998 	 0.3070807456970215 	 
2025-07-27 20:06:32.595146 test begin: paddle.square(Tensor([3548, 85, 170, 1],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([3548, 85, 170, 1],"float32"), ) 	 51268600 	 1000 	 0.29859423637390137 	 0.3043241500854492 	 0.27701878547668457 	 0.28212642669677734 	 0.45365262031555176 	 1.0654301643371582 	 0.3832533359527588 	 0.2723503112792969 	 
2025-07-27 20:06:38.065914 test begin: paddle.square(Tensor([544, 93431],"float32"), )
[Prof] paddle.square 	 paddle.square(Tensor([544, 93431],"float32"), ) 	 50826464 	 1000 	 0.29590725898742676 	 0.30350780487060547 	 0.2772841453552246 	 0.28655314445495605 	 0.44982004165649414 	 1.056298017501831 	 0.38643407821655273 	 0.27004361152648926 	 
2025-07-27 20:06:42.202967 test begin: paddle.squeeze(Tensor([10, 512, 1, 100, 100],"float32"), axis=list[2,], )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([10, 512, 1, 100, 100],"float32"), axis=list[2,], ) 	 51200000 	 1000 	 0.009590625762939453 	 0.008867263793945312 	 9.775161743164062e-06 	 2.09808349609375e-05 	 0.050099849700927734 	 0.06469154357910156 	 1.8596649169921875e-05 	 4.792213439941406e-05 	 
2025-07-27 20:06:43.987189 test begin: paddle.squeeze(Tensor([105344, 483],"float32"), )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([105344, 483],"float32"), ) 	 50881152 	 1000 	 0.00814199447631836 	 0.0068225860595703125 	 9.059906005859375e-06 	 1.811981201171875e-05 	 0.049756765365600586 	 0.06751561164855957 	 2.6464462280273438e-05 	 5.125999450683594e-05 	 
2025-07-27 20:06:46.484235 test begin: paddle.squeeze(Tensor([396901, 128],"float32"), )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([396901, 128],"float32"), ) 	 50803328 	 1000 	 0.00394749641418457 	 0.003831148147583008 	 6.198883056640625e-06 	 1.7881393432617188e-05 	 0.04253721237182617 	 0.057236433029174805 	 3.719329833984375e-05 	 5.507469177246094e-05 	 
2025-07-27 20:06:48.246271 test begin: paddle.squeeze(Tensor([421120, 25, 5],"float32"), axis=-1, )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([421120, 25, 5],"float32"), axis=-1, ) 	 52640000 	 1000 	 0.004894256591796875 	 0.004071474075317383 	 6.67572021484375e-06 	 1.7881393432617188e-05 	 0.042945146560668945 	 0.05515480041503906 	 2.4557113647460938e-05 	 3.504753112792969e-05 	 
2025-07-27 20:06:50.631929 test begin: paddle.squeeze(Tensor([421120, 31, 4],"float32"), axis=-1, )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([421120, 31, 4],"float32"), axis=-1, ) 	 52218880 	 1000 	 0.004785299301147461 	 0.004010677337646484 	 7.152557373046875e-06 	 1.811981201171875e-05 	 0.04266524314880371 	 0.05444931983947754 	 2.384185791015625e-05 	 4.57763671875e-05 	 
2025-07-27 20:06:52.391082 test begin: paddle.squeeze(Tensor([508033, 25, 4],"float32"), axis=-1, )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([508033, 25, 4],"float32"), axis=-1, ) 	 50803300 	 1000 	 0.005044698715209961 	 0.00428009033203125 	 2.765655517578125e-05 	 2.6226043701171875e-05 	 0.04637479782104492 	 0.05302739143371582 	 2.5033950805664062e-05 	 3.8623809814453125e-05 	 
2025-07-27 20:06:54.138974 test begin: paddle.squeeze(Tensor([8, 512, 1, 100, 125],"float32"), axis=list[2,], )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([8, 512, 1, 100, 125],"float32"), axis=list[2,], ) 	 51200000 	 1000 	 0.007554054260253906 	 0.004866600036621094 	 3.266334533691406e-05 	 2.002716064453125e-05 	 0.042932987213134766 	 0.058031320571899414 	 1.8596649169921875e-05 	 5.459785461425781e-05 	 
2025-07-27 20:06:55.942150 test begin: paddle.squeeze(Tensor([8, 512, 1, 125, 100],"float32"), axis=list[2,], )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([8, 512, 1, 125, 100],"float32"), axis=list[2,], ) 	 51200000 	 1000 	 0.004907846450805664 	 0.004816770553588867 	 1.6689300537109375e-05 	 1.7404556274414062e-05 	 0.04291987419128418 	 0.05811786651611328 	 2.6941299438476562e-05 	 4.6253204345703125e-05 	 
2025-07-27 20:06:57.687248 test begin: paddle.squeeze(Tensor([8, 512, 2, 100, 100],"float32"), axis=list[2,], )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([8, 512, 2, 100, 100],"float32"), axis=list[2,], ) 	 81920000 	 1000 	 0.0049076080322265625 	 0.0049169063568115234 	 6.9141387939453125e-06 	 1.7881393432617188e-05 	 0.044600486755371094 	 0.05638265609741211 	 2.9802322387695312e-05 	 7.486343383789062e-05 	 
2025-07-27 20:07:00.437988 test begin: paddle.squeeze(Tensor([8, 636, 1, 100, 100],"float32"), axis=list[2,], )
[Prof] paddle.squeeze 	 paddle.squeeze(Tensor([8, 636, 1, 100, 100],"float32"), axis=list[2,], ) 	 50880000 	 1000 	 0.0048313140869140625 	 0.011451959609985352 	 7.152557373046875e-06 	 6.985664367675781e-05 	 0.050334930419921875 	 0.062265634536743164 	 2.3603439331054688e-05 	 4.6253204345703125e-05 	 
2025-07-27 20:07:02.232741 test begin: paddle.stack(list[Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),], axis=-2, ) 	 259269120 	 1000 	 1.8119075298309326 	 7.124469041824341 	 1.7996840476989746 	 7.107342004776001 	 2.030264377593994 	 0.09344339370727539 	 1.9471166133880615 	 4.410743713378906e-05 	 
2025-07-27 20:07:21.850752 test begin: paddle.stack(list[Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),], axis=-2, ) 	 270103680 	 1000 	 1.893357753753662 	 7.427422761917114 	 1.8796234130859375 	 7.402526140213013 	 2.112014055252075 	 0.10303926467895508 	 2.033730983734131 	 7.271766662597656e-05 	 
2025-07-27 20:07:42.519679 test begin: paddle.stack(list[Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),], axis=0, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),], axis=0, ) 	 609681408 	 1000 	 2.955200672149658 	 2.591294765472412 	 2.934222459793091 	 2.574744939804077 	 4.5685179233551025 	 2.7017714977264404 	 4.459829807281494 	 1.3804690837860107 	 
2025-07-27 20:08:18.656098 test begin: paddle.stack(list[Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),], axis=0, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),], axis=0, ) 	 609681408 	 1000 	 2.9524383544921875 	 2.591371536254883 	 2.939432144165039 	 2.5675647258758545 	 4.569495439529419 	 2.701782703399658 	 4.443006992340088 	 1.379892110824585 	 
2025-07-27 20:08:52.756229 test begin: paddle.stack(list[Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),], axis=-2, ) 	 282839040 	 1000 	 2.137862205505371 	 8.1395742893219 	 2.1210336685180664 	 8.119195222854614 	 2.217339038848877 	 0.10150456428527832 	 2.1389288902282715 	 5.5789947509765625e-05 	 
2025-07-27 20:09:17.073458 test begin: paddle.stack(list[Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),], axis=-2, ) 	 294658560 	 1000 	 2.0848960876464844 	 8.502771854400635 	 2.0728750228881836 	 8.485332012176514 	 2.3061342239379883 	 0.09214997291564941 	 2.2281851768493652 	 4.8160552978515625e-05 	 
2025-07-27 20:09:41.312121 test begin: paddle.stack(list[Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),], axis=-2, ) 	 254018560 	 1000 	 1.7588541507720947 	 6.9826085567474365 	 1.7469263076782227 	 6.965551853179932 	 1.9829702377319336 	 0.0929114818572998 	 1.9052352905273438 	 4.076957702636719e-05 	 
2025-07-27 20:10:00.668891 test begin: paddle.stack(list[Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),], axis=-2, ) 	 257826240 	 1000 	 1.8006463050842285 	 7.085563659667969 	 1.7871201038360596 	 7.063155889511108 	 2.0168418884277344 	 0.09288263320922852 	 1.9399611949920654 	 6.318092346191406e-05 	 
2025-07-27 20:10:22.055514 test begin: paddle.stack(list[Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),], axis=-2, )
[Prof] paddle.stack 	 paddle.stack(list[Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),], axis=-2, ) 	 259269120 	 1000 	 1.8070118427276611 	 7.123034238815308 	 1.7946722507476807 	 7.104826211929321 	 2.026358127593994 	 0.09289669990539551 	 1.950042963027954 	 7.486343383789062e-05 	 
2025-07-27 20:10:42.242008 test begin: paddle.stanh(x=Tensor([12700801, 2],"float64"), scale_a=6.42, scale_b=3.58, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([12700801, 2],"float64"), scale_a=6.42, scale_b=3.58, ) 	 25401602 	 1000 	 0.30745816230773926 	 0.3101201057434082 	 0.2968788146972656 	 0.29637789726257324 	 0.4464254379272461 	 0.7413601875305176 	 0.39220285415649414 	 0.3787961006164551 	 
2025-07-27 20:10:45.195834 test begin: paddle.stanh(x=Tensor([2, 12700801],"float64"), scale_a=6.42, scale_b=3.58, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2, 12700801],"float64"), scale_a=6.42, scale_b=3.58, ) 	 25401602 	 1000 	 0.3061039447784424 	 0.3092305660247803 	 0.29645490646362305 	 0.29637670516967773 	 0.44602155685424805 	 0.7414770126342773 	 0.39198899269104004 	 0.37882065773010254 	 
2025-07-27 20:10:48.062435 test begin: paddle.stanh(x=Tensor([2, 25401601],"float32"), scale_a=6.42, scale_b=3.58, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2, 25401601],"float32"), scale_a=6.42, scale_b=3.58, ) 	 50803202 	 1000 	 0.2952134609222412 	 0.29886794090270996 	 0.2808694839477539 	 0.2884213924407959 	 0.4506571292877197 	 0.7430899143218994 	 0.39484405517578125 	 0.3796834945678711 	 
2025-07-27 20:10:51.498365 test begin: paddle.stanh(x=Tensor([2, 3, 2, 2116801],"float64"), scale_a=0.67, scale_b=1.72, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2, 3, 2, 2116801],"float64"), scale_a=0.67, scale_b=1.72, ) 	 25401612 	 1000 	 0.30171704292297363 	 0.3004117012023926 	 0.2902381420135498 	 0.28864073753356934 	 0.4472067356109619 	 0.7414648532867432 	 0.39307689666748047 	 0.37879228591918945 	 
2025-07-27 20:10:54.402941 test begin: paddle.stanh(x=Tensor([2, 3, 2116801, 2],"float64"), scale_a=0.67, scale_b=1.72, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2, 3, 2116801, 2],"float64"), scale_a=0.67, scale_b=1.72, ) 	 25401612 	 1000 	 0.29994964599609375 	 0.30043983459472656 	 0.28982996940612793 	 0.2899296283721924 	 0.44735193252563477 	 0.7414371967315674 	 0.39287710189819336 	 0.37883615493774414 	 
2025-07-27 20:10:57.309852 test begin: paddle.stanh(x=Tensor([2, 3175201, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2, 3175201, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, ) 	 25401608 	 1000 	 0.29993581771850586 	 0.30572962760925293 	 0.29012417793273926 	 0.28878116607666016 	 0.44733643531799316 	 0.7414216995239258 	 0.39249587059020996 	 0.378814697265625 	 
2025-07-27 20:11:00.189059 test begin: paddle.stanh(x=Tensor([2116801, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([2116801, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, ) 	 25401612 	 1000 	 0.2999560832977295 	 0.3004879951477051 	 0.2901723384857178 	 0.2876107692718506 	 0.44718146324157715 	 0.7414333820343018 	 0.3922455310821533 	 0.3787708282470703 	 
2025-07-27 20:11:03.058406 test begin: paddle.stanh(x=Tensor([25401601, 2],"float32"), scale_a=6.42, scale_b=3.58, )
[Prof] paddle.stanh 	 paddle.stanh(x=Tensor([25401601, 2],"float32"), scale_a=6.42, scale_b=3.58, ) 	 50803202 	 1000 	 0.29514431953430176 	 1.336256980895996 	 0.2852637767791748 	 0.2882680892944336 	 0.4506063461303711 	 0.7432007789611816 	 0.3954000473022461 	 0.3796851634979248 	 
2025-07-27 20:11:10.495362 test begin: paddle.std(Tensor([1, 1270081, 4, 10],"float32"), list[1,3,], True, False, )
W0727 20:11:12.944253  2451 dygraph_functions.cc:88394] got different data type, run type promotion automatically, this may cause data type been changed.
[Prof] paddle.std 	 paddle.std(Tensor([1, 1270081, 4, 10],"float32"), list[1,3,], True, False, ) 	 50803240 	 1000 	 1.7241687774658203 	 0.23146963119506836 	 4.553794860839844e-05 	 0.11823010444641113 	 1.4194679260253906 	 0.8039360046386719 	 0.18166303634643555 	 0.09157013893127441 	 
2025-07-27 20:11:18.226386 test begin: paddle.std(Tensor([1, 3, 1693441, 10],"float32"), list[1,3,], True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([1, 3, 1693441, 10],"float32"), list[1,3,], True, False, ) 	 50803230 	 1000 	 1.5362422466278076 	 0.7938311100006104 	 2.5987625122070312e-05 	 0.7763476371765137 	 1.6484274864196777 	 1.0747361183166504 	 0.24066805839538574 	 0.13751816749572754 	 
2025-07-27 20:11:24.135540 test begin: paddle.std(Tensor([1, 3, 4, 2116801],"float64"), 2, True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([1, 3, 4, 2116801],"float64"), 2, True, False, ) 	 25401612 	 1000 	 1.6419649124145508 	 0.21778416633605957 	 0.00012350082397460938 	 0.1999037265777588 	 2.022477865219116 	 1.4870588779449463 	 0.29529738426208496 	 0.19015789031982422 	 
2025-07-27 20:11:30.215739 test begin: paddle.std(Tensor([1, 3, 4, 4233601],"float32"), list[1,3,], True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([1, 3, 4, 4233601],"float32"), list[1,3,], True, False, ) 	 50803212 	 1000 	 1.2154741287231445 	 0.23540139198303223 	 3.4332275390625e-05 	 0.12028622627258301 	 1.4022276401519775 	 0.7977139949798584 	 0.17940330505371094 	 0.09099197387695312 	 
2025-07-27 20:11:34.727217 test begin: paddle.std(Tensor([1, 3, 846721, 10],"float64"), 2, True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([1, 3, 846721, 10],"float64"), 2, True, False, ) 	 25401630 	 1000 	 8.661222457885742 	 0.1855020523071289 	 4.5299530029296875e-05 	 0.0947721004486084 	 4.822999715805054 	 0.779242753982544 	 0.6172919273376465 	 0.08877801895141602 	 
2025-07-27 20:11:51.415645 test begin: paddle.std(Tensor([1, 635041, 4, 10],"float64"), 2, True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([1, 635041, 4, 10],"float64"), 2, True, False, ) 	 25401640 	 1000 	 1.7599139213562012 	 0.198685884475708 	 0.00012040138244628906 	 0.18107390403747559 	 1.9399409294128418 	 1.2677631378173828 	 0.2832314968109131 	 0.16206097602844238 	 
2025-07-27 20:11:57.258004 test begin: paddle.std(Tensor([1587601, 32],"float32"), )
[Prof] paddle.std 	 paddle.std(Tensor([1587601, 32],"float32"), ) 	 50803232 	 1000 	 1.1006112098693848 	 0.16628551483154297 	 2.3126602172851562e-05 	 0.08495974540710449 	 1.338536024093628 	 0.7765076160430908 	 0.17128348350524902 	 0.08847618103027344 	 
2025-07-27 20:12:01.469748 test begin: paddle.std(Tensor([211681, 3, 4, 10],"float64"), 2, True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([211681, 3, 4, 10],"float64"), 2, True, False, ) 	 25401720 	 1000 	 1.7573113441467285 	 0.1987292766571045 	 0.00011801719665527344 	 0.1804213523864746 	 1.9402329921722412 	 1.2678639888763428 	 0.28330039978027344 	 0.16209745407104492 	 
2025-07-27 20:12:07.356085 test begin: paddle.std(Tensor([32, 1587601],"float32"), )
[Prof] paddle.std 	 paddle.std(Tensor([32, 1587601],"float32"), ) 	 50803232 	 1000 	 1.0996365547180176 	 0.16628384590148926 	 3.266334533691406e-05 	 0.08494281768798828 	 1.3383450508117676 	 0.7763333320617676 	 0.17127108573913574 	 0.08844399452209473 	 
2025-07-27 20:12:11.594135 test begin: paddle.std(Tensor([423361, 3, 4, 10],"float32"), list[1,3,], True, False, )
[Prof] paddle.std 	 paddle.std(Tensor([423361, 3, 4, 10],"float32"), list[1,3,], True, False, ) 	 50803320 	 1000 	 1.5238971710205078 	 0.8258061408996582 	 5.9604644775390625e-05 	 0.8087611198425293 	 1.635084867477417 	 1.102933645248413 	 0.2386929988861084 	 0.14111685752868652 	 
2025-07-27 20:12:19.413573 test begin: paddle.strided_slice(x=Tensor([3, 4, 352801, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 352801, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 25401672 	 1000 	 0.006023406982421875 	 0.20450067520141602 	 8.821487426757812e-06 	 6.914138793945312e-05 	 0.14767122268676758 	 0.1973249912261963 	 0.07529425621032715 	 7.724761962890625e-05 	 combined
2025-07-27 20:12:22.950189 test begin: paddle.strided_slice(x=Tensor([3, 4, 5, 423361],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 5, 423361],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 25401660 	 1000 	 0.006972789764404297 	 0.20635294914245605 	 3.7670135498046875e-05 	 5.53131103515625e-05 	 0.14745759963989258 	 0.2005627155303955 	 0.07527542114257812 	 7.963180541992188e-05 	 combined
2025-07-27 20:12:24.046839 test begin: paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 50803260 	 1000 	 0.005873441696166992 	 0.21415185928344727 	 1.1682510375976562e-05 	 8.392333984375e-05 	 0.14783382415771484 	 0.20376825332641602 	 0.07534337043762207 	 6.866455078125e-05 	 combined
2025-07-27 20:12:25.478408 test begin: paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 50803260 	 1000 	 0.005964517593383789 	 0.21010994911193848 	 7.62939453125e-06 	 7.128715515136719e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:12:26.431701 test begin: paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 50803272 	 1000 	 0.00592494010925293 	 0.20714426040649414 	 7.152557373046875e-06 	 6.341934204101562e-05 	 0.14765048027038574 	 0.19993162155151367 	 0.07535052299499512 	 6.914138793945312e-05 	 combined
2025-07-27 20:12:27.820369 test begin: paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 50803272 	 1000 	 0.005984783172607422 	 0.22673273086547852 	 7.152557373046875e-06 	 6.29425048828125e-05 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:12:28.794579 test begin: paddle.strided_slice(x=Tensor([423361, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
[Prof] paddle.strided_slice 	 paddle.strided_slice(x=Tensor([423361, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], ) 	 50803320 	 1000 	 0.005967140197753906 	 0.28207993507385254 	 8.821487426757812e-06 	 0.0195004940032959 	 None 	 None 	 None 	 None 	 combined
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:12:29.977806 test begin: paddle.subtract(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), ) 	 101608320 	 1000 	 0.45081639289855957 	 0.4467740058898926 	 0.4409294128417969 	 0.43525242805480957 	 0.47405195236206055 	 0.2978017330169678 	 0.4153025150299072 	 0.2227611541748047 	 
2025-07-27 20:12:34.234382 test begin: paddle.subtract(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), ) 	 101671488 	 1000 	 0.4541590213775635 	 0.4538254737854004 	 0.43376755714416504 	 0.42839598655700684 	 0.47451210021972656 	 0.29799532890319824 	 0.4058082103729248 	 0.19300127029418945 	 
2025-07-27 20:12:41.174220 test begin: paddle.subtract(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), ) 	 65141280 	 1000 	 0.35950279235839844 	 0.36999058723449707 	 0.34328746795654297 	 0.3575265407562256 	 0.8838715553283691 	 0.8982641696929932 	 0.4515542984008789 	 0.45891475677490234 	 
2025-07-27 20:12:45.751550 test begin: paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), ) 	 65141280 	 1000 	 0.3577713966369629 	 0.3699347972869873 	 0.3396902084350586 	 0.3506166934967041 	 0.8191828727722168 	 0.8982601165771484 	 0.2789607048034668 	 0.45896410942077637 	 
2025-07-27 20:12:50.189436 test begin: paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), ) 	 115806720 	 1000 	 0.5153915882110596 	 0.5118391513824463 	 0.5028479099273682 	 0.4900033473968506 	 0.540642261505127 	 0.3387026786804199 	 0.4664299488067627 	 0.25637221336364746 	 
2025-07-27 20:12:54.922695 test begin: paddle.subtract(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), ) 	 102537200 	 1000 	 0.4548041820526123 	 0.4508631229400635 	 0.44496726989746094 	 0.43909549713134766 	 0.47978806495666504 	 0.30049753189086914 	 0.42089104652404785 	 0.22587919235229492 	 
2025-07-27 20:12:59.134940 test begin: paddle.subtract(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), ) 	 101646336 	 1000 	 0.4509105682373047 	 0.44693660736083984 	 0.4410665035247803 	 0.43537354469299316 	 0.4738657474517822 	 0.29792356491088867 	 0.41504955291748047 	 0.22416186332702637 	 
2025-07-27 20:13:03.351542 test begin: paddle.subtract(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), ) 	 101670912 	 1000 	 0.4510843753814697 	 0.44708824157714844 	 0.44117307662963867 	 0.43564510345458984 	 0.4739851951599121 	 0.29799413681030273 	 0.41519784927368164 	 0.22358059883117676 	 
2025-07-27 20:13:07.574076 test begin: paddle.subtract(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), ) 	 101744640 	 1000 	 0.4513568878173828 	 0.4483060836791992 	 0.44161367416381836 	 0.4345390796661377 	 0.4747734069824219 	 0.2981867790222168 	 0.4151897430419922 	 0.21961307525634766 	 
2025-07-27 20:13:11.724264 test begin: paddle.subtract(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), ) 	 103809024 	 1000 	 0.4603855609893799 	 0.45636773109436035 	 0.4505188465118408 	 0.4446136951446533 	 0.4844982624053955 	 0.3040657043457031 	 0.42525577545166016 	 0.23036646842956543 	 
2025-07-27 20:13:15.948323 test begin: paddle.subtract(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), ) 	 103809024 	 1000 	 0.4602978229522705 	 0.4563443660736084 	 0.45056986808776855 	 0.44477105140686035 	 0.48456311225891113 	 0.3040957450866699 	 0.42293667793273926 	 0.22825145721435547 	 
2025-07-27 20:13:20.227316 test begin: paddle.subtract(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), ) 	 104857600 	 1000 	 0.4665241241455078 	 0.4688866138458252 	 0.4539470672607422 	 0.4490993022918701 	 0.49056339263916016 	 0.30719804763793945 	 0.4314301013946533 	 0.23095130920410156 	 
2025-07-27 20:13:28.483539 test begin: paddle.subtract(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), ) 	 101646336 	 1000 	 0.45084714889526367 	 0.4494805335998535 	 0.43392133712768555 	 0.4345817565917969 	 0.47375941276550293 	 0.2980039119720459 	 0.40102219581604004 	 0.22390389442443848 	 
2025-07-27 20:13:32.728743 test begin: paddle.subtract(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), ) 	 101646336 	 1000 	 0.4513382911682129 	 0.8994808197021484 	 0.4331529140472412 	 0.43486809730529785 	 0.4739987850189209 	 0.2979907989501953 	 0.4031050205230713 	 0.22310614585876465 	 
2025-07-27 20:13:40.150422 test begin: paddle.subtract(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), )
[Prof] paddle.subtract 	 paddle.subtract(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), ) 	 101744640 	 1000 	 0.4513821601867676 	 0.46184468269348145 	 0.4344451427459717 	 0.42868852615356445 	 0.4746105670928955 	 0.29824304580688477 	 0.4041867256164551 	 0.21469354629516602 	 
2025-07-27 20:13:44.432203 test begin: paddle.sum(Tensor([3544, 32, 896],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([3544, 32, 896],"bfloat16"), axis=1, keepdim=False, ) 	 101613568 	 1000 	 0.1734483242034912 	 0.1599881649017334 	 0.15871930122375488 	 0.14506173133850098 	 0.2685539722442627 	 0.08288931846618652 	 0.20517754554748535 	 3.2901763916015625e-05 	 
2025-07-27 20:13:46.820425 test begin: paddle.sum(Tensor([6017, 19, 896],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6017, 19, 896],"bfloat16"), axis=1, keepdim=False, ) 	 102433408 	 1000 	 0.17614436149597168 	 0.1786198616027832 	 0.15508222579956055 	 0.15321016311645508 	 0.2709214687347412 	 0.09125804901123047 	 0.2002089023590088 	 5.0067901611328125e-05 	 
2025-07-27 20:13:49.316985 test begin: paddle.sum(Tensor([6017, 32, 528],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6017, 32, 528],"bfloat16"), axis=1, keepdim=False, ) 	 101663232 	 1000 	 0.18497109413146973 	 0.16245245933532715 	 0.16329598426818848 	 0.14058828353881836 	 0.26882362365722656 	 0.09214925765991211 	 0.1960299015045166 	 3.933906555175781e-05 	 
2025-07-27 20:13:51.809997 test begin: paddle.sum(Tensor([6036, 19, 896],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6036, 19, 896],"bfloat16"), axis=1, keepdim=False, ) 	 102756864 	 1000 	 0.17663335800170898 	 0.1780552864074707 	 0.1562519073486328 	 0.15226054191589355 	 0.27179479598999023 	 0.09311771392822266 	 0.17938733100891113 	 5.269050598144531e-05 	 
2025-07-27 20:13:54.311059 test begin: paddle.sum(Tensor([6036, 32, 527],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6036, 32, 527],"bfloat16"), axis=1, keepdim=False, ) 	 101791104 	 1000 	 0.18665003776550293 	 0.1797637939453125 	 0.16629338264465332 	 0.15741300582885742 	 0.2692432403564453 	 0.09207677841186523 	 0.19779586791992188 	 5.555152893066406e-05 	 
2025-07-27 20:13:56.734287 test begin: paddle.sum(Tensor([6078, 19, 896],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6078, 19, 896],"bfloat16"), axis=1, keepdim=False, ) 	 103471872 	 1000 	 0.17764854431152344 	 0.17992186546325684 	 0.157243013381958 	 0.15407991409301758 	 0.27405381202697754 	 0.09405303001403809 	 0.20322918891906738 	 3.743171691894531e-05 	 
2025-07-27 20:13:59.211583 test begin: paddle.sum(Tensor([6078, 32, 523],"bfloat16"), axis=1, keepdim=False, )
[Prof] paddle.sum 	 paddle.sum(Tensor([6078, 32, 523],"bfloat16"), axis=1, keepdim=False, ) 	 101721408 	 1000 	 0.18250799179077148 	 0.17550134658813477 	 0.1618037223815918 	 0.1531658172607422 	 0.2690274715423584 	 0.09185457229614258 	 0.19704127311706543 	 3.719329833984375e-05 	 
2025-07-27 20:14:01.634923 test begin: paddle.t(Tensor([10, 5080321],"float32"), )
[Prof] paddle.t 	 paddle.t(Tensor([10, 5080321],"float32"), ) 	 50803210 	 1000 	 0.008838415145874023 	 0.0067157745361328125 	 2.1457672119140625e-05 	 1.8835067749023438e-05 	 0.04793238639831543 	 0.07217121124267578 	 3.0517578125e-05 	 7.748603820800781e-05 	 
2025-07-27 20:14:03.432114 test begin: paddle.t(Tensor([20, 2540161],"float32"), )
[Prof] paddle.t 	 paddle.t(Tensor([20, 2540161],"float32"), ) 	 50803220 	 1000 	 0.004369497299194336 	 0.003664255142211914 	 1.9550323486328125e-05 	 1.8358230590820312e-05 	 0.040715694427490234 	 0.056981563568115234 	 2.47955322265625e-05 	 4.5299530029296875e-05 	 
2025-07-27 20:14:05.165402 test begin: paddle.t(Tensor([2540161, 20],"float32"), )
[Prof] paddle.t 	 paddle.t(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.00418853759765625 	 0.003628253936767578 	 1.4066696166992188e-05 	 1.7642974853515625e-05 	 0.040677785873413086 	 0.0576324462890625 	 1.9073486328125e-05 	 6.341934204101562e-05 	 
2025-07-27 20:14:06.912275 test begin: paddle.t(Tensor([49613, 512],"int64"), )
[Prof] paddle.t 	 paddle.t(Tensor([49613, 512],"int64"), ) 	 25401856 	 1000 	 0.004320621490478516 	 0.003667116165161133 	 1.4543533325195312e-05 	 1.7642974853515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:07.783127 test begin: paddle.t(Tensor([5080321, 10],"float32"), )
[Prof] paddle.t 	 paddle.t(Tensor([5080321, 10],"float32"), ) 	 50803210 	 1000 	 0.00431513786315918 	 0.0036287307739257812 	 1.1682510375976562e-05 	 1.8596649169921875e-05 	 0.040817975997924805 	 0.05633664131164551 	 2.8133392333984375e-05 	 5.316734313964844e-05 	 
2025-07-27 20:14:09.524450 test begin: paddle.t(Tensor([512, 49613],"int64"), )
[Prof] paddle.t 	 paddle.t(Tensor([512, 49613],"int64"), ) 	 25401856 	 1000 	 0.0046956539154052734 	 0.003649473190307617 	 1.9073486328125e-05 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:14:10.388885 test begin: paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", ) 	 76204806 	 1000 	 3.19014573097229 	 2.9110474586486816 	 0.6532454490661621 	 0.4250028133392334 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:14:23.203922 test begin: paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", ) 	 50803210 	 1000 	 0.09487009048461914 	 0.12019538879394531 	 1.4066696166992188e-05 	 7.271766662597656e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:14:24.386308 test begin: paddle.take(Tensor([12700801, 4],"float32"), Tensor([6350401, 3],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([12700801, 4],"float32"), Tensor([6350401, 3],"int64"), mode="raise", ) 	 69854407 	 1000 	 2.4019827842712402 	 2.207512140274048 	 0.49176883697509766 	 0.32067418098449707 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:14:37.705663 test begin: paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 3],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 3],"int64"), mode="raise", ) 	 50803209 	 1000 	 0.09085750579833984 	 0.1348261833190918 	 3.552436828613281e-05 	 7.748603820800781e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:14:40.125523 test begin: paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 8467201],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 8467201],"int64"), mode="raise", ) 	 67737605 	 1000 	 2.1389646530151367 	 1.9610614776611328 	 0.43794870376586914 	 0.28572750091552734 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:14:48.947398 test begin: paddle.take(Tensor([3, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", ) 	 25401614 	 1000 	 1.5440473556518555 	 1.1427977085113525 	 0.3157937526702881 	 0.16685914993286133 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:15:03.192998 test begin: paddle.take(Tensor([3, 4],"float32"), Tensor([8467201, 3],"int64"), mode="raise", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float32"), Tensor([8467201, 3],"int64"), mode="raise", ) 	 25401615 	 1000 	 1.544201374053955 	 1.1430001258850098 	 0.31580376625061035 	 0.16688132286071777 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:15:17.635406 test begin: paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="clip", ) 	 25401620 	 1000 	 0.6442553997039795 	 0.6096310615539551 	 0.32904601097106934 	 0.307995080947876 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:15:40.537390 test begin: paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="wrap", ) 	 25401620 	 1000 	 3.346799612045288 	 1.2008459568023682 	 0.31110548973083496 	 0.306743860244751 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:16:03.276411 test begin: paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="clip", ) 	 25401617 	 1000 	 0.6440765857696533 	 0.6029055118560791 	 0.32896995544433594 	 0.307955265045166 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:16:20.957494 test begin: paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="wrap", ) 	 25401617 	 1000 	 3.346494674682617 	 1.206946611404419 	 0.31103968620300293 	 0.30673766136169434 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:16:42.089677 test begin: paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="clip", ) 	 67737608 	 1000 	 3.9994304180145264 	 4.005891799926758 	 2.035442590713501 	 2.0469067096710205 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:02.281458 test begin: paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="wrap", ) 	 67737608 	 1000 	 8.451082468032837 	 4.995218753814697 	 0.7857155799865723 	 1.2777373790740967 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:26.001747 test begin: paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="clip", ) 	 25401643 	 1000 	 0.08363580703735352 	 0.06288552284240723 	 2.6941299438476562e-05 	 5.0067901611328125e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:26.832309 test begin: paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="wrap", ) 	 25401643 	 1000 	 0.22173285484313965 	 0.12614202499389648 	 3.170967102050781e-05 	 9.465217590332031e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:27.871085 test begin: paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", ) 	 25401644 	 1000 	 0.10119199752807617 	 0.06330537796020508 	 3.409385681152344e-05 	 6.461143493652344e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:28.711110 test begin: paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", ) 	 25401644 	 1000 	 0.22487282752990723 	 0.10761857032775879 	 4.1961669921875e-05 	 0.00017714500427246094 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:29.732308 test begin: paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="clip", )
[Prof] paddle.take 	 paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="clip", ) 	 76204812 	 1000 	 4.78022027015686 	 4.804638147354126 	 2.4424941539764404 	 2.455070972442627 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:17:51.698924 test begin: paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="wrap", )
[Prof] paddle.take 	 paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="wrap", ) 	 76204812 	 1000 	 10.134291887283325 	 5.98987603187561 	 0.942223310470581 	 1.5321683883666992 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:22.536947 test begin: paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 24807],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 24807],"int64"), axis=-1, ) 	 25795584 	 1000 	 0.5811355113983154 	 0.24160051345825195 	 0.19777894020080566 	 0.22397351264953613 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:27.247014 test begin: paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 24807],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 24807],"int64"), axis=-1, ) 	 76206080 	 1000 	 1.0079967975616455 	 0.44011712074279785 	 0.34188175201416016 	 0.4142448902130127 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:33.085660 test begin: paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 7],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 7],"int64"), axis=-1, ) 	 50810880 	 1000 	 0.3049190044403076 	 0.01731586456298828 	 0.10385894775390625 	 6.198883056640625e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:34.742945 test begin: paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 8],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 8],"int64"), axis=-1, ) 	 50811904 	 1000 	 0.31680822372436523 	 0.0250091552734375 	 0.10387420654296875 	 3.314018249511719e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:40.785285 test begin: paddle.take_along_axis(Tensor([1051, 63, 768],"float32"), axis=1, indices=Tensor([1051, 7, 768],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([1051, 63, 768],"float32"), axis=1, indices=Tensor([1051, 7, 768],"int64"), ) 	 56501760 	 1000 	 0.5627431869506836 	 0.30625391006469727 	 0.18842649459838867 	 0.2887251377105713 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:43.694369 test begin: paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 7],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 7],"int64"), axis=-1, ) 	 51729691 	 1000 	 0.3647744655609131 	 0.057076454162597656 	 0.12422418594360352 	 0.04011178016662598 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:45.555597 test begin: paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 8],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 8],"int64"), axis=-1, ) 	 51861992 	 1000 	 0.3717973232269287 	 0.06263971328735352 	 0.12666749954223633 	 0.045378684997558594 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:18:47.440160 test begin: paddle.take_along_axis(Tensor([3175201, 384],"float32"), Tensor([3175201, 8],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([3175201, 384],"float32"), Tensor([3175201, 8],"int64"), axis=-1, ) 	 1244678792 	 1000 	 8.609666585922241 	 1.3754825592041016 	 2.9352309703826904 	 0.3513798713684082 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:19:34.805302 test begin: paddle.take_along_axis(Tensor([3628801, 384],"float32"), Tensor([3628801, 7],"int64"), axis=-1, )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([3628801, 384],"float32"), Tensor([3628801, 7],"int64"), axis=-1, ) 	 1418861191 	 1000 	 9.770820140838623 	 1.4202940464019775 	 3.411099672317505 	 0.36281681060791016 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:20:28.113455 test begin: paddle.take_along_axis(Tensor([4726, 63, 768],"float32"), axis=1, indices=Tensor([4726, 7, 768],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([4726, 63, 768],"float32"), axis=1, indices=Tensor([4726, 7, 768],"int64"), ) 	 254069760 	 1000 	 2.429393768310547 	 1.3854100704193115 	 0.8281316757202148 	 1.3616132736206055 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:20:42.658200 test begin: paddle.take_along_axis(Tensor([8, 63, 100801],"float32"), axis=1, indices=Tensor([8, 7, 100801],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([8, 63, 100801],"float32"), axis=1, indices=Tensor([8, 7, 100801],"int64"), ) 	 56448560 	 1000 	 0.5715439319610596 	 0.3081319332122803 	 0.1948237419128418 	 0.29076242446899414 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:20:45.667966 test begin: paddle.take_along_axis(Tensor([8, 63, 453601],"float32"), axis=1, indices=Tensor([8, 7, 453601],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([8, 63, 453601],"float32"), axis=1, indices=Tensor([8, 7, 453601],"int64"), ) 	 254016560 	 1000 	 3.033696413040161 	 1.5870096683502197 	 1.0342066287994385 	 1.5685904026031494 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:02.415902 test begin: paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), ) 	 25792512 	 1000 	 0.5996897220611572 	 0.29883742332458496 	 0.20420217514038086 	 0.26604151725769043 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:07.738813 test begin: paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), ) 	 76210176 	 1000 	 1.3526906967163086 	 0.9632446765899658 	 0.46097326278686523 	 0.9317142963409424 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:16.609693 test begin: paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
[Prof] paddle.take_along_axis 	 paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), ) 	 50847744 	 1000 	 0.30762290954589844 	 0.01807379722595215 	 0.10489082336425781 	 5.698204040527344e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:21:18.214440 test begin: paddle.tan(Tensor([8, 16, 396901],"float32"), )
[Prof] paddle.tan 	 paddle.tan(Tensor([8, 16, 396901],"float32"), ) 	 50803328 	 1000 	 0.2951850891113281 	 0.29820680618286133 	 0.2858695983886719 	 0.2869250774383545 	 0.45140910148620605 	 1.040482521057129 	 0.3947179317474365 	 0.3544163703918457 	 
2025-07-27 20:21:22.034249 test begin: paddle.tan(Tensor([8, 198451, 32],"float32"), )
[Prof] paddle.tan 	 paddle.tan(Tensor([8, 198451, 32],"float32"), ) 	 50803456 	 1000 	 0.2950873374938965 	 0.2981834411621094 	 0.28633904457092285 	 0.28696513175964355 	 0.4511098861694336 	 1.040522813796997 	 0.3963582515716553 	 0.35448217391967773 	 
2025-07-27 20:21:25.795111 test begin: paddle.tan(Tensor([99226, 16, 32],"float32"), )
[Prof] paddle.tan 	 paddle.tan(Tensor([99226, 16, 32],"float32"), ) 	 50803712 	 1000 	 0.29509615898132324 	 0.29817819595336914 	 0.2864072322845459 	 0.28743624687194824 	 0.45119786262512207 	 1.0405285358428955 	 0.3763704299926758 	 0.3545103073120117 	 
2025-07-27 20:21:29.581086 test begin: paddle.tanh(Tensor([16, 125, 25500],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([16, 125, 25500],"float32"), ) 	 51000000 	 1000 	 0.2967209815979004 	 0.3021738529205322 	 0.2854800224304199 	 0.28841471672058105 	 0.45119762420654297 	 0.4484212398529053 	 0.3967421054840088 	 0.3696897029876709 	 
2025-07-27 20:21:32.751524 test begin: paddle.tanh(Tensor([16, 64, 49613],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([16, 64, 49613],"float32"), ) 	 50803712 	 1000 	 0.29514479637145996 	 0.2993888854980469 	 0.28627657890319824 	 0.28785085678100586 	 0.4492213726043701 	 0.4467051029205322 	 0.3948338031768799 	 0.3695077896118164 	 
2025-07-27 20:21:37.934205 test begin: paddle.tanh(Tensor([28, 32, 241, 241],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([28, 32, 241, 241],"float32"), ) 	 52040576 	 1000 	 0.3030369281768799 	 0.31143832206726074 	 0.28750181198120117 	 0.2942976951599121 	 0.46014904975891113 	 0.4574253559112549 	 0.39637303352355957 	 0.3664891719818115 	 
2025-07-27 20:21:41.617336 test begin: paddle.tanh(Tensor([32, 64, 25500],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([32, 64, 25500],"float32"), ) 	 52224000 	 1000 	 0.30350828170776367 	 0.3065180778503418 	 0.28774213790893555 	 0.2897458076477051 	 0.4616880416870117 	 0.45899128913879395 	 0.3982529640197754 	 0.3851311206817627 	 
2025-07-27 20:21:44.821842 test begin: paddle.tanh(Tensor([64, 26, 512, 1, 60],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([64, 26, 512, 1, 60],"float32"), ) 	 51118080 	 1000 	 0.29707789421081543 	 0.3000020980834961 	 0.2812209129333496 	 0.2819223403930664 	 0.45186758041381836 	 0.4493710994720459 	 0.3884294033050537 	 0.38069653511047363 	 
2025-07-27 20:21:47.947969 test begin: paddle.tanh(Tensor([64, 26, 512, 2, 40],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([64, 26, 512, 2, 40],"float32"), ) 	 68157440 	 1000 	 0.39447808265686035 	 0.39820194244384766 	 0.3788459300994873 	 0.3811960220336914 	 0.6009337902069092 	 0.5975842475891113 	 0.5351724624633789 	 0.5230183601379395 	 
2025-07-27 20:21:52.166986 test begin: paddle.tanh(Tensor([64, 26, 764, 1, 40],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([64, 26, 764, 1, 40],"float32"), ) 	 50851840 	 1000 	 0.2955305576324463 	 0.3023989200592041 	 0.2857027053833008 	 0.28780579566955566 	 0.4495577812194824 	 0.4471933841705322 	 0.3951699733734131 	 0.377673864364624 	 
2025-07-27 20:21:55.341023 test begin: paddle.tanh(Tensor([64, 39, 512, 1, 40],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([64, 39, 512, 1, 40],"float32"), ) 	 51118080 	 1000 	 0.2970902919769287 	 0.300006628036499 	 0.2880983352661133 	 0.2892141342163086 	 0.4519226551055908 	 0.44943881034851074 	 0.3898603916168213 	 0.38019609451293945 	 
2025-07-27 20:21:58.494792 test begin: paddle.tanh(Tensor([8, 110, 241, 241],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([8, 110, 241, 241],"float32"), ) 	 51111280 	 1000 	 0.29718494415283203 	 0.30391716957092285 	 0.28846168518066406 	 0.2891378402709961 	 0.4520552158355713 	 0.44935131072998047 	 0.3977830410003662 	 0.37993288040161133 	 
2025-07-27 20:22:01.675114 test begin: paddle.tanh(Tensor([8, 32, 241, 824],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([8, 32, 241, 824],"float32"), ) 	 50837504 	 1000 	 0.2953920364379883 	 0.298372745513916 	 0.286557674407959 	 0.28771448135375977 	 0.449537992477417 	 0.4471414089202881 	 0.39540719985961914 	 0.37541961669921875 	 
2025-07-27 20:22:04.857299 test begin: paddle.tanh(Tensor([8, 32, 824, 241],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([8, 32, 824, 241],"float32"), ) 	 50837504 	 1000 	 0.2954111099243164 	 0.2984156608581543 	 0.28664064407348633 	 0.28778791427612305 	 0.44948244094848633 	 0.4470486640930176 	 0.39545273780822754 	 0.3800380229949951 	 
2025-07-27 20:22:07.976955 test begin: paddle.tanh(Tensor([96, 26, 512, 1, 40],"float32"), )
[Prof] paddle.tanh 	 paddle.tanh(Tensor([96, 26, 512, 1, 40],"float32"), ) 	 51118080 	 1000 	 0.2970890998840332 	 0.30004096031188965 	 0.2878551483154297 	 0.28887057304382324 	 0.45180702209472656 	 0.44939613342285156 	 0.39557743072509766 	 0.3800020217895508 	 
2025-07-27 20:22:11.119398 test begin: paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,3,], axis=3, )
W0727 20:22:11.846575 24274 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,3,], axis=3, ) 	 25401712 	 1000 	 0.024184703826904297 	 0.007923126220703125 	 1.6927719116210938e-05 	 2.09808349609375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:11.972479 test begin: paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
W0727 20:22:12.687074 24275 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,4,6,], axis=3, ) 	 25401712 	 1000 	 0.03060746192932129 	 0.009444475173950195 	 2.86102294921875e-05 	 2.1457672119140625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:12.810273 test begin: paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
W0727 20:22:13.511591 24276 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), tuple(2,6,), axis=3, ) 	 25401712 	 1000 	 0.02419877052307129 	 0.0080413818359375 	 1.9788742065429688e-05 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:13.645633 test begin: paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,3,], axis=3, )
W0727 20:22:14.368067 24277 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,3,], axis=3, ) 	 25401712 	 1000 	 0.04061460494995117 	 0.01300048828125 	 2.574920654296875e-05 	 2.193450927734375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:14.531071 test begin: paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,4,6,], axis=3, )
W0727 20:22:15.253924 24278 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,4,6,], axis=3, ) 	 25401712 	 1000 	 0.03063511848449707 	 0.009449005126953125 	 1.811981201171875e-05 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:15.377498 test begin: paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), tuple(2,6,), axis=3, )
W0727 20:22:16.077613 24279 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), tuple(2,6,), axis=3, ) 	 25401712 	 1000 	 0.02350449562072754 	 0.00798797607421875 	 1.9550323486328125e-05 	 1.9788742065429688e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:16.201794 test begin: paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,3,], axis=3, )
W0727 20:22:16.900606 24281 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,3,], axis=3, ) 	 25401712 	 1000 	 0.023530244827270508 	 0.008016586303710938 	 1.4066696166992188e-05 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:18.396407 test begin: paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,4,6,], axis=3, )
W0727 20:22:19.120997 24282 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,4,6,], axis=3, ) 	 25401712 	 1000 	 0.03026580810546875 	 0.009385347366333008 	 1.52587890625e-05 	 1.9073486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:21.401466 test begin: paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), tuple(2,6,), axis=3, )
W0727 20:22:22.114902 24288 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), tuple(2,6,), axis=3, ) 	 25401712 	 1000 	 0.04074215888977051 	 0.01971435546875 	 2.9325485229492188e-05 	 6.341934204101562e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:22.260587 test begin: paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,3,], axis=3, )
W0727 20:22:22.998708 24289 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,3,], axis=3, ) 	 25401664 	 1000 	 0.02630925178527832 	 0.008076906204223633 	 2.47955322265625e-05 	 1.8835067749023438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:23.120314 test begin: paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,4,6,], axis=3, )
W0727 20:22:23.862033 24290 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,4,6,], axis=3, ) 	 25401664 	 1000 	 0.030672311782836914 	 0.009361028671264648 	 1.0728836059570312e-05 	 2.0503997802734375e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:23.991615 test begin: paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), tuple(2,6,), axis=3, )
W0727 20:22:24.719885 24291 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.tensor_split 	 paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), tuple(2,6,), axis=3, ) 	 25401664 	 1000 	 0.02409982681274414 	 0.008127689361572266 	 1.8596649169921875e-05 	 2.3365020751953125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:22:24.843661 test begin: paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[0,], ) 	 101606500 	 1000 	 1.0823750495910645 	 0.8455965518951416 	 0.3686957359313965 	 0.4320409297943115 	 1.5952582359313965 	 1.5992686748504639 	 0.8150351047515869 	 0.8167874813079834 	 
2025-07-27 20:22:31.772105 test begin: paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[3,0,], ) 	 101606500 	 1000 	 1.1619806289672852 	 3.5536792278289795 	 0.2966651916503906 	 0.9057662487030029 	 0.8012247085571289 	 0.795586347579956 	 0.2045896053314209 	 0.20311188697814941 	 
2025-07-27 20:22:41.588919 test begin: paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], ) 	 50803875 	 1000 	 5.104486703872681 	 4.128978729248047 	 0.47356200218200684 	 0.42181921005249023 	 11.547526121139526 	 10.657631635665894 	 0.9090757369995117 	 0.9067239761352539 	 
2025-07-27 20:23:37.667587 test begin: paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], ) 	 50803875 	 1000 	 1.422802209854126 	 0.7309472560882568 	 0.3631727695465088 	 0.1855330467224121 	 0.7867157459259033 	 0.7846765518188477 	 0.2009274959564209 	 0.20038247108459473 	 
2025-07-27 20:23:42.981775 test begin: paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], ) 	 50803875 	 1000 	 5.103967666625977 	 4.128870487213135 	 0.4734194278717041 	 0.42180299758911133 	 11.53276014328003 	 10.657824993133545 	 0.9079642295837402 	 0.9067642688751221 	 
2025-07-27 20:24:41.164951 test begin: paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], ) 	 50803875 	 1000 	 1.4228403568267822 	 0.7263953685760498 	 0.3632049560546875 	 0.1855602264404297 	 0.7866263389587402 	 0.7845354080200195 	 0.20084595680236816 	 0.20038318634033203 	 
2025-07-27 20:24:46.592751 test begin: paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[3,0,], ) 	 101606500 	 1000 	 2.0945746898651123 	 2.5219929218292236 	 0.5344367027282715 	 0.6433930397033691 	 0.8013393878936768 	 0.7953128814697266 	 0.20466232299804688 	 0.20312023162841797 	 
2025-07-27 20:24:54.483374 test begin: paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], ) 	 50803875 	 1000 	 5.104199171066284 	 4.1289145946502686 	 0.47366809844970703 	 0.42182111740112305 	 11.549903631210327 	 10.660234451293945 	 0.9091477394104004 	 0.9069583415985107 	 
2025-07-27 20:25:48.077817 test begin: paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[0,], ) 	 50803875 	 1000 	 4.593472957611084 	 4.550216913223267 	 0.42672252655029297 	 0.46477794647216797 	 12.36879301071167 	 12.243627071380615 	 0.06689977645874023 	 0.07201886177062988 	 
2025-07-27 20:26:44.072241 test begin: paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[3,0,], ) 	 50803875 	 1000 	 0.864570140838623 	 1.2836005687713623 	 0.22080326080322266 	 0.3253448009490967 	 0.797177791595459 	 0.7975046634674072 	 0.20350933074951172 	 0.20368027687072754 	 
2025-07-27 20:26:50.793584 test begin: paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[0,], ) 	 50803875 	 1000 	 4.589442014694214 	 4.550485372543335 	 0.42679262161254883 	 0.4649388790130615 	 12.369281530380249 	 12.244298934936523 	 0.06683778762817383 	 0.07199716567993164 	 
2025-07-27 20:27:46.353986 test begin: paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[3,0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[3,0,], ) 	 50803875 	 1000 	 0.8646643161773682 	 1.274991512298584 	 0.2207794189453125 	 0.32541489601135254 	 0.797100305557251 	 0.797626256942749 	 0.2035660743713379 	 0.20369672775268555 	 
2025-07-27 20:27:53.188020 test begin: paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[0,], )
[Prof] paddle.tensordot 	 paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[0,], ) 	 50803875 	 1000 	 4.610256195068359 	 4.550442934036255 	 0.4266633987426758 	 0.46485376358032227 	 12.368923425674438 	 12.244353294372559 	 0.06691622734069824 	 0.07202744483947754 	 
2025-07-27 20:28:49.233060 test begin: paddle.tensordot(x=Tensor([4, 105841, 3, 5, 4],"float64"), y=Tensor([105841, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 105841, 3, 5, 4],"float64"), y=Tensor([105841, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 76205520 	 1000 	 1.6826097965240479 	 1.364696741104126 	 0.4297659397125244 	 0.46464061737060547 	 3.3542044162750244 	 3.4232289791107178 	 0.2447972297668457 	 0.24982166290283203 	 
2025-07-27 20:29:01.509506 test begin: paddle.tensordot(x=Tensor([4, 2, 158761, 5, 4],"float64"), y=Tensor([2, 4, 158761, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 158761, 5, 4],"float64"), y=Tensor([2, 4, 158761, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 76205280 	 1000 	 1.6715619564056396 	 1.3544292449951172 	 0.4269528388977051 	 0.461195707321167 	 3.332756757736206 	 3.422668218612671 	 0.2432420253753662 	 0.2498025894165039 	 
2025-07-27 20:29:13.004449 test begin: paddle.tensordot(x=Tensor([4, 2, 3, 132301, 4],"float64"), y=Tensor([2, 4, 3, 132301, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 3, 132301, 4],"float64"), y=Tensor([2, 4, 3, 132301, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 38102688 	 1000 	 0.8407046794891357 	 0.6931507587432861 	 0.214735746383667 	 0.2359786033630371 	 1.6728835105895996 	 1.717341661453247 	 0.2136075496673584 	 0.219221830368042 	 
2025-07-27 20:29:18.757999 test begin: paddle.tensordot(x=Tensor([4, 2, 3, 264601, 4],"float64"), y=Tensor([2, 4, 3, 264601, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 3, 264601, 4],"float64"), y=Tensor([2, 4, 3, 264601, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 76205088 	 1000 	 1.6729707717895508 	 1.3572075366973877 	 0.42723679542541504 	 0.46213364601135254 	 3.3346164226531982 	 3.4212217330932617 	 0.24336767196655273 	 0.24967598915100098 	 
2025-07-27 20:29:30.288954 test begin: paddle.tensordot(x=Tensor([4, 2, 3, 5, 211681],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 3, 5, 211681],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 25402680 	 1000 	 0.5310931205749512 	 0.20045781135559082 	 0.18098211288452148 	 0.10219216346740723 	 0.3527524471282959 	 0.3774092197418213 	 0.1200265884399414 	 0.1283888816833496 	 
2025-07-27 20:29:32.324780 test begin: paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 211681],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 211681],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 25402200 	 1000 	 0.48961544036865234 	 0.4900047779083252 	 0.1665515899658203 	 0.249558687210083 	 0.3855156898498535 	 0.3710036277770996 	 0.13118195533752441 	 0.12619948387145996 	 
2025-07-27 20:29:34.618414 test begin: paddle.tensordot(x=Tensor([4, 2, 79381, 5, 4],"float64"), y=Tensor([2, 4, 79381, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 2, 79381, 5, 4],"float64"), y=Tensor([2, 4, 79381, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 38102880 	 1000 	 0.8418750762939453 	 0.6969611644744873 	 0.215012788772583 	 0.23591113090515137 	 1.6706323623657227 	 1.7163925170898438 	 0.213301420211792 	 0.21910929679870605 	 
2025-07-27 20:29:41.613691 test begin: paddle.tensordot(x=Tensor([4, 52921, 3, 5, 4],"float64"), y=Tensor([52921, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
[Prof] paddle.tensordot 	 paddle.tensordot(x=Tensor([4, 52921, 3, 5, 4],"float64"), y=Tensor([52921, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], ) 	 38103120 	 1000 	 0.8495321273803711 	 0.6962964534759521 	 0.21694469451904297 	 0.23705673217773438 	 1.6837315559387207 	 1.716437816619873 	 0.21500706672668457 	 0.2191152572631836 	 
2025-07-27 20:29:47.412440 test begin: paddle.tile(Tensor([102426, 248, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([102426, 248, 1, 1, 2],"float32"), list[1,1,1,1,1,], ) 	 50803296 	 1000 	 0.29618048667907715 	 0.313321590423584 	 0.2748255729675293 	 0.15999674797058105 	 0.31327271461486816 	 0.05395650863647461 	 0.160017728805542 	 3.62396240234375e-05 	 
2025-07-27 20:29:50.101228 test begin: paddle.tile(Tensor([1511, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([1511, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], ) 	 50830040 	 1000 	 1.9682602882385254 	 0.9426267147064209 	 1.0057246685028076 	 0.9139094352722168 	 1.8882684707641602 	 0.7313809394836426 	 1.8282866477966309 	 0.6548314094543457 	 
2025-07-27 20:29:59.879244 test begin: paddle.tile(Tensor([16, 1, 1, 3, 16538, 64],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 1, 1, 3, 16538, 64],"float32"), list[1,11,1,1,1,1,], ) 	 50804736 	 1000 	 6.065008878707886 	 2.7470862865448 	 3.0992722511291504 	 1.403414249420166 	 3.364975929260254 	 1.73484206199646 	 3.3069000244140625 	 0.8864176273345947 	 
2025-07-27 20:30:23.928058 test begin: paddle.tile(Tensor([16, 1, 1, 3, 64, 16538],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 1, 1, 3, 64, 16538],"float32"), list[1,11,1,1,1,1,], ) 	 50804736 	 1000 	 6.064941167831421 	 2.7470078468322754 	 3.099161148071289 	 1.403409719467163 	 3.365266799926758 	 1.7348034381866455 	 3.304597854614258 	 0.8864195346832275 	 
2025-07-27 20:30:47.767845 test begin: paddle.tile(Tensor([16, 1, 1, 776, 64, 64],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 1, 1, 776, 64, 64],"float32"), list[1,11,1,1,1,1,], ) 	 50855936 	 1000 	 6.068197727203369 	 2.758450984954834 	 3.100637197494507 	 1.4069201946258545 	 3.365260362625122 	 1.7359669208526611 	 3.3091042041778564 	 0.8870184421539307 	 
2025-07-27 20:31:13.251642 test begin: paddle.tile(Tensor([16, 1, 259, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 1, 259, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], ) 	 50921472 	 1000 	 6.489832401275635 	 2.7604193687438965 	 3.1052889823913574 	 1.4102399349212646 	 3.36663818359375 	 1.7381467819213867 	 3.3105545043945312 	 0.888129472732544 	 
2025-07-27 20:31:37.869315 test begin: paddle.tile(Tensor([16, 10, 1, 5475, 58],"float32"), list[1,1,4,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 10, 1, 5475, 58],"float32"), list[1,1,4,1,1,], ) 	 50808000 	 1000 	 1.9300646781921387 	 0.8762733936309814 	 0.9862620830535889 	 0.8346140384674072 	 1.8887238502502441 	 0.745464563369751 	 1.8208284378051758 	 0.6677529811859131 	 
2025-07-27 20:31:47.510857 test begin: paddle.tile(Tensor([16, 10, 1, 58, 5475],"float32"), list[1,1,4,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 10, 1, 58, 5475],"float32"), list[1,1,4,1,1,], ) 	 50808000 	 1000 	 1.9304656982421875 	 0.86661696434021 	 0.9865241050720215 	 0.8353729248046875 	 1.8886182308197021 	 0.7454235553741455 	 1.8234519958496094 	 0.6698906421661377 	 
2025-07-27 20:31:57.154703 test begin: paddle.tile(Tensor([16, 10, 95, 58, 58],"float32"), list[1,1,4,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 10, 95, 58, 58],"float32"), list[1,1,4,1,1,], ) 	 51132800 	 1000 	 1.9415812492370605 	 0.8717427253723145 	 0.9921839237213135 	 0.8402323722839355 	 1.9002625942230225 	 0.7385616302490234 	 1.8333959579467773 	 0.6617226600646973 	 
2025-07-27 20:32:06.863323 test begin: paddle.tile(Tensor([16, 259, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 259, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], ) 	 50921472 	 1000 	 6.076962471008301 	 2.760152816772461 	 3.1053147315979004 	 1.4101848602294922 	 3.366091012954712 	 1.7381694316864014 	 3.307898759841919 	 0.8881192207336426 	 
2025-07-27 20:32:30.829926 test begin: paddle.tile(Tensor([16, 944, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([16, 944, 1, 58, 58],"float32"), list[1,1,4,1,1,], ) 	 50809856 	 1000 	 1.966507911682129 	 0.9481136798858643 	 1.0047783851623535 	 0.913705587387085 	 1.8878836631774902 	 0.7310688495635986 	 1.831390619277954 	 0.6561644077301025 	 
2025-07-27 20:32:41.455223 test begin: paddle.tile(Tensor([216, 117601, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([216, 117601, 1, 1, 2],"float32"), list[1,1,1,1,1,], ) 	 50803632 	 1000 	 0.29610133171081543 	 0.3181784152984619 	 0.27677488327026367 	 0.15998363494873047 	 0.3147251605987549 	 0.0612337589263916 	 0.16074180603027344 	 4.76837158203125e-05 	 
2025-07-27 20:32:44.137099 test begin: paddle.tile(Tensor([216, 248, 1, 1, 949],"float32"), list[1,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([216, 248, 1, 1, 949],"float32"), list[1,1,1,1,1,], ) 	 50836032 	 1000 	 0.2963571548461914 	 0.3133690357208252 	 0.2769794464111328 	 0.16004085540771484 	 0.31603145599365234 	 0.05536150932312012 	 0.1614515781402588 	 6.031990051269531e-05 	 
2025-07-27 20:32:46.815241 test begin: paddle.tile(Tensor([216, 248, 1, 475, 2],"float32"), list[1,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([216, 248, 1, 475, 2],"float32"), list[1,1,1,1,1,], ) 	 50889600 	 1000 	 0.29679012298583984 	 0.3140406608581543 	 0.2775101661682129 	 0.16035079956054688 	 0.3152763843536377 	 0.05575728416442871 	 0.16106176376342773 	 5.316734313964844e-05 	 
2025-07-27 20:32:49.454742 test begin: paddle.tile(Tensor([216, 248, 475, 1, 2],"float32"), list[1,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([216, 248, 475, 1, 2],"float32"), list[1,1,1,1,1,], ) 	 50889600 	 1000 	 0.2967205047607422 	 0.3139963150024414 	 0.28532886505126953 	 0.16033673286437988 	 0.3153076171875 	 0.053727149963378906 	 0.16107583045959473 	 3.528594970703125e-05 	 
2025-07-27 20:32:52.057308 test begin: paddle.tile(Tensor([4135, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
[Prof] paddle.tile 	 paddle.tile(Tensor([4135, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], ) 	 50810880 	 1000 	 5.002395868301392 	 2.460197687149048 	 2.556044816970825 	 1.2569005489349365 	 3.3555593490600586 	 1.7477004528045654 	 3.299569606781006 	 0.8929917812347412 	 
2025-07-27 20:33:14.342483 test begin: paddle.tolist(Tensor([10160, 5],"float32"), )
[Prof] paddle.tolist 	 paddle.tolist(Tensor([10160, 5],"float32"), ) 	 50800 	 1000 	 10.015132188796997 	 13.154908180236816 	 9.107589721679688e-05 	 0.00011229515075683594 	 None 	 None 	 None 	 None 	 
2025-07-27 20:33:37.980176 test begin: paddle.tolist(Tensor([2, 1270],"int64"), )
[Prof] paddle.tolist 	 paddle.tolist(Tensor([2, 1270],"int64"), ) 	 2540 	 1000 	 0.10073971748352051 	 0.08892059326171875 	 1.8358230590820312e-05 	 6.67572021484375e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:33:39.388833 test begin: paddle.tolist(Tensor([2, 25400],"float32"), )
[Prof] paddle.tolist 	 paddle.tolist(Tensor([2, 25400],"float32"), ) 	 50800 	 1000 	 0.9893789291381836 	 1.1141390800476074 	 5.173683166503906e-05 	 8.606910705566406e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:33:41.502180 test begin: paddle.tolist(Tensor([8467, 3],"int64"), )
[Prof] paddle.tolist 	 paddle.tolist(Tensor([8467, 3],"int64"), ) 	 25401 	 1000 	 5.4305500984191895 	 9.827627897262573 	 9.250640869140625e-05 	 0.00012087821960449219 	 None 	 None 	 None 	 None 	 
2025-07-27 20:33:56.768521 test begin: paddle.topk(Tensor([138, 369303],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([138, 369303],"float32"), k=1, axis=0, ) 	 50963814 	 1000 	 2.402639389038086 	 8.6673743724823 	 0.612492561340332 	 8.652393579483032 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:34:19.246526 test begin: paddle.topk(Tensor([146, 349866],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([146, 349866],"float32"), k=1, axis=0, ) 	 51080436 	 1000 	 2.352705717086792 	 10.807868480682373 	 0.6001105308532715 	 10.793126344680786 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:34:44.053309 test begin: paddle.topk(Tensor([148, 343728],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([148, 343728],"float32"), k=1, axis=0, ) 	 50871744 	 1000 	 2.103645086288452 	 9.30848479270935 	 0.5363483428955078 	 9.293430089950562 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:35:06.789901 test begin: paddle.topk(Tensor([49, 1036801],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([49, 1036801],"float32"), k=1, axis=0, ) 	 50803249 	 1000 	 2.2130658626556396 	 4.119355201721191 	 0.5642929077148438 	 4.104572772979736 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:35:24.929942 test begin: paddle.topk(Tensor([53, 958551],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([53, 958551],"float32"), k=1, axis=0, ) 	 50803203 	 1000 	 2.224785804748535 	 4.117061138153076 	 0.5673625469207764 	 4.087547779083252 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:35:44.247011 test begin: paddle.topk(Tensor([55, 923695],"float32"), k=1, axis=0, )
[Prof] paddle.topk 	 paddle.topk(Tensor([55, 923695],"float32"), k=1, axis=0, ) 	 50803225 	 1000 	 2.189399480819702 	 4.3249077796936035 	 0.5583741664886475 	 4.31004524230957 	 None 	 None 	 None 	 None 	 
[Error] element 1 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:36:02.608191 test begin: paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=0, axis1=-3, axis2=-2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=0, axis1=-3, axis2=-2, ) 	 25401606 	 1000 	 0.24295711517333984 	 0.08069324493408203 	 9.250640869140625e-05 	 0.05888199806213379 	 0.7652120590209961 	 0.24048972129821777 	 4.601478576660156e-05 	 0.1228184700012207 	 combined
2025-07-27 20:36:04.544307 test begin: paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=1, axis1=0, axis2=2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=1, axis1=0, axis2=2, ) 	 25401606 	 1000 	 0.0659332275390625 	 0.020873546600341797 	 1.7642974853515625e-05 	 3.695487976074219e-05 	 0.7576804161071777 	 0.13853025436401367 	 4.4345855712890625e-05 	 0.051857948303222656 	 combined
2025-07-27 20:36:06.049675 test begin: paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=0, axis1=-3, axis2=-2, ) 	 25401604 	 1000 	 0.06485581398010254 	 0.02068018913269043 	 3.457069396972656e-05 	 4.935264587402344e-05 	 0.7713847160339355 	 0.1384873390197754 	 3.0994415283203125e-05 	 0.05301332473754883 	 combined
2025-07-27 20:36:07.572601 test begin: paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=1, axis1=0, axis2=2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=1, axis1=0, axis2=2, ) 	 25401604 	 1000 	 0.23960661888122559 	 0.11687946319580078 	 7.653236389160156e-05 	 0.09559130668640137 	 0.7865490913391113 	 0.33428215980529785 	 4.315376281738281e-05 	 0.17075896263122559 	 combined
2025-07-27 20:36:09.698421 test begin: paddle.trace(x=Tensor([3, 8467201],"float64"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([3, 8467201],"float64"), offset=0, axis1=0, axis2=1, ) 	 25401603 	 1000 	 0.06693100929260254 	 0.02028203010559082 	 2.2172927856445312e-05 	 3.075599670410156e-05 	 0.6048123836517334 	 0.13840508460998535 	 3.147125244140625e-05 	 0.0556027889251709 	 combined
2025-07-27 20:36:11.114282 test begin: paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, ) 	 25401606 	 1000 	 0.07720184326171875 	 0.030525922775268555 	 4.00543212890625e-05 	 3.457069396972656e-05 	 0.7831325531005859 	 0.13848233222961426 	 3.314018249511719e-05 	 0.04753470420837402 	 combined
2025-07-27 20:36:12.703687 test begin: paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=1, axis1=0, axis2=2, ) 	 25401606 	 1000 	 0.07644915580749512 	 0.03060460090637207 	 1.8835067749023438e-05 	 3.314018249511719e-05 	 0.7687842845916748 	 0.13834929466247559 	 4.4345855712890625e-05 	 0.05158424377441406 	 combined
2025-07-27 20:36:14.267914 test begin: paddle.trace(x=Tensor([6350401, 4],"float64"), offset=0, axis1=0, axis2=1, )
[Prof] paddle.trace 	 paddle.trace(x=Tensor([6350401, 4],"float64"), offset=0, axis1=0, axis2=1, ) 	 25401604 	 1000 	 0.07914066314697266 	 0.030300378799438477 	 1.5974044799804688e-05 	 3.933906555175781e-05 	 0.6225314140319824 	 0.1383368968963623 	 4.601478576660156e-05 	 0.04768180847167969 	 combined
2025-07-27 20:36:15.668355 test begin: paddle.transpose(Tensor([2, 150, 512, 512],"float32"), list[0,2,3,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([2, 150, 512, 512],"float32"), list[0,2,3,1,], ) 	 78643200 	 1000 	 0.0034940242767333984 	 0.0045299530029296875 	 5.7220458984375e-06 	 1.9073486328125e-05 	 0.04165005683898926 	 0.06200218200683594 	 2.384185791015625e-05 	 5.984306335449219e-05 	 
2025-07-27 20:36:18.376730 test begin: paddle.transpose(Tensor([2, 7168, 7168],"bfloat16"), list[0,2,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([2, 7168, 7168],"bfloat16"), list[0,2,1,], ) 	 102760448 	 1000 	 0.005172252655029297 	 0.004413604736328125 	 1.5497207641601562e-05 	 1.9550323486328125e-05 	 0.04417586326599121 	 0.45887231826782227 	 1.5735626220703125e-05 	 0.37819457054138184 	 
2025-07-27 20:36:22.233719 test begin: paddle.transpose(Tensor([4, 150, 166, 512],"float32"), list[0,2,3,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([4, 150, 166, 512],"float32"), list[0,2,3,1,], ) 	 50995200 	 1000 	 0.003467082977294922 	 0.004956722259521484 	 7.62939453125e-06 	 5.340576171875e-05 	 0.04095339775085449 	 0.05747818946838379 	 2.288818359375e-05 	 3.075599670410156e-05 	 
2025-07-27 20:36:24.046832 test begin: paddle.transpose(Tensor([4, 150, 512, 166],"float32"), list[0,2,3,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([4, 150, 512, 166],"float32"), list[0,2,3,1,], ) 	 50995200 	 1000 	 0.009142637252807617 	 0.004550457000732422 	 1.0728836059570312e-05 	 1.7881393432617188e-05 	 0.04180765151977539 	 0.05752921104431152 	 2.5033950805664062e-05 	 3.6716461181640625e-05 	 
2025-07-27 20:36:25.872569 test begin: paddle.transpose(Tensor([4, 3584, 7168],"bfloat16"), list[0,2,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([4, 3584, 7168],"bfloat16"), list[0,2,1,], ) 	 102760448 	 1000 	 0.004132509231567383 	 0.004450321197509766 	 2.3365020751953125e-05 	 2.1219253540039062e-05 	 0.0446622371673584 	 0.45883679389953613 	 4.3392181396484375e-05 	 0.3769557476043701 	 
2025-07-27 20:36:29.719478 test begin: paddle.transpose(Tensor([4, 49, 512, 512],"float32"), list[0,2,3,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([4, 49, 512, 512],"float32"), list[0,2,3,1,], ) 	 51380224 	 1000 	 0.0075130462646484375 	 0.008253335952758789 	 1.0967254638671875e-05 	 2.09808349609375e-05 	 0.047780513763427734 	 0.06451559066772461 	 2.956390380859375e-05 	 5.054473876953125e-05 	 
2025-07-27 20:36:31.578109 test begin: paddle.transpose(Tensor([6, 2363, 7168],"bfloat16"), list[0,2,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([6, 2363, 7168],"bfloat16"), list[0,2,1,], ) 	 101627904 	 1000 	 0.0034074783325195312 	 0.004550933837890625 	 7.867813110351562e-06 	 2.09808349609375e-05 	 0.04521584510803223 	 0.453704833984375 	 4.887580871582031e-05 	 0.37092089653015137 	 
2025-07-27 20:36:37.459703 test begin: paddle.transpose(Tensor([6, 3584, 4726],"bfloat16"), list[0,2,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([6, 3584, 4726],"bfloat16"), list[0,2,1,], ) 	 101627904 	 1000 	 0.0034456253051757812 	 0.004413127899169922 	 1.2159347534179688e-05 	 2.2649765014648438e-05 	 0.04491281509399414 	 0.4537951946258545 	 5.555152893066406e-05 	 0.3687870502471924 	 
2025-07-27 20:36:41.316456 test begin: paddle.transpose(Tensor([6, 7168, 2363],"bfloat16"), list[0,2,1,], )
[Prof] paddle.transpose 	 paddle.transpose(Tensor([6, 7168, 2363],"bfloat16"), list[0,2,1,], ) 	 101627904 	 1000 	 0.0034148693084716797 	 0.004530429840087891 	 7.3909759521484375e-06 	 2.0265579223632812e-05 	 0.044767141342163086 	 0.45377063751220703 	 2.3365020751953125e-05 	 0.36936211585998535 	 
2025-07-27 20:36:47.177957 test begin: paddle.tril(Tensor([1, 1, 2048, 24807],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 1, 2048, 24807],"bool"), ) 	 50804736 	 1000 	 0.30838537216186523 	 0.25918078422546387 	 0.2922184467315674 	 0.2403120994567871 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:36:49.450656 test begin: paddle.tril(Tensor([1, 1, 2048, 24807],"float32"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 1, 2048, 24807],"float32"), ) 	 50804736 	 1000 	 0.3112068176269531 	 0.33321332931518555 	 0.3030378818511963 	 0.3219287395477295 	 0.3112931251525879 	 0.3331470489501953 	 0.26024913787841797 	 0.26542162895202637 	 
2025-07-27 20:36:52.418372 test begin: paddle.tril(Tensor([1, 1, 24807, 2048],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 1, 24807, 2048],"bool"), ) 	 50804736 	 1000 	 0.378253698348999 	 0.23527050018310547 	 0.3701608180999756 	 0.22391557693481445 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:36:54.808813 test begin: paddle.tril(Tensor([1, 1, 24807, 2048],"float32"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 1, 24807, 2048],"float32"), ) 	 50804736 	 1000 	 0.4163641929626465 	 0.37666749954223633 	 0.40830492973327637 	 0.36556315422058105 	 0.41617774963378906 	 0.37650632858276367 	 0.3657243251800537 	 0.30939555168151855 	 
2025-07-27 20:36:58.062200 test begin: paddle.tril(Tensor([1, 13, 2048, 2048],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 13, 2048, 2048],"bool"), ) 	 54525952 	 1000 	 0.3848841190338135 	 0.2510261535644531 	 0.37677597999572754 	 0.2398991584777832 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:37:00.588813 test begin: paddle.tril(Tensor([1, 13, 2048, 2048],"float32"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([1, 13, 2048, 2048],"float32"), ) 	 54525952 	 1000 	 0.4163684844970703 	 0.3817026615142822 	 0.4082212448120117 	 0.37041497230529785 	 0.4165036678314209 	 0.3815429210662842 	 0.36609959602355957 	 0.3155477046966553 	 
2025-07-27 20:37:03.966683 test begin: paddle.tril(Tensor([13, 1, 2048, 2048],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([13, 1, 2048, 2048],"bool"), ) 	 54525952 	 1000 	 0.38483405113220215 	 0.2510857582092285 	 0.3767123222351074 	 0.2400064468383789 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:37:06.501683 test begin: paddle.tril(Tensor([13, 1, 2048, 2048],"float32"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([13, 1, 2048, 2048],"float32"), ) 	 54525952 	 1000 	 0.4163479804992676 	 0.3818056583404541 	 0.40813684463500977 	 0.3706328868865967 	 0.4165151119232178 	 0.3816676139831543 	 0.3664541244506836 	 0.31565022468566895 	 
2025-07-27 20:37:09.846007 test begin: paddle.tril(Tensor([2048, 24807],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([2048, 24807],"bool"), ) 	 50804736 	 1000 	 0.30837345123291016 	 0.2584383487701416 	 0.3003044128417969 	 0.23920798301696777 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:37:12.131664 test begin: paddle.tril(Tensor([24807, 2048],"bool"), )
[Prof] paddle.tril 	 paddle.tril(Tensor([24807, 2048],"bool"), ) 	 50804736 	 1000 	 0.378251314163208 	 0.24222755432128906 	 0.37014102935791016 	 0.22463083267211914 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:37:14.553719 test begin: paddle.triu(Tensor([1, 1, 1024, 99226],"float16"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 1024, 99226],"float16"), diagonal=1, ) 	 101607424 	 1000 	 0.7794909477233887 	 0.5267865657806396 	 0.7671279907226562 	 0.5154323577880859 	 0.779005765914917 	 0.526688814163208 	 0.7217416763305664 	 0.45607590675354004 	 
2025-07-27 20:37:21.008735 test begin: paddle.triu(Tensor([1, 1, 12404, 4096],"float32"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 12404, 4096],"float32"), diagonal=1, ) 	 50806784 	 1000 	 0.32563090324401855 	 0.3395354747772217 	 0.31708550453186035 	 0.32828497886657715 	 0.3257627487182617 	 0.33920931816101074 	 0.2754805088043213 	 0.2728078365325928 	 
2025-07-27 20:37:24.045242 test begin: paddle.triu(Tensor([1, 1, 2048, 49613],"float16"), )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 2048, 49613],"float16"), ) 	 101607424 	 1000 	 0.779097318649292 	 0.5251116752624512 	 0.7706153392791748 	 0.513969898223877 	 0.778559684753418 	 0.5249190330505371 	 0.7281599044799805 	 0.4584214687347412 	 
2025-07-27 20:37:30.515391 test begin: paddle.triu(Tensor([1, 1, 4096, 12404],"float32"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 4096, 12404],"float32"), diagonal=1, ) 	 50806784 	 1000 	 0.41216468811035156 	 0.3731222152709961 	 0.40358948707580566 	 0.36023879051208496 	 0.4121673107147217 	 0.37155890464782715 	 0.3618338108062744 	 0.30477309226989746 	 
2025-07-27 20:37:33.707599 test begin: paddle.triu(Tensor([1, 1, 49613, 2048],"float16"), )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 49613, 2048],"float16"), ) 	 101607424 	 1000 	 0.5894241333007812 	 0.38062310218811035 	 0.5811033248901367 	 0.35518956184387207 	 0.589616060256958 	 0.3661653995513916 	 0.5393831729888916 	 0.29681944847106934 	 
2025-07-27 20:37:39.952899 test begin: paddle.triu(Tensor([1, 1, 99226, 1024],"float16"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 1, 99226, 1024],"float16"), diagonal=1, ) 	 101607424 	 1000 	 0.5855367183685303 	 0.3652925491333008 	 0.57676100730896 	 0.35348987579345703 	 0.5856649875640869 	 0.3650200366973877 	 0.5352520942687988 	 0.2982139587402344 	 
2025-07-27 20:37:45.541877 test begin: paddle.triu(Tensor([1, 25, 2048, 2048],"float16"), )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 25, 2048, 2048],"float16"), ) 	 104857600 	 1000 	 0.7462871074676514 	 0.8984165191650391 	 0.7370924949645996 	 0.41979122161865234 	 0.7484941482543945 	 0.4371511936187744 	 0.698357343673706 	 0.3627803325653076 	 
2025-07-27 20:37:54.006453 test begin: paddle.triu(Tensor([1, 4, 4096, 4096],"float32"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 4, 4096, 4096],"float32"), diagonal=1, ) 	 67108864 	 1000 	 0.4976027011871338 	 0.46828699111938477 	 0.4889705181121826 	 0.4569737911224365 	 0.49788522720336914 	 0.46814990043640137 	 0.447559118270874 	 0.40161752700805664 	 
2025-07-27 20:37:58.110042 test begin: paddle.triu(Tensor([1, 97, 1024, 1024],"float16"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([1, 97, 1024, 1024],"float16"), diagonal=1, ) 	 101711872 	 1000 	 0.7439000606536865 	 0.4265892505645752 	 0.7284960746765137 	 0.4088125228881836 	 0.744016170501709 	 0.42638492584228516 	 0.6819741725921631 	 0.3525352478027344 	 
2025-07-27 20:38:04.385146 test begin: paddle.triu(Tensor([25, 1, 2048, 2048],"float16"), )
[Prof] paddle.triu 	 paddle.triu(Tensor([25, 1, 2048, 2048],"float16"), ) 	 104857600 	 1000 	 0.7462458610534668 	 0.43755245208740234 	 0.7311525344848633 	 0.41957974433898926 	 0.7484421730041504 	 0.43712353706359863 	 0.6882884502410889 	 0.36823368072509766 	 
2025-07-27 20:38:10.693586 test begin: paddle.triu(Tensor([4, 1, 4096, 4096],"float32"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([4, 1, 4096, 4096],"float32"), diagonal=1, ) 	 67108864 	 1000 	 0.4976513385772705 	 0.4708569049835205 	 0.4820997714996338 	 0.45055127143859863 	 0.49791550636291504 	 0.46832919120788574 	 0.4387507438659668 	 0.3944516181945801 	 
2025-07-27 20:38:14.783005 test begin: paddle.triu(Tensor([97, 1, 1024, 1024],"float16"), diagonal=1, )
[Prof] paddle.triu 	 paddle.triu(Tensor([97, 1, 1024, 1024],"float16"), diagonal=1, ) 	 101711872 	 1000 	 0.7438428401947021 	 0.43062567710876465 	 0.7283625602722168 	 0.40887904167175293 	 0.7439393997192383 	 0.42648839950561523 	 0.6837923526763916 	 0.35111546516418457 	 
2025-07-27 20:38:20.983891 test begin: paddle.trunc(Tensor([20, 2540161],"float32"), )
[Prof] paddle.trunc 	 paddle.trunc(Tensor([20, 2540161],"float32"), ) 	 50803220 	 1000 	 0.008241891860961914 	 0.304410457611084 	 1.4543533325195312e-05 	 0.28658485412597656 	 0.050208091735839844 	 0.13420724868774414 	 1.6689300537109375e-05 	 0.06903433799743652 	 
2025-07-27 20:38:23.362723 test begin: paddle.trunc(Tensor([2540161, 20],"float32"), )
[Prof] paddle.trunc 	 paddle.trunc(Tensor([2540161, 20],"float32"), ) 	 50803220 	 1000 	 0.008540153503417969 	 0.29796767234802246 	 2.0503997802734375e-05 	 0.2873809337615967 	 0.05218243598937988 	 0.13422274589538574 	 2.7418136596679688e-05 	 0.06700992584228516 	 
2025-07-27 20:38:25.689756 test begin: paddle.trunc(input=Tensor([117601, 6, 6, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([117601, 6, 6, 6],"float64"), ) 	 25401816 	 1000 	 0.01554250717163086 	 0.30028438568115234 	 1.811981201171875e-05 	 0.2814936637878418 	 0.058977365493774414 	 0.13458847999572754 	 4.363059997558594e-05 	 0.06183147430419922 	 
2025-07-27 20:38:27.404024 test begin: paddle.trunc(input=Tensor([19601, 6, 6, 6, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([19601, 6, 6, 6, 6],"float64"), ) 	 25402896 	 1000 	 0.008719205856323242 	 0.29846644401550293 	 1.430511474609375e-05 	 0.2878584861755371 	 0.05014300346374512 	 0.1347496509552002 	 4.100799560546875e-05 	 0.06467342376708984 	 
2025-07-27 20:38:29.008573 test begin: paddle.trunc(input=Tensor([3, 39201, 6, 6, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([3, 39201, 6, 6, 6],"float64"), ) 	 25402248 	 1000 	 0.008756875991821289 	 0.2984945774078369 	 1.3113021850585938e-05 	 0.28769850730895996 	 0.05005836486816406 	 0.13465023040771484 	 1.9550323486328125e-05 	 0.0669260025024414 	 
2025-07-27 20:38:30.757896 test begin: paddle.trunc(input=Tensor([3, 6, 39201, 6, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([3, 6, 39201, 6, 6],"float64"), ) 	 25402248 	 1000 	 0.008708715438842773 	 0.2995901107788086 	 1.5020370483398438e-05 	 0.2878899574279785 	 0.05029916763305664 	 0.13470244407653809 	 1.7881393432617188e-05 	 0.06672310829162598 	 
2025-07-27 20:38:32.412921 test begin: paddle.trunc(input=Tensor([3, 6, 6, 39201, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([3, 6, 6, 39201, 6],"float64"), ) 	 25402248 	 1000 	 0.008724689483642578 	 0.30362606048583984 	 2.0742416381835938e-05 	 0.2876553535461426 	 0.05023956298828125 	 0.13469290733337402 	 2.956390380859375e-05 	 0.06523442268371582 	 
2025-07-27 20:38:34.045293 test begin: paddle.trunc(input=Tensor([3, 6, 6, 6, 39201],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([3, 6, 6, 6, 39201],"float64"), ) 	 25402248 	 1000 	 0.009065389633178711 	 1.3266515731811523 	 1.7881393432617188e-05 	 0.28763365745544434 	 0.04997968673706055 	 0.1345963478088379 	 2.4318695068359375e-05 	 0.06563925743103027 	 
2025-07-27 20:38:39.424374 test begin: paddle.trunc(input=Tensor([6, 117601, 6, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([6, 117601, 6, 6],"float64"), ) 	 25401816 	 1000 	 0.00878453254699707 	 0.2985379695892334 	 1.8835067749023438e-05 	 0.28786420822143555 	 0.05073142051696777 	 0.13466763496398926 	 1.8358230590820312e-05 	 0.06575536727905273 	 
2025-07-27 20:38:41.049154 test begin: paddle.trunc(input=Tensor([6, 6, 117601, 6],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([6, 6, 117601, 6],"float64"), ) 	 25401816 	 1000 	 0.008714914321899414 	 0.30168628692626953 	 9.775161743164062e-06 	 0.28776049613952637 	 0.051282644271850586 	 0.13461756706237793 	 1.7642974853515625e-05 	 0.06804585456848145 	 
2025-07-27 20:38:42.673058 test begin: paddle.trunc(input=Tensor([6, 6, 6, 117601],"float64"), )
[Prof] paddle.trunc 	 paddle.trunc(input=Tensor([6, 6, 6, 117601],"float64"), ) 	 25401816 	 1000 	 0.008715152740478516 	 0.29848384857177734 	 1.52587890625e-05 	 0.2878389358520508 	 0.050537824630737305 	 0.13462328910827637 	 3.790855407714844e-05 	 0.06714224815368652 	 
2025-07-27 20:38:44.337083 test begin: paddle.unbind(Tensor([2, 3, 1058401, 8],"float32"), axis=0, )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([2, 3, 1058401, 8],"float32"), axis=0, ) 	 50803248 	 1000 	 0.007317066192626953 	 0.00548863410949707 	 8.344650268554688e-06 	 2.0503997802734375e-05 	 0.35123538970947266 	 0.31018733978271484 	 0.29276037216186523 	 0.21509838104248047 	 
2025-07-27 20:38:46.695709 test begin: paddle.unbind(Tensor([2, 3, 8, 1058401],"float32"), axis=0, )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([2, 3, 8, 1058401],"float32"), axis=0, ) 	 50803248 	 1000 	 0.0073089599609375 	 0.005478620529174805 	 1.8835067749023438e-05 	 1.7404556274414062e-05 	 0.3511545658111572 	 0.3100733757019043 	 0.29596781730651855 	 0.18034124374389648 	 
2025-07-27 20:38:48.984371 test begin: paddle.unbind(Tensor([2, 396901, 8, 8],"float32"), axis=0, )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([2, 396901, 8, 8],"float32"), axis=0, ) 	 50803328 	 1000 	 0.007230520248413086 	 0.005469799041748047 	 1.5974044799804688e-05 	 1.811981201171875e-05 	 0.34816837310791016 	 0.3072805404663086 	 0.2920835018157959 	 0.22286152839660645 	 
2025-07-27 20:38:51.288669 test begin: paddle.unbind(Tensor([3, 3386881, 5],"float32"), axis=0, )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([3, 3386881, 5],"float32"), axis=0, ) 	 50803215 	 1000 	 0.008137702941894531 	 0.006303310394287109 	 9.059906005859375e-06 	 2.0742416381835938e-05 	 0.35123443603515625 	 0.31049227714538574 	 0.29329872131347656 	 0.22064876556396484 	 
2025-07-27 20:38:55.566474 test begin: paddle.unbind(Tensor([3, 9, 1881601],"float32"), axis=0, )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([3, 9, 1881601],"float32"), axis=0, ) 	 50803227 	 1000 	 0.008015871047973633 	 0.010605335235595703 	 1.33514404296875e-05 	 6.628036499023438e-05 	 0.3510477542877197 	 0.3102395534515381 	 0.2900354862213135 	 0.21764421463012695 	 
2025-07-27 20:38:59.209480 test begin: paddle.unbind(Tensor([4, 2116801, 6],"float32"), )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([4, 2116801, 6],"float32"), ) 	 50803224 	 1000 	 0.008803367614746094 	 0.006924152374267578 	 8.106231689453125e-06 	 2.5987625122070312e-05 	 0.350480318069458 	 0.3095583915710449 	 0.2897803783416748 	 0.21204161643981934 	 
2025-07-27 20:39:01.571871 test begin: paddle.unbind(Tensor([4, 5, 2540161],"float32"), )
[Prof] paddle.unbind 	 paddle.unbind(Tensor([4, 5, 2540161],"float32"), ) 	 50803220 	 1000 	 0.008837699890136719 	 0.007088661193847656 	 1.0251998901367188e-05 	 1.8358230590820312e-05 	 0.3506636619567871 	 0.3095099925994873 	 0.29123878479003906 	 0.2104034423828125 	 
2025-07-27 20:39:03.932380 test begin: paddle.unflatten(x=Tensor([4, 1587601, 16],"float16"), axis=0, shape=tuple(2,2,), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 1587601, 16],"float16"), axis=0, shape=tuple(2,2,), ) 	 101606464 	 1000 	 0.007839679718017578 	 0.005070209503173828 	 1.1444091796875e-05 	 1.7642974853515625e-05 	 0.04312562942504883 	 0.0570220947265625 	 3.0517578125e-05 	 3.4809112548828125e-05 	 
2025-07-27 20:39:07.899494 test begin: paddle.unflatten(x=Tensor([4, 6, 2116801],"bool"), axis=0, shape=tuple(2,2,), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 6, 2116801],"bool"), axis=0, shape=tuple(2,2,), ) 	 50803224 	 1000 	 0.010753870010375977 	 0.005017995834350586 	 2.5033950805664062e-05 	 1.9311904907226562e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:39:09.397224 test begin: paddle.unflatten(x=Tensor([4, 6, 2116801],"float32"), axis=0, shape=Tensor([2],"int64"), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 6, 2116801],"float32"), axis=0, shape=Tensor([2],"int64"), ) 	 50803226 	 1000 	 0.09828472137451172 	 0.005064249038696289 	 1.6450881958007812e-05 	 1.7881393432617188e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:11.266638 test begin: paddle.unflatten(x=Tensor([4, 6, 4233601],"float16"), axis=0, shape=tuple(2,2,), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 6, 4233601],"float16"), axis=0, shape=tuple(2,2,), ) 	 101606424 	 1000 	 0.008177042007446289 	 0.005022525787353516 	 2.7179718017578125e-05 	 1.71661376953125e-05 	 0.0426177978515625 	 0.05668473243713379 	 2.7894973754882812e-05 	 4.7206878662109375e-05 	 
2025-07-27 20:39:15.199626 test begin: paddle.unflatten(x=Tensor([4, 793801, 16],"bool"), axis=0, shape=tuple(2,2,), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 793801, 16],"bool"), axis=0, shape=tuple(2,2,), ) 	 50803264 	 1000 	 0.007782459259033203 	 0.005945682525634766 	 1.1682510375976562e-05 	 6.151199340820312e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:39:16.657251 test begin: paddle.unflatten(x=Tensor([4, 793801, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([4, 793801, 16],"float32"), axis=0, shape=Tensor([2],"int64"), ) 	 50803266 	 1000 	 0.09774422645568848 	 0.0051233768463134766 	 1.2159347534179688e-05 	 2.0265579223632812e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:18.514987 test begin: paddle.unflatten(x=Tensor([529201, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
[Prof] paddle.unflatten 	 paddle.unflatten(x=Tensor([529201, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), ) 	 50803298 	 1000 	 0.09896659851074219 	 0.0052106380462646484 	 1.6689300537109375e-05 	 3.62396240234375e-05 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:39:20.375996 test begin: paddle.unfold(Tensor([5, 10160641],"float32"), 0, 5, 1, )
[Prof] paddle.unfold 	 paddle.unfold(Tensor([5, 10160641],"float32"), 0, 5, 1, ) 	 50803205 	 1000 	 0.016690731048583984 	 0.0044901371002197266 	 1.1682510375976562e-05 	 3.886222839355469e-05 	 0.4626474380493164 	 1.2350780963897705 	 0.40471625328063965 	 0.4209766387939453 	 
2025-07-27 20:39:23.774279 test begin: paddle.unfold(Tensor([5, 20321281],"float16"), 0, 5, 1, )
[Prof] paddle.unfold 	 paddle.unfold(Tensor([5, 20321281],"float16"), 0, 5, 1, ) 	 101606405 	 1000 	 0.02123737335205078 	 0.004319906234741211 	 2.86102294921875e-05 	 1.6927719116210938e-05 	 0.8990771770477295 	 1.4005341529846191 	 0.8416547775268555 	 0.47743964195251465 	 
2025-07-27 20:39:29.952371 test begin: paddle.unfold(Tensor([5, 5080321],"float64"), 0, 5, 1, )
[Prof] paddle.unfold 	 paddle.unfold(Tensor([5, 5080321],"float64"), 0, 5, 1, ) 	 25401605 	 1000 	 0.016696453094482422 	 0.00436091423034668 	 1.1444091796875e-05 	 2.0742416381835938e-05 	 0.308333158493042 	 1.1619772911071777 	 0.24721217155456543 	 0.3960585594177246 	 
2025-07-27 20:39:32.518677 test begin: paddle.unique(Tensor([25401601],"int64"), )
[Prof] paddle.unique 	 paddle.unique(Tensor([25401601],"int64"), ) 	 25401601 	 1000 	 6.739999771118164 	 3.270141363143921 	 6.365776062011719e-05 	 0.00021791458129882812 	 None 	 None 	 None 	 None 	 
2025-07-27 20:39:44.574691 test begin: paddle.unique(Tensor([25401601],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
[Prof] paddle.unique 	 paddle.unique(Tensor([25401601],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", ) 	 25401601 	 1000 	 10.121621370315552 	 11.142395257949829 	 9.059906005859375e-05 	 0.0002193450927734375 	 None 	 None 	 None 	 None 	 
2025-07-27 20:40:06.358808 test begin: paddle.unique_consecutive(Tensor([25401601],"float64"), )
[Prof] paddle.unique_consecutive 	 paddle.unique_consecutive(Tensor([25401601],"float64"), ) 	 25401601 	 1000 	 1.6165063381195068 	 0.3626725673675537 	 4.1961669921875e-05 	 6.747245788574219e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:40:08.874109 test begin: paddle.unique_consecutive(Tensor([25401601],"float64"), return_inverse=True, return_counts=True, )
[Prof] paddle.unique_consecutive 	 paddle.unique_consecutive(Tensor([25401601],"float64"), return_inverse=True, return_counts=True, ) 	 25401601 	 1000 	 3.256072521209717 	 1.0145595073699951 	 7.033348083496094e-05 	 8.249282836914062e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:40:13.688929 test begin: paddle.unique_consecutive(Tensor([2540],"float64"), return_inverse=True, return_counts=True, axis=-1, )
[Prof] paddle.unique_consecutive 	 paddle.unique_consecutive(Tensor([2540],"float64"), return_inverse=True, return_counts=True, axis=-1, ) 	 2540 	 1000 	 1.3197569847106934 	 0.17870211601257324 	 4.839897155761719e-05 	 6.747245788574219e-05 	 None 	 None 	 None 	 None 	 
2025-07-27 20:40:15.237817 test begin: paddle.unsqueeze(Tensor([25, 1024, 1024],"int64"), 1, )
Warning: The core code of paddle.unsqueeze is too complex.
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([25, 1024, 1024],"int64"), 1, ) 	 26214400 	 1000 	 0.0043637752532958984 	 0.0036118030548095703 	 9.775161743164062e-06 	 1.6450881958007812e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:16.126325 test begin: paddle.unsqueeze(Tensor([3970, 50, 256],"float32"), axis=2, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([3970, 50, 256],"float32"), axis=2, ) 	 50816000 	 1000 	 0.004515647888183594 	 0.003589153289794922 	 9.298324584960938e-06 	 1.5974044799804688e-05 	 0.049544572830200195 	 0.0844268798828125 	 3.6716461181640625e-05 	 6.4849853515625e-05 	 
2025-07-27 20:40:17.930502 test begin: paddle.unsqueeze(Tensor([4, 1024, 6202],"int64"), 1, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([4, 1024, 6202],"int64"), 1, ) 	 25403392 	 1000 	 0.00433349609375 	 0.0035936832427978516 	 8.58306884765625e-06 	 1.52587890625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:18.799145 test begin: paddle.unsqueeze(Tensor([4, 6202, 1024],"int64"), 1, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([4, 6202, 1024],"int64"), 1, ) 	 25403392 	 1000 	 0.004428386688232422 	 0.00522923469543457 	 1.4781951904296875e-05 	 6.103515625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:40:19.683854 test begin: paddle.unsqueeze(Tensor([416, 478, 256],"float32"), axis=2, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([416, 478, 256],"float32"), axis=2, ) 	 50905088 	 1000 	 0.00453639030456543 	 0.003576517105102539 	 1.7881393432617188e-05 	 1.5735626220703125e-05 	 0.04297685623168945 	 0.06185126304626465 	 2.4557113647460938e-05 	 5.459785461425781e-05 	 
2025-07-27 20:40:21.435221 test begin: paddle.unsqueeze(Tensor([416, 50, 2443],"float32"), axis=2, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([416, 50, 2443],"float32"), axis=2, ) 	 50814400 	 1000 	 0.005401134490966797 	 0.0035698413848876953 	 3.361701965332031e-05 	 1.6689300537109375e-05 	 0.04258990287780762 	 0.05768227577209473 	 1.9550323486328125e-05 	 4.7206878662109375e-05 	 
2025-07-27 20:40:23.247328 test begin: paddle.unsqueeze(Tensor([512, 388, 256],"float32"), axis=2, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([512, 388, 256],"float32"), axis=2, ) 	 50855936 	 1000 	 0.004509925842285156 	 0.0036013126373291016 	 2.002716064453125e-05 	 1.5974044799804688e-05 	 0.04344940185546875 	 0.05738663673400879 	 3.504753112792969e-05 	 5.221366882324219e-05 	 
2025-07-27 20:40:24.988740 test begin: paddle.unsqueeze(Tensor([512, 50, 1985],"float32"), axis=2, )
[Prof] paddle.unsqueeze 	 paddle.unsqueeze(Tensor([512, 50, 1985],"float32"), axis=2, ) 	 50816000 	 1000 	 0.004529476165771484 	 0.003548145294189453 	 6.9141387939453125e-06 	 1.621246337890625e-05 	 0.04806160926818848 	 0.05700826644897461 	 2.288818359375e-05 	 3.8623809814453125e-05 	 
2025-07-27 20:40:26.780913 test begin: paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-1, )
[Prof] paddle.unstack 	 paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-1, ) 	 50803350 	 1000 	 0.3283512592315674 	 0.01861119270324707 	 0.2980821132659912 	 1.8835067749023438e-05 	 0.4679224491119385 	 4.4586427211761475 	 0.39239954948425293 	 4.278479099273682 	 
2025-07-27 20:40:33.584885 test begin: paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-2, )
[Prof] paddle.unstack 	 paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-2, ) 	 50803350 	 1000 	 0.4042022228240967 	 0.01850724220275879 	 0.3839097023010254 	 2.6702880859375e-05 	 0.36109256744384766 	 1.2657878398895264 	 0.2877967357635498 	 1.097442388534546 	 
2025-07-27 20:40:40.153218 test begin: paddle.unstack(Tensor([5, 10, 1016065],"float32"), axis=-2, )
[Prof] paddle.unstack 	 paddle.unstack(Tensor([5, 10, 1016065],"float32"), axis=-2, ) 	 50803250 	 1000 	 0.38939762115478516 	 0.021312713623046875 	 0.3689305782318115 	 5.6743621826171875e-05 	 0.3282172679901123 	 0.30669522285461426 	 0.2610433101654053 	 0.15871644020080566 	 
2025-07-27 20:40:42.821063 test begin: paddle.unstack(Tensor([5, 677377, 15],"float32"), axis=-1, )
[Prof] paddle.unstack 	 paddle.unstack(Tensor([5, 677377, 15],"float32"), axis=-1, ) 	 50803275 	 1000 	 0.3283064365386963 	 0.018616199493408203 	 0.30251049995422363 	 2.0742416381835938e-05 	 0.46729373931884766 	 4.465090274810791 	 0.39240598678588867 	 4.288595199584961 	 
2025-07-27 20:40:49.605609 test begin: paddle.unstack(x=Tensor([2, 32, 793801],"float32"), axis=0, )
[Prof] paddle.unstack 	 paddle.unstack(x=Tensor([2, 32, 793801],"float32"), axis=0, ) 	 50803264 	 1000 	 0.388427734375 	 0.005471229553222656 	 0.37375426292419434 	 1.8835067749023438e-05 	 0.3458709716796875 	 0.30936646461486816 	 0.29235124588012695 	 0.22673344612121582 	 
2025-07-27 20:40:52.306069 test begin: paddle.unstack(x=Tensor([2, 49613, 512],"float32"), axis=0, )
[Prof] paddle.unstack 	 paddle.unstack(x=Tensor([2, 49613, 512],"float32"), axis=0, ) 	 50803712 	 1000 	 0.38830065727233887 	 0.00552058219909668 	 0.3759169578552246 	 1.9311904907226562e-05 	 0.34500813484191895 	 0.30564045906066895 	 0.2915642261505127 	 0.21414661407470703 	 
2025-07-27 20:40:54.962304 test begin: paddle.unstack(x=Tensor([3101, 32, 512],"float32"), axis=0, )
[Prof] paddle.unstack 	 paddle.unstack(x=Tensor([3101, 32, 512],"float32"), axis=0, ) 	 50806784 	 1000 	 3.741981029510498 	 5.357049942016602 	 0.0001068115234375 	 0.00018548965454101562 	 5.2608349323272705 	 20.642021417617798 	 5.984306335449219e-05 	 0.00022363662719726562 	 
2025-07-27 20:41:40.201012 test begin: paddle.var(Tensor([264601, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([264601, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50803392 	 1000 	 1.30747652053833 	 0.2751007080078125 	 0.11106443405151367 	 0.2580831050872803 	 1.5765433311462402 	 0.7767999172210693 	 0.2685811519622803 	 0.19837737083435059 	 
2025-07-27 20:41:44.982349 test begin: paddle.var(Tensor([384, 132301, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([384, 132301, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50803584 	 1000 	 1.0319743156433105 	 0.1853342056274414 	 0.07507777214050293 	 0.0947105884552002 	 13.749291896820068 	 0.773653507232666 	 2.00730299949646 	 0.15806794166564941 	 
2025-07-27 20:42:01.641619 test begin: paddle.var(Tensor([384, 192, 1, 690],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([384, 192, 1, 690],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50872320 	 1000 	 1.0225584506988525 	 0.17920780181884766 	 0.07454085350036621 	 0.09154105186462402 	 1.3747289180755615 	 0.7713711261749268 	 0.2006826400756836 	 0.15762925148010254 	 
2025-07-27 20:42:05.894272 test begin: paddle.var(Tensor([384, 192, 690, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([384, 192, 690, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50872320 	 1000 	 1.0239291191101074 	 0.17919349670410156 	 0.07463431358337402 	 0.09154629707336426 	 13.515291213989258 	 0.7714645862579346 	 1.9731333255767822 	 0.15767836570739746 	 
2025-07-27 20:42:22.254842 test begin: paddle.var(Tensor([384, 96, 1, 1379],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([384, 96, 1, 1379],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50835456 	 1000 	 1.0262067317962646 	 0.1810474395751953 	 0.07478642463684082 	 0.0924985408782959 	 1.3742284774780273 	 0.7730889320373535 	 0.20058512687683105 	 0.15799999237060547 	 
2025-07-27 20:42:26.473600 test begin: paddle.var(Tensor([384, 96, 1379, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([384, 96, 1379, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50835456 	 1000 	 1.0247313976287842 	 0.18107843399047852 	 0.07470583915710449 	 0.09252476692199707 	 13.767150163650513 	 0.7743244171142578 	 2.0100507736206055 	 0.15825366973876953 	 
2025-07-27 20:42:43.116722 test begin: paddle.var(Tensor([529201, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([529201, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50803296 	 1000 	 1.287506103515625 	 0.45301008224487305 	 0.10937738418579102 	 0.43634510040283203 	 1.5889360904693604 	 0.8224811553955078 	 0.2706427574157715 	 0.21001124382019043 	 
2025-07-27 20:42:48.103662 test begin: paddle.var(Tensor([58801, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([58801, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50804064 	 1000 	 0.9796593189239502 	 0.177093505859375 	 0.08315062522888184 	 0.16074466705322266 	 1.3581557273864746 	 0.7687435150146484 	 0.23141932487487793 	 0.19629549980163574 	 
2025-07-27 20:42:52.199063 test begin: paddle.var(Tensor([96, 58801, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([96, 58801, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50804064 	 1000 	 0.9910545349121094 	 0.2172243595123291 	 0.07224059104919434 	 0.1110067367553711 	 1.3458359241485596 	 0.7858014106750488 	 0.19644951820373535 	 0.1605827808380127 	 
2025-07-27 20:42:56.415154 test begin: paddle.var(Tensor([96, 96, 1838, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([96, 96, 1838, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50817024 	 1000 	 0.9908435344696045 	 0.21281194686889648 	 0.07226109504699707 	 0.10874104499816895 	 1.3442013263702393 	 0.7864105701446533 	 0.19624805450439453 	 0.16067767143249512 	 
2025-07-27 20:43:00.564962 test begin: paddle.var(Tensor([96, 96, 3, 1838],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
[Prof] paddle.var 	 paddle.var(Tensor([96, 96, 3, 1838],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, ) 	 50817024 	 1000 	 0.9912583827972412 	 0.21289372444152832 	 0.07224822044372559 	 0.10877418518066406 	 1.3441965579986572 	 0.7851455211639404 	 0.19621825218200684 	 0.16045832633972168 	 
2025-07-27 20:43:04.718677 test begin: paddle.vecdot(Tensor([12700801, 4],"float32"), Tensor([12700801, 4],"float32"), axis=-1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([12700801, 4],"float32"), Tensor([12700801, 4],"float32"), axis=-1, ) 	 101606408 	 1000 	 1.1488051414489746 	 0.931790828704834 	 0.39145374298095703 	 0.4761507511138916 	 1.6414999961853027 	 0.6836543083190918 	 0.5594949722290039 	 0.34926438331604004 	 combined
2025-07-27 20:43:10.938761 test begin: paddle.vecdot(Tensor([1270081, 4, 5],"float64"), Tensor([1270081, 4, 5],"float64"), axis=1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([1270081, 4, 5],"float64"), Tensor([1270081, 4, 5],"float64"), axis=1, ) 	 50803240 	 1000 	 1.0296945571899414 	 0.6351273059844971 	 0.3508443832397461 	 0.3232712745666504 	 1.2436435222625732 	 0.6732199192047119 	 0.42385125160217285 	 0.34394121170043945 	 combined
2025-07-27 20:43:15.695233 test begin: paddle.vecdot(Tensor([2, 3, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), axis=-1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([2, 3, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), axis=-1, ) 	 50803212 	 1000 	 0.9930968284606934 	 0.5963220596313477 	 0.2534632682800293 	 0.20287871360778809 	 1.1783092021942139 	 0.6010942459106445 	 0.40161895751953125 	 0.3070521354675293 	 combined
2025-07-27 20:43:22.104362 test begin: paddle.vecdot(Tensor([2, 3175201, 4],"float64"), Tensor([2, 3175201, 4],"float64"), axis=-1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([2, 3175201, 4],"float64"), Tensor([2, 3175201, 4],"float64"), axis=-1, ) 	 50803216 	 1000 	 0.9979145526885986 	 0.7180328369140625 	 0.3399994373321533 	 0.36557507514953613 	 1.2436161041259766 	 0.6723682880401611 	 0.42382383346557617 	 0.3435091972351074 	 combined
2025-07-27 20:43:27.193469 test begin: paddle.vecdot(Tensor([2116801, 3, 4],"float64"), Tensor([2116801, 3, 4],"float64"), axis=-1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([2116801, 3, 4],"float64"), Tensor([2116801, 3, 4],"float64"), axis=-1, ) 	 50803224 	 1000 	 0.9979450702667236 	 0.7130887508392334 	 0.34003591537475586 	 0.3644235134124756 	 1.243643045425415 	 0.6723484992980957 	 0.423830509185791 	 0.3435049057006836 	 combined
2025-07-27 20:43:31.971547 test begin: paddle.vecdot(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), axis=-1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), axis=-1, ) 	 101606406 	 1000 	 0.9698202610015869 	 0.5989983081817627 	 0.24752378463745117 	 0.20383810997009277 	 1.5732777118682861 	 0.606938362121582 	 0.536278247833252 	 0.309995174407959 	 combined
2025-07-27 20:43:40.694285 test begin: paddle.vecdot(Tensor([3, 1693441, 5],"float64"), Tensor([3, 1693441, 5],"float64"), axis=1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([3, 1693441, 5],"float64"), Tensor([3, 1693441, 5],"float64"), axis=1, ) 	 50803230 	 1000 	 7.036750078201294 	 0.5999100208282471 	 1.800736904144287 	 0.20410704612731934 	 1.17850661277771 	 0.601750373840332 	 0.4016876220703125 	 0.3074221611022949 	 combined
2025-07-27 20:43:51.258605 test begin: paddle.vecdot(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), axis=1, )
[Prof] paddle.vecdot 	 paddle.vecdot(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), axis=1, ) 	 50803224 	 1000 	 0.9306826591491699 	 0.6309399604797363 	 0.31707167625427246 	 0.32241296768188477 	 1.3359322547912598 	 0.8988244533538818 	 0.45522212982177734 	 0.4591243267059326 	 combined
2025-07-27 20:43:56.211172 test begin: paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[-1,], ) 	 50804000 	 1000 	 0.013920307159423828 	 0.0040247440338134766 	 1.9550323486328125e-05 	 2.7418136596679688e-05 	 0.04256701469421387 	 0.0556643009185791 	 1.9073486328125e-05 	 3.814697265625e-05 	 
2025-07-27 20:43:57.997214 test begin: paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[10,100,-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[10,100,-1,], ) 	 50804000 	 1000 	 0.013728857040405273 	 0.004069805145263672 	 9.298324584960938e-06 	 1.7642974853515625e-05 	 0.0428013801574707 	 0.05736589431762695 	 2.5033950805664062e-05 	 3.743171691894531e-05 	 
2025-07-27 20:43:59.758765 test begin: paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[-1,], ) 	 50804000 	 1000 	 0.013695478439331055 	 0.006282806396484375 	 1.52587890625e-05 	 7.081031799316406e-05 	 0.042717695236206055 	 0.0553593635559082 	 2.9087066650390625e-05 	 3.600120544433594e-05 	 
2025-07-27 20:44:01.549287 test begin: paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[10,100,-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[10,100,-1,], ) 	 50804000 	 1000 	 0.013897180557250977 	 0.0040416717529296875 	 9.059906005859375e-06 	 1.6927719116210938e-05 	 0.047815561294555664 	 0.05740499496459961 	 5.125999450683594e-05 	 7.271766662597656e-05 	 
2025-07-27 20:44:03.336822 test begin: paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[-1,], ) 	 50804000 	 1000 	 0.013592720031738281 	 0.004003047943115234 	 1.1444091796875e-05 	 3.409385681152344e-05 	 0.04361772537231445 	 0.05698800086975098 	 3.7670135498046875e-05 	 7.081031799316406e-05 	 
2025-07-27 20:44:05.149860 test begin: paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[10,100,-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[10,100,-1,], ) 	 50804000 	 1000 	 0.014451265335083008 	 0.004014492034912109 	 2.4557113647460938e-05 	 1.7404556274414062e-05 	 0.04258084297180176 	 0.05799150466918945 	 2.8371810913085938e-05 	 7.390975952148438e-05 	 
2025-07-27 20:44:06.929025 test begin: paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[-1,], ) 	 50804000 	 1000 	 0.013740062713623047 	 0.003980875015258789 	 1.0728836059570312e-05 	 1.6450881958007812e-05 	 0.04264330863952637 	 0.056169748306274414 	 4.029273986816406e-05 	 4.00543212890625e-05 	 
2025-07-27 20:44:08.733548 test begin: paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[10,100,-1,], )
[Prof] paddle.view 	 paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[10,100,-1,], ) 	 50804000 	 1000 	 0.013859748840332031 	 0.004056215286254883 	 9.5367431640625e-06 	 1.6689300537109375e-05 	 0.04370403289794922 	 0.056479454040527344 	 3.170967102050781e-05 	 3.910064697265625e-05 	 
2025-07-27 20:44:10.507885 test begin: paddle.view_as(Tensor([10, 10, 10, 50804],"float32"), Tensor([10, 100, 50804],"float32"), )
[Prof] paddle.view_as 	 paddle.view_as(Tensor([10, 10, 10, 50804],"float32"), Tensor([10, 100, 50804],"float32"), ) 	 101608000 	 1000 	 0.014161348342895508 	 0.0034563541412353516 	 8.58306884765625e-06 	 1.7404556274414062e-05 	 None 	 None 	 None 	 None 	 combined
[Error] One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
2025-07-27 20:44:13.067883 test begin: paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,1,3,], )
W0727 20:44:14.222608 25376 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,1,3,], ) 	 25401612 	 1000 	 0.0657958984375 	 0.014693975448608398 	 4.1961669921875e-05 	 2.1457672119140625e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:14.414428 test begin: paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,], )
W0727 20:44:15.165038 25377 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,], ) 	 25401612 	 1000 	 0.03447437286376953 	 0.01157689094543457 	 3.170967102050781e-05 	 2.1219253540039062e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:15.295839 test begin: paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[2,4,], )
W0727 20:44:16.061020 25379 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[2,4,], ) 	 25401612 	 1000 	 0.041872501373291016 	 0.01409602165222168 	 3.457069396972656e-05 	 5.6743621826171875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:16.193070 test begin: paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,1,3,], )
W0727 20:44:17.155776 25380 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,1,3,], ) 	 25401618 	 1000 	 0.0305328369140625 	 0.009599924087524414 	 9.059906005859375e-06 	 3.790855407714844e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:17.321548 test begin: paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,], )
W0727 20:44:18.023473 25381 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,], ) 	 25401618 	 1000 	 0.01846790313720703 	 0.007139444351196289 	 2.193450927734375e-05 	 3.838539123535156e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:18.143256 test begin: paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[2,4,], )
W0727 20:44:18.865443 25382 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[2,4,], ) 	 25401618 	 1000 	 0.023859739303588867 	 0.008193016052246094 	 1.3113021850585938e-05 	 2.2649765014648438e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:18.993712 test begin: paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,1,3,], )
W0727 20:44:19.957844 25384 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,1,3,], ) 	 25401624 	 1000 	 0.03077864646911621 	 0.00937795639038086 	 1.049041748046875e-05 	 1.9550323486328125e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:20.129855 test begin: paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,], )
W0727 20:44:20.821720 25385 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,], ) 	 25401624 	 1000 	 0.017420291900634766 	 0.015834569931030273 	 2.6702880859375e-05 	 7.152557373046875e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:20.960995 test begin: paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[2,4,], )
W0727 20:44:21.701036 25386 backward.cc:462] While running Node (SliceGradNode) raises an EnforceNotMet exception
[Error] (Unimplemented) Gradient accumulation of data type (int64_t) on place (Place(gpu:0)) is not supported in imperative mode (at ../paddle/fluid/imperative/gradient_accumulator.cc:242)

[Prof] paddle.vsplit 	 paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[2,4,], ) 	 25401624 	 1000 	 0.023976564407348633 	 0.008271455764770508 	 1.8596649169921875e-05 	 1.8358230590820312e-05 	 None 	 None 	 None 	 None 	 
[Error] element 0 of tensors does not require grad and does not have a grad_fn
2025-07-27 20:44:21.822610 test begin: paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], ) 	 76204872 	 1000 	 0.9550106525421143 	 0.9220139980316162 	 0.1626725196838379 	 0.9056949615478516 	 0.9381179809570312 	 0.0774080753326416 	 0.1597883701324463 	 5.984306335449219e-05 	 
2025-07-27 20:44:29.459071 test begin: paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], name=None, ) 	 76204872 	 1000 	 0.9551219940185547 	 0.9242641925811768 	 0.16268682479858398 	 0.8995401859283447 	 0.9381685256958008 	 0.08395242691040039 	 0.159745454788208 	 4.4345855712890625e-05 	 
2025-07-27 20:44:37.572083 test begin: paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),], ) 	 25401624 	 1000 	 0.3160979747772217 	 0.3296959400177002 	 0.16152024269104004 	 0.16008877754211426 	 0.3157382011413574 	 0.08055853843688965 	 0.16127800941467285 	 8.177757263183594e-05 	 
2025-07-27 20:44:40.651410 test begin: paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.321868896484375 	 0.32311081886291504 	 0.08239340782165527 	 0.30156922340393066 	 0.31673526763916016 	 0.08631324768066406 	 0.08105015754699707 	 4.4345855712890625e-05 	 
2025-07-27 20:44:42.743532 test begin: paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, ) 	 25401880 	 1000 	 0.3218812942504883 	 0.3235626220703125 	 0.08237910270690918 	 0.30946898460388184 	 0.31670618057250977 	 0.0775899887084961 	 0.08103632926940918 	 4.482269287109375e-05 	 
2025-07-27 20:44:44.857463 test begin: paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.3262364864349365 	 0.32023119926452637 	 0.08316659927368164 	 0.3061399459838867 	 0.31638598442077637 	 0.08063006401062012 	 0.08061981201171875 	 6.29425048828125e-05 	 
2025-07-27 20:44:46.964182 test begin: paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, ) 	 25401880 	 1000 	 0.32619524002075195 	 0.3202507495880127 	 0.08316397666931152 	 0.30591344833374023 	 0.31635069847106934 	 0.07840609550476074 	 0.08061933517456055 	 4.172325134277344e-05 	 
2025-07-27 20:44:49.077087 test begin: paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], ) 	 76204980 	 1000 	 0.9464631080627441 	 0.9197373390197754 	 0.1612257957458496 	 0.9036400318145752 	 0.9457886219024658 	 0.07659077644348145 	 0.1610727310180664 	 4.410743713378906e-05 	 
2025-07-27 20:44:55.248558 test begin: paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], name=None, ) 	 76204980 	 1000 	 0.946460485458374 	 0.9187333583831787 	 0.16124463081359863 	 0.8967235088348389 	 0.9457724094390869 	 0.07887744903564453 	 0.16111063957214355 	 5.984306335449219e-05 	 
2025-07-27 20:45:01.347967 test begin: paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),], ) 	 25401660 	 1000 	 0.31492090225219727 	 0.3132748603820801 	 0.16089725494384766 	 0.1599874496459961 	 0.31320929527282715 	 0.06753063201904297 	 0.15998172760009766 	 0.00011563301086425781 	 
2025-07-27 20:45:03.418313 test begin: paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], ) 	 76204890 	 1000 	 0.956263542175293 	 0.9289484024047852 	 0.16287922859191895 	 0.9071168899536133 	 0.9435441493988037 	 0.08517909049987793 	 0.16071486473083496 	 6.937980651855469e-05 	 
2025-07-27 20:45:09.574913 test begin: paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], name=None, ) 	 76204890 	 1000 	 0.9562497138977051 	 0.9289364814758301 	 0.1628866195678711 	 0.9142336845397949 	 0.9435796737670898 	 0.07692599296569824 	 0.16069245338439941 	 4.4345855712890625e-05 	 
2025-07-27 20:45:15.671915 test begin: paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),], ) 	 25401630 	 1000 	 0.316068172454834 	 0.31328701972961426 	 0.16149163246154785 	 0.16001486778259277 	 0.31577086448669434 	 0.0588078498840332 	 0.1612987518310547 	 5.9604644775390625e-05 	 
2025-07-27 20:45:17.755863 test begin: paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], ) 	 25401880 	 1000 	 0.3204221725463867 	 0.3111841678619385 	 0.0816953182220459 	 0.29697561264038086 	 0.3133425712585449 	 0.07719159126281738 	 0.07987332344055176 	 5.7220458984375e-05 	 
2025-07-27 20:45:19.854042 test begin: paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, ) 	 25401880 	 1000 	 0.3204050064086914 	 0.3110053539276123 	 0.08170175552368164 	 0.2968878746032715 	 0.31332921981811523 	 0.09309768676757812 	 0.07985854148864746 	 5.626678466796875e-05 	 
2025-07-27 20:45:21.930804 test begin: paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], ) 	 76204920 	 1000 	 0.9403769969940186 	 0.922299861907959 	 0.1601731777191162 	 0.9076387882232666 	 0.9411146640777588 	 0.07970237731933594 	 0.16025376319885254 	 7.510185241699219e-05 	 
2025-07-27 20:45:27.998686 test begin: paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, ) 	 76204920 	 1000 	 0.9404597282409668 	 0.9303731918334961 	 0.1602027416229248 	 0.907088041305542 	 0.9410817623138428 	 0.07709693908691406 	 0.1602628231048584 	 5.030632019042969e-05 	 
2025-07-27 20:45:35.977936 test begin: paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
[Prof] paddle.vstack 	 paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),], ) 	 25401640 	 1000 	 0.31493067741394043 	 1.9685957431793213 	 0.16089773178100586 	 0.15996932983398438 	 0.3132188320159912 	 0.06174063682556152 	 0.15999174118041992 	 0.0001327991485595703 	 
2025-07-27 20:45:40.250478 test begin: paddle.where(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"float32"), Tensor([1, 400, 127009],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"float32"), Tensor([1, 400, 127009],"float32"), ) 	 152410800 	 1000 	 0.4846620559692383 	 0.5154335498809814 	 0.45679402351379395 	 0.458787202835083 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:45.744817 test begin: paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), ) 	 105369600 	 1000 	 0.9340002536773682 	 0.5166740417480469 	 0.3183410167694092 	 0.5021419525146484 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:50.593655 test begin: paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), ) 	 105369600 	 1000 	 0.9342739582061768 	 0.5165872573852539 	 0.31841278076171875 	 0.5016989707946777 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:45:55.461323 test begin: paddle.where(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"float32"), Tensor([1, 772, 65856],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"float32"), Tensor([1, 772, 65856],"float32"), ) 	 152522496 	 1000 	 0.48497891426086426 	 0.48316359519958496 	 0.46619296073913574 	 0.4697842597961426 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:00.129484 test begin: paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), ) 	 105369600 	 1000 	 1.1142771244049072 	 0.519871711730957 	 0.3796241283416748 	 0.5017540454864502 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:05.439176 test begin: paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), ) 	 158054400 	 1000 	 0.502042293548584 	 0.5004255771636963 	 0.4831860065460205 	 0.48667192459106445 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:10.247688 test begin: paddle.where(Tensor([4, 125, 320, 320],"bool"), Tensor([4, 125, 320, 320],"float32"), Tensor([4, 125, 320, 320],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 125, 320, 320],"bool"), Tensor([4, 125, 320, 320],"float32"), Tensor([4, 125, 320, 320],"float32"), ) 	 153600000 	 1000 	 0.48796844482421875 	 0.4919266700744629 	 0.45968031883239746 	 0.4657590389251709 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:15.087616 test begin: paddle.where(Tensor([4, 280, 376, 25, 5],"bool"), Tensor([4, 280, 376, 25, 5],"float32"), Tensor([4, 280, 376, 25, 5],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 280, 376, 25, 5],"bool"), Tensor([4, 280, 376, 25, 5],"float32"), Tensor([4, 280, 376, 25, 5],"float32"), ) 	 157920000 	 1000 	 0.502000093460083 	 0.49998903274536133 	 0.48308277130126953 	 0.4858701229095459 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:19.976606 test begin: paddle.where(Tensor([4, 280, 376, 41, 3],"bool"), Tensor([4, 280, 376, 41, 3],"float32"), Tensor([4, 280, 376, 41, 3],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 280, 376, 41, 3],"bool"), Tensor([4, 280, 376, 41, 3],"float32"), Tensor([4, 280, 376, 41, 3],"float32"), ) 	 155393280 	 1000 	 0.49433112144470215 	 0.4928581714630127 	 0.47267889976501465 	 0.4783518314361572 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:24.755524 test begin: paddle.where(Tensor([4, 280, 605, 25, 3],"bool"), Tensor([4, 280, 605, 25, 3],"float32"), Tensor([4, 280, 605, 25, 3],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 280, 605, 25, 3],"bool"), Tensor([4, 280, 605, 25, 3],"float32"), Tensor([4, 280, 605, 25, 3],"float32"), ) 	 152460000 	 1000 	 0.4851689338684082 	 0.48438525199890137 	 0.46637630462646484 	 0.4690251350402832 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:29.538858 test begin: paddle.where(Tensor([4, 451, 376, 25, 3],"bool"), Tensor([4, 451, 376, 25, 3],"float32"), Tensor([4, 451, 376, 25, 3],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 451, 376, 25, 3],"bool"), Tensor([4, 451, 376, 25, 3],"float32"), Tensor([4, 451, 376, 25, 3],"float32"), ) 	 152618400 	 1000 	 0.48634910583496094 	 0.48630428314208984 	 0.4675168991088867 	 0.4656658172607422 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:34.232736 test begin: paddle.where(Tensor([4, 64, 320, 621],"bool"), Tensor([4, 64, 320, 621],"float32"), Tensor([4, 64, 320, 621],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 64, 320, 621],"bool"), Tensor([4, 64, 320, 621],"float32"), Tensor([4, 64, 320, 621],"float32"), ) 	 152616960 	 1000 	 0.48508477210998535 	 0.5019395351409912 	 0.4662642478942871 	 0.4685490131378174 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:41.035634 test begin: paddle.where(Tensor([4, 64, 621, 320],"bool"), Tensor([4, 64, 621, 320],"float32"), Tensor([4, 64, 621, 320],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([4, 64, 621, 320],"bool"), Tensor([4, 64, 621, 320],"float32"), Tensor([4, 64, 621, 320],"float32"), ) 	 152616960 	 1000 	 0.48543500900268555 	 0.48331403732299805 	 0.4658355712890625 	 0.46924400329589844 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:47.992392 test begin: paddle.where(Tensor([7, 280, 376, 25, 3],"bool"), Tensor([7, 280, 376, 25, 3],"float32"), Tensor([7, 280, 376, 25, 3],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([7, 280, 376, 25, 3],"bool"), Tensor([7, 280, 376, 25, 3],"float32"), Tensor([7, 280, 376, 25, 3],"float32"), ) 	 165816000 	 1000 	 0.5272495746612549 	 0.5250864028930664 	 0.5084214210510254 	 0.5109057426452637 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:53.060117 test begin: paddle.where(Tensor([8, 64, 320, 320],"bool"), Tensor([8, 64, 320, 320],"float32"), Tensor([8, 64, 320, 320],"float32"), )
[Prof] paddle.where 	 paddle.where(Tensor([8, 64, 320, 320],"bool"), Tensor([8, 64, 320, 320],"float32"), Tensor([8, 64, 320, 320],"float32"), ) 	 157286400 	 1000 	 0.49950408935546875 	 0.4978818893432617 	 0.48055124282836914 	 0.4835693836212158 	 None 	 None 	 None 	 None 	 
[Error] One of the differentiated Tensors does not require grad
2025-07-27 20:46:57.869742 test begin: paddle.zeros_like(Tensor([16, 64, 320, 320],"float16"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([16, 64, 320, 320],"float16"), ) 	 104857600 	 1000 	 0.1381230354309082 	 0.138413667678833 	 0.12735819816589355 	 0.12675976753234863 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:00.109599 xx paddle.zeros_like(Tensor([4, 1051, 12096],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 1051, 12096],"float32"), ) 	 50851584 	 1000 	 0.1340639591217041 	 0.13444733619689941 	 0.12308025360107422 	 0.12292861938476562 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:01.241400 test begin: paddle.zeros_like(Tensor([4, 125, 320, 320],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 125, 320, 320],"float32"), ) 	 51200000 	 1000 	 0.1350114345550537 	 0.13541746139526367 	 0.12272953987121582 	 0.12318754196166992 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:02.389305 test begin: paddle.zeros_like(Tensor([4, 249, 320, 320],"float16"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 249, 320, 320],"float16"), ) 	 101990400 	 1000 	 0.13447213172912598 	 0.13469433784484863 	 0.12360882759094238 	 0.11916255950927734 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:04.683197 test begin: paddle.zeros_like(Tensor([4, 525, 24193],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 525, 24193],"float32"), ) 	 50805300 	 1000 	 0.13396716117858887 	 0.13437724113464355 	 0.12309408187866211 	 0.12282466888427734 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:05.767400 test begin: paddle.zeros_like(Tensor([4, 64, 1241, 320],"float16"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 64, 1241, 320],"float16"), ) 	 101662720 	 1000 	 0.13393235206604004 	 0.13422441482543945 	 0.12312602996826172 	 0.12293505668640137 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:07.932600 test begin: paddle.zeros_like(Tensor([4, 64, 320, 1241],"float16"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 64, 320, 1241],"float16"), ) 	 101662720 	 1000 	 0.1339421272277832 	 0.13423466682434082 	 0.12202858924865723 	 0.12283563613891602 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:10.115842 test begin: paddle.zeros_like(Tensor([4, 64, 320, 621],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 64, 320, 621],"float32"), ) 	 50872320 	 1000 	 0.13417792320251465 	 0.13725495338439941 	 0.1232304573059082 	 0.12245059013366699 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:11.206368 test begin: paddle.zeros_like(Tensor([4, 64, 621, 320],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([4, 64, 621, 320],"float32"), ) 	 50872320 	 1000 	 0.13417434692382812 	 0.13453078269958496 	 0.1232292652130127 	 0.12260985374450684 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:12.319158 test begin: paddle.zeros_like(Tensor([8, 64, 320, 320],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([8, 64, 320, 320],"float32"), ) 	 52428800 	 1000 	 0.1381971836090088 	 0.1385481357574463 	 0.12698817253112793 	 0.12695765495300293 	 None 	 None 	 None 	 None 	 
2025-07-27 20:47:13.438322 test begin: paddle.zeros_like(Tensor([9, 525, 12096],"float32"), )
[Prof] paddle.zeros_like 	 paddle.zeros_like(Tensor([9, 525, 12096],"float32"), ) 	 57153600 	 1000 	 0.1508808135986328 	 0.15062189102172852 	 0.14006829261779785 	 0.13872551918029785 	 None 	 None 	 None 	 None 	 
