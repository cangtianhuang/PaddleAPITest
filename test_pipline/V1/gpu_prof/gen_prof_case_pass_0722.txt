paddle.Tensor.__abs__(Tensor([10, 5080321],"float32"), )
paddle.Tensor.__abs__(Tensor([49613, 1024],"float32"), )
paddle.Tensor.__abs__(Tensor([50803201],"float32"), )
paddle.Tensor.__add__(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 1, 388, 4096],"float32"), )
paddle.Tensor.__add__(Tensor([1, 32, 4096, 388],"float32"), Tensor([1, 1, 4096, 388],"float32"), )
paddle.Tensor.__add__(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 1, 4096, 4096],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 4096],"float32"), )
paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float16"), Tensor([2, 256, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([2, 256, 336, 336],"float32"), Tensor([2, 256, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([4, 256, 336, 336],"float16"), Tensor([4, 256, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([8, 113, 336, 336],"float16"), Tensor([8, 113, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([8, 256, 336, 74],"float32"), Tensor([8, 256, 336, 74],"float32"), )
paddle.Tensor.__add__(Tensor([8, 256, 74, 336],"float32"), Tensor([8, 256, 74, 336],"float32"), )
paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float16"), Tensor([8, 57, 336, 336],"float32"), )
paddle.Tensor.__add__(Tensor([8, 57, 336, 336],"float32"), Tensor([8, 57, 336, 336],"float32"), )
paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 2048, 24807],"bool"), Tensor([1, 1, 2048, 24807],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 24807, 2048],"bool"), Tensor([1, 1, 24807, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([1, 13, 2048, 2048],"bool"), Tensor([1, 13, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 1007, 3881],"bool"), Tensor([13, 1, 1007, 3881],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([1, 1, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 2048, 2048],"bool"), Tensor([13, 1, 2048, 2048],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 3881, 1007],"bool"), Tensor([13, 1, 3881, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 1, 1007, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([13, 4, 1007, 1007],"bool"), Tensor([13, 4, 1007, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([194, 1, 512, 512],"bool"), Tensor([194, 1, 512, 512],"bool"), )
paddle.Tensor.__and__(Tensor([51, 1, 1007, 1007],"bool"), Tensor([51, 1, 1007, 1007],"bool"), )
paddle.Tensor.__and__(Tensor([8, 1, 12404, 512],"bool"), Tensor([8, 1, 12404, 512],"bool"), )
paddle.Tensor.__and__(Tensor([8, 1, 512, 12404],"bool"), Tensor([8, 1, 512, 12404],"bool"), )
paddle.Tensor.__and__(Tensor([8, 1, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), )
paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 1, 512, 512],"bool"), )
paddle.Tensor.__and__(Tensor([8, 25, 512, 512],"bool"), Tensor([8, 25, 512, 512],"bool"), )
paddle.Tensor.__div__(Tensor([8, 16, 396901],"float32"), 2, )
paddle.Tensor.__div__(Tensor([8, 198451, 32],"float32"), 2, )
paddle.Tensor.__div__(Tensor([99226, 16, 32],"float32"), 2, )
paddle.Tensor.__eq__(Tensor([138, 369303],"float32"), Tensor([138, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([146, 349866],"float32"), Tensor([146, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1036801],"float32"), )
paddle.Tensor.__eq__(Tensor([49, 1036801],"float32"), Tensor([49, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([53, 958551],"float32"), Tensor([53, 958551],"float32"), )
paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 1],"float32"), )
paddle.Tensor.__eq__(Tensor([55, 923695],"float32"), Tensor([55, 923695],"float32"), )
paddle.Tensor.__floordiv__(Tensor([10, 10160641],"float32"), Tensor([10, 10160641],"float16"), )
paddle.Tensor.__floordiv__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
paddle.Tensor.__floordiv__(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float16"), )
paddle.Tensor.__floordiv__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
paddle.Tensor.__floordiv__(Tensor([4, 6350401],"int64"), 4, )
paddle.Tensor.__floordiv__(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float16"), )
paddle.Tensor.__floordiv__(Tensor([84673, 300],"int64"), 4, )
paddle.Tensor.__floordiv__(Tensor([99226, 1024],"float32"), Tensor([99226, 1024],"float16"), )
paddle.Tensor.__ge__(Tensor([50803201],"int32"), 0, )
paddle.Tensor.__getitem__(Tensor([1, 7576, 12800],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([1, 7576, 16770],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([1, 7712, 12800],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([1, 7712, 16470],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([1, 8168, 12800],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([1, 8168, 15550],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-2,None), )
paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-3,None), )
paddle.Tensor.__getitem__(Tensor([1, 9923, 12800],"bfloat16"), slice(None,-6,None), )
paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 0, )
paddle.Tensor.__gt__(Tensor([1, 400, 127009],"float32"), 1e-09, )
paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 0, )
paddle.Tensor.__gt__(Tensor([1, 772, 65856],"float32"), 1e-09, )
paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 0, )
paddle.Tensor.__gt__(Tensor([2, 400, 65856],"float32"), 1e-09, )
paddle.Tensor.__gt__(Tensor([324000, 157],"float32"), 0.0, )
paddle.Tensor.__gt__(Tensor([635041, 80],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([243360, 209],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([282240, 181],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([324000, 157],"float32"), 0.0, )
paddle.Tensor.__le__(Tensor([635041, 80],"float32"), 0.0, )
paddle.Tensor.__len__(Tensor([100, 1352, 376],"float32"), )
paddle.Tensor.__len__(Tensor([100, 376, 1352],"float32"), )
paddle.Tensor.__len__(Tensor([100000, 509],"float32"), )
paddle.Tensor.__len__(Tensor([23, 1501, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([360, 376, 376],"float32"), )
paddle.Tensor.__len__(Tensor([50, 1501, 677],"float32"), )
paddle.Tensor.__len__(Tensor([50, 677, 1501],"float32"), )
paddle.Tensor.__len__(Tensor([508033, 100],"float32"), )
paddle.Tensor.__lshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
paddle.Tensor.__lshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
paddle.Tensor.__lshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
paddle.Tensor.__lshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
paddle.Tensor.__lt__(Tensor([1034, 3, 64, 128],"float64"), 1, )
paddle.Tensor.__lt__(Tensor([256, 13, 64, 128],"float64"), 1, )
paddle.Tensor.__lt__(Tensor([256, 3, 259, 128],"float64"), 1, )
paddle.Tensor.__lt__(Tensor([256, 3, 64, 517],"float64"), 1, )
paddle.Tensor.__lt__(Tensor([4, 157920, 81],"float32"), 0.1111111111111111, )
paddle.Tensor.__lt__(Tensor([4, 1814401, 7],"float32"), 0.1111111111111111, )
paddle.Tensor.__lt__(Tensor([46, 157920, 7],"float32"), 0.1111111111111111, )
paddle.Tensor.__lt__(Tensor([50803201],"float32"), 0.7, )
paddle.Tensor.__matmul__(Tensor([10, 2304, 2304],"float32"), Tensor([10, 2304, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([111, 3, 392, 392],"float32"), Tensor([111, 3, 392, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1351, 3, 392, 392],"float32"), Tensor([1351, 3, 392, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([176, 2, 392, 392],"float32"), Tensor([176, 2, 392, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([176, 24, 392, 392],"float32"), Tensor([176, 24, 392, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([176, 3, 246, 392],"float32"), Tensor([176, 3, 392, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([176, 3, 392, 392],"float32"), Tensor([176, 3, 392, 246],"float32"), )
paddle.Tensor.__matmul__(Tensor([345, 2304, 2304],"float32"), Tensor([345, 2304, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([60, 2304, 2304],"float32"), Tensor([60, 2304, 368],"float32"), )
paddle.Tensor.__matmul__(Tensor([60, 368, 2304],"float32"), Tensor([60, 2304, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([776, 1024, 1024],"float32"), Tensor([776, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([96, 1024, 1024],"float32"), Tensor([96, 1024, 517],"float32"), )
paddle.Tensor.__matmul__(Tensor([96, 517, 1024],"float32"), Tensor([96, 1024, 64],"float32"), )
paddle.Tensor.__mod__(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
paddle.Tensor.__mod__(Tensor([13, 2, 976985],"int64"), 16, )
paddle.Tensor.__mod__(Tensor([13, 30531, 64],"int64"), 16, )
paddle.Tensor.__mod__(Tensor([198451, 2, 64],"int64"), 16, )
paddle.Tensor.__mod__(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
paddle.Tensor.__mod__(Tensor([26, 976985],"int64"), 64, )
paddle.Tensor.__mod__(Tensor([396901, 64],"int64"), 64, )
paddle.Tensor.__mul__(Tensor([1, 1, 32768, 32768],"float16"), 10000.0, )
paddle.Tensor.__mul__(Tensor([108544, 469],"float32"), Tensor([108544, 469],"float32"), )
paddle.Tensor.__mul__(Tensor([111616, 456],"float32"), Tensor([111616, 456],"float32"), )
paddle.Tensor.__mul__(Tensor([14176, 3584],"float32"), Tensor([14176, 3584],"float32"), )
paddle.Tensor.__mul__(Tensor([2, 1, 1551, 32768],"float16"), 10000.0, )
paddle.Tensor.__mul__(Tensor([2, 1, 32768, 1551],"float16"), 10000.0, )
paddle.Tensor.__mul__(Tensor([2, 1, 32768, 32768],"float16"), 10000.0, )
paddle.Tensor.__ne__(Tensor([144, 392, 901],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([144, 901, 392],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([160, 392, 811],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([160, 811, 392],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([176, 392, 737],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([176, 737, 392],"float32"), 0, )
paddle.Tensor.__ne__(Tensor([331, 392, 392],"float32"), 0, )
paddle.Tensor.__neg__(Tensor([128, 396901],"float32"), )
paddle.Tensor.__neg__(Tensor([128, 793801],"float16"), )
paddle.Tensor.__neg__(Tensor([22, 81, 94, 311],"float32"), )
paddle.Tensor.__neg__(Tensor([264, 192612],"float32"), )
paddle.Tensor.__neg__(Tensor([4, 435, 94, 311],"float32"), )
paddle.Tensor.__neg__(Tensor([4, 81, 505, 311],"float32"), )
paddle.Tensor.__neg__(Tensor([4, 81, 94, 1669],"float32"), )
paddle.Tensor.__neg__(Tensor([528, 192612],"float16"), )
paddle.Tensor.__or__(Tensor([1, 210, 241921],"bool"), Tensor([1, 210, 241921],"bool"), )
paddle.Tensor.__or__(Tensor([1, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), )
paddle.Tensor.__or__(Tensor([1, 218, 233043],"bool"), Tensor([1, 218, 233043],"bool"), )
paddle.Tensor.__or__(Tensor([1, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), )
paddle.Tensor.__or__(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"bool"), )
paddle.Tensor.__or__(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), )
paddle.Tensor.__or__(Tensor([1, 673, 75600],"bool"), Tensor([1, 673, 75600],"bool"), )
paddle.Tensor.__or__(Tensor([1, 720, 70644],"bool"), Tensor([1, 720, 70644],"bool"), )
paddle.Tensor.__or__(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"bool"), )
paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"bool"), )
paddle.Tensor.__or__(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"bool"), )
paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([1, 210, 75600],"bool"), )
paddle.Tensor.__or__(Tensor([4, 210, 75600],"bool"), Tensor([4, 210, 75600],"bool"), )
paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([1, 218, 70644],"bool"), )
paddle.Tensor.__or__(Tensor([4, 218, 70644],"bool"), Tensor([4, 218, 70644],"bool"), )
paddle.Tensor.__pow__(Tensor([23, 17, 256, 256],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([24, 17, 244, 256],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([24, 17, 256, 244],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([24, 17, 256, 256],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([259, 3, 256, 256],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([28, 32, 241, 241],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([64, 13, 256, 256],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([64, 3, 1034, 256],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([64, 3, 256, 1034],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([8, 110, 241, 241],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([8, 32, 241, 824],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([8, 32, 824, 241],"float32"), 2, )
paddle.Tensor.__radd__(Tensor([192, 104, 32, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 128, 16, 259],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 128, 26, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 207, 16, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 240, 16, 138],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 240, 28, 80],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 414, 16, 80],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 64, 32, 259],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([192, 64, 52, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([311, 128, 16, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([311, 64, 32, 160],"float16"), 0, )
paddle.Tensor.__radd__(Tensor([331, 240, 16, 80],"float16"), 0, )
paddle.Tensor.__rlshift__(Tensor([169345, 300],"int32"), -223, )
paddle.Tensor.__rlshift__(Tensor([200, 254017],"int32"), -223, )
paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), -212, )
paddle.Tensor.__rlshift__(Tensor([200, 508033],"int16"), 63, )
paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), -212, )
paddle.Tensor.__rlshift__(Tensor([338689, 300],"int16"), 63, )
paddle.Tensor.__rmatmul__(Tensor([10160641, 5],"float32"), Tensor([2, 10160641],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([25401601, 5],"float32"), Tensor([2, 25401601],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([3, 16934401],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([3, 5],"float32"), Tensor([16934401, 3],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), )
paddle.Tensor.__rmod__(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), )
paddle.Tensor.__rmul__(Tensor([176, 392, 737],"float32"), -100.0, )
paddle.Tensor.__rmul__(Tensor([176, 737, 392],"float32"), -100.0, )
paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 0.75, )
paddle.Tensor.__rmul__(Tensor([324000, 157],"float32"), 1.0, )
paddle.Tensor.__rmul__(Tensor([331, 392, 392],"float32"), -100.0, )
paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 0.75, )
paddle.Tensor.__rmul__(Tensor([635041, 80],"float32"), 1.0, )
paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), 5, )
paddle.Tensor.__ror__(Tensor([2, 3, 8467201],"int32"), True, )
paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), 5, )
paddle.Tensor.__ror__(Tensor([2, 5080321, 5],"int32"), True, )
paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), 5, )
paddle.Tensor.__ror__(Tensor([3386881, 3, 5],"int32"), True, )
paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([50803201],"float32"), 10000.0, )
paddle.Tensor.__rrshift__(Tensor([169345, 300],"int32"), 232, )
paddle.Tensor.__rrshift__(Tensor([200, 254017],"int32"), 232, )
paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), -255, )
paddle.Tensor.__rrshift__(Tensor([200, 508033],"int16"), 11, )
paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), -255, )
paddle.Tensor.__rrshift__(Tensor([338689, 300],"int16"), 11, )
paddle.Tensor.__rshift__(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
paddle.Tensor.__rshift__(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
paddle.Tensor.__rshift__(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
paddle.Tensor.__rshift__(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
paddle.Tensor.__rsub__(Tensor([2, 1, 12404, 4096],"float16"), 1, )
paddle.Tensor.__rsub__(Tensor([2, 1, 4096, 12404],"float16"), 1, )
paddle.Tensor.__rsub__(Tensor([2, 4, 4096, 4096],"float16"), 1, )
paddle.Tensor.__rsub__(Tensor([2944, 17257],"float32"), 1, )
paddle.Tensor.__rsub__(Tensor([4224, 12028],"float32"), 1, )
paddle.Tensor.__rsub__(Tensor([7, 1, 4096, 4096],"float16"), 1, )
paddle.Tensor.__rsub__(Tensor([7664, 6629],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([15548, 3268],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([16773, 3029],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([26736, 1901],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([37411, 1358],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([6684, 7601],"float32"), 1.0, )
paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), 5, )
paddle.Tensor.__rxor__(Tensor([2, 3, 8467201],"int32"), True, )
paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), 5, )
paddle.Tensor.__rxor__(Tensor([2, 5080321, 5],"int32"), True, )
paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), 5, )
paddle.Tensor.__rxor__(Tensor([3386881, 3, 5],"int32"), True, )
paddle.Tensor.__sub__(Tensor([1, 1, 32768, 32768],"float16"), 1, )
paddle.Tensor.__sub__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), )
paddle.Tensor.__sub__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), )
paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
paddle.Tensor.__sub__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), )
paddle.Tensor.__sub__(Tensor([2, 1, 1551, 32768],"float16"), 1, )
paddle.Tensor.__sub__(Tensor([2, 1, 32768, 1551],"float16"), 1, )
paddle.Tensor.__sub__(Tensor([2, 1, 32768, 32768],"float16"), 1, )
paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([26736, 3029, 1],"float32"), Tensor([26736, 3029, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([26736, 3029, 2],"float32"), Tensor([26736, 3029, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([26736, 951, 2],"float32"), Tensor([26736, 951, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), )
paddle.Tensor.__sub__(Tensor([8387, 3029, 2],"float32"), Tensor([8387, 3029, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([124, 128, 34, 96],"float32"), Tensor([124, 1, 34, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([124, 128, 96, 34],"float32"), Tensor([124, 1, 96, 34],"float32"), )
paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([124, 45, 96, 96],"float32"), Tensor([124, 45, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 128, 33, 96],"float32"), Tensor([128, 1, 33, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 128, 96, 33],"float32"), Tensor([128, 1, 96, 33],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 192, 22, 96],"float32"), Tensor([128, 1, 22, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 192, 96, 22],"float32"), Tensor([128, 1, 96, 22],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([128, 44, 96, 96],"float32"), Tensor([128, 44, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([29, 192, 96, 96],"float32"), Tensor([29, 1, 96, 96],"float32"), )
paddle.Tensor.__truediv__(Tensor([44, 128, 96, 96],"float32"), Tensor([44, 1, 96, 96],"float32"), )
paddle.Tensor.__xor__(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__xor__(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.Tensor.__xor__(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.abs(Tensor([243360, 209],"float32"), )
paddle.Tensor.abs(Tensor([282240, 181],"float32"), )
paddle.Tensor.abs(Tensor([324000, 157],"float32"), )
paddle.Tensor.abs(Tensor([635041, 80],"float32"), )
paddle.Tensor.add(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.Tensor.all(Tensor([1, 1, 2048, 24807],"bool"), )
paddle.Tensor.all(Tensor([1, 1, 24807, 2048],"bool"), )
paddle.Tensor.all(Tensor([1, 13, 2048, 2048],"bool"), )
paddle.Tensor.all(Tensor([13, 1, 2048, 2048],"bool"), )
paddle.Tensor.all(Tensor([159, 10, 32000],"bool"), )
paddle.Tensor.all(Tensor([2, 10, 2540161],"bool"), )
paddle.Tensor.all(Tensor([2, 100, 256000],"bool"), )
paddle.Tensor.all(Tensor([2, 794, 32000],"bool"), )
paddle.Tensor.all(Tensor([20, 10, 256000],"bool"), )
paddle.Tensor.amax(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([1270081, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([1270081, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 1693441, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 2116801, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 4, 2116801],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 1693441],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 846721, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 846721, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.any(Tensor([1, 1379, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 1501, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 184, 921],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 192, 883],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 883, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([1, 300, 921, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([10, 300, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([2, 1374, 136, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([2, 300, 136, 623],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([2, 300, 623, 136],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([5, 300, 192, 192],"bool"), axis=list[2,3,], )
paddle.Tensor.any(Tensor([6, 300, 184, 184],"bool"), axis=list[2,3,], )
paddle.Tensor.argmax(Tensor([13, 498, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([14, 457, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([14, 477, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 212, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 457, 3706],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 477, 3551],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 498, 3401],"float32"), axis=2, )
paddle.Tensor.astype(Tensor([1, 32, 388, 4096],"float32"), "float32", )
paddle.Tensor.astype(Tensor([1, 32, 4096, 388],"float32"), "float32", )
paddle.Tensor.astype(Tensor([1, 32, 4096, 4096],"float32"), "float32", )
paddle.Tensor.astype(Tensor([1, 4, 4096, 4096],"float32"), "float32", )
paddle.Tensor.astype(Tensor([100352, 1013],"bfloat16"), "float32", )
paddle.Tensor.astype(Tensor([1013, 100352],"bfloat16"), "float32", )
paddle.Tensor.astype(Tensor([12404, 8192],"bfloat16"), "float32", )
paddle.Tensor.astype(Tensor([8192, 12404],"bfloat16"), "float32", )
paddle.Tensor.atanh(Tensor([1, 16934401, 3],"float32"), )
paddle.Tensor.atanh(Tensor([1, 2, 12700801],"float64"), )
paddle.Tensor.atanh(Tensor([1, 2, 25401601],"float32"), )
paddle.Tensor.atanh(Tensor([1, 8467201, 3],"float64"), )
paddle.Tensor.atanh(Tensor([2, 12700801],"float64"), )
paddle.Tensor.atanh(Tensor([4233601, 2, 3],"float64"), )
paddle.Tensor.atanh(Tensor([6350401, 4],"float64"), )
paddle.Tensor.atanh(Tensor([8467201, 2, 3],"float32"), )
paddle.Tensor.bmm(Tensor([1, 16934401, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 170476, 299],"float32"), Tensor([1, 299, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 179876, 283],"float32"), Tensor([1, 283, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 191277, 266],"float32"), Tensor([1, 266, 2],"float32"), )
paddle.Tensor.bmm(Tensor([100, 170476, 3],"float32"), Tensor([100, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([89, 191277, 3],"float32"), Tensor([89, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([95, 179876, 3],"float32"), Tensor([95, 3, 2],"float32"), )
paddle.Tensor.cast(Tensor([128256, 793],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([152064, 669],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([24807, 4096],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([28351, 3584],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([3584, 28351],"float16"), Dtype(float16), )
paddle.Tensor.cast(Tensor([669, 152064],"float16"), Dtype(float16), )
paddle.Tensor.ceil(Tensor([1, 50803201],"float32"), )
paddle.Tensor.ceil(Tensor([10, 20, 254017],"float32"), )
paddle.Tensor.ceil(Tensor([10, 5080321, 1],"float32"), )
paddle.Tensor.ceil(Tensor([10, 5080321],"float32"), )
paddle.Tensor.ceil(Tensor([25401601, 2],"float32"), )
paddle.Tensor.ceil(Tensor([2540161, 20, 1],"float32"), )
paddle.Tensor.ceil(Tensor([2540161, 20],"float32"), )
paddle.Tensor.chunk(Tensor([1034, 32, 64, 48],"float16"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([128, 2068, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([512, 32, 130, 48],"float16"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([512, 32, 64, 49],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([512, 32, 64, 97],"float16"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([512, 32, 65, 48],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([517, 32, 64, 48],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([85, 3136, 192],"float32"), 3, axis=-1, )
paddle.Tensor.clip(Tensor([1, 386, 65856, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 400, 63505, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 400, 65856, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([2100, 12096, 3],"float32"), 0, )
paddle.Tensor.clip(Tensor([2100, 12097, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([2101, 12096, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([4, 525, 12096, 3],"float32"), 0, )
paddle.Tensor.clip(Tensor([4, 525, 12097, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([4, 526, 12096, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([5, 525, 12096, 2],"float32"), 0, )
paddle.Tensor.clone(Tensor([3544, 32, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6017, 19, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6017, 32, 528],"bfloat16"), )
paddle.Tensor.clone(Tensor([6036, 19, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6036, 32, 527],"bfloat16"), )
paddle.Tensor.clone(Tensor([6078, 19, 896],"bfloat16"), )
paddle.Tensor.clone(Tensor([6078, 32, 523],"bfloat16"), )
paddle.Tensor.conj(Tensor([10, 2540161],"float64"), )
paddle.Tensor.conj(Tensor([1270081, 20],"float64"), )
paddle.Tensor.cos(Tensor([131072, 388],"float32"), )
paddle.Tensor.cos(Tensor([3175201, 16],"float32"), )
paddle.Tensor.cos(Tensor([32768, 1551],"float32"), )
paddle.Tensor.cos(Tensor([396901, 128],"float32"), )
paddle.Tensor.cumprod(Tensor([25401601],"float64"), -1, )
paddle.Tensor.cumprod(Tensor([50803201],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 144, 352801],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 254017, 200],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1765, 144, 200],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([211681, 120],"int64"), )
paddle.Tensor.cumsum(Tensor([300, 84673],"int64"), )
paddle.Tensor.detach(Tensor([100352, 1013],"bfloat16"), )
paddle.Tensor.detach(Tensor([1013, 100352],"bfloat16"), )
paddle.Tensor.detach(Tensor([12404, 8192],"bfloat16"), )
paddle.Tensor.detach(Tensor([1772, 57344],"bfloat16"), )
paddle.Tensor.detach(Tensor([8192, 12404],"bfloat16"), )
paddle.Tensor.diag_embed(Tensor([1, 25401601, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([25401601, 1, 2],"float32"), )
paddle.Tensor.diagonal(Tensor([2, 25401601],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([25401601, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([3, 8467201],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([8467201, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, )
paddle.Tensor.digamma(Tensor([4, 6350401],"float64"), )
paddle.Tensor.digamma(Tensor([453601, 7, 8],"float64"), )
paddle.Tensor.digamma(Tensor([45361, 7, 8, 10],"float64"), )
paddle.Tensor.digamma(Tensor([5, 635041, 8],"float64"), )
paddle.Tensor.digamma(Tensor([5, 63505, 8, 10],"float64"), )
paddle.Tensor.digamma(Tensor([5, 7, 725761],"float64"), )
paddle.Tensor.digamma(Tensor([5, 7, 72577, 10],"float64"), )
paddle.Tensor.digamma(Tensor([5, 7, 8, 90721],"float64"), )
paddle.Tensor.digamma(Tensor([5080321, 5],"float64"), )
paddle.Tensor.dim(Tensor([111616, 911],"bfloat16"), )
paddle.Tensor.dim(Tensor([12404, 8192],"bfloat16"), )
paddle.Tensor.dim(Tensor([14176, 7168],"bfloat16"), )
paddle.Tensor.dim(Tensor([7168, 14176],"bfloat16"), )
paddle.Tensor.dim(Tensor([911, 111616],"bfloat16"), )
paddle.Tensor.dim(Tensor([95872, 1060],"bfloat16"), )
paddle.Tensor.dot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.Tensor.equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), )
paddle.Tensor.equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), )
paddle.Tensor.equal(Tensor([2, 12700801],"int64"), 3, )
paddle.Tensor.equal(Tensor([2540161, 10],"int64"), 3, )
paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
paddle.Tensor.equal_all(Tensor([25401601],"int64"), Tensor([8],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3175201],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3175201],"int64"), Tensor([8, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8, 3175201],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8467201, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8467201, 3],"int64"), Tensor([8467201, 3],"int64"), )
paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([25401601],"int64"), )
paddle.Tensor.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3175201],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2116801, 3],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4233601, 2, 3],"float64"), )
paddle.Tensor.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), )
paddle.Tensor.exp(Tensor([1000000, 26],"float64"), )
paddle.Tensor.exp(Tensor([2540161, 20],"float32"), )
paddle.Tensor.exp(Tensor([50803201],"float32"), )
paddle.Tensor.exp(Tensor([6350401, 4],"float64"), )
paddle.Tensor.exp(Tensor([64, 793801],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 266, 477, 401],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 283, 466, 386],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 299, 391, 436],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 38841, 436],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 391, 43311],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 42231, 401],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 43872, 386],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 466, 36340],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 477, 35502],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([100, 3, 391, 436],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([89, 3, 477, 401],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([95, 3, 466, 386],"float32"), )
paddle.Tensor.fill_(Tensor([50803201],"float32"), 0, )
paddle.Tensor.fill_(Tensor([659782, 77],"float32"), value=-math.inf, )
paddle.Tensor.fill_(Tensor([77, 659782],"float32"), value=-math.inf, )
paddle.Tensor.fill_(x=Tensor([10, 158761, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([10, 16, 158761],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([99226, 16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_diagonal_(Tensor([128, 396901],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([396901, 128],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_tensor(Tensor([12700801, 4, 7],"int32"), Tensor([12700801, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([1814401, 4, 7],"int32"), Tensor([1814401, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3175201],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 6350401],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4233601, 3, 2],"int32"), Tensor([2, 2, 3],"int32"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([6350401, 4, 7],"int64"), Tensor([6350401, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([907201, 4, 7],"int64"), Tensor([907201, 4],"int64"), 0, 1, 2, )
paddle.Tensor.flatten(Tensor([1, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([128, 127, 56, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([128, 254, 56, 56],"float16"), 2, )
paddle.Tensor.flatten(Tensor([128, 512, 14, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([128, 512, 28, 56],"float16"), 2, )
paddle.Tensor.flatten(Tensor([128, 512, 56, 14],"float32"), 2, )
paddle.Tensor.flatten(Tensor([128, 512, 56, 28],"float16"), 2, )
paddle.Tensor.flatten(Tensor([32, 512, 56, 56],"float32"), 2, )
paddle.Tensor.flatten(Tensor([4, 5, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 2, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 29, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 22],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([64, 512, 56, 56],"float16"), 2, )
paddle.Tensor.flip(Tensor([16, 3, 224, 4726],"float32"), 0, )
paddle.Tensor.flip(Tensor([16, 3, 4726, 224],"float32"), 0, )
paddle.Tensor.flip(Tensor([16, 64, 224, 224],"float32"), 0, )
paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 400, 42337],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 56449, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([338, 3, 224, 224],"float32"), 0, )
paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([424, 400, 300],"float32"), axis=list[-2,], )
paddle.Tensor.floor(Tensor([12700801, 4],"float32"), )
paddle.Tensor.floor(Tensor([1857, 27358],"float32"), )
paddle.Tensor.floor(Tensor([1872, 27139],"float32"), )
paddle.Tensor.floor(Tensor([1915, 26530],"float32"), )
paddle.Tensor.gather(Tensor([4, 12700801],"float32"), Tensor([4, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([40, 1270080],"float32"), Tensor([40, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([400, 127008],"float32"), Tensor([400, 1],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([119, 53568, 8],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 156, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 156, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 80, 166],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 6, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 1587601, 8],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 53568, 238],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 12, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 312, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 312, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 80, 331],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gcd(x=Tensor([127008, 2, 4, 5],"int32"), y=Tensor([127008, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 635040],"int32"), y=Tensor([2, 4, 635040],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 508032, 5],"int32"), y=Tensor([2, 508032, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([254016, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([130],"int64"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([182],"int64"), )
paddle.Tensor.index_select(Tensor([2116801, 24],"float32"), axis=0, index=Tensor([91],"int64"), )
paddle.Tensor.index_select(Tensor([4004, 12689],"float32"), axis=0, index=Tensor([182],"int64"), )
paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), )
paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([130],"int64"), )
paddle.Tensor.index_select(Tensor([454, 111902],"float32"), axis=0, index=Tensor([91],"int64"), )
paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([25401601],"int64"), )
paddle.Tensor.inner(x=Tensor([2, 1058401, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 635041, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2116801, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 1058401, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 423361, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([635041, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 8467201],"float64"), y=Tensor([3, 2, 5, 8467201],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 846721],"float64"), y=Tensor([3, 2, 5, 846721],"float64"), )
paddle.Tensor.inner(x=Tensor([423361, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 1270081, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 1693441],"float64"), y=Tensor([2, 5, 1693441],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 2540161],"float64"), y=Tensor([2, 5, 2540161],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([1270081, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 3175201, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([6350401, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inverse(Tensor([4, 39690, 4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([70560, 6, 6],"float64"), )
paddle.Tensor.inverse(Tensor([79380, 2, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 100, 42337],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 105841, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 40, 105841],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 42337, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3176, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3176, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([2117, 3, 100, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([2117, 3, 40, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 84673],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 211681, 40],"float64"), )
paddle.Tensor.is_complex(Tensor([6351, 100, 40],"float64"), )
paddle.Tensor.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), )
paddle.Tensor.isclose(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), )
paddle.Tensor.isnan(Tensor([25401601],"float64"), )
paddle.Tensor.isnan(Tensor([50803201],"float32"), )
paddle.Tensor.item(Tensor([16934401, 3],"float32"), 0, )
paddle.Tensor.item(Tensor([2, 1, 12700801],"int64"), 0, )
paddle.Tensor.item(Tensor([2, 1, 25401601],"int32"), 0, )
paddle.Tensor.item(Tensor([2, 12700801, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([2, 25401601, 1],"int32"), 0, )
paddle.Tensor.item(Tensor([25401601, 1, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([3, 16934401],"float32"), 0, )
paddle.Tensor.item(Tensor([50803201, 1, 1],"int32"), 0, )
paddle.Tensor.kthvalue(Tensor([2, 200, 127009],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 2540161, 10],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 317521],"float64"), y=Tensor([4, 5, 4, 317521],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 423361, 3],"float64"), y=Tensor([4, 5, 423361, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 529201, 4, 3],"float64"), y=Tensor([4, 529201, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([423361, 5, 4, 3],"float64"), y=Tensor([423361, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.Tensor.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), )
paddle.Tensor.lgamma(Tensor([100, 100, 2541],"float64"), )
paddle.Tensor.lgamma(Tensor([100, 2541, 100],"float64"), )
paddle.Tensor.lgamma(Tensor([2541, 100, 100],"float64"), )
paddle.Tensor.lgamma(Tensor([453601, 7, 8],"float64"), )
paddle.Tensor.lgamma(Tensor([45361, 7, 8, 10],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 635041, 8],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 63505, 8, 10],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 725761],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 72577, 10],"float64"), )
paddle.Tensor.lgamma(Tensor([5, 7, 8, 90721],"float64"), )
paddle.Tensor.log(Tensor([100, 200, 1271],"float64"), )
paddle.Tensor.log(Tensor([100, 2541, 100],"float64"), )
paddle.Tensor.log(Tensor([10000, 5, 509],"float64"), )
paddle.Tensor.log(Tensor([10000, 847, 3],"float64"), )
paddle.Tensor.log(Tensor([1271, 200, 100],"float64"), )
paddle.Tensor.log(Tensor([1693441, 5, 3],"float64"), )
paddle.Tensor.log(Tensor([4800, 10585],"float32"), )
paddle.Tensor.log(Tensor([503002, 101],"float32"), )
paddle.Tensor.log10(Tensor([101811, 499],"float32"), )
paddle.Tensor.log10(Tensor([80, 635041],"float32"), )
paddle.Tensor.log1p(Tensor([16934401, 3],"float32"), )
paddle.Tensor.log1p(Tensor([2, 25401601],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3, 4233601],"float64"), )
paddle.Tensor.log1p(Tensor([2, 6350401, 2],"float64"), )
paddle.Tensor.log1p(Tensor([25401601],"float64"), )
paddle.Tensor.log1p(Tensor([4233601, 3, 2],"float64"), )
paddle.Tensor.logical_and(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
paddle.Tensor.logical_not(Tensor([50803201],"bool"), )
paddle.Tensor.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
paddle.Tensor.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.lu(Tensor([1693, 3],"float32"), )
paddle.Tensor.lu(Tensor([216, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([522, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 1193],"float32"), )
paddle.Tensor.lu(Tensor([3, 422, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 422],"float64"), )
paddle.Tensor.lu(Tensor([4, 187, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 158, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 158],"float64"), )
paddle.Tensor.masked_fill(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1380],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 1380],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1325],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 1325],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 8550, 5942],"float32"), Tensor([1, 8550, 5942],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([1, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([24, 8550, 256],"float32"), Tensor([24, 8550, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([6, 36828, 256],"float32"), Tensor([6, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([6, 38367, 256],"float32"), Tensor([6, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_select(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 3387],"float32"), Tensor([15000, 3387],"bool"), )
paddle.Tensor.masked_select(Tensor([50803201],"float32"), Tensor([50803201],"bool"), )
paddle.Tensor.masked_select(Tensor([60000, 847],"float32"), Tensor([60000, 847],"bool"), )
paddle.Tensor.matmul(Tensor([110, 12, 197, 197],"float32"), Tensor([110, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 100, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 100],"float32"), )
paddle.Tensor.matmul(Tensor([124, 25, 257, 257],"float32"), Tensor([124, 25, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 7, 257, 257],"float32"), Tensor([124, 7, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 11, 197, 197],"float32"), Tensor([128, 11, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 168, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 168],"float32"), )
paddle.Tensor.matmul(Tensor([128, 16, 257, 257],"float32"), Tensor([128, 16, 257, 97],"float32"), )
paddle.Tensor.matmul(Tensor([128, 16, 97, 257],"float32"), Tensor([128, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 25, 257, 257],"float32"), Tensor([128, 25, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 32, 197, 197],"float32"), Tensor([128, 32, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 7, 257, 257],"float32"), Tensor([128, 7, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([194, 16, 257, 257],"float32"), Tensor([194, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([336, 12, 197, 197],"float32"), Tensor([336, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([49, 16, 257, 257],"float32"), Tensor([49, 16, 257, 64],"float32"), )
paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 400, 127009],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([1, 772, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), -2, )
paddle.Tensor.max(Tensor([2, 400, 65856],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([324000, 157],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([635041, 80],"float32"), axis=1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 34, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 96, 34],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 45, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 128, 33, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 128, 96, 33],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 192, 22, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 192, 96, 22],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 44, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([29, 192, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([44, 128, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.min(Tensor([1, 193, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 400, 31753, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 400, 65856, 2],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 400, 65856, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([15661, 4, 811],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 3, 811],"float32"), axis=1, )
paddle.Tensor.min(Tensor([24565, 4, 518],"float32"), axis=1, )
paddle.Tensor.min(Tensor([3, 525, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 263, 12096, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 525, 12096, 3],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([4, 525, 6049, 4],"float32"), axis=-1, )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 5080321],"float32"), )
paddle.Tensor.mm(Tensor([5080321, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 4233601],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 2822401, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 1058401],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 635041, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 423361, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([846721, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.multiply(Tensor([132301, 768],"float16"), Tensor([132301, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([160, 317521],"float32"), Tensor([160, 317521],"float32"), )
paddle.Tensor.multiply(Tensor([160, 635041],"float16"), Tensor([160, 1],"float32"), )
paddle.Tensor.multiply(Tensor([16538, 3072],"float32"), Tensor([16538, 1],"float32"), )
paddle.Tensor.multiply(Tensor([33076, 3072],"float16"), Tensor([33076, 1],"float32"), )
paddle.Tensor.multiply(Tensor([512, 198451],"float16"), Tensor([512, 1],"float32"), )
paddle.Tensor.nansum(Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([2822401, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2822401, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 2822401],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 5644801],"float32"), )
paddle.Tensor.nansum(Tensor([3, 5644801, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([5644801, 3, 3],"float32"), )
paddle.Tensor.neg(Tensor([50803201],"float32"), )
paddle.Tensor.nonzero(Tensor([3628801, 14],"bool"), )
paddle.Tensor.nonzero(Tensor([3907939, 13],"bool"), )
paddle.Tensor.nonzero(Tensor([4233601, 12],"bool"), )
paddle.Tensor.nonzero(Tensor([52640, 966],"bool"), )
paddle.Tensor.norm(Tensor([100352, 507],"float32"), )
paddle.Tensor.norm(Tensor([507, 100352],"float32"), )
paddle.Tensor.norm(Tensor([6202, 8192],"float32"), )
paddle.Tensor.norm(Tensor([8192, 6202],"float32"), )
paddle.Tensor.norm(Tensor([886, 57344],"float32"), )
paddle.Tensor.not_equal(Tensor([128, 198451],"int64"), Tensor([128, 198451],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 1953970],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 3907939],"bool"), Tensor([1],"bool"), )
paddle.Tensor.not_equal(Tensor([1814401, 14],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([198451, 128],"int64"), Tensor([198451, 128],"int64"), )
paddle.Tensor.not_equal(Tensor([3628801, 14],"bool"), Tensor([1],"bool"), )
paddle.Tensor.outer(x=Tensor([12700801, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3175201],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3175201],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2116801, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4233601, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2116801, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4233601],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3175201, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2116801, 3, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 6350401],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4233601, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.pow(Tensor([124, 128, 34, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([124, 128, 96, 34],"float32"), 2, )
paddle.Tensor.pow(Tensor([124, 45, 96, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 128, 33, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 128, 96, 33],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 192, 22, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 192, 96, 22],"float32"), 2, )
paddle.Tensor.pow(Tensor([128, 44, 96, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([29, 192, 96, 96],"float32"), 2, )
paddle.Tensor.pow(Tensor([44, 128, 96, 96],"float32"), 2, )
paddle.Tensor.prod(Tensor([1, 386, 65856, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 400, 63505, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 400, 65856, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([2100, 12096, 3],"float32"), -1, )
paddle.Tensor.prod(Tensor([2100, 12097, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([2101, 12096, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([4, 525, 12096, 3],"float32"), -1, )
paddle.Tensor.prod(Tensor([4, 525, 12097, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([4, 526, 12096, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([5, 525, 12096, 2],"float32"), -1, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 288],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 235, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 470, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 352, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 405, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([352, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.rad2deg(x=Tensor([1587601, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 1587601, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 1587601],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 6350401],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([6350401, 4],"float64"), )
paddle.Tensor.rank(Tensor([256, 1536, 3, 44],"float32"), )
paddle.Tensor.rank(Tensor([256, 1536, 44, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 2048, 3, 33],"float32"), )
paddle.Tensor.rank(Tensor([256, 2048, 33, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 22051, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 3, 87],"float32"), )
paddle.Tensor.rank(Tensor([256, 768, 87, 3],"float32"), )
paddle.Tensor.rank(Tensor([2757, 2048, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([3676, 1536, 3, 3],"float32"), )
paddle.Tensor.rank(Tensor([7351, 768, 3, 3],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 20, 254017],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 5080321, 1],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 5080321],"float32"), )
paddle.Tensor.reciprocal(Tensor([2540161, 20, 1],"float32"), )
paddle.Tensor.reciprocal(Tensor([2540161, 20],"float32"), )
paddle.Tensor.reciprocal(Tensor([4233601, 12],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 8467201],"float32"), Tensor([2, 3, 8467201],"float32"), )
paddle.Tensor.remainder(Tensor([2, 6350401, 4],"float32"), Tensor([2, 6350401, 4],"float32"), )
paddle.Tensor.remainder(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 3, 4],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 198451, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 1, 64, 396901],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([1, 3101, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([3101, 1, 64, 128],"float64"), 3, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([158761, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 158761, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 158761, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 198451],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 79381, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.reshape(Tensor([12404, 8192],"bfloat16"), list[-1,8192,], )
paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.round(Tensor([10, 20, 254017],"float32"), )
paddle.Tensor.round(Tensor([10, 5080321, 1],"float32"), )
paddle.Tensor.round(Tensor([10, 5080321],"float32"), )
paddle.Tensor.round(Tensor([2540161, 20, 1],"float32"), )
paddle.Tensor.round(Tensor([2540161, 20],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 20, 254017],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 5080321, 1],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 5080321],"float32"), )
paddle.Tensor.rsqrt(Tensor([2540161, 20, 1],"float32"), )
paddle.Tensor.rsqrt(Tensor([2540161, 20],"float32"), )
paddle.Tensor.scale(Tensor([100352, 1013],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([1013, 100352],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([12404, 8192],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([1772, 57344],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.scale(Tensor([8192, 12404],"bfloat16"), 0.006378560586546936, )
paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3386881],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"bool"), Tensor([16934401, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([50803201],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.sigmoid(Tensor([1, 1100, 46185],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 12700801, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 6380, 7963],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 8550, 5942],"float32"), )
paddle.Tensor.sigmoid(Tensor([11547, 1100, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1486, 8550, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1991, 6380, 4],"float32"), )
paddle.Tensor.sign(Tensor([1016065, 5, 5],"float64"), )
paddle.Tensor.sign(Tensor([1124, 45199],"float32"), )
paddle.Tensor.sign(Tensor([12700801, 2],"float64"), )
paddle.Tensor.sign(Tensor([1587601, 32],"float32"), )
paddle.Tensor.sign(Tensor([50000, 102, 5],"float64"), )
paddle.Tensor.sign(Tensor([50000, 5, 102],"float64"), )
paddle.Tensor.sign(Tensor([50000, 509],"float64"), )
paddle.Tensor.signbit(Tensor([12, 10584, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 1058],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 2116],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 4233],"int16"), )
paddle.Tensor.signbit(Tensor([12, 21168, 2],"float32"), )
paddle.Tensor.signbit(Tensor([12, 42336, 2],"int16"), )
paddle.Tensor.signbit(Tensor([12700, 20, 2],"float32"), )
paddle.Tensor.signbit(Tensor([25401, 20, 2],"int16"), )
paddle.Tensor.signbit(Tensor([6350, 20, 2],"float64"), )
paddle.Tensor.sin(Tensor([131072, 388],"float32"), )
paddle.Tensor.sin(Tensor([3175201, 16],"float32"), )
paddle.Tensor.sin(Tensor([32768, 1551],"float32"), )
paddle.Tensor.sin(Tensor([396901, 128],"float32"), )
paddle.Tensor.slice(Tensor([12700801, 4],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.slice(Tensor([4, 12700801],"float32"), list[1,], list[0,], list[1,], )
paddle.Tensor.slice_scatter(Tensor([4233601, 6],"float64"), Tensor([4233601, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.slice_scatter(Tensor([8, 3175201],"float64"), Tensor([8, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.slice_scatter(Tensor([8467201, 6],"float64"), Tensor([8467201, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.sqrt(Tensor([276, 80, 48, 48],"float32"), )
paddle.Tensor.sqrt(Tensor([329, 80, 44, 44],"float32"), )
paddle.Tensor.sqrt(Tensor([397, 80, 40, 40],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 345, 48, 48],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 411, 44, 44],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 497, 40, 40],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 207, 48],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 226, 44],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 249, 40],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 40, 249],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 44, 226],"float32"), )
paddle.Tensor.sqrt(Tensor([64, 80, 48, 207],"float32"), )
paddle.Tensor.square(Tensor([2, 25401601],"float32"), )
paddle.Tensor.square(Tensor([396901, 128],"float32"), )
paddle.Tensor.square(Tensor([50803201],"float32"), )
paddle.Tensor.square(Tensor([8, 6350401],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 2, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 3, 1654, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 3, 3840, 10240],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 3, 3840, 4411],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([16, 1, 125, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([16, 1, 80, 39691],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([16, 2, 80, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([200, 1, 127009, 2],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([200, 1, 37632, 7],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([200, 4, 37632, 2],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([25, 1, 80, 25500],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([676, 1, 37632, 2],"float32"), 1, )
paddle.Tensor.std(Tensor([1024, 1024, 25],"float64"), )
paddle.Tensor.std(Tensor([1024, 1024, 49],"float32"), )
paddle.Tensor.std(Tensor([1024, 3101, 8],"float64"), )
paddle.Tensor.std(Tensor([1024, 6202, 8],"float32"), )
paddle.Tensor.std(Tensor([1444, 35183],"float32"), axis=1, )
paddle.Tensor.std(Tensor([3101, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([49613, 1024],"float32"), axis=1, )
paddle.Tensor.std(Tensor([6202, 1024, 8],"float32"), )
paddle.Tensor.subtract(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.Tensor.sum(Tensor([106496, 478],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([108544, 469],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([111616, 456],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([14176, 3584],"float32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 396901],"float32"), indices=Tensor([128, 396901],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([50804, 1000],"float32"), indices=Tensor([50804, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 635041],"float32"), indices=Tensor([80, 635041],"int32"), axis=-1, )
paddle.Tensor.tanh(Tensor([1, 16934401, 3],"float32"), )
paddle.Tensor.tanh(Tensor([1, 2, 12700801],"float64"), )
paddle.Tensor.tanh(Tensor([1, 2, 25401601],"float32"), )
paddle.Tensor.tanh(Tensor([1, 8467201, 3],"float64"), )
paddle.Tensor.tanh(Tensor([2, 12700801],"float64"), )
paddle.Tensor.tanh(Tensor([4233601, 2, 3],"float64"), )
paddle.Tensor.tanh(Tensor([6350401, 4],"float64"), )
paddle.Tensor.tanh(Tensor([8467201, 2, 3],"float32"), )
paddle.Tensor.tile(Tensor([198451, 1, 256],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([36858, 1, 1379],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([36858, 6, 256],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([38402, 1, 1323],"float32"), tuple(1,1,1,), )
paddle.Tensor.tile(Tensor([38402, 6, 256],"float32"), tuple(1,1,1,), )
paddle.Tensor.tolist(Tensor([11, 16, 32, 43],"int64"), )
paddle.Tensor.tolist(Tensor([11, 25, 21, 43],"int64"), )
paddle.Tensor.tolist(Tensor([11, 25, 32, 28],"int64"), )
paddle.Tensor.tolist(Tensor([7, 25, 32, 43],"int64"), )
paddle.Tensor.topk(Tensor([1, 50803201],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([1024, 1034, 48],"float32"), 2, axis=-1, )
paddle.Tensor.topk(Tensor([1024, 8, 6202],"float32"), 2, axis=-1, )
paddle.Tensor.topk(Tensor([128, 396901],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([132301, 8, 48],"float32"), 2, axis=-1, )
paddle.Tensor.topk(Tensor([50804, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.transpose(Tensor([106496, 955],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([108544, 937],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([111616, 911],"bfloat16"), list[1,0,], )
paddle.Tensor.transpose(Tensor([14176, 7168],"bfloat16"), list[1,0,], )
paddle.Tensor.tril(Tensor([1, 2, 25401601],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 25401601, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([12700801, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 12700801, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 2, 12700801],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 25401601],"float32"), -1, )
paddle.Tensor.tril(Tensor([25401601, 2],"float32"), -1, )
paddle.Tensor.trunc(Tensor([1814401, 28],"float32"), )
paddle.Tensor.trunc(Tensor([2, 3175201, 8],"float32"), )
paddle.Tensor.trunc(Tensor([2, 8, 3175201],"float32"), )
paddle.Tensor.trunc(Tensor([28, 1814401],"float32"), )
paddle.Tensor.trunc(Tensor([6350401, 8],"float32"), )
paddle.Tensor.trunc(Tensor([793801, 8, 8],"float32"), )
paddle.Tensor.trunc(Tensor([8, 6350401],"float32"), )
paddle.Tensor.unbind(Tensor([3, 115, 2304, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 1351, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 60, 2304, 123],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 60, 4411, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 864, 196, 101],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 864, 307, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 960, 196, 91],"float32"), 0, )
paddle.Tensor.unbind(Tensor([3, 960, 276, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([5, 864, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([5, 960, 196, 64],"float32"), 0, )
paddle.Tensor.unbind(Tensor([6, 60, 2304, 64],"float32"), 0, )
paddle.Tensor.unique(Tensor([25401601],"int64"), )
paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([172, 544, 544],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([2, 3840, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200, 467, 544],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([200, 544, 467],"float32"), 1, )
paddle.Tensor.unsqueeze(Tensor([3, 1654, 10240],"float32"), 0, )
paddle.Tensor.unsqueeze(Tensor([3, 3840, 4411],"float32"), 0, )
paddle.Tensor.var(Tensor([1000, 50804],"float32"), axis=0, )
paddle.Tensor.var(Tensor([100000, 255],"float64"), axis=0, )
paddle.Tensor.var(Tensor([1000000, 26],"float64"), axis=0, )
paddle.Tensor.var(Tensor([6350401, 4],"float64"), axis=0, )
paddle.Tensor.var(Tensor([64801, 784],"float32"), axis=0, )
paddle.Tensor.zero_(Tensor([100352, 507],"float32"), )
paddle.Tensor.zero_(Tensor([507, 100352],"float32"), )
paddle.Tensor.zero_(Tensor([6202, 8192],"float32"), )
paddle.Tensor.zero_(Tensor([8192, 6202],"float32"), )
paddle.Tensor.zero_(Tensor([886, 57344],"float32"), )
paddle.abs(Tensor([13, 64, 256, 256],"float32"), )
paddle.abs(Tensor([16, 128, 128, 194],"float32"), )
paddle.abs(Tensor([16, 128, 194, 128],"float32"), )
paddle.abs(Tensor([16, 194, 128, 128],"float32"), )
paddle.abs(Tensor([16, 256, 194, 64],"float32"), )
paddle.abs(Tensor([16, 256, 64, 194],"float32"), )
paddle.abs(Tensor([16, 49, 256, 256],"float32"), )
paddle.abs(Tensor([16, 64, 194, 256],"float32"), )
paddle.abs(Tensor([16, 64, 256, 194],"float32"), )
paddle.abs(Tensor([16, 776, 64, 64],"float32"), )
paddle.abs(Tensor([25, 128, 128, 128],"float32"), )
paddle.abs(Tensor([49, 256, 64, 64],"float32"), )
paddle.acos(Tensor([10, 20, 254017],"float32"), )
paddle.acos(Tensor([10, 5080321, 1],"float32"), )
paddle.acos(Tensor([10, 5080321],"float32"), )
paddle.acos(Tensor([2540161, 20, 1],"float32"), )
paddle.acos(Tensor([5080321, 10],"float32"), )
paddle.acos(x=Tensor([3, 3, 5644801],"float32"), )
paddle.acos(x=Tensor([3, 5644801, 3],"float32"), )
paddle.acos(x=Tensor([5644801, 3, 3],"float32"), )
paddle.acosh(Tensor([10, 20, 254017],"float32"), )
paddle.acosh(Tensor([10, 5080321, 1],"float32"), )
paddle.acosh(Tensor([2540161, 20, 1],"float32"), )
paddle.add(x=Tensor([2, 256, 320, 352],"float32"), y=Tensor([2, 256, 320, 352],"float32"), )
paddle.add(x=Tensor([2, 256, 336, 336],"float32"), y=Tensor([2, 256, 336, 336],"float32"), )
paddle.add(x=Tensor([2, 256, 352, 352],"float32"), y=Tensor([2, 256, 352, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 320, 78],"float32"), y=Tensor([8, 256, 320, 78],"float32"), )
paddle.add(x=Tensor([8, 256, 336, 74],"float32"), y=Tensor([8, 256, 336, 74],"float32"), )
paddle.add(x=Tensor([8, 256, 352, 71],"float32"), y=Tensor([8, 256, 352, 71],"float32"), )
paddle.add(x=Tensor([8, 256, 71, 352],"float32"), y=Tensor([8, 256, 71, 352],"float32"), )
paddle.add(x=Tensor([8, 256, 74, 336],"float32"), y=Tensor([8, 256, 74, 336],"float32"), )
paddle.add(x=Tensor([8, 52, 352, 352],"float32"), y=Tensor([8, 52, 352, 352],"float32"), )
paddle.add(x=Tensor([8, 57, 320, 352],"float32"), y=Tensor([8, 57, 320, 352],"float32"), )
paddle.add(x=Tensor([8, 57, 336, 336],"float32"), y=Tensor([8, 57, 336, 336],"float32"), )
paddle.add_n(list[Tensor([194, 128, 64, 64],"float16"),Tensor([194, 128, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([388, 256, 32, 32],"float16"),Tensor([388, 256, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 194, 64],"float16"),Tensor([64, 128, 194, 64],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 64, 194],"float16"),Tensor([64, 128, 64, 194],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 64, 97],"float32"),Tensor([64, 128, 64, 97],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 97, 64],"float32"),Tensor([64, 128, 97, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 1551, 32, 32],"float16"),Tensor([64, 1551, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 194, 64, 64],"float32"),Tensor([64, 194, 64, 64],"float32"),], )
paddle.add_n(list[Tensor([64, 256, 194, 32],"float16"),Tensor([64, 256, 194, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 256, 32, 194],"float16"),Tensor([64, 256, 32, 194],"float16"),], )
paddle.add_n(list[Tensor([64, 388, 64, 64],"float16"),Tensor([64, 388, 64, 64],"float16"),], )
paddle.add_n(list[Tensor([97, 128, 64, 64],"float32"),Tensor([97, 128, 64, 64],"float32"),], )
paddle.addmm(Tensor([1016065, 50],"float32"), Tensor([1016065, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 1693441],"float32"), Tensor([30, 80],"float32"), Tensor([80, 1693441],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1016065],"float32"), Tensor([1016065, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 1693441],"float32"), Tensor([1693441, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 635041],"float32"), Tensor([30, 80],"float32"), Tensor([80, 635041],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([635041, 50],"float32"), Tensor([635041, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 5080321],"float64"), y=Tensor([5080321, 5],"float64"), )
paddle.all(Tensor([423361, 6, 10],"float64"), None, False, None, )
paddle.all(Tensor([5, 1016065, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 508033, 10],"float64"), None, False, None, )
paddle.all(Tensor([5, 6, 1693441],"bool"), None, False, None, )
paddle.all(Tensor([5, 6, 846721],"float64"), None, False, None, )
paddle.all(Tensor([50803201],"bool"), )
paddle.all(Tensor([846721, 6, 10],"bool"), None, False, None, )
paddle.allclose(Tensor([1124, 45199],"float32"), Tensor([1124, 45199],"float32"), )
paddle.allclose(Tensor([13, 32, 122124],"float32"), Tensor([13, 32, 122124],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 61062, 64],"float32"), Tensor([13, 61062, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([1587601, 32],"float32"), Tensor([1587601, 32],"float32"), )
paddle.allclose(Tensor([24807, 32, 64],"float32"), Tensor([24807, 32, 64],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([30522, 1665],"float32"), Tensor([30522, 1665],"float32"), )
paddle.allclose(Tensor([6350401, 8],"float32"), Tensor([6350401, 8],"float32"), )
paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 508033],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 508033, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([508033, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.any(Tensor([1, 12404, 4096],"bool"), )
paddle.any(Tensor([1, 300, 169345],"bool"), )
paddle.any(Tensor([1124, 45199],"bool"), )
paddle.any(Tensor([1587601, 32],"bool"), )
paddle.any(Tensor([42, 300, 4096],"bool"), )
paddle.any(Tensor([512, 99226],"bool"), )
paddle.argmax(Tensor([15877, 100, 32],"float32"), axis=1, )
paddle.argmax(Tensor([29151, 100, 18],"float32"), axis=1, )
paddle.argmax(Tensor([29151, 28, 64],"float32"), axis=1, )
paddle.argmax(Tensor([29151, 55, 32],"float32"), axis=1, )
paddle.argmax(Tensor([39691, 20, 64],"float32"), axis=1, )
paddle.argmax(Tensor([7939, 100, 64],"float32"), axis=1, )
paddle.argmax(Tensor([80239, 10, 64],"float32"), axis=1, )
paddle.argmax(Tensor([80239, 20, 32],"float32"), axis=1, )
paddle.argmin(Tensor([104534, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([203213, 5, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([3, 104534, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 104534, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 104534, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 104534, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 104534],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 99226],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 99226, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 99226, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 99226, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([5, 203213, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 203213, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 203213],"float64"), axis=0, )
paddle.argmin(Tensor([99226, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argsort(Tensor([25401601],"float64"), stable=True, )
paddle.argsort(Tensor([50803201],"float32"), stable=True, )
paddle.argsort(Tensor([50803201],"int32"), stable=True, )
paddle.as_complex(Tensor([32, 15, 207, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([32, 15, 8, 207, 32, 2],"float32"), )
paddle.as_complex(Tensor([32, 15, 8, 8, 827, 2],"float32"), )
paddle.as_complex(Tensor([32, 388, 8, 8, 32, 2],"float32"), )
paddle.as_complex(Tensor([827, 15, 8, 8, 32, 2],"float32"), )
paddle.as_strided(Tensor([1587601, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([3175201, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 1587601],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 3175201],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.asin(Tensor([8, 16, 396901],"float32"), )
paddle.asin(Tensor([8, 198451, 32],"float32"), )
paddle.asin(Tensor([99226, 16, 32],"float32"), )
paddle.asinh(Tensor([8, 16, 396901],"float32"), )
paddle.asinh(Tensor([8, 198451, 32],"float32"), )
paddle.asinh(Tensor([99226, 16, 32],"float32"), )
paddle.atan(Tensor([8, 16, 396901],"float32"), )
paddle.atan(Tensor([8, 198451, 32],"float32"), )
paddle.atan(Tensor([99226, 16, 32],"float32"), )
paddle.atan2(Tensor([100],"float64"), Tensor([254017, 100],"float64"), )
paddle.atan2(Tensor([111, 222, 1031],"float64"), Tensor([222, 1031],"float64"), )
paddle.atan2(Tensor([111, 688, 333],"float64"), Tensor([688, 333],"float64"), )
paddle.atan2(Tensor([344, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(x=Tensor([19601, 6, 6, 6, 6],"float64"), y=Tensor([19601, 6, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 39201, 6, 6, 6],"float64"), y=Tensor([3, 39201, 6, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 39201, 6, 6],"float64"), y=Tensor([3, 6, 39201, 6, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 39201, 6],"float64"), y=Tensor([3, 6, 6, 39201, 6],"float64"), )
paddle.atan2(x=Tensor([3, 6, 6, 6, 39201],"float64"), y=Tensor([3, 6, 6, 6, 39201],"float64"), )
paddle.atanh(Tensor([8, 16, 396901],"float32"), )
paddle.atanh(Tensor([8, 198451, 32],"float32"), )
paddle.atanh(Tensor([99226, 16, 32],"float32"), )
paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 1058401],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2116801],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), Tensor([3, 4, 423361, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), Tensor([3, 4233601, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), Tensor([3, 846721, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), Tensor([3175201, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), Tensor([635041, 4, 2, 5],"float64"), )
paddle.bincount(Tensor([25401601],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([50803201],"int32"), weights=Tensor([50803201],"float32"), )
paddle.bincount(x=Tensor([50803201],"int32"), weights=Tensor([50803201],"int32"), )
paddle.bitwise_and(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_and(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_and(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_invert(Tensor([12700801, 4, 1],"int32"), )
paddle.bitwise_invert(Tensor([2, 1270081, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 1693441, 5],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 4, 2116801],"int32"), )
paddle.bitwise_invert(Tensor([3, 16934401, 1],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 4233601],"int32"), )
paddle.bitwise_invert(Tensor([846721, 3, 4, 5],"int32"), )
paddle.bitwise_left_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), False, )
paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), False, )
paddle.bitwise_not(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_not(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_not(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_or(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_or(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_right_shift(Tensor([169345, 300],"int32"), Tensor([169345, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 127009],"int64"), Tensor([200, 127009],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 254017],"int32"), Tensor([200, 254017],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 508033],"int16"), Tensor([200, 508033],"int16"), )
paddle.bitwise_right_shift(Tensor([338689, 300],"int16"), Tensor([338689, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([84673, 300],"int64"), Tensor([84673, 300],"int64"), )
paddle.bitwise_xor(Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 141121, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 141121, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 141121, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 188161, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 117601, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 235201, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 47041],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 94081],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), Tensor([2, 3, 3, 3, 4, 23521, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 47041, 5, 2],"int16"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), Tensor([2, 3, 3, 3, 94081, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), Tensor([2, 3, 3, 70561, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), Tensor([2, 3, 70561, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), Tensor([2, 70561, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.bitwise_xor(Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), Tensor([47041, 3, 3, 3, 4, 1, 5, 2],"int32"), )
paddle.bitwise_xor(Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([94081, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.bmm(Tensor([112, 1043, 435],"float32"), Tensor([112, 435, 64],"float32"), )
paddle.bmm(Tensor([112, 435, 435],"float32"), Tensor([112, 435, 1043],"float32"), )
paddle.bmm(Tensor([14, 81, 7332],"float32"), Tensor([14, 7332, 512],"float32"), )
paddle.bmm(Tensor([1825, 435, 435],"float32"), Tensor([1825, 435, 64],"float32"), )
paddle.bmm(Tensor([26, 1024, 1024],"float32"), Tensor([26, 1024, 1909],"float32"), )
paddle.bmm(Tensor([26, 1909, 1024],"float32"), Tensor([26, 1024, 12],"float32"), )
paddle.bmm(Tensor([269, 435, 435],"float32"), Tensor([269, 435, 64],"float32"), )
paddle.bmm(Tensor([4, 1733, 7332],"float32"), Tensor([4, 7332, 512],"float32"), )
paddle.bmm(Tensor([4, 81, 156801],"float32"), Tensor([4, 156801, 512],"float32"), )
paddle.bmm(Tensor([4, 81, 24807],"float32"), Tensor([4, 24807, 512],"float32"), )
paddle.bmm(Tensor([4, 81, 7332],"float32"), Tensor([4, 7332, 1733],"float32"), )
paddle.bmm(Tensor([49, 1024, 1024],"float32"), Tensor([49, 1024, 12],"float32"), )
paddle.bmm(Tensor([86, 81, 7332],"float32"), Tensor([86, 7332, 512],"float32"), )
paddle.broadcast_tensors(list[Tensor([127009, 200],"float64"),Tensor([127009, 200],"float64"),], )
paddle.broadcast_tensors(list[Tensor([200, 127009],"float64"),Tensor([200, 127009],"float64"),], )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([12700801],"float64"), right=True, )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 12700801],"float64"), Tensor([4],"float64"), right=True, )
paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), )
paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 25401601],"float64"), Tensor([25401601],"float64"), right=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([25401601],"float64"), right=True, )
paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([6350401, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.cartesian_prod(list[Tensor([40],"int32"),Tensor([40],"int32"),Tensor([508],"int32"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([50803],"int32"),], )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5080],"complex128"),], ) 
paddle.cast(Tensor([1, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([128256, 793],"bfloat16"), Dtype(float16), )
paddle.cast(Tensor([2, 1, 1551, 32768],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 1, 32768, 1551],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 1, 32768, 32768],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 1024, 50304],"float16"), dtype="float32", )
paddle.cast(Tensor([33076, 3072],"bfloat16"), Dtype(float16), )
paddle.cast(Tensor([8, 1024, 12404],"float16"), dtype="float32", )
paddle.cast(Tensor([8, 253, 50304],"float16"), dtype="float32", )
paddle.cdist(Tensor([12700801, 4],"float32"), Tensor([1, 4],"float32"), p=1, )
paddle.cdist(Tensor([6380, 7963],"float32"), Tensor([1, 7963],"float32"), p=1, )
paddle.cdist(Tensor([8550, 5942],"float32"), Tensor([1, 5942],"float32"), p=1, )
paddle.cdist(Tensor([900, 56449],"float32"), Tensor([1, 56449],"float32"), p=1, )
paddle.ceil(Tensor([12404, 32, 128],"float32"), )
paddle.ceil(Tensor([141121, 6, 3, 1, 2, 5],"float64"), )
paddle.ceil(Tensor([3, 141121, 3, 4, 1, 5],"float64"), )
paddle.ceil(Tensor([3, 282241, 3, 1, 2, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 141121, 1, 2, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 1, 2, 235201],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 1, 94081, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 4, 1, 117601],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 4, 23521, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 47041, 2, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 3, 94081, 1, 5],"float64"), )
paddle.ceil(Tensor([3, 6, 70561, 4, 1, 5],"float64"), )
paddle.ceil(Tensor([32, 12404, 128],"float32"), )
paddle.ceil(Tensor([32, 32, 49613],"float32"), )
paddle.ceil(Tensor([70561, 6, 3, 4, 1, 5],"float64"), )
paddle.chunk(Tensor([115, 216, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([16, 128, 24807],"float32"), 2, axis=1, )
paddle.chunk(Tensor([16, 128, 25500],"float32"), 2, axis=1, )
paddle.chunk(Tensor([4, 216, 1838, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 1838],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 919],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 919, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([58, 216, 64, 64],"float32"), 3, axis=1, )
paddle.clip(Tensor([1408, 36082],"float32"), min=-2, max=2, )
paddle.clip(Tensor([2, 3840, 10240],"float32"), 0, 255, )
paddle.clip(Tensor([23, 17, 256, 256],"float64"), min=0, max=2, )
paddle.clip(Tensor([24, 17, 244, 256],"float64"), min=0, max=2, )
paddle.clip(Tensor([24, 17, 256, 244],"float64"), min=0, max=2, )
paddle.clip(Tensor([24, 17, 256, 256],"float64"), min=0, max=2, )
paddle.clip(Tensor([3, 1654, 10240],"float32"), 0, 255, )
paddle.clip(Tensor([3, 3840, 4411],"float32"), 0, 255, )
paddle.clip(Tensor([8269, 6144],"float32"), min=-2, max=2, )
paddle.clone(Tensor([145, 12, 112, 261],"float32"), )
paddle.clone(Tensor([145, 12, 261, 112],"float32"), )
paddle.clone(Tensor([145, 28, 112, 112],"float32"), )
paddle.clone(Tensor([22, 185, 112, 112],"float32"), )
paddle.clone(Tensor([22, 64, 112, 323],"float32"), )
paddle.clone(Tensor([22, 64, 323, 112],"float32"), )
paddle.clone(Tensor([338, 12, 112, 112],"float32"), )
paddle.clone(Tensor([43, 256, 56, 83],"float32"), )
paddle.clone(Tensor([43, 256, 83, 56],"float32"), )
paddle.clone(Tensor([43, 377, 56, 56],"float32"), )
paddle.clone(Tensor([64, 256, 56, 56],"float32"), )
paddle.clone(Tensor([64, 64, 112, 112],"float32"), )
paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 423361, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 846721, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([635041, 4, 2, 5],"float64"),], )
paddle.combinations(Tensor([25401601],"int64"), 0, True, )
paddle.combinations(Tensor([50803201],"int32"), 1, True, )
paddle.complex(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), )
paddle.complex(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), )
paddle.complex(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
paddle.complex(Tensor([20, 2417, 1051],"float32"), Tensor([20, 2417, 1051],"float32"), )
paddle.complex(Tensor([20, 2538, 1001],"float32"), Tensor([20, 2538, 1001],"float32"), )
paddle.complex(Tensor([20, 64, 39691],"float32"), Tensor([20, 64, 39691],"float32"), )
paddle.complex(Tensor([756, 64, 1051],"float32"), Tensor([756, 64, 1051],"float32"), )
paddle.complex(Tensor([794, 64, 1001],"float32"), Tensor([794, 64, 1001],"float32"), )
paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.complex(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
paddle.concat(list[Tensor([101606401],"bfloat16"),], )
paddle.concat(list[Tensor([254, 32, 112, 112],"float16"),Tensor([254, 32, 112, 112],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 16, 112, 112],"float16"),Tensor([512, 32, 112, 112],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 32, 112, 112],"float16"),Tensor([512, 16, 112, 112],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 32, 112, 56],"float16"),Tensor([512, 32, 112, 56],"float16"),], axis=1, )
paddle.concat(list[Tensor([512, 32, 56, 112],"float16"),Tensor([512, 32, 56, 112],"float16"),], axis=1, )
paddle.conj(Tensor([2, 20, 2, 635041],"float32"), )
paddle.conj(Tensor([2, 20, 423361, 3],"float32"), )
paddle.conj(Tensor([2, 4233601, 2, 3],"float32"), )
paddle.conj(Tensor([423361, 20, 2, 3],"float32"), )
paddle.copysign(Tensor([12, 1058401, 2],"float64"), Tensor([12, 1058401, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 105841],"float64"), Tensor([12, 20, 105841],"float64"), )
paddle.copysign(Tensor([12, 20, 211681],"float32"), Tensor([12, 20, 211681],"float32"), )
paddle.copysign(Tensor([12, 2116801, 2],"float32"), Tensor([12, 2116801, 2],"float32"), )
paddle.copysign(Tensor([1270081, 20, 2],"float32"), Tensor([1270081, 20, 2],"float32"), )
paddle.copysign(Tensor([635041, 20, 2],"float64"), Tensor([635041, 20, 2],"float64"), )
paddle.cos(Tensor([1587601, 32],"float32"), )
paddle.cos(Tensor([198451, 256],"float32"), )
paddle.cos(Tensor([32768, 1551],"float32"), )
paddle.cos(Tensor([396901, 128],"float32"), )
paddle.cos(Tensor([5000, 10161],"float32"), )
paddle.cos(Tensor([8192, 6202],"float32"), )
paddle.cosh(Tensor([10, 20, 254017],"float32"), )
paddle.cosh(Tensor([10, 5080321, 1],"float32"), )
paddle.cosh(Tensor([2540161, 20, 1],"float32"), )
paddle.cosh(Tensor([28, 32, 241, 241],"float32"), )
paddle.cosh(Tensor([8, 110, 241, 241],"float32"), )
paddle.cosh(Tensor([8, 32, 241, 824],"float32"), )
paddle.cosh(Tensor([8, 32, 824, 241],"float32"), )
paddle.cosh(x=Tensor([3, 3, 5644801],"float32"), )
paddle.cosh(x=Tensor([3, 5644801, 3],"float32"), )
paddle.cosh(x=Tensor([5644801, 3, 3],"float32"), )
paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 129601, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 362881],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 362881, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 1270081, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 1693441, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 2116801],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([25921, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([846721, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.crop(x=Tensor([16934401, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([2, 1411201, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([2, 3, 1411201, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([2, 3, 3, 1411201],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 16934401],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 8467201],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([8467201, 3],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([940801, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([2822401, 3, 3],"float64"), y=Tensor([2822401, 3, 3],"float64"), axis=2, )
paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 2822401, 3],"float64"), y=Tensor([3, 2822401, 3],"float64"), axis=2, )
paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3, 2822401],"float64"), y=Tensor([3, 3, 2822401],"float64"), axis=1, )
paddle.cummax(Tensor([100, 2080],"float32"), )
paddle.cummax(Tensor([100, 2080],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 2080],"float32"), axis=-2, )
paddle.cummax(Tensor([2080, 100],"float32"), )
paddle.cummax(Tensor([2080, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([2080, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 508033],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 508033],"float32"), axis=-2, )
paddle.cummin(Tensor([508033, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([508033, 100],"float32"), axis=-2, )
paddle.cumprod(Tensor([2, 127009, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 10, 423361],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 705601],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 564481, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 423361, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 423361, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 423361, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([282241, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([84673, 3, 10, 10],"float64"), 1, )
paddle.cumsum(Tensor([50803201],"float32"), axis=0, )
paddle.deg2rad(Tensor([25401601],"int64"), )
paddle.deg2rad(Tensor([50803201],"float32"), )
paddle.deg2rad(Tensor([8, 16, 396901],"float32"), )
paddle.deg2rad(Tensor([8, 198451, 32],"float32"), )
paddle.deg2rad(Tensor([99226, 16, 32],"float32"), )
paddle.diag(Tensor([2000, 25402],"float32"), )
paddle.diag(Tensor([2000, 25402],"float32"), offset=-1, )
paddle.diag(Tensor([2000, 25402],"float32"), offset=1, )
paddle.diag(Tensor([25402, 2000],"float32"), )
paddle.diag(Tensor([25402, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([25402, 2000],"float32"), offset=1, )
paddle.diag_embed(Tensor([1058401, 3, 8],"float64"), )
paddle.diag_embed(Tensor([1411201, 3, 6],"float64"), )
paddle.diag_embed(Tensor([2, 1058401, 12],"float64"), )
paddle.diag_embed(Tensor([2, 1587601, 8],"float64"), )
paddle.diag_embed(Tensor([2, 2116801, 6],"float64"), )
paddle.diag_embed(Tensor([705601, 3, 12],"float64"), )
paddle.diagonal(x=Tensor([117601, 6, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([176401, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 117601, 6, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 176401, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 117601, 6],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 176401, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 117601],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 58801],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 58801, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal_scatter(Tensor([10, 10160641],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 5080321],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 5080321],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10160641, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([5080321, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([5080321, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([396901, 4, 4, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 396901, 4, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 396901, 4],"float64"), axis=2, )
paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=-2, )
paddle.diff(x=Tensor([4, 4, 4, 396901],"float64"), axis=2, )
paddle.digamma(Tensor([16538, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 33076],"float64"), )
paddle.digamma(Tensor([8, 3, 32, 66151],"float32"), )
paddle.digamma(Tensor([8, 3, 33076, 32],"float64"), )
paddle.digamma(Tensor([8, 3, 66151, 32],"float32"), )
paddle.digamma(Tensor([8, 3101, 32, 32],"float64"), )
paddle.digamma(Tensor([8, 6202, 32, 32],"float32"), )
paddle.digamma(Tensor([8269, 3, 32, 32],"float64"), )
paddle.digamma(x=Tensor([19601, 6, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 39201, 6, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 39201, 6, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 39201, 6],"float64"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 39201],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([2540161, 10],"float64"), )
paddle.dist(x=Tensor([113401, 1, 1, 4, 4],"float64"), y=Tensor([113401, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([1587601, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 453601, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 396901, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 3175201, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([6350401, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 793801, 4, 4],"float64"), y=Tensor([2, 8, 793801, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 793801, 1, 4, 4],"float64"), y=Tensor([2, 793801, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([25401601],"float64"), y=Tensor([4, 25401601],"float64"), )
paddle.dist(x=Tensor([6350401],"float64"), y=Tensor([4, 6350401],"float64"), )
paddle.divide(Tensor([128, 396901],"float32"), Tensor([1, 396901],"float32"), )
paddle.divide(Tensor([51059, 995],"float32"), Tensor([1, 995],"float32"), )
paddle.divide(Tensor([51059, 995],"float32"), Tensor([51059, 995],"float32"), )
paddle.divide(Tensor([512, 99226],"float32"), Tensor([1, 99226],"float32"), )
paddle.divide(Tensor([544, 93431],"float32"), Tensor([1, 93431],"float32"), )
paddle.divide(Tensor([544, 93431],"float32"), Tensor([544, 93431],"float32"), )
paddle.divide(x=Tensor([16934401, 3],"float32"), y=Tensor([3],"float32"), )
paddle.divide(x=Tensor([187679, 271],"float32"), y=Tensor([271],"float32"), )
paddle.dot(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
paddle.dot(x=Tensor([50803201],"float32"), y=Tensor([50803201],"float32"), )
paddle.dot(x=Tensor([5080320],"int32"), y=Tensor([5080320],"int32"), )
paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([1411201, 3, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 1058401, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 3, 2116801],"int64"), list[2,4,], )
paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2116801],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([200, 8, 498, 498],"float32"), Tensor([200, 8, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([209, 8, 477, 477],"float32"), Tensor([209, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([218, 8, 457, 457],"float32"), Tensor([218, 8, 457, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([26, 8, 498, 498],"float32"), Tensor([26, 8, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([28, 8, 477, 477],"float32"), Tensor([28, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 54, 498, 498],"float32"), Tensor([30, 54, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 56, 477, 477],"float32"), Tensor([30, 56, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 58, 457, 457],"float32"), Tensor([30, 58, 457, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 7, 498, 498],"float32"), Tensor([30, 7, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 426, 498],"float32"), Tensor([30, 8, 498, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 444, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 457, 457],"float32"), Tensor([30, 8, 457, 464],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 464, 457],"float32"), Tensor([30, 8, 457, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 444],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 477, 477],"float32"), Tensor([30, 8, 477, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 8, 498, 498],"float32"), Tensor([30, 8, 498, 426],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([30, 9, 457, 457],"float32"), Tensor([30, 9, 457, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([31, 8, 457, 457],"float32"), Tensor([31, 8, 457, 64],"float32"), )
paddle.empty_like(Tensor([101606401],"uint8"), )
paddle.empty_like(Tensor([4096, 12404],"bool"), )
paddle.empty_like(Tensor([4096, 12404],"float32"), )
paddle.empty_like(Tensor([793801, 64],"bool"), )
paddle.empty_like(Tensor([793801, 64],"float32"), )
paddle.equal(Tensor([4148, 6124],"int64"), Tensor([4148, 6124],"int64"), )
paddle.equal(Tensor([416, 61062],"int64"), 0, )
paddle.equal(Tensor([512, 49613],"int64"), 0, )
paddle.equal(Tensor([846721, 30],"int64"), 0, )
paddle.equal(Tensor([846721, 30],"int64"), Tensor([846721, 30],"int64"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 2540161],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 2540161],"bool"), Tensor([1, 2, 10, 2540161],"bool"), )
paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 1587601, 16],"bool"), Tensor([1, 2, 1587601, 16],"bool"), )
paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 317521, 10, 16],"bool"), Tensor([1, 317521, 10, 16],"bool"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([50803201],"float32"), )
paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([158761, 2, 10, 16],"bool"), Tensor([158761, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 3175201],"float32"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([3175201, 16],"float32"), )
paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([16, 3175201],"float32"), Tensor([16, 3175201],"float32"), )
paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([3175201, 16],"float32"), Tensor([3175201, 16],"float32"), )
paddle.equal_all(Tensor([50803201],"float32"), Tensor([128],"float32"), )
paddle.equal_all(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.erf(Tensor([11, 2309237],"float64"), )
paddle.erf(Tensor([1494212, 17],"float64"), )
paddle.erf(Tensor([211681, 2, 3, 5, 4],"float64"), )
paddle.erf(Tensor([4, 105841, 3, 5, 4],"float64"), )
paddle.erf(Tensor([4, 2, 158761, 5, 4],"float64"), )
paddle.erf(Tensor([4, 2, 3, 1058401],"float64"), )
paddle.erf(Tensor([4, 2, 3, 264601, 4],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5, 211681],"float64"), )
paddle.erf(Tensor([4, 2, 635041, 5],"float64"), )
paddle.erf(Tensor([4, 423361, 3, 5],"float64"), )
paddle.erf(Tensor([846721, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([211681, 2, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 105841, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 158761, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 1058401],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 264601, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5, 211681],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3175201],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 635041, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2116801, 3],"float64"), )
paddle.erfinv(x=Tensor([4, 423361, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4233601, 2, 3],"float64"), )
paddle.erfinv(x=Tensor([846721, 2, 3, 5],"float64"), )
paddle.exp(Tensor([125, 1, 640, 640],"float32"), )
paddle.exp(Tensor([13, 243, 1007, 16],"float32"), )
paddle.exp(Tensor([13, 64, 1007, 61],"float32"), )
paddle.exp(Tensor([13, 64, 3817, 16],"float32"), )
paddle.exp(Tensor([16, 1, 4962, 640],"float32"), )
paddle.exp(Tensor([16, 1, 640, 4962],"float32"), )
paddle.exp(Tensor([16, 8, 640, 640],"float32"), )
paddle.exp(Tensor([50, 64, 1007, 16],"float32"), )
paddle.exp(Tensor([56, 1, 960, 960],"float32"), )
paddle.exp(Tensor([8, 1, 6616, 960],"float32"), )
paddle.exp(Tensor([8, 1, 960, 6616],"float32"), )
paddle.exp(Tensor([8, 7, 960, 960],"float32"), )
paddle.expand_as(Tensor([1621, 80, 1, 1],"float32"), Tensor([1621, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([511, 127, 1, 1],"float32"), Tensor([511, 127, 28, 28],"float32"), )
paddle.expand_as(Tensor([511, 80, 1, 1243],"float32"), Tensor([511, 80, 28, 1243],"float32"), )
paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 28, 45],"float32"), )
paddle.expand_as(Tensor([511, 80, 1, 1],"float32"), Tensor([511, 80, 45, 28],"float32"), )
paddle.expand_as(Tensor([511, 80, 1243, 1],"float32"), Tensor([511, 80, 1243, 28],"float32"), )
paddle.expand_as(Tensor([512, 127, 1, 1],"float32"), Tensor([512, 127, 28, 28],"float32"), )
paddle.expand_as(Tensor([512, 254, 1, 1],"float32"), Tensor([512, 254, 28, 28],"float16"), )
paddle.expand_as(Tensor([512, 80, 1, 1241],"float32"), Tensor([512, 80, 28, 1241],"float32"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 45],"float32"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 28, 89],"float16"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 45, 28],"float32"), )
paddle.expand_as(Tensor([512, 80, 1, 1],"float32"), Tensor([512, 80, 89, 28],"float16"), )
paddle.expand_as(Tensor([512, 80, 1241, 1],"float32"), Tensor([512, 80, 1241, 28],"float32"), )
paddle.expand_as(Tensor([811, 80, 1, 1],"float32"), Tensor([811, 80, 28, 28],"float32"), )
paddle.expm1(Tensor([198451, 16, 32],"float16"), )
paddle.expm1(Tensor([8, 16, 793801],"float16"), )
paddle.expm1(Tensor([8, 396901, 32],"float16"), )
paddle.fft.fftn(Tensor([226801, 7, 32],"float32"), )
paddle.fft.fftn(Tensor([39, 40708, 32],"float32"), )
paddle.fft.fftn(Tensor([39, 7, 186093],"float32"), )
paddle.fft.fftn(Tensor([7, 32, 481, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(Tensor([8, 28, 481, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(Tensor([8, 32, 413, 481],"float32"), axes=list[2,3,], )
paddle.fft.fftn(Tensor([8, 32, 481, 413],"float32"), axes=list[2,3,], )
paddle.fft.fftn(x=Tensor([50, 133, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(x=Tensor([50, 8, 39, 14, 233],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(x=Tensor([50, 8, 39, 233, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(x=Tensor([50, 8, 649, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.fftn(x=Tensor([831, 8, 39, 14, 14],"float32"), axes=list[-3,-2,-1,], )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 264601],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([4, 4, 793801, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([4, 529201, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([529201, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 1411201, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 1058401, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 1058401],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([705601, 4, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([1270081, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([2822401, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([3, 1693441, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4, 2116801],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 2116801, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 2116801],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 705601],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 705601, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 705601, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([940801, 3, 3, 3],"float64"), )
paddle.fft.ihfftn(Tensor([1270081, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 1693441, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4, 2116801],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3, 705601],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 705601, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 705601, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([940801, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([4, 3, 1058401, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 423361],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 635041, 5, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([846721, 3, 5, 2],"float64"), )
paddle.fft.rfft(Tensor([20, 1210, 2101],"float32"), )
paddle.fft.rfft(Tensor([20, 1270, 2001],"float32"), )
paddle.fft.rfft(Tensor([20, 64, 39691],"float32"), )
paddle.fft.rfft(Tensor([378, 64, 2101],"float32"), )
paddle.fft.rfft(Tensor([397, 64, 2001],"float32"), )
paddle.fft.rfft(Tensor([4, 32, 32, 12404],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft(Tensor([4, 32, 6202, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft(Tensor([4, 6202, 32, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft(Tensor([776, 32, 32, 64],"float32"), axis=-1, norm="forward", )
paddle.fft.rfft2(Tensor([26, 32, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([32, 26, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([32, 32, 199, 250],"float32"), )
paddle.fft.rfft2(Tensor([32, 32, 250, 199],"float32"), )
paddle.fft.rfft2(Tensor([8, 102, 250, 250],"float32"), )
paddle.fft.rfft2(Tensor([8, 32, 250, 794],"float32"), )
paddle.fft.rfft2(Tensor([8, 32, 794, 250],"float32"), )
paddle.fft.rfft2(x=Tensor([32, 15, 15, 7057],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfft2(x=Tensor([32, 15, 414, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfft2(x=Tensor([32, 414, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfft2(x=Tensor([883, 15, 15, 256],"float32"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.rfftn(Tensor([26, 32, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 15, 15, 7057],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.fft.rfftn(Tensor([32, 15, 414, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.fft.rfftn(Tensor([32, 26, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 32, 199, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 32, 250, 199],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([32, 414, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.fft.rfftn(Tensor([8, 102, 250, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([8, 32, 250, 794],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([8, 32, 794, 250],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([883, 15, 15, 256],"float32"), None, tuple(1,2,), "ortho", None, )
paddle.flatten(Tensor([4051, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([4096, 254, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([4096, 256, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([416, 50, 10, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([416, 50, 7, 349],"float32"), start_axis=2, )
paddle.flatten(Tensor([416, 69, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([512, 50, 7, 284],"float32"), start_axis=2, )
paddle.flatten(Tensor([512, 50, 8, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([512, 56, 7, 256],"float32"), start_axis=2, )
paddle.flatten(Tensor([568, 50, 7, 256],"float32"), start_axis=2, )
paddle.flip(Tensor([127, 8, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([1351, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([3, 338, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 8, 224, 9451],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 8, 9451, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([52, 3, 112, 2908],"float32"), axis=-1, )
paddle.flip(Tensor([52, 3, 2908, 112],"float32"), axis=-1, )
paddle.flip(Tensor([52, 78, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([64, 3, 112, 2363],"float32"), axis=-1, )
paddle.flip(Tensor([64, 3, 2363, 112],"float32"), axis=-1, )
paddle.flip(Tensor([64, 64, 112, 112],"float32"), axis=-1, )
paddle.floor(Tensor([100000, 170, 3],"float32"), )
paddle.floor(Tensor([100000, 2, 255],"float32"), )
paddle.floor(Tensor([322, 157920],"float32"), )
paddle.floor(Tensor([4, 12700801],"float32"), )
paddle.floor(Tensor([8467201, 2, 3],"float32"), )
paddle.floor(x=Tensor([100, 352, 38, 38],"float32"), )
paddle.floor(x=Tensor([100, 4, 3343, 38],"float32"), )
paddle.floor(x=Tensor([100, 4, 38, 3343],"float32"), )
paddle.floor(x=Tensor([8796, 4, 38, 38],"float32"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.floor_divide(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
paddle.floor_divide(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.floor_divide(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
paddle.floor_divide(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.fmax(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), )
paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.fmax(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), )
paddle.fmax(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), )
paddle.fmax(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), )
paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), )
paddle.fmax(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), )
paddle.fmin(Tensor([10, 50803201],"float32"), Tensor([50803201],"float32"), )
paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.fmin(Tensor([10, 5080321],"float32"), Tensor([5080321],"float32"), )
paddle.fmin(Tensor([30, 200, 8468],"float32"), Tensor([30, 200, 8468],"float32"), )
paddle.fmin(Tensor([30, 42337, 40],"float32"), Tensor([30, 42337, 40],"float32"), )
paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([3386881, 15],"float32"), Tensor([3386881, 15],"float32"), )
paddle.fmin(Tensor([6351, 200, 40],"float32"), Tensor([6351, 200, 40],"float32"), )
paddle.frac(Tensor([10, 20, 254017],"float32"), )
paddle.frac(Tensor([10, 5080321, 1],"float32"), )
paddle.frac(Tensor([16934401, 3],"float32"), )
paddle.frac(Tensor([2, 12700801],"float64"), )
paddle.frac(Tensor([2, 25401601],"float32"), )
paddle.frac(Tensor([2540161, 20, 1],"float32"), )
paddle.frac(Tensor([8467201, 3],"float64"), )
paddle.full_like(Tensor([1, 1, 2048, 24807],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 1, 24807, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 13, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 300, 169345],"float32"), 1, )
paddle.full_like(Tensor([13, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([199, 256000],"float32"), 0.0, )
paddle.full_like(Tensor([42, 300, 4096],"float32"), 1, )
paddle.full_like(Tensor([6, 8467201],"float32"), 0.0, )
paddle.gammainc(Tensor([1270081, 40],"float32"), y=Tensor([1270081, 40],"float32"), )
paddle.gammainc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
paddle.gammainc(Tensor([3, 16934401],"float32"), y=Tensor([3, 16934401],"float32"), )
paddle.gammainc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([1270081, 40],"float32"), Tensor([1270081, 40],"float32"), )
paddle.gammaincc(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
paddle.gammaincc(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), )
paddle.gammaincc(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([482, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 2, 7],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([482, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([2048, 2048, 7, 2],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([482, 1],"int64"), )
paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([2048, 507, 7, 7],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([482, 1],"int64"), )
paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([496, 1],"int64"), )
paddle.gather(Tensor([507, 2048, 7, 7],"float32"), Tensor([512, 1],"int64"), )
paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([778, 2],"int64"), )
paddle.gather_nd(Tensor([1, 1417, 716],"bfloat16"), Tensor([816, 2],"int64"), )
paddle.gather_nd(Tensor([1, 819, 1240],"bfloat16"), Tensor([778, 2],"int64"), )
paddle.gather_nd(Tensor([1, 8192, 124],"bfloat16"), Tensor([816, 2],"int64"), )
paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([10, 50, 2],"int64"), )
paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([20, 50, 2],"int64"), )
paddle.gather_nd(Tensor([10, 413, 128],"float32"), index=Tensor([5, 50, 2],"int64"), )
paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([778, 2],"int64"), )
paddle.gather_nd(Tensor([2, 81, 7168],"bfloat16"), Tensor([816, 2],"int64"), )
paddle.gather_nd(Tensor([20, 198, 128],"float32"), index=Tensor([20, 50, 2],"int64"), )
paddle.gather_nd(Tensor([20, 413, 62],"float32"), index=Tensor([20, 50, 2],"int64"), )
paddle.gcd(Tensor([10, 50803],"int32"), Tensor([10, 50803],"int32"), )
paddle.gcd(Tensor([25401, 20],"int32"), Tensor([25401, 20],"int32"), )
paddle.gcd(x=Tensor([12700, 2, 4, 5],"int32"), y=Tensor([12700, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([25401, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 16934, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 21168],"int32"), y=Tensor([2, 1, 21168],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 10584],"int32"), y=Tensor([6, 2, 4, 10584],"int32"), )
paddle.gcd(x=Tensor([6, 2, 8467, 5],"int32"), y=Tensor([6, 2, 8467, 5],"int32"), )
paddle.gcd(x=Tensor([6, 4233, 4, 5],"int32"), y=Tensor([6, 4233, 4, 5],"int32"), )
paddle.geometric.segment_max(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), )
paddle.geometric.segment_mean(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), )
paddle.geometric.segment_mean(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), )
paddle.geometric.segment_mean(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), )
paddle.geometric.segment_mean(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), )
paddle.geometric.segment_min(Tensor([1270081, 20],"float64"), Tensor([1270081],"int64"), )
paddle.geometric.segment_min(Tensor([25401601, 20],"float16"), Tensor([25401601],"int64"), )
paddle.geometric.segment_min(Tensor([25401601, 20],"float32"), Tensor([25401601],"int64"), )
paddle.geometric.segment_min(Tensor([25401601, 20],"float64"), Tensor([25401601],"int64"), )
paddle.geometric.segment_min(Tensor([2540161, 20],"float32"), Tensor([2540161],"int64"), )
paddle.geometric.segment_min(Tensor([40, 1270081],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 2540161],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 635041],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([5080321, 20],"float16"), Tensor([5080321],"int64"), )
paddle.geometric.segment_sum(Tensor([25401601, 15],"float16"), Tensor([25401601],"int64"), )
paddle.geometric.segment_sum(Tensor([25401601, 15],"float32"), Tensor([25401601],"int64"), )
paddle.geometric.segment_sum(Tensor([2540161, 20],"float32"), Tensor([2540161],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 1693441],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 3386881],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([3386881, 15],"float32"), Tensor([3386881],"int64"), )
paddle.geometric.segment_sum(Tensor([40, 1270081],"float32"), Tensor([40],"int32"), )
paddle.geometric.segment_sum(Tensor([50803201, 20],"float32"), Tensor([50803201],"int32"), )
paddle.geometric.segment_sum(Tensor([6773761, 15],"float16"), Tensor([6773761],"int64"), )
paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 1693441],"float64"), Tensor([15, 1693441],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 2540161],"float64"), Tensor([15, 2540161],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 508033, 5],"float64"), Tensor([15, 508033, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 317521],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([1270081, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([635041, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 254017],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([25401601],"int64"), Tensor([25401601],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 254017],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([1270081, 1],"float64"), Tensor([1270081, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([1270081, 20],"float64"), Tensor([1270081, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([25401601, 1],"float64"), Tensor([25401601, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([25401601, 20],"float64"), Tensor([25401601, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.greater_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([16935, 10, 15, 20],"float32"), Tensor([16935, 10, 15, 20],"float32"), )
paddle.greater_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([49613, 1024, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([5, 10, 15, 67738],"float32"), Tensor([5, 10, 15, 67738],"float32"), )
paddle.greater_equal(Tensor([5, 10, 50804, 20],"float32"), Tensor([5, 10, 50804, 20],"float32"), )
paddle.greater_equal(Tensor([5, 33869, 15, 20],"float32"), Tensor([5, 33869, 15, 20],"float32"), )
paddle.greater_equal(Tensor([8, 1024, 1, 6202],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([8, 1024, 6202, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([8, 6350401, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.greater_than(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), )
paddle.greater_than(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float64"), )
paddle.greater_than(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), )
paddle.greater_than(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 2116801],"float16"), Tensor([4, 3, 2116801],"float64"), )
paddle.greater_than(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), )
paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), )
paddle.greater_than(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float64"), )
paddle.greater_than(Tensor([4, 3175201, 2],"float16"), Tensor([4, 3175201, 2],"float64"), )
paddle.greater_than(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), )
paddle.greater_than(Tensor([4233601, 3, 2],"float16"), Tensor([4233601, 3, 2],"float64"), )
paddle.greater_than(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), )
paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([2048],"float32"), )
paddle.heaviside(Tensor([24807, 2048],"float32"), Tensor([24807, 2048],"float32"), )
paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([169345],"float32"), )
paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), )
paddle.histogram(input=Tensor([4, 6350401],"int64"), )
paddle.histogram(input=Tensor([6350401, 4],"int64"), )
paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([2540161, 20],"float32"), bins=10, min=1, max=1, )
paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([5, 10160641],"float32"), bins=10, min=1, max=1, )
paddle.histogramdd(Tensor([1270, 2, 2],"float64"), bins=5, weights=Tensor([1270, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 15876, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 15876],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 63504, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 63504],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([63504, 2, 2],"float64"), bins=5, weights=Tensor([63504, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([1411201, 6, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 2116801, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 1058401],"int64"), list[2,4,], )
paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.hypot(Tensor([2540161, 20],"float32"), Tensor([2540161, 20],"float32"), )
paddle.hypot(Tensor([50803201],"float32"), Tensor([1],"float32"), )
paddle.hypot(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.hypot(Tensor([5080321, 10],"float32"), Tensor([5080321, 1],"float32"), )
paddle.i0(Tensor([10, 20, 254017],"float32"), )
paddle.i0(Tensor([10, 5080321, 1],"float32"), )
paddle.i0(Tensor([25401601],"float64"), )
paddle.i0(Tensor([2540161, 20, 1],"float32"), )
paddle.i0(Tensor([50803201],"float32"), )
paddle.i0e(Tensor([25401601],"float64"), )
paddle.i0e(Tensor([50803201],"float32"), )
paddle.i1(Tensor([25401601],"float64"), )
paddle.i1(Tensor([50803201],"float32"), )
paddle.i1e(Tensor([25401601],"float64"), )
paddle.i1e(Tensor([50803201],"float32"), )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 13412],"bfloat16"), Tensor([7576, 13412],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 13176],"bfloat16"), Tensor([7712, 13176],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([79381, 1280],"bfloat16"), Tensor([79381, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 12440],"bfloat16"), Tensor([8168, 12440],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 14176, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 12404],"bfloat16"), Tensor([12404, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 6202],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 24807],"bfloat16"), Tensor([24807, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 12404],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 6202, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 12404],"bfloat16"), Tensor([12404, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 14176],"bfloat16"), Tensor([14176],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([2, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([2, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1270081, 30],"float32"), Tensor([40, 1270081],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1693441, 30],"float32"), Tensor([40, 1693441],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([1270081, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([40, 1270081],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([1693441, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([40, 1693441],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([1016065, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 1016065],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 1016065],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([1016065, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.swiglu(Tensor([14176, 7168],"bfloat16"), )
paddle.incubate.segment_max(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 1693440],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1013, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([145, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 338, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4511, 11, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 203, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 7088, 32, 32],"float32"), )
paddle.index_add(Tensor([100, 100, 25402],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 25402],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([5081],"int32"), 2, Tensor([100, 100, 5081],"float32"), )
paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5081],"float32"), )
paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 101607, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 2540161],"float32"), Tensor([20],"int32"), 0, Tensor([20, 2540161],"float32"), )
paddle.index_add(Tensor([100, 508033],"float32"), Tensor([20],"int32"), 0, Tensor([20, 508033],"float32"), )
paddle.index_add(Tensor([10160641, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_fill(Tensor([10, 1016065, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 169345],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 338689],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 677377],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 254017, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 508033, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([169345, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([338689, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([677377, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 14],"int64"), )
paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 14],"int64"), )
paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([25401601, 100],"float32"), Tensor([25401601, 1],"int64"), )
paddle.index_sample(Tensor([25401601, 20],"float32"), Tensor([25401601, 1],"int64"), )
paddle.index_sample(Tensor([2540161, 20],"float32"), Tensor([2540161, 1],"int64"), )
paddle.index_sample(Tensor([508033, 100],"float32"), Tensor([508033, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 5],"int64"), )
paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 5],"int64"), )
paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 28],"int64"), )
paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 1],"int64"), )
paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 28],"int64"), )
paddle.index_select(Tensor([16, 11109, 286],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 12096, 263],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 39201, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([205, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([52, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([57, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([64, 3060, 260],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([64, 9801, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.inner(Tensor([20, 1270081],"float64"), Tensor([1270081],"float64"), )
paddle.inner(Tensor([20, 25401601],"float64"), Tensor([25401601],"float64"), )
paddle.inner(Tensor([508033, 50],"float64"), Tensor([50],"float64"), )
paddle.is_complex(Tensor([100352, 507],"float32"), )
paddle.is_complex(Tensor([507, 100352],"float32"), )
paddle.is_complex(Tensor([6202, 8192],"float32"), )
paddle.is_complex(Tensor([8192, 6202],"float32"), )
paddle.is_complex(Tensor([886, 57344],"float32"), )
paddle.is_empty(Tensor([10160641, 5],"float32"), )
paddle.is_empty(Tensor([16934401, 3],"float32"), )
paddle.is_empty(Tensor([2, 25401601],"float32"), )
paddle.is_empty(Tensor([3, 16934401],"float32"), )
paddle.is_empty(x=Tensor([4, 32, 396901],"float32"), )
paddle.is_empty(x=Tensor([4, 396901, 32],"float32"), )
paddle.is_empty(x=Tensor([49613, 32, 32],"float32"), )
paddle.isclose(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), )
paddle.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
paddle.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), )
paddle.isfinite(Tensor([1738, 94, 311],"float32"), )
paddle.isfinite(Tensor([28462, 17, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([4, 280, 376, 25, 5],"float32"), )
paddle.isfinite(Tensor([4, 280, 376, 41, 3],"float32"), )
paddle.isfinite(Tensor([4, 280, 605, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 40839, 311],"float32"), )
paddle.isfinite(Tensor([4, 451, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 94, 135115],"float32"), )
paddle.isfinite(Tensor([7, 280, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([8, 17, 17789, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 21346, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 24904],"float16"), )
paddle.isfinite(Tensor([8, 60481, 5, 6, 7],"float16"), )
paddle.isin(Tensor([396901, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 3175201],"float64"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 6350401],"float64"), False, False, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([99226, 256],"float64"), False, False, )
paddle.isinf(Tensor([14, 226801, 16],"float32"), )
paddle.isinf(Tensor([14, 36655, 99],"float32"), )
paddle.isinf(Tensor([14, 64, 56701],"float32"), )
paddle.isinf(Tensor([14, 7, 518401],"float32"), )
paddle.isinf(Tensor([28462, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([49613, 64, 16],"float32"), )
paddle.isinf(Tensor([73310, 7, 99],"float32"), )
paddle.isinf(Tensor([8, 17, 17789, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 21346, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 6, 24904],"float16"), )
paddle.isinf(Tensor([8, 60481, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([10445, 4864],"float32"), )
paddle.isnan(Tensor([16, 64, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 125, 320, 320],"float32"), )
paddle.isnan(Tensor([4, 249, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 1241, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 1241],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 621],"float32"), )
paddle.isnan(Tensor([4, 64, 621, 320],"float32"), )
paddle.isnan(Tensor([4864, 10445],"float32"), )
paddle.isnan(Tensor([8, 64, 320, 320],"float32"), )
paddle.isneginf(Tensor([11, 17, 2716],"int32"), )
paddle.isneginf(Tensor([11, 17, 5433],"int16"), )
paddle.isneginf(Tensor([11, 46184],"float32"), )
paddle.isneginf(Tensor([11, 4618, 10],"int32"), )
paddle.isneginf(Tensor([11, 9236, 10],"int16"), )
paddle.isneginf(Tensor([29884, 17],"float32"), )
paddle.isneginf(Tensor([2988, 17, 10],"int32"), )
paddle.isneginf(Tensor([5976, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 2716],"int32"), )
paddle.isposinf(Tensor([11, 17, 5433],"int16"), )
paddle.isposinf(Tensor([11, 46184],"float32"), )
paddle.isposinf(Tensor([11, 4618, 10],"int32"), )
paddle.isposinf(Tensor([11, 9236, 10],"int16"), )
paddle.isposinf(Tensor([29884, 17],"float32"), )
paddle.isposinf(Tensor([2988, 17, 10],"int32"), )
paddle.isposinf(Tensor([5976, 17, 10],"int16"), )
paddle.isreal(Tensor([1587601, 32],"bool"), )
paddle.isreal(Tensor([3175201, 32],"bfloat16"), )
paddle.isreal(Tensor([3175201, 32],"float16"), )
paddle.isreal(Tensor([64, 1587601],"bfloat16"), )
paddle.isreal(Tensor([64, 1587601],"float16"), )
paddle.isreal(Tensor([64, 793801],"bool"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([22336, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 22336, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 13868, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 15401, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 8934],"float32"), )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=2, )
paddle.lcm(Tensor([1],"int64"), Tensor([25401601],"int64"), )
paddle.lcm(Tensor([25401601],"int64"), Tensor([1],"int64"), )
paddle.lcm(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
paddle.lcm(Tensor([50803201],"int32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([25401601],"float64"), Tensor([25401601],"int32"), )
paddle.ldexp(Tensor([25401601],"int64"), Tensor([25401601],"int32"), )
paddle.ldexp(Tensor([50803201],"float64"), Tensor([50803201],"int32"), )
paddle.ldexp(Tensor([50803201],"int32"), Tensor([50803201],"int32"), )
paddle.ldexp(Tensor([50803201],"int64"), Tensor([50803201],"int32"), )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 604801],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 604801, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([64801, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1814401, 28],"float32"), Tensor([3, 1814401, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 1814401],"float32"), Tensor([3, 28, 1814401],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([3, 28, 604801],"float32"), Tensor([3, 28, 604801],"float32"), 1.2, )
paddle.lerp(Tensor([3, 604801, 28],"float32"), Tensor([3, 604801, 28],"float32"), 1.2, )
paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.2, )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.less(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), )
paddle.less(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less_equal(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.less_equal(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), )
paddle.less_equal(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.less_equal(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), )
paddle.less_equal(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), )
paddle.less_equal(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), )
paddle.less_equal(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), )
paddle.less_than(Tensor([1, 128, 198451],"int64"), Tensor([1, 128, 198451],"int64"), )
paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
paddle.less_than(Tensor([1, 128, 396901],"float32"), Tensor([1, 128, 396901],"float32"), )
paddle.less_than(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 256],"float32"), )
paddle.less_than(Tensor([1, 99226, 256],"int64"), Tensor([1, 99226, 256],"int64"), )
paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
paddle.less_than(Tensor([3101, 1, 128, 128],"float32"), Tensor([3101, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 49613],"float32"), Tensor([8, 1, 128, 49613],"float32"), )
paddle.less_than(Tensor([8, 1, 49613, 128],"float32"), Tensor([8, 1, 49613, 128],"float32"), )
paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
paddle.lgamma(Tensor([10, 10, 10, 25402],"float64"), )
paddle.lgamma(Tensor([10, 10, 127009, 2],"float64"), )
paddle.lgamma(Tensor([10, 127009, 10, 2],"float64"), )
paddle.lgamma(Tensor([100, 254017],"float64"), )
paddle.lgamma(Tensor([127009, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([1948, 26080],"float32"), )
paddle.lgamma(Tensor([254017, 100],"float64"), )
paddle.lgamma(Tensor([50803201, 1],"float32"), )
paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.corrcoef(Tensor([5, 10160641],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 12700801],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 6350401],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([50803201],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([25401601],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([50803201],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([1270081],"int32"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int64"), aweights=Tensor([1270081],"float64"), )
paddle.linalg.cov(Tensor([20, 25401601],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([25401601],"float64"), )
paddle.linalg.det(Tensor([3, 12737, 5, 5],"float32"), )
paddle.linalg.det(Tensor([12737, 3, 5, 5],"float32"), )
paddle.linalg.inv(x=Tensor([5, 31752, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([52920, 3, 4, 4],"float64"), )
paddle.linalg.lu(Tensor([103, 5, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 138, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 138, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5, 138],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([106, 5, 5, 5],"float32"), )
paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float32"), Tensor([203, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float64"), Tensor([203, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 338689],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 677377],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([4064, 5, 5, 5],"float32"), Tensor([406, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([6773, 5, 5, 3],"float32"), Tensor([277, 5, 3],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4233601],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3175201, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2116801, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 2005, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 1719, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 3151, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 287, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 573, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 573, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([860, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_transpose(Tensor([2, 3, 8467201],"float32"), )
paddle.linalg.matrix_transpose(Tensor([2, 6350401, 4],"float32"), )
paddle.linalg.matrix_transpose(Tensor([4233601, 3, 4],"float32"), )
paddle.linalg.multi_dot(list[Tensor([25401601],"float64"),Tensor([25401601, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4233601, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6350401, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 3175201],"float64"),Tensor([3175201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 5080321],"float64"),Tensor([5080321, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 8467201],"float64"),Tensor([8467201, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 4233601],"float64"),Tensor([4233601, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 6350401],"float64"),Tensor([6350401, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 8467201],"float64"),Tensor([8467201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([819407],"float64"),Tensor([819407, 31],"float64"),], )
paddle.linalg.norm(Tensor([12700801, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([25402, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 25402, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 50, 10161],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50803201],"float32"), p=2, )
paddle.linalg.norm(Tensor([8550, 1, 5942],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([8550, 1486, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.pinv(Tensor([21, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 22, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([22, 20, 3],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([58, 4, 4],"float64"), )
paddle.linalg.qr(Tensor([105, 3, 50, 8],"float64"), )
paddle.linalg.qr(Tensor([112, 3, 20, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 105, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 158, 100, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 211, 100, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 423],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 3528, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 529201, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 705601, 6],"float64"), )
paddle.linalg.qr(Tensor([70, 3, 50, 12],"float64"), )
paddle.linalg.slogdet(Tensor([3, 6773, 5, 5],"float32"), )
paddle.linalg.slogdet(Tensor([6773, 3, 5, 5],"float32"), )
paddle.linalg.solve(x=Tensor([129601, 14, 14],"float64"), y=Tensor([129601, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 1814401],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 453601],"float64"), )
paddle.linalg.solve(x=Tensor([907201, 14, 14],"float64"), y=Tensor([907201, 14, 2],"float64"), )
paddle.linalg.svdvals(Tensor([10, 3, 8467],"float64"), )
paddle.linalg.svdvals(Tensor([10, 4233, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 5080],"float32"), )
paddle.linalg.svdvals(Tensor([611, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([40, 6350],"float64"), )
paddle.linalg.svdvals(Tensor([623, 12],"float32"), )
paddle.linalg.svdvals(Tensor([635, 40],"float64"), )
paddle.log(Tensor([192, 40, 6625],"float32"), )
paddle.log(Tensor([307, 25, 6626],"float32"), )
paddle.log(Tensor([64, 120, 6625],"float32"), )
paddle.log(Tensor([64, 120, 6626],"float32"), )
paddle.log(Tensor([64, 25, 31753],"float32"), )
paddle.log(Tensor([64, 40, 19846],"float32"), )
paddle.log(Tensor([64, 80, 9923],"float32"), )
paddle.log(Tensor([96, 80, 6625],"float32"), )
paddle.log10(Tensor([10, 20, 254017],"float32"), )
paddle.log10(Tensor([10, 5080321, 1],"float32"), )
paddle.log10(Tensor([2540161, 20, 1],"float32"), )
paddle.log10(x=Tensor([12700801, 2],"float64"), )
paddle.log10(x=Tensor([2, 12700801],"float64"), )
paddle.log10(x=Tensor([2, 3, 2, 2116801],"float64"), )
paddle.log10(x=Tensor([2, 3, 2116801, 2],"float64"), )
paddle.log10(x=Tensor([2, 3175201, 2, 2],"float64"), )
paddle.log10(x=Tensor([2116801, 3, 2, 2],"float64"), )
paddle.log1p(Tensor([10, 16935, 300],"float32"), )
paddle.log1p(Tensor([10, 200, 25402],"float32"), )
paddle.log1p(Tensor([1016065, 5, 5],"float64"), )
paddle.log1p(Tensor([108, 157920, 3],"float32"), )
paddle.log1p(Tensor([4, 157920, 81],"float32"), )
paddle.log1p(Tensor([4, 4233601, 3],"float32"), )
paddle.log1p(Tensor([50000, 102, 5],"float64"), )
paddle.log1p(Tensor([50000, 5, 102],"float64"), )
paddle.log1p(Tensor([847, 200, 300],"float32"), )
paddle.log2(Tensor([10, 20, 254017],"float32"), )
paddle.log2(Tensor([10, 2540161],"float64"), )
paddle.log2(Tensor([10, 5080321, 1],"float32"), )
paddle.log2(Tensor([10, 5080321],"float32"), )
paddle.log2(Tensor([2116801, 12],"float64"), )
paddle.log2(Tensor([2540161, 20, 1],"float32"), )
paddle.log2(Tensor([4233601, 12],"float32"), )
paddle.logaddexp(Tensor([10, 16935, 300],"float32"), Tensor([10, 16935, 300],"float32"), )
paddle.logaddexp(Tensor([10, 16935, 300],"int32"), Tensor([10, 16935, 300],"int32"), )
paddle.logaddexp(Tensor([10, 200, 12701],"int64"), Tensor([10, 200, 12701],"int64"), )
paddle.logaddexp(Tensor([10, 200, 25402],"float32"), Tensor([10, 200, 25402],"float32"), )
paddle.logaddexp(Tensor([10, 200, 25402],"int32"), Tensor([10, 200, 25402],"int32"), )
paddle.logaddexp(Tensor([10, 8468, 300],"int64"), Tensor([10, 8468, 300],"int64"), )
paddle.logaddexp(Tensor([424, 200, 300],"int64"), Tensor([424, 200, 300],"int64"), )
paddle.logaddexp(Tensor([847, 200, 300],"float32"), Tensor([847, 200, 300],"float32"), )
paddle.logaddexp(Tensor([847, 200, 300],"int32"), Tensor([847, 200, 300],"int32"), )
paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([508033, 10, 10],"float32"), axis=-1, )
paddle.logical_and(Tensor([138, 369303],"bool"), Tensor([138, 369303],"bool"), )
paddle.logical_and(Tensor([146, 349866],"bool"), Tensor([146, 349866],"bool"), )
paddle.logical_and(Tensor([49, 1036801],"bool"), Tensor([49, 1036801],"bool"), )
paddle.logical_and(Tensor([53, 958551],"bool"), Tensor([53, 958551],"bool"), )
paddle.logical_and(Tensor([55, 923695],"bool"), Tensor([55, 923695],"bool"), )
paddle.logical_not(Tensor([215040, 237],"bool"), )
paddle.logical_not(Tensor([220416, 231],"bool"), )
paddle.logical_not(Tensor([225792, 226],"bool"), )
paddle.logical_not(Tensor([635041, 80],"bool"), )
paddle.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
paddle.logical_or(Tensor([640, 79381],"bool"), Tensor([640, 79381],"bool"), )
paddle.logical_or(Tensor([79381, 640],"bool"), Tensor([79381, 640],"bool"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.logical_xor(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.logical_xor(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.logit(Tensor([10, 20, 254017],"float32"), 0.001, )
paddle.logit(Tensor([10, 5080321, 1],"float32"), 0.001, )
paddle.logit(Tensor([2540161, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([50803201],"float32"), 1e-08, )
paddle.logit(x=Tensor([4, 3, 2, 1058401],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, )
paddle.logsumexp(Tensor([1024, 49613],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.masked_fill(Tensor([20, 127009, 20],"int32"), Tensor([20, 127009, 20],"bool"), 0, )
paddle.masked_fill(Tensor([20, 60, 42337],"int32"), Tensor([20, 60, 42337],"bool"), 0, )
paddle.masked_fill(Tensor([28225, 60, 30],"int32"), Tensor([28225, 60, 30],"bool"), 0, )
paddle.masked_fill(Tensor([30, 56449, 30],"int32"), Tensor([30, 56449, 30],"bool"), 0, )
paddle.masked_fill(Tensor([30, 60, 28225],"int32"), Tensor([30, 60, 28225],"bool"), 0, )
paddle.masked_fill(Tensor([42337, 60, 20],"int32"), Tensor([42337, 60, 20],"bool"), 0, )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_select(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"bool"), )
paddle.masked_select(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"bool"), )
paddle.masked_select(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"bool"), )
paddle.masked_select(Tensor([16, 46695, 68],"float32"), Tensor([16, 46695, 68],"bool"), )
paddle.masked_select(Tensor([62, 12096, 68],"float32"), Tensor([62, 12096, 68],"bool"), )
paddle.masked_select(Tensor([68, 11109, 68],"float32"), Tensor([68, 11109, 68],"bool"), )
paddle.masked_select(Tensor([74, 10164, 68],"float32"), Tensor([74, 10164, 68],"bool"), )
paddle.matmul(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 388],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 97, 4096, 4096],"float32"), Tensor([1, 97, 4096, 128],"float32"), )
paddle.matmul(Tensor([10, 23, 499, 3600],"float32"), Tensor([10, 23, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 3, 499, 3600],"float32"), Tensor([10, 3, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 177, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 1273],"float32"), Tensor([10, 8, 1273, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 177],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 9923],"float32"), Tensor([10, 8, 9923, 64],"float32"), )
paddle.matmul(Tensor([1379, 4, 256, 256],"float32"), Tensor([1379, 4, 256, 36],"float32"), )
paddle.matmul(Tensor([194, 4, 256, 256],"float32"), Tensor([194, 4, 256, 36],"float32"), )
paddle.matmul(Tensor([28, 8, 499, 3600],"float32"), Tensor([28, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([4, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([4, 8, 499, 3600],"float32"), Tensor([4, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([512, 11, 256, 256],"float32"), Tensor([512, 11, 256, 36],"float32"), )
paddle.matmul(Tensor([512, 2, 256, 256],"float32"), Tensor([512, 2, 256, 36],"float32"), )
paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 97],"float32"), )
paddle.matmul(Tensor([512, 4, 97, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), )
paddle.matrix_transpose(Tensor([2, 12700801, 4],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 16934401],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 4233601],"float64"), )
paddle.matrix_transpose(Tensor([2, 3, 8467201],"float32"), )
paddle.matrix_transpose(Tensor([2, 3175201, 4],"float64"), )
paddle.matrix_transpose(Tensor([2, 6350401, 4],"float32"), )
paddle.matrix_transpose(Tensor([2116801, 3, 4],"float64"), )
paddle.matrix_transpose(Tensor([4233601, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([8467201, 3, 4],"float16"), )
paddle.max(Tensor([416, 50, 10, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 349],"float32"), axis=1, )
paddle.max(Tensor([416, 69, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([49, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([512, 50, 7, 284],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 8, 256],"float32"), axis=1, )
paddle.max(Tensor([512, 56, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([568, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([8, 1024, 6202],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 6202, 1024],"float32"), axis=-1, keepdim=True, )
paddle.maximum(Tensor([11585, 4386],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([120961, 420],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([121539, 418],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([14877, 3415],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([16121, 3152],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([62643, 811],"float32"), Tensor([1],"float32"), )
paddle.mean(Tensor([7573, 11, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7573, 8, 1678],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 11, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 8, 1648],"bfloat16"), axis=1, )
paddle.mean(Tensor([8162, 10, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([8162, 8, 1557],"bfloat16"), axis=1, )
paddle.mean(Tensor([9923, 8, 1280],"bfloat16"), axis=1, )
paddle.median(Tensor([2, 254016],"float32"), axis=1, mode="min", )
paddle.median(Tensor([254016],"int64"), )
paddle.median(Tensor([508032],"float32"), )
paddle.median(Tensor([5080, 100],"float32"), axis=1, mode="min", )
paddle.min(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([64, 1, 28, 28351],"float32"), )
paddle.min(Tensor([64, 1, 28351, 28],"float32"), )
paddle.min(Tensor([64, 1013, 28, 28],"float32"), )
paddle.min(Tensor([64801, 1, 28, 28],"float32"), )
paddle.minimum(Tensor([13, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.minimum(Tensor([16, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.minimum(Tensor([9, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.mm(Tensor([1838, 6, 144, 144],"float32"), Tensor([1838, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 2, 144, 144],"float32"), Tensor([2048, 2, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 29],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 29, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2757, 4, 144, 144],"float32"), Tensor([2757, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 1, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 3, 144, 144],"float32"), Tensor([3840, 3, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 23],"float32"), )
paddle.mm(Tensor([3840, 4, 23, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([409, 6, 144, 144],"float32"), Tensor([409, 6, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 1, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 3, 144, 144],"float32"), Tensor([4096, 3, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 22],"float32"), )
paddle.mm(Tensor([4096, 4, 22, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
paddle.mm(Tensor([613, 4, 144, 144],"float32"), Tensor([613, 4, 144, 32],"float32"), )
paddle.mod(Tensor([10, 2540161],"int64"), Tensor([10, 2540161],"int64"), )
paddle.mod(Tensor([10, 5080321],"int32"), Tensor([10, 5080321],"int32"), )
paddle.mod(Tensor([1270081, 2, 4, 5],"int32"), Tensor([1270081, 2, 4, 5],"int32"), )
paddle.mod(Tensor([24807, 1024],"int64"), Tensor([24807, 1024],"int64"), )
paddle.mod(Tensor([2540161, 20],"int32"), Tensor([2540161, 20],"int32"), )
paddle.mod(Tensor([6, 2, 4, 1058401],"int32"), Tensor([6, 2, 4, 1058401],"int32"), )
paddle.mod(Tensor([6, 2, 846721, 5],"int32"), Tensor([6, 2, 846721, 5],"int32"), )
paddle.mod(Tensor([6, 423361, 4, 5],"int32"), Tensor([6, 423361, 4, 5],"int32"), )
paddle.mode(Tensor([2, 10, 12],"float64"), -1, )
paddle.mode(Tensor([2, 10, 12],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 12],"float64"), 1, )
paddle.mode(Tensor([2, 12, 10],"float64"), -1, )
paddle.mode(Tensor([2, 12, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 12, 10],"float64"), 1, )
paddle.moveaxis(Tensor([2, 3, 120961, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 151201, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 3, 4, 5, 211681],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([2, 90721, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(Tensor([60481, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([120961, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 151201, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 211681],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2, 90721, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 60481, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.multigammaln(Tensor([10, 2540161],"float64"), 2, )
paddle.multigammaln(Tensor([10, 5080321],"float32"), 2, )
paddle.multigammaln(Tensor([1270081, 20],"float64"), 2, )
paddle.multigammaln(Tensor([2540161, 20],"float32"), 2, )
paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([127, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([12700801, 4],"float32"),Tensor([12700801, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 7257601],"float32"),Tensor([7, 7257601],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiply(Tensor([298, 872, 14, 14],"float32"), Tensor([298, 872, 1, 1],"float32"), )
paddle.multiply(Tensor([512, 507, 14, 14],"float32"), Tensor([512, 507, 1, 1],"float32"), )
paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 1],"float32"), )
paddle.multiply(Tensor([512, 872, 14, 9],"float32"), Tensor([512, 872, 1, 9],"float32"), )
paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 1, 1],"float32"), )
paddle.multiply(Tensor([512, 872, 9, 14],"float32"), Tensor([512, 872, 9, 1],"float32"), )
paddle.multiply(x=Tensor([128, 127, 56, 56],"float32"), y=Tensor([128, 127, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 224, 32, 56],"float32"), y=Tensor([128, 224, 32, 1],"float32"), )
paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 224, 56, 32],"float32"), y=Tensor([128, 224, 1, 32],"float32"), )
paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 256, 28, 56],"float32"), y=Tensor([128, 256, 28, 1],"float32"), )
paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 1],"float32"), )
paddle.multiply(x=Tensor([128, 256, 56, 28],"float32"), y=Tensor([128, 256, 1, 28],"float32"), )
paddle.multiply(x=Tensor([64, 256, 56, 56],"float32"), y=Tensor([64, 256, 1, 1],"float32"), )
paddle.multiply(x=Tensor([73, 224, 56, 56],"float32"), y=Tensor([73, 224, 1, 1],"float32"), )
paddle.mv(Tensor([1411201, 36],"float32"), Tensor([36],"float32"), )
paddle.mv(Tensor([254017, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([3, 16934401],"float32"), Tensor([16934401],"float32"), )
paddle.mv(Tensor([3, 50803201],"float32"), Tensor([50803201],"float32"), )
paddle.mv(Tensor([5, 25401601],"float64"), Tensor([25401601],"float64"), )
paddle.mv(Tensor([5, 5080321],"float64"), Tensor([5080321],"float64"), )
paddle.mv(Tensor([64, 396901],"float64"), Tensor([396901],"float64"), )
paddle.mv(Tensor([793801, 32],"float64"), Tensor([32],"float64"), )
paddle.nan_to_num(Tensor([148, 114422, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 5, 68653],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([1948, 26080],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([25401601, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([25401601, 2],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([3386881, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([400, 63505],"float64"), neginf=-2.220446049250313e-16, )
paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 1270081, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 1693441, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 4, 2116801],"float32"), None, False, )
paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([846721, 3, 4, 5],"float32"), None, False, )
paddle.nanmedian(Tensor([2, 254016],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([508032],"float32"), keepdim=False, mode="min", )
paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 10584, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 7, 9072],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([6048, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 1270081, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 1693441, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 2116801],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([846721, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(x=Tensor([105841, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 105841, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 141121, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 176401, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 70561],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 35281, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(x=Tensor([3, 70561, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.neg(Tensor([3175201, 8],"float64"), )
paddle.neg(Tensor([32, 1587601],"float32"), )
paddle.neg(Tensor([32, 793801],"float64"), )
paddle.neg(Tensor([6350401, 8],"float32"), )
paddle.neg(Tensor([8, 16, 396901],"float32"), )
paddle.neg(Tensor([8, 198451, 32],"float32"), )
paddle.neg(Tensor([99226, 16, 32],"float32"), )
paddle.negative(Tensor([1693441, 3, 4, 5],"float16"), )
paddle.negative(Tensor([2, 1270081, 4, 5],"float32"), )
paddle.negative(Tensor([2, 2540161, 4, 5],"float16"), )
paddle.negative(Tensor([2, 3, 1693441, 5],"float32"), )
paddle.negative(Tensor([2, 3, 3386881, 5],"float16"), )
paddle.negative(Tensor([2, 3, 4, 1058401],"float64"), )
paddle.negative(Tensor([2, 3, 4, 2116801],"float32"), )
paddle.negative(Tensor([2, 3, 4, 4233601],"float16"), )
paddle.negative(Tensor([2, 3, 846721, 5],"float64"), )
paddle.negative(Tensor([2, 635041, 4, 5],"float64"), )
paddle.negative(Tensor([423361, 3, 4, 5],"float64"), )
paddle.negative(Tensor([846721, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 1270081, 4, 5],"float32"), Tensor([2, 1270081, 4, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 1693441, 5],"float32"), Tensor([2, 3, 1693441, 5],"float32"), )
paddle.nextafter(Tensor([2, 3, 4, 2116801],"float32"), Tensor([2, 3, 4, 2116801],"float32"), )
paddle.nextafter(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), )
paddle.nextafter(Tensor([4, 3, 2116801],"float64"), Tensor([4, 3, 2116801],"float32"), )
paddle.nextafter(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), )
paddle.nextafter(Tensor([4, 3, 4233601],"float64"), Tensor([4, 3, 4233601],"float32"), )
paddle.nextafter(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), )
paddle.nextafter(Tensor([4, 3175201, 2],"float64"), Tensor([4, 3175201, 2],"float32"), )
paddle.nextafter(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), )
paddle.nextafter(Tensor([4, 6350401, 2],"float64"), Tensor([4, 6350401, 2],"float32"), )
paddle.nextafter(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), )
paddle.nextafter(Tensor([4233601, 3, 2],"float64"), Tensor([4233601, 3, 2],"float32"), )
paddle.nextafter(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), )
paddle.nextafter(Tensor([8467201, 3, 2],"float64"), Tensor([8467201, 3, 2],"float32"), )
paddle.nextafter(Tensor([846721, 3, 4, 5],"float32"), Tensor([846721, 3, 4, 5],"float32"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 1536, 267],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([124, 8362, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 1536, 259],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([128, 8101, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([345, 1024, 144],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 1024, 776],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([64, 5513, 144],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([676, 1536, 49],"float32"), 1, None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 2, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 2048, 7, 2],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2037, 509, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 2, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 2048, 7, 2],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2045, 507, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 2, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 2048, 7, 2],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2048, 507, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([507, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 45361, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 50401, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 1051, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 414, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 460, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 591, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 591],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 9, 460],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 946, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([60, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([66, 768, 16, 9, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([128],"int64"), Tensor([16, 3175201],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([25401601, 16],"float32"), Tensor([25401601],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([3175201, 16],"float32"), Tensor([3175201],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([8],"int64"), Tensor([8, 6350401],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 4233601],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8467201],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 396901, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 793801, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([264601, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([529201, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 1209601, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 1209601],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 518401, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 103681, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 172801, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 241921, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 241921],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([69121, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 3907939],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 32567, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 3175201],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 2, 1587601],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 26461, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 127, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 256, 28, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([128, 256, 56, 28],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 97],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 97, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 49, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 256, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([7, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 111, 240, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 104, 240],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 256, 240, 104],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 776, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([517, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(x=Tensor([127, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([127, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 111, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 111],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 64, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 111, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 111],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 507, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 32401, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 4051, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), Tensor([847],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 706, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 565, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([424, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.bilinear(Tensor([25401601, 1],"float32"), Tensor([25401601, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 12700801],"float32"), Tensor([4, 1, 12700801],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 16934401],"float32"), Tensor([4, 1, 16934401],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 10161],"float32"), Tensor([1000, 5, 10161],"float32"), Tensor([1, 1000],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([50803201, 1],"float32"), Tensor([50803201, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"float32"), weight=Tensor([16, 10164, 313],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"float32"), weight=Tensor([16, 11109, 286],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"float32"), weight=Tensor([16, 12096, 263],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([53, 12096, 80],"float32"), Tensor([53, 12096, 80],"float32"), weight=Tensor([53, 12096, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([58, 11109, 80],"float32"), Tensor([58, 11109, 80],"float32"), weight=Tensor([58, 11109, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([63, 10164, 80],"float32"), Tensor([63, 10164, 80],"float32"), weight=Tensor([63, 10164, 80],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 300, 10585],"float32"), Tensor([16, 300, 10585],"float32"), weight=Tensor([16, 300, 10585],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([16, 39691, 80],"float32"), Tensor([16, 39691, 80],"float32"), weight=Tensor([16, 39691, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2117, 300, 80],"float32"), Tensor([2117, 300, 80],"float32"), weight=Tensor([2117, 300, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 169345],"float32"), Tensor([300, 169345],"float32"), weight=Tensor([300, 169345],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([50804, 1000],"float32"), Tensor([50804, 1000],"float32"), weight=Tensor([50804, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 28, 3544],"float32"), Tensor([512, 28, 3544],"float32"), weight=Tensor([512, 1, 3544],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 3544, 28],"float32"), Tensor([512, 3544, 28],"float32"), weight=Tensor([512, 3544, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), weight=Tensor([64801, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([1587601, 4, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 3175201, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 4, 3175201],"float64"), 1.0, None, )
paddle.nn.functional.celu(x=Tensor([1587601, 4, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 3175201, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 4, 3175201],"float64"), )
paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([176401, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([176401, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 352801, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 352801, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 352801, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 352801],"float64"), 3, "NCHW", )
paddle.nn.functional.conv1d(Tensor([16, 125, 25500],"float32"), Tensor([1, 125, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 49613],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([28, 32, 58081],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([1, 32, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([32, 32, 49613],"float32"), Tensor([32, 32, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([32, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 99226],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([14176, 512, 7],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 24807, 7],"float32"), Tensor([24807, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 128, 1551],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 28],"float32"), Tensor([256, 24807, 8],"float32"), bias=Tensor([24807],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 256, 99226],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 49613, 28],"float32"), Tensor([49613, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 49613],"float32"), Tensor([512, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 12404, 8],"float32"), bias=Tensor([12404],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 512, 7],"float32"), Tensor([512, 256, 388],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 907201, 28],"float32"), Tensor([907201, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([7088, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 191, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 191, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 192, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 192, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 193, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 193, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 193],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 193],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 192],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 192],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 191],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 191],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([752, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([758, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([764, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([16, 32, 320, 320],"float32"), Tensor([32, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 156, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 320, 156],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 56, 480, 480],"float32"), Tensor([56, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 414, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 414],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 480, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 28, 480, 480],"float32"), Tensor([28, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 207, 480],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 320, 320],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 480, 207],"float32"), Tensor([64, 1, 2, 2],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([16538, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([33076, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 66151, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 66151, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 66151],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 33076, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 33076, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 33076],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2451, 2, 2, 2],"float32"), Tensor([2451, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 9801, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([24807, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 49613, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 49613, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 49613],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([16934401, 3],"float32"), Tensor([16934401, 3],"float32"), Tensor([16934401],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([25401601, 3],"float32"), Tensor([25401601, 3],"float32"), Tensor([25401601],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([50803201, 3],"float64"), Tensor([50803201, 3],"float64"), Tensor([50803201],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([8467201, 3],"float64"), Tensor([8467201, 3],"float64"), Tensor([8467201],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 423361],"float32"), Tensor([10, 1, 423361],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 508033, 10],"float32"), Tensor([10, 508033, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([210, 241921],"float32"), Tensor([210, 241921],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([32, 1587601],"float32"), Tensor([32, 1587601],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([396901, 128],"float32"), Tensor([396901, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([423361, 12, 10],"float32"), Tensor([423361, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), axis=-1, eps=1e-08, )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 50304],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2048, 151936],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2048, 24807],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 335, 151936],"float32"), Tensor([1, 335, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 4096, 100352],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 4096, 12404],"float32"), Tensor([1, 4096, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 507, 100352],"float32"), Tensor([1, 507, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 1024, 6202],"float32"), Tensor([8, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 127, 50304],"float32"), Tensor([8, 127, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.dropout(Tensor([7576, 13412],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([7712, 13176],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([79381, 1280],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.dropout(Tensor([8168, 12440],"bfloat16"), 0.0, training=True, mode="upscale_in_train", )
paddle.nn.functional.elu(Tensor([1, 21504, 2363],"float32"), )
paddle.nn.functional.elu(Tensor([1, 25401601, 2],"float32"), )
paddle.nn.functional.elu(Tensor([10, 20, 254017],"float32"), )
paddle.nn.functional.elu(Tensor([10, 5080321, 1],"float32"), )
paddle.nn.functional.elu(Tensor([1182, 21504, 2],"float32"), )
paddle.nn.functional.elu(Tensor([15, 3386881],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([2540161, 20, 1],"float32"), )
paddle.nn.functional.elu(Tensor([2540161, 20],"float32"), 1.0, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([151936, 669],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([24807, 4096],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([100352, 1013],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 4097],"int64"), weight=Tensor([12404, 8192],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([24807, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([50304, 2020],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([1764, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3528, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.gather_tree(Tensor([11, 28, 8],"int64"), Tensor([11, 28, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 57],"int64"), Tensor([11, 4, 57],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 57, 4],"int64"), Tensor([11, 57, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([158, 4, 4],"int64"), Tensor([158, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 30, 4],"int64"), Tensor([21, 30, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 8, 15],"int64"), Tensor([21, 8, 15],"int64"), )
paddle.nn.functional.gather_tree(Tensor([79, 4, 8],"int64"), Tensor([79, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([79, 8, 4],"int64"), Tensor([79, 8, 4],"int64"), )
paddle.nn.functional.gelu(Tensor([11, 96, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 9, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 96, 9, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 96, 96, 45],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 6, 96, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 9, 96, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 96, 6, 768],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 96, 9, 512],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([128, 96, 96, 44],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([8, 96, 96, 768],"float32"), False, None, )
paddle.nn.functional.glu(Tensor([200, 498, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([209, 477, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([218, 457, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([30, 3308, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([30, 457, 3706],"float32"), -1, None, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 662, 768],"float32"), Tensor([100, 1, 662, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 662],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 1, 254017, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 1, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([100, 21, 768, 768],"float32"), Tensor([100, 21, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([172, 1, 544, 544],"float32"), Tensor([172, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 467, 544],"float32"), Tensor([200, 1, 467, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 467],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 1, 127009, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 1, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([200, 11, 544, 544],"float32"), Tensor([200, 11, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2026, 1, 544, 544],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2026, 1, 768, 768],"float32"), Tensor([2026, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([87, 1, 768, 768],"float32"), Tensor([87, 1, 12544, 2],"float32"), align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([1, 64, 80, 94, 311],"float32"), grid=Tensor([1, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 6, 80, 94, 311],"float32"), grid=Tensor([4, 6, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 7, 94, 311],"float32"), grid=Tensor([4, 280, 7, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 8, 311],"float32"), grid=Tensor([4, 280, 376, 8, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 27],"float32"), grid=Tensor([4, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 280, 605, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([4, 64, 80, 94, 311],"float32"), grid=Tensor([4, 451, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(x=Tensor([7, 64, 80, 94, 311],"float32"), grid=Tensor([7, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.group_norm(Tensor([30, 256, 16, 414],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 256, 24, 276],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 256, 40, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 256, 60, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 64, 32, 827],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
paddle.nn.functional.group_norm(Tensor([30, 64, 79, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
paddle.nn.functional.group_norm(Tensor([74, 256, 16, 168],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([74, 256, 24, 112],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.group_norm(Tensor([74, 64, 32, 336],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([64],"float32"), bias=Tensor([64],"float32"), )
paddle.nn.functional.hardshrink(Tensor([25401601],"float64"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([50803201],"float32"), -1, None, )
paddle.nn.functional.hardsigmoid(Tensor([1024, 49613, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 1, 87],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1024, 576, 87, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([12404, 4096],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([300, 169345],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([52921, 960, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([640, 79381, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([640, 960, 1, 83],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([640, 960, 83, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([88201, 576, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardswish(Tensor([256, 16, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([256, 80, 112, 23],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([256, 80, 23, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([51, 80, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 48, 112, 19],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 48, 19, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 64, 112, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 64, 14, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([512, 8, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([64, 64, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([85, 48, 112, 112],"float32"), None, )
paddle.nn.functional.hardtanh(Tensor([10, 20, 254017],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([10, 5080321, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([2540161, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([2822401, 3, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 2822401, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 2822401],"float64"), -3.4, 0, None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 254017],"float64"), Tensor([10, 10, 254017],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 508033, 5],"float64"), Tensor([10, 508033, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([508033, 10, 5],"float64"), Tensor([508033, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.instance_norm(Tensor([12404, 32, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 198451, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 32, 793801],"float32"), )
paddle.nn.functional.instance_norm(Tensor([388, 32, 32, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([776, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 1551, 64],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 3101, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 3101],"float64"), None, None, Tensor([32],"float64"), Tensor([32],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 6202],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.interpolate(Tensor([2, 256, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 113, 336, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 226, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 237, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 148, 336],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 296, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 311, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 148],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 296],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 320],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 336, 336],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.l1_loss(Tensor([1034, 3, 128, 128],"float32"), Tensor([1034, 3, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([16, 12355, 257],"float32"), Tensor([16, 12355, 257],"float32"), )
paddle.nn.functional.l1_loss(Tensor([16, 511, 6214],"float32"), Tensor([16, 511, 6214],"float32"), )
paddle.nn.functional.l1_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "none", )
paddle.nn.functional.l1_loss(Tensor([387, 511, 257],"float32"), Tensor([387, 511, 257],"float32"), )
paddle.nn.functional.l1_loss(Tensor([64, 3, 128, 2068],"float32"), Tensor([64, 3, 128, 2068],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 3, 2068, 128],"float32"), Tensor([64, 3, 2068, 128],"float32"), "mean", name=None, )
paddle.nn.functional.l1_loss(Tensor([64, 49, 128, 128],"float32"), Tensor([64, 49, 128, 128],"float32"), "mean", name=None, )
paddle.nn.functional.label_smooth(label=Tensor([128, 12, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([128, 40, 9923],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([160, 10, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([160, 32, 9923],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([256, 20, 9923],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([256, 6, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([38, 40, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([48, 32, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([76, 20, 33712],"float32"), epsilon=0.1, )
paddle.nn.functional.layer_norm(Tensor([115, 435, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([174, 286, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([226, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 7088, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.leaky_relu(Tensor([12, 26, 304, 544],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 32, 122, 1088],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 32, 608, 218],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 64, 122, 544],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 64, 304, 218],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([12, 7, 608, 1088],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([13, 64, 256, 256],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 32, 608, 1088],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([5, 64, 304, 544],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([64, 13, 256, 256],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([64, 64, 256, 49],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([64, 64, 49, 256],"float32"), 0.1, None, )
paddle.nn.functional.linear(x=Tensor([1, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 12404],"float32"), weight=Tensor([12404, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2, 25088],"float32"), weight=Tensor([25088, 2026],"float32"), bias=Tensor([2026],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2026, 25088],"float32"), weight=Tensor([25088, 4096],"float32"), bias=Tensor([4096],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4051, 12544],"float32"), weight=Tensor([12544, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4096, 12404],"float32"), weight=Tensor([12404, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4096, 12544],"float32"), weight=Tensor([12544, 4051],"float32"), bias=Tensor([4051],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([4096, 49613],"float32"), weight=Tensor([49613, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.local_response_norm(Tensor([10585, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 10585, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 141121, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 141121],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 47041],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 47041, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3529, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 3529],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 47041, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 47041, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3529, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3529, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([50803201, 1],"float32"), Tensor([50803201, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 254017],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 10, 508033],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 254017, 10],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10, 508033, 10],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([254017, 10, 10],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([508033, 10, 10],"float32"), None, )
paddle.nn.functional.log_sigmoid(x=Tensor([10, 10, 508033],"float32"), )
paddle.nn.functional.log_sigmoid(x=Tensor([10, 508033, 10],"float32"), )
paddle.nn.functional.log_sigmoid(x=Tensor([508033, 10, 10],"float32"), )
paddle.nn.functional.log_softmax(Tensor([128, 396901],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([264, 192612],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([2944, 17257],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([4224, 12028],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([7664, 6629],"float32"), axis=1, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 8467201],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 793801, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([529201, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([16538, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 24807, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 264601, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 264601],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.margin_cross_entropy(Tensor([1373060, 37],"float32"), Tensor([1373060],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float16"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([25401601, 37],"float32"), Tensor([25401601],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2746119, 37],"float16"), Tensor([2746119],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 10160641],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([686530, 37],"float64"), Tensor([686530],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([50803201],"float32"), Tensor([50803201],"float32"), Tensor([50803201],"float32"), 0.5, "mean", None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8467201],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([226801, 32, 7],"float32"), 7, )
paddle.nn.functional.max_pool1d(Tensor([91, 32, 17447],"float32"), 7, )
paddle.nn.functional.max_pool2d(Tensor([10, 128, 480, 83],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 128, 83, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 23, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 24, 112, 13],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 24, 13, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1536, 3, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([169, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 480, 480],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 13, 704, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 141, 704],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 704, 141],"float32"), kernel_size=3, stride=2, padding=1, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 16934401],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 16934401],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8467201],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8467201],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8467201],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 16934401],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 3175201, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3175201, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 3175201, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float32"), Tensor([1, 6350401, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 6350401, 8],"float64"), Tensor([1, 6350401, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([1058401, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1058401, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([1058401, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float32"), Tensor([2116801, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([2116801, 3, 8],"float64"), Tensor([2116801, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([1894, 8, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([3887, 16, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 2612, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 1154],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([3887, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 2612, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 16, 43, 1154],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 16, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 237, 86, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 1182],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 21, 1182],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 32, 2757, 9],"float32"), Tensor([64, 32, 2757, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 4201, 21, 9],"float32"), Tensor([64, 4201, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 2545, 39],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 1154],"float32"), Tensor([64, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([1894, 8, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 237, 86, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 2545, 39],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 8, 86, 39],"float32"), Tensor([64, 8, 86, 1154],"int32"), 2, 2, output_size=list[64,8,172,79,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 16, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([64, 972, 43, 19],"float32"), Tensor([64, 972, 43, 19],"int32"), 2, 2, output_size=list[64,16,86,39,], )
paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([64, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool2d(Tensor([8401, 32, 21, 9],"float32"), Tensor([8401, 32, 21, 9],"int32"), 2, 2, output_size=list[64,32,43,19,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 211681, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 282241, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 352801, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 423361],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 211681, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 282241, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 352801, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 423361],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 846721],"float64"), Tensor([1, 3, 4, 5, 846721],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 705601, 6],"float64"), Tensor([1, 3, 4, 705601, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 564481, 5, 6],"float64"), Tensor([1, 3, 564481, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 423361, 4, 5, 6],"float64"), Tensor([1, 423361, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([141121, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([141121, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([70561, 3, 4, 5, 6],"float64"), Tensor([70561, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.maxout(Tensor([100, 4, 21169, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 21169],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 42337],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 42337, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([1411201, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([705601, 4, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 42337],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 42337, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([1411201, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.mish(Tensor([12, 10585, 20, 20],"float32"), )
paddle.nn.functional.mish(Tensor([12, 128, 40, 827],"float32"), )
paddle.nn.functional.mish(Tensor([12, 128, 827, 40],"float32"), )
paddle.nn.functional.mish(Tensor([12, 256, 40, 414],"float32"), )
paddle.nn.functional.mish(Tensor([12, 256, 414, 40],"float32"), )
paddle.nn.functional.mish(Tensor([12, 2647, 40, 40],"float32"), )
paddle.nn.functional.mish(Tensor([12, 512, 20, 414],"float32"), )
paddle.nn.functional.mish(Tensor([12, 512, 414, 20],"float32"), )
paddle.nn.functional.mish(Tensor([125, 256, 40, 40],"float32"), )
paddle.nn.functional.mish(Tensor([249, 128, 40, 40],"float32"), )
paddle.nn.functional.mish(Tensor([249, 512, 20, 20],"float32"), )
paddle.nn.functional.mse_loss(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), "none", )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), reduction="mean", weight=Tensor([5, 5080321],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), weight=Tensor([5, 5080321],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), reduction="mean", weight=Tensor([5080321, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), weight=Tensor([5080321, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([12700801, 2],"float64"), Tensor([12700801],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([25401601, 2],"float64"), Tensor([25401601],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 5080321],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 40643, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([40643],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.normalize(Tensor([2009, 25288],"float32"), )
paddle.nn.functional.normalize(Tensor([2081, 24413],"float32"), )
paddle.nn.functional.normalize(Tensor([2331, 21795],"float32"), )
paddle.nn.functional.normalize(Tensor([99226, 512],"float32"), )
paddle.nn.functional.npair_loss(Tensor([18, 2822401],"float32"), positive=Tensor([18, 2822401],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.pad(Tensor([7573, 11, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7573, 8, 1678],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7710, 11, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7710, 8, 1648],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([8162, 10, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([8162, 8, 1557],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,2,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,3,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([9923, 8, 1280],"bfloat16"), list[0,6,0,0,0,0,], mode="constant", value=0, )
paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 508033],"float32"), Tensor([100, 508033],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([508033, 100],"float32"), Tensor([508033, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pixel_shuffle(Tensor([13, 256, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 388],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 388, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 776, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([49, 256, 64, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 25],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 25, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 49, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 64, 49],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([176401, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 176401, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 88201, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([352801, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([16934401, 3, 2],"float32"), Tensor([16934401, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 12700801, 2],"float32"), Tensor([4, 12700801, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2116801],"float32"), Tensor([4, 3, 2116801],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 4233601],"float32"), Tensor([4, 3, 4233601],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 8467201],"float32"), Tensor([4, 3, 8467201],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3175201, 2],"float32"), Tensor([4, 3175201, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 6350401, 2],"float32"), Tensor([4, 6350401, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4233601, 3, 2],"float32"), Tensor([4233601, 3, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([8467201, 3, 2],"float32"), Tensor([8467201, 3, 2],"float64"), )
paddle.nn.functional.prelu(Tensor([104, 128, 56, 69],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 128, 69, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 156, 56, 56],"float32"), Tensor([156],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([127, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 128, 56, 56],"float32"), Tensor([128],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 28, 56],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 256, 56, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 507, 28, 28],"float32"), Tensor([507],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([254, 256, 28, 28],"float32"), Tensor([256],"float32"), data_format="NCHW", )
paddle.nn.functional.relu(Tensor([10, 128, 480, 83],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 128, 83, 480],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 23, 480, 480],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 480, 480],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 352, 352],"float32"), )
paddle.nn.functional.relu(Tensor([64, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([640, 64, 112, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([640, 64, 12, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([640, 7, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 256, 352, 71],"float32"), )
paddle.nn.functional.relu(Tensor([8, 256, 71, 352],"float32"), )
paddle.nn.functional.relu(Tensor([8, 52, 352, 352],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 144, 112, 25],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 144, 25, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 192, 112, 19],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 192, 19, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([128, 32, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([22, 192, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([256, 16, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([256, 96, 112, 19],"float32"), )
paddle.nn.functional.relu6(Tensor([256, 96, 19, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([29, 144, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([43, 96, 112, 112],"float32"), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4233601],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3175201, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2116801, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1058401, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 1270081, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 1693441, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 1058401],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 2116801],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 846721, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 635041, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([423361, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([846721, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([101607, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([2822401, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 169345, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 2822401, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 2822401],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 169345, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 338689],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 705601],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 705601, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 705601, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 470401, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([470401, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([50803201],"int32"), maxlen=4, dtype="float32", )
paddle.nn.functional.sigmoid(Tensor([10, 32, 400, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([364, 304, 460],"float32"), )
paddle.nn.functional.sigmoid(Tensor([364, 416, 336],"float32"), )
paddle.nn.functional.sigmoid(Tensor([372, 304, 450],"float32"), )
paddle.nn.functional.sigmoid(Tensor([372, 407, 336],"float32"), )
paddle.nn.functional.sigmoid(Tensor([498, 304, 336],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 32, 400, 497],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 32, 497, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([8, 40, 400, 400],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 4, 1058401],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 423361, 10],"float64"), Tensor([2, 3, 423361, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 317521, 4, 10],"float64"), Tensor([2, 317521, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([211681, 3, 4, 10],"float64"), Tensor([211681, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.silu(Tensor([128, 128, 128, 25],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 128, 25, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 25, 128, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 256, 25, 64],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 256, 64, 25],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 64, 128, 49],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 64, 49, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([128, 97, 64, 64],"float32"), None, )
paddle.nn.functional.silu(Tensor([25, 128, 128, 128],"float32"), None, )
paddle.nn.functional.silu(Tensor([49, 256, 64, 64],"float32"), None, )
paddle.nn.functional.silu(Tensor([49, 64, 128, 128],"float32"), None, )
paddle.nn.functional.smooth_l1_loss(Tensor([1016065, 50],"float32"), Tensor([1016065, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([1017, 50000],"float32"), Tensor([1017, 50000],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 26543],"float32"), Tensor([1914, 26543],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([33960, 187, 8],"float32"), Tensor([33960, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 4245],"float32"), Tensor([64, 187, 4245],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 99226, 8],"float32"), Tensor([64, 99226, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([7, 7257601],"float32"), Tensor([7, 7257601],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.softmax(Tensor([10, 2304, 2304],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([3840, 1, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([3840, 4, 144, 23],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([3840, 4, 23, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4096, 1, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4096, 4, 144, 22],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([4096, 4, 22, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([60, 2304, 368],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([60, 368, 2304],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([613, 4, 144, 144],"float32"), -1, name=None, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1551, 16, 32, 64],"float32"), Tensor([1551, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 12404, 32, 64],"float32"), Tensor([2, 12404, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 24807, 64],"float32"), Tensor([2, 16, 24807, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 1, 49613],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 49613],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 793801],"float32"), Tensor([2, 16, 1, 793801],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 793801, 64],"float32"), Tensor([2, 16, 793801, 1],"int64"), axis=-1, )
paddle.nn.functional.softplus(Tensor([113401, 7, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([13, 10, 390794],"float32"), )
paddle.nn.functional.softplus(Tensor([13, 1007, 3881],"float32"), )
paddle.nn.functional.softplus(Tensor([13, 61062, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([14, 56701, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([14, 7, 518401],"float32"), )
paddle.nn.functional.softplus(Tensor([789, 1007, 64],"float32"), )
paddle.nn.functional.softplus(Tensor([79381, 10, 64],"float32"), )
paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([2822401, 3, 3],"float64"), 5, None, )
paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([3, 2822401, 3],"float64"), 5, None, )
paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 0, None, )
paddle.nn.functional.softshrink(Tensor([3, 3, 2822401],"float64"), 5, None, )
paddle.nn.functional.softshrink(Tensor([32, 15, 207, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 207, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 32, 52],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([32, 15, 8, 8, 827, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([32, 388, 8, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softshrink(Tensor([827, 15, 8, 8, 32, 2],"float32"), threshold=0.01, )
paddle.nn.functional.softsign(Tensor([12404, 4096],"float32"), )
paddle.nn.functional.softsign(Tensor([2822401, 3, 3],"float64"), None, )
paddle.nn.functional.softsign(Tensor([3, 2822401, 3],"float64"), None, )
paddle.nn.functional.softsign(Tensor([3, 3, 2822401],"float64"), None, )
paddle.nn.functional.softsign(Tensor([300, 169345],"float32"), )
paddle.nn.functional.softsign(Tensor([32, 1587601],"float32"), )
paddle.nn.functional.softsign(Tensor([396901, 128],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([10161, 100, 100],"float16"), Tensor([10161, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 4233601],"float64"), label=Tensor([3, 2, 1, 4233601],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 2116801, 2],"float64"), label=Tensor([3, 2, 2116801, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 4233601, 1, 2],"float64"), label=Tensor([3, 4233601, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float16"), Tensor([5081, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([5081, 100, 100],"float32"), Tensor([5081, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([6350401, 2, 1, 2],"float64"), label=Tensor([6350401, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 63505],"float32"), Tensor([8, 100, 63505],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 63505, 100],"float32"), Tensor([8, 63505, 100],"float32"), )
paddle.nn.functional.swish(Tensor([128, 32, 112, 112],"float32"), )
paddle.nn.functional.swish(Tensor([128, 96, 112, 37],"float32"), )
paddle.nn.functional.swish(Tensor([128, 96, 37, 112],"float32"), )
paddle.nn.functional.swish(Tensor([16, 22, 384, 384],"float32"), )
paddle.nn.functional.swish(Tensor([16, 24, 368, 368],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 130, 384],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 135, 368],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 368, 135],"float32"), )
paddle.nn.functional.swish(Tensor([16, 64, 384, 130],"float32"), )
paddle.nn.functional.swish(Tensor([43, 96, 112, 112],"float32"), )
paddle.nn.functional.swish(Tensor([6, 64, 368, 368],"float32"), )
paddle.nn.functional.swish(Tensor([6, 64, 384, 384],"float32"), )
paddle.nn.functional.tanh(Tensor([1016065, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([147015, 346],"float32"), None, )
paddle.nn.functional.tanh(Tensor([282600, 180],"float32"), None, )
paddle.nn.functional.tanh(Tensor([564481, 90],"float32"), None, )
paddle.nn.functional.tanh(Tensor([93401, 544],"float32"), None, )
paddle.nn.functional.tanhshrink(Tensor([2822401, 3, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(Tensor([3, 2822401, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(Tensor([3, 3, 2822401],"float64"), None, )
paddle.nn.functional.tanhshrink(Tensor([50803201],"float32"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([2822401, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(x=Tensor([3, 2822401, 3],"float64"), )
paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 2822401],"float64"), )
paddle.nn.functional.temporal_shift(Tensor([128, 127, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 28, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 56, 28],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 15, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 256, 56, 15],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 271, 28, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 15, 28],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 512, 28, 15],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 68, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 56, 56],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([64, 256, 56, 56],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.thresholded_relu(Tensor([100, 28225, 3, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 21169, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 21169],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 3, 42337],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 4, 42337, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([100, 56449, 3, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([1411201, 4, 3, 3],"float32"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([705601, 4, 3, 3],"float64"), 1.0, 0.0, None, )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 42337],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 42337, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 56449, 3, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([1411201, 4, 3, 3],"float32"), )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), Tensor([5, 5080321],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), Tensor([5080321, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 1241, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 26461, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 26461],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([338, 3, 224, 224],"float32"), 16, 16, )
paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([4135, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([64, 16, 224, 224],"float32"), 16, 16, )
paddle.nn.functional.unfold(Tensor([64, 3, 1182, 224],"float32"), 16, 16, )
paddle.nn.functional.unfold(Tensor([64, 3, 224, 1182],"float32"), 16, 16, )
paddle.nn.functional.zeropad2d(Tensor([169, 3, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([338, 3, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"float64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 127, 224, 224],"int64"), Tensor([4],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([4, 254, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 18901, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 18901],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 9451],"float64"), list[2,2,2,2,], )
paddle.nonzero(Tensor([510, 128, 28, 28],"float32"), )
paddle.nonzero(Tensor([510, 80, 28, 45],"float32"), )
paddle.nonzero(Tensor([510, 80, 45, 28],"float32"), )
paddle.nonzero(Tensor([511, 127, 28, 28],"float32"), )
paddle.nonzero(Tensor([511, 80, 28, 45],"float32"), )
paddle.nonzero(Tensor([511, 80, 45, 28],"float32"), )
paddle.nonzero(Tensor([512, 127, 28, 28],"float32"), )
paddle.nonzero(Tensor([512, 80, 28, 45],"float32"), )
paddle.nonzero(Tensor([512, 80, 45, 28],"float32"), )
paddle.nonzero(Tensor([811, 80, 28, 28],"float32"), )
paddle.not_equal(Tensor([13, 15266, 16, 4, 1],"int64"), Tensor([13, 15266, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 122124, 4, 1],"int64"), Tensor([13, 2, 122124, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 15266],"int64"), Tensor([13, 2, 16, 1, 15266],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 61062],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 61062, 1],"int64"), Tensor([13, 2, 16, 61062, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 244247, 4, 1],"int64"), Tensor([13, 2, 244247, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 30531, 16, 4, 1],"int64"), Tensor([13, 30531, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([198451, 2, 16, 4, 1],"int64"), Tensor([198451, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
paddle.not_equal(Tensor([99226, 2, 16, 4, 1],"int64"), Tensor([99226, 2, 16, 1, 8],"int64"), )
paddle.numel(Tensor([50803201],"float32"), )
paddle.ones_like(Tensor([144, 392, 901],"float32"), )
paddle.ones_like(Tensor([144, 901, 392],"float32"), )
paddle.ones_like(Tensor([160, 392, 811],"float32"), )
paddle.ones_like(Tensor([160, 811, 392],"float32"), )
paddle.ones_like(Tensor([176, 392, 737],"float32"), )
paddle.ones_like(Tensor([176, 737, 392],"float32"), )
paddle.ones_like(Tensor([331, 392, 392],"float32"), )
paddle.outer(Tensor([50803201],"float32"), Tensor([2],"float32"), )
paddle.outer(Tensor([50803201],"float32"), Tensor([32],"float32"), )
paddle.outer(Tensor([50803201],"float32"), Tensor([4],"float32"), )
paddle.pdist(Tensor([10, 5080321],"float32"), 0, )
paddle.pdist(Tensor([10, 5080321],"float32"), 1.0, )
paddle.pdist(Tensor([50, 508033],"float64"), 2.0, )
paddle.polar(Tensor([1, 793801, 64],"float32"), Tensor([1, 793801, 64],"float32"), )
paddle.polar(Tensor([1, 8192, 6202],"float32"), Tensor([1, 8192, 6202],"float32"), )
paddle.polar(Tensor([1, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([1, 8192, 64],"float32"), )
paddle.polar(Tensor([97, 8192, 64],"float32"), Tensor([97, 8192, 64],"float32"), )
paddle.polygamma(Tensor([10, 20, 254017],"float32"), 1, )
paddle.polygamma(Tensor([10, 5080321, 1],"float32"), 1, )
paddle.polygamma(Tensor([2, 12700801],"float64"), 1, )
paddle.polygamma(Tensor([2, 2, 6350401],"float64"), 2, )
paddle.polygamma(Tensor([2, 2116801, 6],"float64"), 2, )
paddle.polygamma(Tensor([2116801, 2, 6],"float64"), 2, )
paddle.polygamma(Tensor([2540161, 20, 1],"float32"), 1, )
paddle.polygamma(Tensor([4233601, 6],"float64"), 1, )
paddle.positive(Tensor([10, 5080321],"float32"), )
paddle.positive(Tensor([1693441, 3, 4, 5],"float16"), )
paddle.positive(Tensor([2, 1270081, 4, 5],"float32"), )
paddle.positive(Tensor([2, 2540161, 4, 5],"float16"), )
paddle.positive(Tensor([2, 3, 1693441, 5],"float32"), )
paddle.positive(Tensor([2, 3, 3386881, 5],"float16"), )
paddle.positive(Tensor([2, 3, 4, 2116801],"float32"), )
paddle.positive(Tensor([2, 3, 4, 4233601],"float16"), )
paddle.positive(Tensor([49613, 1024],"float32"), )
paddle.positive(Tensor([846721, 3, 4, 5],"float32"), )
paddle.pow(Tensor([1024, 1024, 25],"float64"), 2, )
paddle.pow(Tensor([1024, 1024, 49],"float32"), 2, )
paddle.pow(Tensor([1024, 3101, 8],"float64"), 2, )
paddle.pow(Tensor([1024, 6202, 8],"float32"), 2, )
paddle.pow(Tensor([22, 81, 94, 311],"float32"), 2.0, )
paddle.pow(Tensor([3101, 1024, 8],"float64"), 2, )
paddle.pow(Tensor([4, 435, 94, 311],"float32"), 2.0, )
paddle.pow(Tensor([4, 81, 505, 311],"float32"), 2.0, )
paddle.pow(Tensor([4, 81, 94, 1669],"float32"), 2.0, )
paddle.pow(Tensor([6202, 1024, 8],"float32"), 2, )
paddle.prod(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([16, 3175201],"float32"), -1, )
paddle.prod(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([49613, 1024],"float32"), -1, )
paddle.prod(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([2032129, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 2032129, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 2032129],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 2032129, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([2032129, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 2032129, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 2032129],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 1016065, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([1016065, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 1016065, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 1016065],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 254017],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 508033],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 10, 508033],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 254017, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 508033, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 508033, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([254017, 5, 5],"int64"), Tensor([254017, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([254017, 10, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([254017, 5, 5],"int64"), Tensor([508033, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([508033, 10, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([508033, 10, 10],"int32"), Tensor([508033, 5, 5],"int32"), Tensor([508033, 5, 5],"int32"), 1, "mul", True, False, )
paddle.rad2deg(Tensor([8, 16, 396901],"float32"), )
paddle.rad2deg(Tensor([8, 198451, 32],"float32"), )
paddle.rad2deg(Tensor([99226, 16, 32],"float32"), )
paddle.rad2deg(x=Tensor([1587601, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 1587601, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 1587601],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.rank(Tensor([10160641, 5],"float32"), )
paddle.rank(Tensor([3, 16934401],"float32"), )
paddle.rank(input=Tensor([12700801, 2],"float64"), )
paddle.rank(input=Tensor([2, 12700801],"float64"), )
paddle.rank(input=Tensor([3, 2, 2, 2116801],"float64"), )
paddle.rank(input=Tensor([3, 2, 2116801, 2],"float64"), )
paddle.rank(input=Tensor([3, 2116801, 2, 2],"float64"), )
paddle.rank(input=Tensor([3175201, 2, 2, 2],"float64"), )
paddle.reciprocal(Tensor([125, 1, 640, 640],"float32"), )
paddle.reciprocal(Tensor([16, 1, 4962, 640],"float32"), )
paddle.reciprocal(Tensor([16, 1, 640, 4962],"float32"), )
paddle.reciprocal(Tensor([16, 8, 640, 640],"float32"), )
paddle.reciprocal(Tensor([4, 1, 13231, 960],"float32"), )
paddle.reciprocal(Tensor([4, 1, 960, 13231],"float32"), )
paddle.reciprocal(Tensor([4, 14, 960, 960],"float32"), )
paddle.reciprocal(Tensor([56, 1, 960, 960],"float32"), )
paddle.reciprocal(Tensor([8, 1, 6616, 960],"float32"), )
paddle.reciprocal(Tensor([8, 1, 960, 6616],"float32"), )
paddle.reciprocal(Tensor([8, 7, 960, 960],"float32"), )
paddle.reduce_as(Tensor([30, 1270081, 40],"float32"), Tensor([1270081, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 254017],"float32"), Tensor([200, 254017],"float32"), )
paddle.reduce_as(Tensor([30, 200, 8468],"float32"), Tensor([200, 8468],"float32"), )
paddle.reduce_as(Tensor([30, 42337, 40],"float32"), Tensor([42337, 40],"float32"), )
paddle.reduce_as(Tensor([6351, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"float32"), Tensor([1, 2, 1270081, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 1270081, 4, 5],"int32"), Tensor([1, 2, 1270081, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"float32"), Tensor([1, 2, 3, 1693441, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 1693441, 5],"int32"), Tensor([1, 2, 3, 1693441, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 1058401],"float64"), Tensor([1, 2, 3, 4, 1058401],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"float32"), Tensor([1, 2, 3, 4, 2116801],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 2116801],"int32"), Tensor([1, 2, 3, 4, 2116801],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 846721, 5],"float64"), Tensor([1, 2, 3, 846721, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 635041, 4, 5],"float64"), Tensor([1, 2, 635041, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 423361, 3, 4, 5],"float64"), Tensor([1, 423361, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 846721, 3, 4, 5],"float32"), Tensor([1, 846721, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 846721, 3, 4, 5],"int32"), Tensor([1, 846721, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([211681, 2, 3, 4, 5],"float64"), Tensor([211681, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([423361, 2, 3, 4, 5],"float32"), Tensor([423361, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([423361, 2, 3, 4, 5],"int32"), Tensor([423361, 2, 3, 4, 5],"int32"), )
paddle.renorm(Tensor([10, 20, 254017],"float32"), 1.0, -1, 2.05, )
paddle.repeat_interleave(Tensor([1, 1500, 33869],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([1, 39691, 1280],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([14, 1, 384, 9451],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 1, 9451, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([14, 25, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([27, 1500, 1280],"float32"), 5, axis=0, )
paddle.repeat_interleave(Tensor([345, 1, 384, 384],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([5, 1, 13231, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([5, 1, 768, 13231],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([5, 18, 768, 768],"float32"), repeats=3, axis=1, )
paddle.repeat_interleave(Tensor([87, 1, 768, 768],"float32"), repeats=3, axis=1, )
paddle.reshape(Tensor([14176, 7168],"bfloat16"), list[-1,7168,], )
paddle.reverse(Tensor([12, 132301, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 264601, 8],"float64"), axis=0, )
paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=0, )
paddle.reverse(Tensor([12, 4, 529201],"float64"), axis=list[0,], )
paddle.reverse(Tensor([396901, 4, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([4, 12, 529201],"float64"), axis=1, )
paddle.reverse(Tensor([4, 198451, 32],"float64"), axis=1, )
paddle.reverse(Tensor([66151, 12, 32],"float64"), axis=1, )
paddle.reverse(Tensor([793801, 4, 8],"float64"), axis=0, )
paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 37, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 37, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 127],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([44, 96, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([64, 65, 96, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([64, 96, 65, 128],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([64, 96, 96, 87],"float32"), shifts=tuple(-6,-6,), axis=tuple(1,2,), )
paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([85, 56, 56, 192],"float32"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([396901, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 396901, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 396901, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 396901],"float64"), k=-1, axes=tuple(2,3,), )
paddle.round(Tensor([128, 396901],"float32"), )
paddle.round(Tensor([16, 1587601],"float64"), )
paddle.round(Tensor([396901, 128],"float32"), )
paddle.round(Tensor([99226, 256],"float64"), )
paddle.round(x=Tensor([3, 3, 5644801],"float32"), )
paddle.round(x=Tensor([3, 5644801, 3],"float32"), )
paddle.round(x=Tensor([5644801, 3, 3],"float32"), )
paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),Tensor([3, 4, 2116801],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 423361, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),Tensor([3, 4233601, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 846721, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),Tensor([3175201, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([635041, 4, 2, 5],"float64"),], )
paddle.rsqrt(Tensor([10000, 1694, 3],"float32"), )
paddle.rsqrt(Tensor([10000, 2, 1271],"float64"), )
paddle.rsqrt(Tensor([10000, 2, 2541],"float32"), )
paddle.rsqrt(Tensor([10000, 847, 3],"float64"), )
paddle.rsqrt(Tensor([13, 1007, 3881],"float32"), )
paddle.rsqrt(Tensor([13, 3907939, 1],"float32"), )
paddle.rsqrt(Tensor([4233601, 2, 3],"float64"), )
paddle.rsqrt(Tensor([50451, 1007, 1],"float32"), )
paddle.rsqrt(Tensor([8467201, 2, 3],"float32"), )
paddle.scale(Tensor([2, 256, 256, 388],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 388, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 388, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 194, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 194, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 194],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 256],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 256, 388],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 256, 388, 256],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([4, 388, 256, 256],"float16"), scale=1.1111111111111112, )
paddle.scale(Tensor([7, 256, 256, 256],"float16"), scale=1.1111111111111112, )
paddle.scatter(Tensor([262144, 194],"float32"), Tensor([197],"int32"), Tensor([197, 194],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 194],"float32"), Tensor([205],"int32"), Tensor([205, 194],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 194],"float32"), Tensor([219],"int32"), Tensor([219, 194],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 2314],"float32"), Tensor([219],"int32"), Tensor([219, 2314],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 2476],"float32"), Tensor([205],"int32"), Tensor([205, 2476],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 2569],"float32"), Tensor([197],"int32"), Tensor([197, 2569],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([197],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([205],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([262144, 64],"float32"), Tensor([219],"int32"), Tensor([7938, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([793801, 64],"float32"), Tensor([197],"int32"), Tensor([197, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([793801, 64],"float32"), Tensor([205],"int32"), Tensor([205, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([793801, 64],"float32"), Tensor([219],"int32"), Tensor([219, 64],"float32"), overwrite=True, )
paddle.scatter_nd(Tensor([128, 2],"int64"), Tensor([128, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 14176, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 12404],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 12404],"bfloat16"), )
paddle.scatter_nd_add(Tensor([1, 8192, 17069],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 17069],"bfloat16"), )
paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([585, 2],"int64"), Tensor([585, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([587, 2],"int64"), Tensor([587, 7168],"bfloat16"), )
paddle.scatter_nd_add(Tensor([2, 8192, 7168],"bfloat16"), Tensor([595, 2],"int64"), Tensor([595, 7168],"bfloat16"), )
paddle.searchsorted(Tensor([1024],"float32"), Tensor([50803201],"float32"), )
paddle.searchsorted(Tensor([1024],"float64"), Tensor([25401601],"float64"), )
paddle.searchsorted(Tensor([1024],"int32"), Tensor([50803201],"int32"), )
paddle.searchsorted(Tensor([25401601],"float64"), Tensor([25401601],"float64"), )
paddle.searchsorted(Tensor([25401601],"float64"), Tensor([512],"float64"), )
paddle.searchsorted(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.searchsorted(Tensor([50803201],"float32"), Tensor([512],"float32"), )
paddle.searchsorted(Tensor([50803201],"int32"), Tensor([50803201],"int32"), )
paddle.searchsorted(Tensor([50803201],"int32"), Tensor([512],"int32"), )
paddle.select_scatter(Tensor([12700801, 3, 4],"float32"), Tensor([12700801, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([1693441, 3, 4, 5],"float64"), Tensor([1693441, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 211681, 4, 5, 6],"int32"), Tensor([2, 211681, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 2540161, 4, 5],"float64"), Tensor([2, 2540161, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 25401601],"float32"), Tensor([2, 25401601],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 282241, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 1058401],"float64"), Tensor([2, 3, 1058401],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 1411201, 6],"int32"), Tensor([2, 3, 1411201, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 352801, 6],"int32"), Tensor([2, 3, 352801, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 1693441],"int32"), Tensor([2, 3, 5, 1693441],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 423361],"int32"), Tensor([2, 3, 5, 423361],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 8467201],"float32"), Tensor([2, 8467201],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 846721, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 6350401, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 635041, 4, 5],"float64"), Tensor([2, 635041, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 846721, 4, 5, 6],"int32"), Tensor([2, 846721, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([4233601, 3, 4],"float32"), Tensor([4233601, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([423361, 3, 4, 5],"float64"), Tensor([423361, 3, 5],"float64"), 2, 1, )
paddle.sgn(Tensor([12, 1058401, 2],"float64"), )
paddle.sgn(Tensor([12, 20, 105841],"float64"), )
paddle.sgn(Tensor([12, 20, 211681],"float32"), )
paddle.sgn(Tensor([12, 2116801, 2],"float32"), )
paddle.sgn(Tensor([1270081, 20, 2],"float32"), )
paddle.sgn(Tensor([635041, 20, 2],"float64"), )
paddle.shape(Tensor([1, 1600, 376, 280],"float32"), )
paddle.shape(Tensor([13, 128, 256, 256],"float16"), )
paddle.shape(Tensor([4, 121, 376, 280],"float32"), )
paddle.shape(Tensor([4, 128, 256, 388],"float32"), )
paddle.shape(Tensor([4, 128, 256, 776],"float16"), )
paddle.shape(Tensor([4, 128, 388, 256],"float32"), )
paddle.shape(Tensor([4, 128, 776, 256],"float16"), )
paddle.shape(Tensor([4, 1600, 29, 280],"float32"), )
paddle.shape(Tensor([4, 1600, 376, 22],"float32"), )
paddle.shape(Tensor([4, 194, 256, 256],"float32"), )
paddle.shape(Tensor([4, 388, 256, 256],"float16"), )
paddle.shape(Tensor([7, 128, 256, 256],"float32"), )
paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([12700801, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([25401601, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 6350401, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.sign(Tensor([12404, 32, 128],"float32"), )
paddle.sign(Tensor([32, 12404, 128],"float32"), )
paddle.sign(Tensor([32, 32, 49613],"float32"), )
paddle.sign(Tensor([64, 1, 28, 28351],"float32"), )
paddle.sign(Tensor([64, 1, 28351, 28],"float32"), )
paddle.sign(Tensor([64, 1013, 28, 28],"float32"), )
paddle.sign(Tensor([64801, 1, 28, 28],"float32"), )
paddle.sign(Tensor([66151, 1, 384],"int64"), )
paddle.sign(Tensor([7, 1, 3628801],"int64"), )
paddle.sign(Tensor([7, 9451, 384],"int64"), )
paddle.signal.stft(Tensor([16, 3175201],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 3175201],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 3175201],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([1993, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([1993, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([1993, 25500],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
paddle.signbit(Tensor([11, 17, 271],"int32"), )
paddle.signbit(Tensor([11, 17, 543],"int16"), )
paddle.signbit(Tensor([11, 461, 10],"int32"), )
paddle.signbit(Tensor([11, 923, 10],"int16"), )
paddle.signbit(Tensor([12, 20, 211],"float32"), )
paddle.signbit(Tensor([12, 2116, 2],"float32"), )
paddle.signbit(Tensor([1270, 20, 2],"float32"), )
paddle.signbit(Tensor([298, 17, 10],"int32"), )
paddle.signbit(Tensor([597, 17, 10],"int16"), )
paddle.sin(Tensor([128512, 396],"float32"), )
paddle.sin(Tensor([254017, 200],"float32"), )
paddle.sin(Tensor([50000, 1017],"float32"), )
paddle.sin(Tensor([508033, 100],"float32"), )
paddle.sin(Tensor([68608, 741],"float32"), )
paddle.sinc(Tensor([16, 1587601],"float64"), )
paddle.sinc(Tensor([396901, 64],"float64"), )
paddle.sinh(Tensor([8, 16, 396901],"float32"), )
paddle.sinh(Tensor([8, 198451, 32],"float32"), )
paddle.sinh(Tensor([99226, 16, 32],"float32"), )
paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([65344, 1555],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[0,], ends=list[8168,], )
paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[16336,], ends=list[24504,], )
paddle.slice(Tensor([79381, 1280],"bfloat16"), axes=list[0,], starts=list[24504,], ends=list[32672,], )
paddle.slice_scatter(Tensor([8, 1058401, 3, 9],"float32"), Tensor([8, 1058401, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 117601, 3, 9],"float64"), Tensor([8, 117601, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 235201, 3, 9],"float32"), Tensor([8, 235201, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 423361, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 529201, 3, 9],"float64"), Tensor([8, 529201, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 117601, 9],"float32"), Tensor([8, 6, 117601, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 211681, 5],"float32"), Tensor([8, 2, 211681, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 264601, 9],"float64"), Tensor([8, 6, 264601, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 1058401],"float32"), Tensor([8, 2, 3, 1058401],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 176401],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 2, 3, 352801],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 352801],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 529201, 9],"float32"), Tensor([8, 6, 529201, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 58801, 9],"float64"), Tensor([8, 6, 58801, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 635041, 5],"float32"), Tensor([8, 2, 635041, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.sqrt(Tensor([128, 396901],"float32"), )
paddle.sqrt(Tensor([18, 15, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([259, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 13, 256, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 1103, 256],"float32"), )
paddle.sqrt(Tensor([4, 15, 3, 256, 1103],"float32"), )
paddle.sqrt(Tensor([4, 65, 3, 256, 256],"float32"), )
paddle.sqrt(Tensor([544, 93431],"float32"), )
paddle.sqrt(Tensor([64, 13, 256, 256],"float32"), )
paddle.sqrt(Tensor([64, 3, 1034, 256],"float32"), )
paddle.sqrt(Tensor([64, 3, 256, 1034],"float32"), )
paddle.square(Tensor([104, 488493],"float32"), )
paddle.square(Tensor([128, 396901],"float32"), )
paddle.square(Tensor([24904, 12, 170, 1],"float32"), )
paddle.square(Tensor([3548, 12, 1194, 1],"float32"), )
paddle.square(Tensor([3548, 12, 170, 8],"float32"), )
paddle.square(Tensor([3548, 85, 170, 1],"float32"), )
paddle.square(Tensor([544, 93431],"float32"), )
paddle.squeeze(Tensor([10, 512, 1, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([105344, 483],"float32"), )
paddle.squeeze(Tensor([396901, 128],"float32"), )
paddle.squeeze(Tensor([421120, 25, 5],"float32"), axis=-1, )
paddle.squeeze(Tensor([421120, 31, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([508033, 25, 4],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 512, 1, 100, 125],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 512, 1, 125, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 512, 2, 100, 100],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 636, 1, 100, 100],"float32"), axis=list[2,], )
paddle.stack(list[Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),Tensor([11, 32, 36828, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),Tensor([11, 32, 38367, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),Tensor([14176, 7168],"bfloat16"),], axis=0, )
paddle.stack(list[Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),Tensor([7168, 14176],"bfloat16"),], axis=0, )
paddle.stack(list[Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),Tensor([8, 32, 36828, 6],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),Tensor([8, 32, 38367, 6],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),Tensor([8, 32, 49613, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),Tensor([8, 42, 38367, 4],"float32"),], axis=-2, )
paddle.stack(list[Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),Tensor([8, 44, 36828, 4],"float32"),], axis=-2, )
paddle.stanh(x=Tensor([12700801, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 12700801],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 25401601],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 3, 2, 2116801],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 3, 2116801, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 3175201, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2116801, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([25401601, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.std(Tensor([1, 1270081, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 1693441, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 2116801],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 4233601],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 846721, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 635041, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1587601, 32],"float32"), )
paddle.std(Tensor([211681, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([32, 1587601],"float32"), )
paddle.std(Tensor([423361, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.strided_slice(x=Tensor([3, 4, 352801, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 423361],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 846721],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 705601, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([423361, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.subtract(Tensor([24904, 12, 170, 1],"float32"), Tensor([24904, 12, 170, 1],"float32"), )
paddle.subtract(Tensor([3548, 12, 1194, 1],"float32"), Tensor([3548, 12, 1194, 1],"float32"), )
paddle.subtract(Tensor([3548, 12, 170, 1],"float32"), Tensor([3548, 12, 170, 8],"float32"), )
paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 1],"float32"), )
paddle.subtract(Tensor([3548, 12, 170, 8],"float32"), Tensor([3548, 12, 170, 8],"float32"), )
paddle.subtract(Tensor([3548, 85, 170, 1],"float32"), Tensor([3548, 85, 170, 1],"float32"), )
paddle.subtract(Tensor([517, 4, 3, 64, 128],"float32"), Tensor([517, 4, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 64, 1379],"float32"), Tensor([64, 3, 3, 64, 1379],"float32"), )
paddle.subtract(Tensor([64, 3, 3, 690, 128],"float32"), Tensor([64, 3, 3, 690, 128],"float32"), )
paddle.subtract(Tensor([64, 3, 33, 64, 128],"float32"), Tensor([64, 3, 33, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 33, 3, 64, 128],"float32"), Tensor([64, 33, 3, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 25, 64, 128],"float32"), Tensor([64, 4, 25, 64, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 517, 128],"float32"), Tensor([64, 4, 3, 517, 128],"float32"), )
paddle.subtract(Tensor([64, 4, 3, 64, 1034],"float32"), Tensor([64, 4, 3, 64, 1034],"float32"), )
paddle.subtract(Tensor([690, 3, 3, 64, 128],"float32"), Tensor([690, 3, 3, 64, 128],"float32"), )
paddle.sum(Tensor([3544, 32, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6017, 19, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6017, 32, 528],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6036, 19, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6036, 32, 527],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6078, 19, 896],"bfloat16"), axis=1, keepdim=False, )
paddle.sum(Tensor([6078, 32, 523],"bfloat16"), axis=1, keepdim=False, )
paddle.t(Tensor([10, 5080321],"float32"), )
paddle.t(Tensor([20, 2540161],"float32"), )
paddle.t(Tensor([2540161, 20],"float32"), )
paddle.t(Tensor([49613, 512],"int64"), )
paddle.t(Tensor([5080321, 10],"float32"), )
paddle.t(Tensor([512, 49613],"int64"), )
paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", )
paddle.take(Tensor([12700801, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([12700801, 4],"float32"), Tensor([6350401, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 16934401],"float32"), Tensor([2, 8467201],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 12700801],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([8467201, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([3175201, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 5080321],"int64"), mode="wrap", )
paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="clip", )
paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8467201],"int64"), mode="wrap", )
paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 8467201],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([6350401, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="clip", )
paddle.take(Tensor([6350401, 4],"float64"), Tensor([6350401, 8],"int64"), mode="wrap", )
paddle.take_along_axis(Tensor([1024, 384],"float32"), Tensor([1024, 24807],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 24807],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 7],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1024, 49613],"float32"), Tensor([1024, 8],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1051, 63, 768],"float32"), axis=1, indices=Tensor([1051, 7, 768],"int64"), )
paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 7],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([132301, 384],"float32"), Tensor([132301, 8],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3175201, 384],"float32"), Tensor([3175201, 8],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3628801, 384],"float32"), Tensor([3628801, 7],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([4726, 63, 768],"float32"), axis=1, indices=Tensor([4726, 7, 768],"int64"), )
paddle.take_along_axis(Tensor([8, 63, 100801],"float32"), axis=1, indices=Tensor([8, 7, 100801],"int64"), )
paddle.take_along_axis(Tensor([8, 63, 453601],"float32"), axis=1, indices=Tensor([8, 7, 453601],"int64"), )
paddle.take_along_axis(Tensor([8, 63, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), )
paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 4135, 768],"int64"), )
paddle.take_along_axis(Tensor([8, 8269, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
paddle.tan(Tensor([8, 16, 396901],"float32"), )
paddle.tan(Tensor([8, 198451, 32],"float32"), )
paddle.tan(Tensor([99226, 16, 32],"float32"), )
paddle.tanh(Tensor([16, 125, 25500],"float32"), )
paddle.tanh(Tensor([16, 64, 49613],"float32"), )
paddle.tanh(Tensor([28, 32, 241, 241],"float32"), )
paddle.tanh(Tensor([32, 64, 25500],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 1, 60],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 2, 40],"float32"), )
paddle.tanh(Tensor([64, 26, 764, 1, 40],"float32"), )
paddle.tanh(Tensor([64, 39, 512, 1, 40],"float32"), )
paddle.tanh(Tensor([8, 110, 241, 241],"float32"), )
paddle.tanh(Tensor([8, 32, 241, 824],"float32"), )
paddle.tanh(Tensor([8, 32, 824, 241],"float32"), )
paddle.tanh(Tensor([96, 26, 512, 1, 40],"float32"), )
paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([226801, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 226801, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 226801, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 396901],"int64"), tuple(2,6,), axis=3, )
paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([406426, 5, 5, 5],"float32"), Tensor([406426, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 406426, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 406426, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 406426],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 406426, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 406426, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 406426],"float32"), list[0,], )
paddle.tensordot(x=Tensor([4, 105841, 3, 5, 4],"float64"), y=Tensor([105841, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 158761, 5, 4],"float64"), y=Tensor([2, 4, 158761, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 3, 132301, 4],"float64"), y=Tensor([2, 4, 3, 132301, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 3, 264601, 4],"float64"), y=Tensor([2, 4, 3, 264601, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 211681],"float64"), y=Tensor([2, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 3, 5, 4],"float64"), y=Tensor([2, 4, 3, 5, 211681],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 79381, 5, 4],"float64"), y=Tensor([2, 4, 79381, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 52921, 3, 5, 4],"float64"), y=Tensor([52921, 4, 3, 5, 8],"float64"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tile(Tensor([102426, 248, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
paddle.tile(Tensor([1511, 10, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 16538, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 16538],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 776, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 259, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 10, 1, 5475, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 58, 5475],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 95, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 259, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 944, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([216, 117601, 1, 1, 2],"float32"), list[1,1,1,1,1,], )
paddle.tile(Tensor([216, 248, 1, 1, 949],"float32"), list[1,1,1,1,1,], )
paddle.tile(Tensor([216, 248, 1, 475, 2],"float32"), list[1,1,1,1,1,], )
paddle.tile(Tensor([216, 248, 475, 1, 2],"float32"), list[1,1,1,1,1,], )
paddle.tile(Tensor([4135, 1, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tolist(Tensor([10160, 5],"float32"), )
paddle.tolist(Tensor([2, 1270],"int64"), )
paddle.tolist(Tensor([2, 25400],"float32"), )
paddle.tolist(Tensor([8467, 3],"int64"), )
paddle.topk(Tensor([138, 369303],"float32"), k=1, axis=0, )
paddle.topk(Tensor([146, 349866],"float32"), k=1, axis=0, )
paddle.topk(Tensor([148, 343728],"float32"), k=1, axis=0, )
paddle.topk(Tensor([49, 1036801],"float32"), k=1, axis=0, )
paddle.topk(Tensor([53, 958551],"float32"), k=1, axis=0, )
paddle.topk(Tensor([55, 923695],"float32"), k=1, axis=0, )
paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([2, 3, 4233601],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([2, 6350401, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([3, 8467201],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(x=Tensor([4233601, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([6350401, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.transpose(Tensor([2, 150, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 7168, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([4, 150, 166, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([4, 150, 512, 166],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([4, 3584, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([4, 49, 512, 512],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([6, 2363, 7168],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([6, 3584, 4726],"bfloat16"), list[0,2,1,], )
paddle.transpose(Tensor([6, 7168, 2363],"bfloat16"), list[0,2,1,], )
paddle.tril(Tensor([1, 1, 2048, 24807],"bool"), )
paddle.tril(Tensor([1, 1, 2048, 24807],"float32"), )
paddle.tril(Tensor([1, 1, 24807, 2048],"bool"), )
paddle.tril(Tensor([1, 1, 24807, 2048],"float32"), )
paddle.tril(Tensor([1, 13, 2048, 2048],"bool"), )
paddle.tril(Tensor([1, 13, 2048, 2048],"float32"), )
paddle.tril(Tensor([13, 1, 2048, 2048],"bool"), )
paddle.tril(Tensor([13, 1, 2048, 2048],"float32"), )
paddle.tril(Tensor([2048, 24807],"bool"), )
paddle.tril(Tensor([24807, 2048],"bool"), )
paddle.triu(Tensor([1, 1, 1024, 99226],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 12404, 4096],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 2048, 49613],"float16"), )
paddle.triu(Tensor([1, 1, 4096, 12404],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 49613, 2048],"float16"), )
paddle.triu(Tensor([1, 1, 99226, 1024],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 25, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 4, 4096, 4096],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 97, 1024, 1024],"float16"), diagonal=1, )
paddle.triu(Tensor([25, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([4, 1, 4096, 4096],"float32"), diagonal=1, )
paddle.triu(Tensor([97, 1, 1024, 1024],"float16"), diagonal=1, )
paddle.trunc(Tensor([20, 2540161],"float32"), )
paddle.trunc(Tensor([2540161, 20],"float32"), )
paddle.trunc(input=Tensor([117601, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([19601, 6, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 39201, 6, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 39201, 6, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 39201, 6],"float64"), )
paddle.trunc(input=Tensor([3, 6, 6, 6, 39201],"float64"), )
paddle.trunc(input=Tensor([6, 117601, 6, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 117601, 6],"float64"), )
paddle.trunc(input=Tensor([6, 6, 6, 117601],"float64"), )
paddle.unbind(Tensor([2, 3, 1058401, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 3, 8, 1058401],"float32"), axis=0, )
paddle.unbind(Tensor([2, 396901, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([3, 3386881, 5],"float32"), axis=0, )
paddle.unbind(Tensor([3, 9, 1881601],"float32"), axis=0, )
paddle.unbind(Tensor([4, 2116801, 6],"float32"), )
paddle.unbind(Tensor([4, 5, 2540161],"float32"), )
paddle.unflatten(x=Tensor([4, 1587601, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 2116801],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 2116801],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 4233601],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 793801, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 793801, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([529201, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unfold(Tensor([5, 10160641],"float32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 20321281],"float16"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5080321],"float64"), 0, 5, 1, )
paddle.unique(Tensor([25401601],"int64"), )
paddle.unique(Tensor([25401601],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique_consecutive(Tensor([25401601],"float64"), )
paddle.unique_consecutive(Tensor([25401601],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([2540],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unsqueeze(Tensor([25, 1024, 1024],"int64"), 1, )
paddle.unsqueeze(Tensor([3970, 50, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([4, 1024, 6202],"int64"), 1, )
paddle.unsqueeze(Tensor([4, 6202, 1024],"int64"), 1, )
paddle.unsqueeze(Tensor([416, 478, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([416, 50, 2443],"float32"), axis=2, )
paddle.unsqueeze(Tensor([512, 388, 256],"float32"), axis=2, )
paddle.unsqueeze(Tensor([512, 50, 1985],"float32"), axis=2, )
paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-1, )
paddle.unstack(Tensor([338689, 10, 15],"float32"), axis=-2, )
paddle.unstack(Tensor([5, 10, 1016065],"float32"), axis=-2, )
paddle.unstack(Tensor([5, 677377, 15],"float32"), axis=-1, )
paddle.unstack(x=Tensor([2, 32, 793801],"float32"), axis=0, )
paddle.unstack(x=Tensor([2, 49613, 512],"float32"), axis=0, )
paddle.unstack(x=Tensor([3101, 32, 512],"float32"), axis=0, )
paddle.var(Tensor([264601, 192, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 132301, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 192, 1, 690],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 192, 690, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 96, 1, 1379],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([384, 96, 1379, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([529201, 96, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([58801, 96, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([96, 58801, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([96, 96, 1838, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([96, 96, 3, 1838],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.vecdot(Tensor([12700801, 4],"float32"), Tensor([12700801, 4],"float32"), axis=-1, )
paddle.vecdot(Tensor([1270081, 4, 5],"float64"), Tensor([1270081, 4, 5],"float64"), axis=1, )
paddle.vecdot(Tensor([2, 3, 4233601],"float64"), Tensor([2, 3, 4233601],"float64"), axis=-1, )
paddle.vecdot(Tensor([2, 3175201, 4],"float64"), Tensor([2, 3175201, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([2116801, 3, 4],"float64"), Tensor([2116801, 3, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([3, 16934401],"float32"), Tensor([3, 16934401],"float32"), axis=-1, )
paddle.vecdot(Tensor([3, 1693441, 5],"float64"), Tensor([3, 1693441, 5],"float64"), axis=1, )
paddle.vecdot(Tensor([3, 4, 2116801],"float64"), Tensor([3, 4, 2116801],"float64"), axis=1, )
paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[-1,], )
paddle.view(Tensor([10, 10, 10, 50804],"float32"), list[10,100,-1,], )
paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[-1,], )
paddle.view(Tensor([10, 10, 25402, 20],"float32"), list[10,100,-1,], )
paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([10, 25402, 10, 20],"float32"), list[10,100,-1,], )
paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[-1,], )
paddle.view(Tensor([25402, 10, 10, 20],"float32"), list[10,100,-1,], )
paddle.view_as(Tensor([10, 10, 10, 50804],"float32"), Tensor([10, 100, 50804],"float32"), )
paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([2116801, 4, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 1411201, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 1058401],"int64"), list[2,4,], )
paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),Tensor([3, 4, 2, 1058401],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 1058401],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),Tensor([3, 4, 423361, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 423361, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),Tensor([3, 846721, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 846721, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),Tensor([635041, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([635041, 4, 2, 5],"float64"),], )
paddle.where(Tensor([1, 400, 127009],"bool"), Tensor([1, 400, 127009],"float32"), Tensor([1, 400, 127009],"float32"), )
paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), )
paddle.where(Tensor([1, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
paddle.where(Tensor([1, 772, 65856],"bool"), Tensor([1, 772, 65856],"float32"), Tensor([1, 772, 65856],"float32"), )
paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([1, 400, 65856],"float32"), Tensor([1, 400, 65856],"float32"), )
paddle.where(Tensor([2, 400, 65856],"bool"), Tensor([2, 400, 65856],"float32"), Tensor([2, 400, 65856],"float32"), )
paddle.where(Tensor([4, 125, 320, 320],"bool"), Tensor([4, 125, 320, 320],"float32"), Tensor([4, 125, 320, 320],"float32"), )
paddle.where(Tensor([4, 280, 376, 25, 5],"bool"), Tensor([4, 280, 376, 25, 5],"float32"), Tensor([4, 280, 376, 25, 5],"float32"), )
paddle.where(Tensor([4, 280, 376, 41, 3],"bool"), Tensor([4, 280, 376, 41, 3],"float32"), Tensor([4, 280, 376, 41, 3],"float32"), )
paddle.where(Tensor([4, 280, 605, 25, 3],"bool"), Tensor([4, 280, 605, 25, 3],"float32"), Tensor([4, 280, 605, 25, 3],"float32"), )
paddle.where(Tensor([4, 451, 376, 25, 3],"bool"), Tensor([4, 451, 376, 25, 3],"float32"), Tensor([4, 451, 376, 25, 3],"float32"), )
paddle.where(Tensor([4, 64, 320, 621],"bool"), Tensor([4, 64, 320, 621],"float32"), Tensor([4, 64, 320, 621],"float32"), )
paddle.where(Tensor([4, 64, 621, 320],"bool"), Tensor([4, 64, 621, 320],"float32"), Tensor([4, 64, 621, 320],"float32"), )
paddle.where(Tensor([7, 280, 376, 25, 3],"bool"), Tensor([7, 280, 376, 25, 3],"float32"), Tensor([7, 280, 376, 25, 3],"float32"), )
paddle.where(Tensor([8, 64, 320, 320],"bool"), Tensor([8, 64, 320, 320],"float32"), Tensor([8, 64, 320, 320],"float32"), )
paddle.zeros_like(Tensor([16, 64, 320, 320],"float16"), )
paddle.zeros_like(Tensor([4, 1051, 12096],"float32"), )
paddle.zeros_like(Tensor([4, 125, 320, 320],"float32"), )
paddle.zeros_like(Tensor([4, 249, 320, 320],"float16"), )
paddle.zeros_like(Tensor([4, 525, 24193],"float32"), )
paddle.zeros_like(Tensor([4, 64, 1241, 320],"float16"), )
paddle.zeros_like(Tensor([4, 64, 320, 1241],"float16"), )
paddle.zeros_like(Tensor([4, 64, 320, 621],"float32"), )
paddle.zeros_like(Tensor([4, 64, 621, 320],"float32"), )
paddle.zeros_like(Tensor([8, 64, 320, 320],"float32"), )
paddle.zeros_like(Tensor([9, 525, 12096],"float32"), )
