paddle.i1e(Tensor([25401601],"float64"), )
paddle.i1e(Tensor([50803201],"float32"), )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7576, 13412],"bfloat16"), Tensor([7576, 13412],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([7712, 13176],"bfloat16"), Tensor([7712, 13176],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([79381, 1280],"bfloat16"), Tensor([79381, 1280],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_dropout_add(Tensor([8168, 12440],"bfloat16"), Tensor([8168, 12440],"bfloat16"), p=0.0, training=True, mode="upscale_in_train", name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 14176, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 12404],"bfloat16"), Tensor([12404, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 16384],"bfloat16"), Tensor([16384, 6202],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 24807],"bfloat16"), Tensor([24807, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 4096, 8192],"bfloat16"), Tensor([8192, 12404],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 6202, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 12404],"bfloat16"), Tensor([12404, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 8192, 7168],"bfloat16"), Tensor([7168, 14176],"bfloat16"), Tensor([14176],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([2, 4096, 16384],"bfloat16"), Tensor([16384, 8192],"bfloat16"), None, False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([2, 8192, 7168],"bfloat16"), Tensor([7168, 12800],"bfloat16"), Tensor([12800],"bfloat16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 4096, 8192],"bfloat16"), Tensor([8192, 100352],"bfloat16"), None, transpose_weight=False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1016065, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1270081, 30],"float32"), Tensor([40, 1270081],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([1693441, 30],"float32"), Tensor([40, 1693441],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([1270081, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1270081],"float32"), Tensor([40, 1270081],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([1693441, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 1693441],"float32"), Tensor([40, 1693441],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([1016065, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 1016065],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 1016065],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([1016065, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.swiglu(Tensor([14176, 7168],"bfloat16"), )
paddle.incubate.segment_max(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([301, 16934],"float32"), Tensor([301],"int32"), )
paddle.incubate.segment_min(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 16934401],"float32"), Tensor([3],"int32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1013, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([145, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 338, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4511, 11, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 203, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 7088, 32, 32],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([5081],"int32"), 2, Tensor([100, 100, 5081],"float32"), )
paddle.index_add(Tensor([100, 100, 25402],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 25402],"float32"), )
paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5081],"float32"), )
paddle.index_add(Tensor([100, 100, 5081],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 101607, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 2540161],"float32"), Tensor([20],"int32"), 0, Tensor([20, 2540161],"float32"), )
paddle.index_add(Tensor([100, 508033],"float32"), Tensor([20],"int32"), 0, Tensor([20, 508033],"float32"), )
paddle.index_add(Tensor([10160641, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_fill(Tensor([10, 1016065, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 169345],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 338689],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 677377],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 254017, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 508033, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([169345, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([338689, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([677377, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 99, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 74, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([193, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_sample(Tensor([1865664, 100],"float32"), Tensor([1865664, 14],"int64"), )
paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([1865664, 28],"float32"), Tensor([1865664, 14],"int64"), )
paddle.index_sample(Tensor([25401601, 100],"float32"), Tensor([25401601, 1],"int64"), )
paddle.index_sample(Tensor([25401601, 20],"float32"), Tensor([25401601, 1],"int64"), )
paddle.index_sample(Tensor([2540161, 20],"float32"), Tensor([2540161, 1],"int64"), )
paddle.index_sample(Tensor([508033, 100],"float32"), Tensor([508033, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 1],"int64"), )
paddle.index_sample(Tensor([5135296, 10],"float32"), Tensor([5135296, 5],"int64"), )
paddle.index_sample(Tensor([5135296, 20],"float32"), Tensor([5135296, 5],"int64"), )
paddle.index_sample(Tensor([932832, 100],"float32"), Tensor([932832, 28],"int64"), )
paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 1],"int64"), )
paddle.index_sample(Tensor([932832, 55],"float32"), Tensor([932832, 28],"int64"), )
paddle.index_select(Tensor([16, 11109, 286],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 12096, 263],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([16, 39201, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([205, 3060, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([52, 12096, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([57, 11109, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([64, 3060, 260],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.index_select(Tensor([64, 9801, 81],"float32"), Tensor([80],"int64"), axis=-1, )
paddle.inner(Tensor([20, 1270081],"float64"), Tensor([1270081],"float64"), )
paddle.inner(Tensor([20, 25401601],"float64"), Tensor([25401601],"float64"), )
paddle.inner(Tensor([508033, 50],"float64"), Tensor([50],"float64"), )
paddle.is_complex(Tensor([1003520, 507],"float32"), )
paddle.is_complex(Tensor([5070, 100352],"float32"), )
paddle.is_complex(Tensor([62020, 8192],"float32"), )
paddle.is_complex(Tensor([81920, 6202],"float32"), )
paddle.is_complex(Tensor([8860, 57344],"float32"), )
paddle.is_empty(Tensor([101606410, 5],"float32"), )
paddle.is_empty(Tensor([169344010, 3],"float32"), )
paddle.is_empty(Tensor([20, 25401601],"float32"), )
paddle.is_empty(Tensor([30, 16934401],"float32"), )
paddle.is_empty(x=Tensor([40, 32, 396901],"float32"), )
paddle.is_empty(x=Tensor([40, 396901, 32],"float32"), )
paddle.is_empty(x=Tensor([496130, 32, 32],"float32"), )
paddle.isclose(Tensor([10, 2540161],"float64"), Tensor([10, 2540161],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([2540161, 10],"float64"), Tensor([2540161, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([1270081, 4, 5],"float64"), y=Tensor([1270081, 4, 5],"float64"), )
paddle.isclose(x=Tensor([25401601],"float64"), y=Tensor([25401601],"float64"), )
paddle.isclose(x=Tensor([3, 1693441, 5],"float64"), y=Tensor([3, 1693441, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 2116801],"float64"), y=Tensor([3, 4, 2116801],"float64"), )
paddle.isfinite(Tensor([1738, 94, 311],"float32"), )
paddle.isfinite(Tensor([28462, 17, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([4, 280, 376, 25, 5],"float32"), )
paddle.isfinite(Tensor([4, 280, 376, 41, 3],"float32"), )
paddle.isfinite(Tensor([4, 280, 605, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 40839, 311],"float32"), )
paddle.isfinite(Tensor([4, 451, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 94, 135115],"float32"), )
paddle.isfinite(Tensor([7, 280, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([8, 17, 17789, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 21346, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 24904],"float16"), )
paddle.isfinite(Tensor([8, 60481, 5, 6, 7],"float16"), )
paddle.isin(Tensor([396901, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, False, )
paddle.isin(Tensor([793801, 64],"float32"), Tensor([793801, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 3175201],"float64"), Tensor([4, 3175201],"float64"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, False, )
paddle.isin(Tensor([8, 6350401],"float32"), Tensor([4, 6350401],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([198451, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 12700801],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 6350401],"float64"), False, False, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([99226, 256],"float64"), False, False, )
paddle.isinf(Tensor([14, 226801, 16],"float32"), )
paddle.isinf(Tensor([14, 36655, 99],"float32"), )
paddle.isinf(Tensor([14, 64, 56701],"float32"), )
paddle.isinf(Tensor([14, 7, 518401],"float32"), )
paddle.isinf(Tensor([28462, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([49613, 64, 16],"float32"), )
paddle.isinf(Tensor([73310, 7, 99],"float32"), )
paddle.isinf(Tensor([8, 17, 17789, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 21346, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 6, 24904],"float16"), )
paddle.isinf(Tensor([8, 60481, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([10445, 4864],"float32"), )
paddle.isnan(Tensor([16, 64, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 125, 320, 320],"float32"), )
paddle.isnan(Tensor([4, 249, 320, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 1241, 320],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 1241],"float16"), )
paddle.isnan(Tensor([4, 64, 320, 621],"float32"), )
paddle.isnan(Tensor([4, 64, 621, 320],"float32"), )
paddle.isnan(Tensor([4864, 10445],"float32"), )
paddle.isnan(Tensor([8, 64, 320, 320],"float32"), )
paddle.isneginf(Tensor([11, 17, 2716],"int32"), )
paddle.isneginf(Tensor([11, 17, 5433],"int16"), )
paddle.isneginf(Tensor([11, 4618, 10],"int32"), )
paddle.isneginf(Tensor([11, 46184],"float32"), )
paddle.isneginf(Tensor([11, 9236, 10],"int16"), )
paddle.isneginf(Tensor([2988, 17, 10],"int32"), )
paddle.isneginf(Tensor([29884, 17],"float32"), )
paddle.isneginf(Tensor([5976, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 2716],"int32"), )
paddle.isposinf(Tensor([11, 17, 5433],"int16"), )
paddle.isposinf(Tensor([11, 4618, 10],"int32"), )
paddle.isposinf(Tensor([11, 46184],"float32"), )
paddle.isposinf(Tensor([11, 9236, 10],"int16"), )
paddle.isposinf(Tensor([2988, 17, 10],"int32"), )
paddle.isposinf(Tensor([29884, 17],"float32"), )
paddle.isposinf(Tensor([5976, 17, 10],"int16"), )
paddle.isreal(Tensor([15876010, 32],"bool"), )
paddle.isreal(Tensor([31752010, 32],"bfloat16"), )
paddle.isreal(Tensor([31752010, 32],"float16"), )
paddle.isreal(Tensor([640, 1587601],"bfloat16"), )
paddle.isreal(Tensor([640, 1587601],"float16"), )
paddle.isreal(Tensor([640, 793801],"bool"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([22336, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 22336, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 13868, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 15401, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 8934],"float32"), )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 8468],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 42337, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([6351, 200, 40],"float32"), k=2, )
paddle.lcm(Tensor([1],"int64"), Tensor([25401601],"int64"), )
paddle.lcm(Tensor([25401601],"int64"), Tensor([1],"int64"), )
paddle.lcm(Tensor([25401601],"int64"), Tensor([25401601],"int64"), )
paddle.lcm(Tensor([50803201],"int32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([25401601],"float64"), Tensor([25401601],"int32"), )
paddle.ldexp(Tensor([25401601],"int64"), Tensor([25401601],"int32"), )
paddle.ldexp(Tensor([50803201],"float64"), Tensor([50803201],"int32"), )
paddle.ldexp(Tensor([50803201],"int32"), Tensor([50803201],"int32"), )
paddle.ldexp(Tensor([50803201],"int64"), Tensor([50803201],"int32"), )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 604801],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 604801, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([64801, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1814401, 28],"float32"), Tensor([3, 1814401, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 1814401],"float32"), Tensor([3, 28, 1814401],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([3, 28, 604801],"float32"), Tensor([3, 28, 604801],"float32"), 1.2, )
paddle.lerp(Tensor([3, 604801, 28],"float32"), Tensor([3, 604801, 28],"float32"), 1.2, )
paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([64801, 28, 28],"float32"), Tensor([64801, 28, 28],"float32"), 1.2, )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less_equal(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.less_equal(Tensor([16934401, 3, 2],"float16"), Tensor([16934401, 3, 2],"float32"), )
paddle.less_equal(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.less_equal(Tensor([4, 12700801, 2],"float16"), Tensor([4, 12700801, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 4233601],"float16"), Tensor([4, 3, 4233601],"float32"), )
paddle.less_equal(Tensor([4, 3, 8467201],"float16"), Tensor([4, 3, 8467201],"float32"), )
paddle.less_equal(Tensor([4, 6350401, 2],"float16"), Tensor([4, 6350401, 2],"float32"), )
paddle.less_equal(Tensor([8467201, 3, 2],"float16"), Tensor([8467201, 3, 2],"float32"), )
paddle.less_than(Tensor([1, 128, 198451],"int64"), Tensor([1, 128, 198451],"int64"), )
paddle.less_than(Tensor([1, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
paddle.less_than(Tensor([1, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
paddle.less_than(Tensor([1, 128, 396901],"float32"), Tensor([1, 128, 396901],"float32"), )
paddle.less_than(Tensor([1, 198451, 256],"float32"), Tensor([1, 198451, 256],"float32"), )
paddle.less_than(Tensor([1, 99226, 256],"int64"), Tensor([1, 99226, 256],"int64"), )
paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1, 128, 256],"float32"), )
paddle.less_than(Tensor([1551, 128, 256],"float32"), Tensor([1551, 128, 256],"float32"), )
paddle.less_than(Tensor([3101, 1, 128, 128],"float32"), Tensor([3101, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([1, 128, 256],"int64"), )
paddle.less_than(Tensor([776, 128, 256],"int64"), Tensor([776, 128, 256],"int64"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 49613],"float32"), Tensor([8, 1, 128, 49613],"float32"), )
paddle.less_than(Tensor([8, 1, 49613, 128],"float32"), Tensor([8, 1, 49613, 128],"float32"), )
paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 388, 128, 128],"float32"), Tensor([8, 388, 128, 128],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.less(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.less(Tensor([10, 5080321],"float32"), Tensor([10, 5080321],"float32"), )
paddle.less(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.less(Tensor([49613, 1024],"float32"), Tensor([49613, 1024],"float32"), )
paddle.less(Tensor([50803201],"float32"), Tensor([50803201],"float32"), )
paddle.lgamma(Tensor([10, 10, 10, 25402],"float64"), )
paddle.lgamma(Tensor([10, 10, 127009, 2],"float64"), )
paddle.lgamma(Tensor([10, 127009, 10, 2],"float64"), )
paddle.lgamma(Tensor([100, 254017],"float64"), )
paddle.lgamma(Tensor([127009, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([1948, 26080],"float32"), )
paddle.lgamma(Tensor([254017, 100],"float64"), )
paddle.lgamma(Tensor([50803201, 1],"float32"), )
paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 396901, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([793801, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.corrcoef(Tensor([4, 12700801],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 6350401],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([50803201],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([25401601],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([25401601],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([50803201],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([1270081],"int32"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 1270081],"float64"), rowvar=True, ddof=True, fweights=Tensor([1270081],"int64"), aweights=Tensor([1270081],"float64"), )
paddle.linalg.det(Tensor([12737, 3, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 12737, 5, 5],"float32"), )
paddle.linalg.inv(x=Tensor([5, 31752, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([52920, 3, 4, 4],"float64"), )
paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float32"), Tensor([203, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([20321, 5, 5, 5],"float64"), Tensor([203, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 338689],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 677377],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([4064, 5, 5, 5],"float32"), Tensor([406, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([6773, 5, 5, 3],"float32"), Tensor([277, 5, 3],"int32"), )
paddle.linalg.lu(Tensor([103, 5, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([106, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 138, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 177, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 138, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 177, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 138],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 177],"float32"), pivot=True, get_infos=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4233601],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 846721, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3175201, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 635041, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2116801, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([2068, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 1379, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 2005, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 1719, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 3151, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 287, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2068, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 1379, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 690, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 573, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 573, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([860, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_transpose(Tensor([20, 3, 8467201],"float32"), )
paddle.linalg.matrix_transpose(Tensor([20, 6350401, 4],"float32"), )
paddle.linalg.matrix_transpose(Tensor([42336010, 3, 4],"float32"), )
paddle.linalg.multi_dot(list[Tensor([25401601],"float64"),Tensor([25401601, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4233601, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6350401, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 3175201],"float64"),Tensor([3175201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 6350401],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 5080321],"float64"),Tensor([5080321, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 8467201],"float64"),Tensor([8467201, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 4233601],"float64"),Tensor([4233601, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 6350401],"float64"),Tensor([6350401, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 8467201],"float64"),Tensor([8467201, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([819407],"float64"),Tensor([819407, 31],"float64"),], )
paddle.linalg.norm(Tensor([12700801, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([25402, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 25402, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 50, 10161],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50803201],"float32"), p=2, )
paddle.linalg.norm(Tensor([8550, 1, 5942],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([8550, 1486, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.pinv(Tensor([21, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([22, 20, 3],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 22, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([58, 4, 4],"float64"), )
paddle.linalg.qr(Tensor([105, 3, 50, 8],"float64"), )
paddle.linalg.qr(Tensor([112, 3, 20, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 105, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 158, 100, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 211, 100, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 423],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 3528, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 529201, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 705601, 6],"float64"), )
paddle.linalg.qr(Tensor([70, 3, 50, 12],"float64"), )
paddle.linalg.slogdet(Tensor([3, 6773, 5, 5],"float32"), )
paddle.linalg.slogdet(Tensor([6773, 3, 5, 5],"float32"), )
paddle.linalg.solve(x=Tensor([129601, 14, 14],"float64"), y=Tensor([129601, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 1814401],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 453601],"float64"), )
paddle.linalg.solve(x=Tensor([907201, 14, 14],"float64"), y=Tensor([907201, 14, 2],"float64"), )
paddle.linalg.svdvals(Tensor([10, 3, 8467],"float64"), )
paddle.linalg.svdvals(Tensor([10, 4233, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 5080],"float32"), )
paddle.linalg.svdvals(Tensor([40, 6350],"float64"), )
paddle.linalg.svdvals(Tensor([611, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([623, 12],"float32"), )
paddle.linalg.svdvals(Tensor([635, 40],"float64"), )
paddle.log(Tensor([192, 40, 6625],"float32"), )
paddle.log(Tensor([307, 25, 6626],"float32"), )
paddle.log(Tensor([64, 120, 6625],"float32"), )
paddle.log(Tensor([64, 120, 6626],"float32"), )
paddle.log(Tensor([64, 25, 31753],"float32"), )
paddle.log(Tensor([64, 40, 19846],"float32"), )
paddle.log(Tensor([64, 80, 9923],"float32"), )
paddle.log(Tensor([96, 80, 6625],"float32"), )
paddle.log10(Tensor([10, 20, 254017],"float32"), )
paddle.log10(Tensor([10, 5080321, 1],"float32"), )
paddle.log10(Tensor([2540161, 20, 1],"float32"), )
paddle.log10(x=Tensor([12700801, 2],"float64"), )
paddle.log10(x=Tensor([2, 12700801],"float64"), )
paddle.log10(x=Tensor([2, 3, 2, 2116801],"float64"), )
paddle.log10(x=Tensor([2, 3, 2116801, 2],"float64"), )
paddle.log10(x=Tensor([2, 3175201, 2, 2],"float64"), )
paddle.log10(x=Tensor([2116801, 3, 2, 2],"float64"), )
paddle.log1p(Tensor([10, 16935, 300],"float32"), )
paddle.log1p(Tensor([10, 200, 25402],"float32"), )
paddle.log1p(Tensor([1016065, 5, 5],"float64"), )
paddle.log1p(Tensor([108, 157920, 3],"float32"), )
paddle.log1p(Tensor([4, 157920, 81],"float32"), )
paddle.log1p(Tensor([4, 4233601, 3],"float32"), )
paddle.log1p(Tensor([50000, 102, 5],"float64"), )
paddle.log1p(Tensor([50000, 5, 102],"float64"), )
paddle.log1p(Tensor([847, 200, 300],"float32"), )
paddle.log2(Tensor([10, 20, 254017],"float32"), )
paddle.log2(Tensor([10, 2540161],"float64"), )
paddle.log2(Tensor([10, 5080321, 1],"float32"), )
paddle.log2(Tensor([10, 5080321],"float32"), )
paddle.log2(Tensor([2116801, 12],"float64"), )
paddle.log2(Tensor([2540161, 20, 1],"float32"), )
paddle.log2(Tensor([4233601, 12],"float32"), )
paddle.logaddexp(Tensor([10, 16935, 300],"float32"), Tensor([10, 16935, 300],"float32"), )
paddle.logaddexp(Tensor([10, 16935, 300],"int32"), Tensor([10, 16935, 300],"int32"), )
paddle.logaddexp(Tensor([10, 200, 12701],"int64"), Tensor([10, 200, 12701],"int64"), )
paddle.logaddexp(Tensor([10, 200, 25402],"float32"), Tensor([10, 200, 25402],"float32"), )
paddle.logaddexp(Tensor([10, 200, 25402],"int32"), Tensor([10, 200, 25402],"int32"), )
paddle.logaddexp(Tensor([10, 8468, 300],"int64"), Tensor([10, 8468, 300],"int64"), )
paddle.logaddexp(Tensor([424, 200, 300],"int64"), Tensor([424, 200, 300],"int64"), )
paddle.logaddexp(Tensor([847, 200, 300],"float32"), Tensor([847, 200, 300],"float32"), )
paddle.logaddexp(Tensor([847, 200, 300],"int32"), Tensor([847, 200, 300],"int32"), )
paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 508033],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 508033, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([508033, 10, 10],"float32"), axis=-1, )
paddle.logical_and(Tensor([138, 369303],"bool"), Tensor([138, 369303],"bool"), )
paddle.logical_and(Tensor([146, 349866],"bool"), Tensor([146, 349866],"bool"), )
paddle.logical_and(Tensor([49, 1036801],"bool"), Tensor([49, 1036801],"bool"), )
paddle.logical_and(Tensor([53, 958551],"bool"), Tensor([53, 958551],"bool"), )
paddle.logical_and(Tensor([55, 923695],"bool"), Tensor([55, 923695],"bool"), )
paddle.logical_not(Tensor([2150400, 237],"bool"), )
paddle.logical_not(Tensor([2204160, 231],"bool"), )
paddle.logical_not(Tensor([2257920, 226],"bool"), )
paddle.logical_not(Tensor([6350410, 80],"bool"), )
paddle.logical_or(Tensor([50803201],"bool"), Tensor([50803201],"bool"), )
paddle.logical_or(Tensor([640, 79381],"bool"), Tensor([640, 79381],"bool"), )
paddle.logical_or(Tensor([79381, 640],"bool"), Tensor([79381, 640],"bool"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 254017],"float32"), Tensor([10, 20, 254017],"float32"), )
paddle.logical_xor(Tensor([10, 5080321, 1],"float32"), Tensor([10, 5080321, 1],"float32"), )
paddle.logical_xor(Tensor([2540161, 20, 1],"float32"), Tensor([2540161, 20, 1],"float32"), )
paddle.logit(Tensor([10, 20, 254017],"float32"), 0.001, )
paddle.logit(Tensor([10, 5080321, 1],"float32"), 0.001, )
paddle.logit(Tensor([2540161, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([50803201],"float32"), 1e-08, )
paddle.logit(x=Tensor([4, 3, 2, 1058401],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 3, 423361, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 635041, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([846721, 3, 2, 5],"float64"), eps=0.2, )
paddle.logsumexp(Tensor([1024, 49613],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 8468],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 42337, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([6351, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.masked_fill(Tensor([20, 127009, 20],"int32"), Tensor([20, 127009, 20],"bool"), 0, )
paddle.masked_fill(Tensor([20, 60, 42337],"int32"), Tensor([20, 60, 42337],"bool"), 0, )
paddle.masked_fill(Tensor([28225, 60, 30],"int32"), Tensor([28225, 60, 30],"bool"), 0, )
paddle.masked_fill(Tensor([30, 56449, 30],"int32"), Tensor([30, 56449, 30],"bool"), 0, )
paddle.masked_fill(Tensor([30, 60, 28225],"int32"), Tensor([30, 60, 28225],"bool"), 0, )
paddle.masked_fill(Tensor([42337, 60, 20],"int32"), Tensor([42337, 60, 20],"bool"), 0, )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([169345, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 169345],"float32"), )
paddle.masked_select(Tensor([16, 10164, 313],"float32"), Tensor([16, 10164, 313],"bool"), )
paddle.masked_select(Tensor([16, 11109, 286],"float32"), Tensor([16, 11109, 286],"bool"), )
paddle.masked_select(Tensor([16, 12096, 263],"float32"), Tensor([16, 12096, 263],"bool"), )
paddle.masked_select(Tensor([16, 46695, 68],"float32"), Tensor([16, 46695, 68],"bool"), )
paddle.masked_select(Tensor([62, 12096, 68],"float32"), Tensor([62, 12096, 68],"bool"), )
paddle.masked_select(Tensor([68, 11109, 68],"float32"), Tensor([68, 11109, 68],"bool"), )
paddle.masked_select(Tensor([74, 10164, 68],"float32"), Tensor([74, 10164, 68],"bool"), )
paddle.matmul(Tensor([1, 32, 388, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([1, 32, 4096, 388],"float32"), )
paddle.matmul(Tensor([1, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 4, 4096, 4096],"float32"), Tensor([1, 4, 4096, 128],"float32"), )
paddle.matmul(Tensor([1, 97, 4096, 4096],"float32"), Tensor([1, 97, 4096, 128],"float32"), )
paddle.matmul(Tensor([10, 23, 499, 3600],"float32"), Tensor([10, 23, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 3, 499, 3600],"float32"), Tensor([10, 3, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 177, 3600],"float32"), Tensor([10, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 1273],"float32"), Tensor([10, 8, 1273, 64],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 3600],"float32"), Tensor([10, 8, 3600, 177],"float32"), )
paddle.matmul(Tensor([10, 8, 499, 9923],"float32"), Tensor([10, 8, 9923, 64],"float32"), )
paddle.matmul(Tensor([1379, 4, 256, 256],"float32"), Tensor([1379, 4, 256, 36],"float32"), )
paddle.matmul(Tensor([194, 4, 256, 256],"float32"), Tensor([194, 4, 256, 36],"float32"), )
paddle.matmul(Tensor([28, 8, 499, 3600],"float32"), Tensor([28, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([4, 32, 4096, 4096],"float32"), Tensor([4, 32, 4096, 128],"float32"), )
paddle.matmul(Tensor([4, 8, 499, 3600],"float32"), Tensor([4, 8, 3600, 64],"float32"), )
paddle.matmul(Tensor([512, 11, 256, 256],"float32"), Tensor([512, 11, 256, 36],"float32"), )
paddle.matmul(Tensor([512, 2, 256, 256],"float32"), Tensor([512, 2, 256, 36],"float32"), )
paddle.matmul(Tensor([512, 4, 256, 256],"float32"), Tensor([512, 4, 256, 97],"float32"), )
paddle.matmul(Tensor([512, 4, 97, 256],"float32"), Tensor([512, 4, 256, 36],"float32"), )
paddle.matrix_transpose(Tensor([20, 12700801, 4],"float16"), )
paddle.matrix_transpose(Tensor([20, 3, 16934401],"float16"), )
paddle.matrix_transpose(Tensor([20, 3, 4233601],"float64"), )
paddle.matrix_transpose(Tensor([20, 3, 8467201],"float32"), )
paddle.matrix_transpose(Tensor([20, 3175201, 4],"float64"), )
paddle.matrix_transpose(Tensor([20, 6350401, 4],"float32"), )
paddle.matrix_transpose(Tensor([21168010, 3, 4],"float64"), )
paddle.matrix_transpose(Tensor([42336010, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([84672010, 3, 4],"float16"), )
paddle.max(Tensor([416, 50, 10, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 349],"float32"), axis=1, )
paddle.max(Tensor([416, 69, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([49, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([512, 50, 7, 284],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 8, 256],"float32"), axis=1, )
paddle.max(Tensor([512, 56, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([568, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([8, 1024, 6202],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 6202, 1024],"float32"), axis=-1, keepdim=True, )
paddle.maximum(Tensor([11585, 4386],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([120961, 420],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([121539, 418],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([14877, 3415],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([16121, 3152],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([62643, 811],"float32"), Tensor([1],"float32"), )
paddle.mean(Tensor([7573, 11, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7573, 8, 1678],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 11, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([7710, 8, 1648],"bfloat16"), axis=1, )
paddle.mean(Tensor([8162, 10, 1280],"bfloat16"), axis=1, )
paddle.mean(Tensor([8162, 8, 1557],"bfloat16"), axis=1, )
paddle.mean(Tensor([9923, 8, 1280],"bfloat16"), axis=1, )
paddle.median(Tensor([2, 254016],"float32"), axis=1, mode="min", )
paddle.median(Tensor([254016],"int64"), )
paddle.median(Tensor([5080, 100],"float32"), axis=1, mode="min", )
paddle.median(Tensor([508032],"float32"), )
paddle.min(Tensor([10, 10, 28225, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 28225],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 31361, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 31361, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 5, 56449, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 5, 9, 56449],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([31361, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([62721, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([64, 1, 28, 28351],"float32"), )
paddle.min(Tensor([64, 1, 28351, 28],"float32"), )
paddle.min(Tensor([64, 1013, 28, 28],"float32"), )
paddle.min(Tensor([64801, 1, 28, 28],"float32"), )
paddle.minimum(Tensor([13, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([13, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.minimum(Tensor([16, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([16, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.minimum(Tensor([9, 1, 113],"float32"), Tensor([451143, 113],"float32"), )
paddle.minimum(Tensor([9, 1, 2],"float32"), Tensor([25401601, 2],"float32"), )
paddle.mm(Tensor([1838, 6, 144, 144],"float32"), Tensor([1838, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 2, 144, 144],"float32"), Tensor([2048, 2, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 29],"float32"), )
paddle.mm(Tensor([2048, 6, 144, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2048, 6, 29, 144],"float32"), Tensor([2048, 6, 144, 32],"float32"), )
paddle.mm(Tensor([2757, 4, 144, 144],"float32"), Tensor([2757, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 1, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 1, 144, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 3, 144, 144],"float32"), Tensor([3840, 3, 144, 32],"float32"), )
paddle.mm(Tensor([3840, 4, 144, 144],"float32"), Tensor([3840, 4, 144, 23],"float32"), )
paddle.mm(Tensor([3840, 4, 23, 144],"float32"), Tensor([3840, 4, 144, 32],"float32"), )
paddle.mm(Tensor([409, 6, 144, 144],"float32"), Tensor([409, 6, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 1, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 1, 144, 144],"float32"), Tensor([4096, 4, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 3, 144, 144],"float32"), Tensor([4096, 3, 144, 32],"float32"), )
paddle.mm(Tensor([4096, 4, 144, 144],"float32"), Tensor([4096, 4, 144, 22],"float32"), )
